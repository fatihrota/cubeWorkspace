
stm32f030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc4  08002dc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc4  08002dc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc4  08002dc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08002dd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08002dd8  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007352  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000172f  00000000  00000000  00027386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  00028ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  00029250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cc13  00000000  00000000  00029910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074cf  00000000  00000000  00036523  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004a827  00000000  00000000  0003d9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001978  00000000  00000000  00088294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d74 	.word	0x08002d74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002d74 	.word	0x08002d74

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fcb2 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80f 	bl	8000246 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9a6 	bl	8000578 <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f97e 	bl	800052c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f8e6 	bl	8000400 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000234:	f000 f8c4 	bl	80003c0 <MX_IWDG_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f914 	bl	8000464 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 800023c:	f000 f944 	bl	80004c8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8000240:	f000 f862 	bl	8000308 <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x28>

08000246 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000246:	b590      	push	{r4, r7, lr}
 8000248:	b095      	sub	sp, #84	; 0x54
 800024a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024c:	2420      	movs	r4, #32
 800024e:	193b      	adds	r3, r7, r4
 8000250:	0018      	movs	r0, r3
 8000252:	2330      	movs	r3, #48	; 0x30
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 fd84 	bl	8002d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	2310      	movs	r3, #16
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 fd7c 	bl	8002d64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	003b      	movs	r3, r7
 800026e:	0018      	movs	r0, r3
 8000270:	2310      	movs	r3, #16
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f002 fd75 	bl	8002d64 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800027a:	0021      	movs	r1, r4
 800027c:	187b      	adds	r3, r7, r1
 800027e:	221a      	movs	r2, #26
 8000280:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2201      	movs	r2, #1
 8000286:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2210      	movs	r2, #16
 8000298:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2201      	movs	r2, #1
 800029e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 faeb 	bl	8001884 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002b2:	f000 f9df 	bl	8000674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	2110      	movs	r1, #16
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2100      	movs	r1, #0
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fdf3 	bl	8001ec0 <HAL_RCC_ClockConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002de:	f000 f9c9 	bl	8000674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2201      	movs	r2, #1
 80002e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 ff39 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002fa:	f000 f9bb 	bl	8000674 <Error_Handler>
  }
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b015      	add	sp, #84	; 0x54
 8000304:	bd90      	pop	{r4, r7, pc}
	...

08000308 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	230c      	movs	r3, #12
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f002 fd24 	bl	8002d64 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <MX_ADC_Init+0xb0>)
 800031e:	4a27      	ldr	r2, [pc, #156]	; (80003bc <MX_ADC_Init+0xb4>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000322:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_ADC_Init+0xb0>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000336:	2201      	movs	r2, #1
 8000338:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_ADC_Init+0xb0>)
 800033c:	2204      	movs	r2, #4
 800033e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000342:	2200      	movs	r2, #0
 8000344:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000348:	2200      	movs	r2, #0
 800034a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_ADC_Init+0xb0>)
 800034e:	2201      	movs	r2, #1
 8000350:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000352:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000354:	2200      	movs	r2, #0
 8000356:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_ADC_Init+0xb0>)
 800035a:	22c2      	movs	r2, #194	; 0xc2
 800035c:	32ff      	adds	r2, #255	; 0xff
 800035e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000368:	2224      	movs	r2, #36	; 0x24
 800036a:	2100      	movs	r1, #0
 800036c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000370:	2201      	movs	r2, #1
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fc6a 	bl	8000c50 <HAL_ADC_Init>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000380:	f000 f978 	bl	8000674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2208      	movs	r2, #8
 8000388:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	0152      	lsls	r2, r2, #5
 8000390:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0552      	lsls	r2, r2, #21
 8000398:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800039a:	1d3a      	adds	r2, r7, #4
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_ADC_Init+0xb0>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fd95 	bl	8000ed0 <HAL_ADC_ConfigChannel>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003aa:	f000 f963 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b004      	add	sp, #16
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000240 	.word	0x20000240
 80003bc:	40012400 	.word	0x40012400

080003c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <MX_IWDG_Init+0x38>)
 80003c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <MX_IWDG_Init+0x3c>)
 80003d4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <MX_IWDG_Init+0x3c>)
 80003da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 fa06 	bl	80017f0 <HAL_IWDG_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80003e8:	f000 f944 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40003000 	.word	0x40003000
 80003fc:	00000fff 	.word	0x00000fff

08000400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <MX_USART1_UART_Init+0x60>)
 8000408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800040c:	22e1      	movs	r2, #225	; 0xe1
 800040e:	0252      	lsls	r2, r2, #9
 8000410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800042c:	22c0      	movs	r2, #192	; 0xc0
 800042e:	0092      	lsls	r2, r2, #2
 8000430:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000446:	0018      	movs	r0, r3
 8000448:	f001 ff5c 	bl	8002304 <HAL_UART_Init>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000450:	f000 f910 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	200000c0 	.word	0x200000c0
 8000460:	40013800 	.word	0x40013800

08000464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <MX_USART2_UART_Init+0x60>)
 800046c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000470:	22e1      	movs	r2, #225	; 0xe1
 8000472:	0252      	lsls	r2, r2, #9
 8000474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000490:	22c0      	movs	r2, #192	; 0xc0
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 ff2a 	bl	8002304 <HAL_UART_Init>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80004b4:	f000 f8de 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200001c0 	.word	0x200001c0
 80004c4:	40004400 	.word	0x40004400

080004c8 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004ce:	4a16      	ldr	r2, [pc, #88]	; (8000528 <MX_USART4_UART_Init+0x60>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004d4:	22e1      	movs	r2, #225	; 0xe1
 80004d6:	0252      	lsls	r2, r2, #9
 80004d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004f4:	22c0      	movs	r2, #192	; 0xc0
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 8000502:	2200      	movs	r2, #0
 8000504:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 8000508:	2200      	movs	r2, #0
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fef8 	bl	8002304 <HAL_UART_Init>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_USART4_UART_Init+0x54>
  {
    Error_Handler();
 8000518:	f000 f8ac 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000140 	.word	0x20000140
 8000528:	40004c00 	.word	0x40004c00

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_DMA_Init+0x48>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_DMA_Init+0x48>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	615a      	str	r2, [r3, #20]
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_DMA_Init+0x48>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2009      	movs	r0, #9
 8000550:	f000 fe60 	bl	8001214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000554:	2009      	movs	r0, #9
 8000556:	f000 fe72 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	200b      	movs	r0, #11
 8000560:	f000 fe58 	bl	8001214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000564:	200b      	movs	r0, #11
 8000566:	f000 fe6a 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	240c      	movs	r4, #12
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fbeb 	bl	8002d64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b36      	ldr	r3, [pc, #216]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b35      	ldr	r3, [pc, #212]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0289      	lsls	r1, r1, #10
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <MX_GPIO_Init+0xf0>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	029b      	lsls	r3, r3, #10
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	02c9      	lsls	r1, r1, #11
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	02db      	lsls	r3, r3, #11
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0309      	lsls	r1, r1, #12
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	031b      	lsls	r3, r3, #12
 80005dc:	4013      	ands	r3, r2
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2210      	movs	r2, #16
 80005e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <MX_GPIO_Init+0xf4>)
 80005ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	193a      	adds	r2, r7, r4
 80005f6:	2390      	movs	r3, #144	; 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 ff87 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2220      	movs	r2, #32
 8000608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2202      	movs	r2, #2
 800060e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2203      	movs	r2, #3
 800061a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	000c      	movs	r4, r1
 8000624:	187a      	adds	r2, r7, r1
 8000626:	2390      	movs	r3, #144	; 0x90
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f000 ff6f 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	22c0      	movs	r2, #192	; 0xc0
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2212      	movs	r2, #18
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2203      	movs	r2, #3
 800064c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2201      	movs	r2, #1
 8000652:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	187b      	adds	r3, r7, r1
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <MX_GPIO_Init+0xf8>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f000 ff58 	bl	8001510 <HAL_GPIO_Init>

}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b009      	add	sp, #36	; 0x24
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	10110000 	.word	0x10110000
 8000670:	48000400 	.word	0x48000400

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x44>)
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_MspInit+0x44>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x44>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x44>)
 80006a0:	69da      	ldr	r2, [r3, #28]
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_MspInit+0x44>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0549      	lsls	r1, r1, #21
 80006a8:	430a      	orrs	r2, r1
 80006aa:	61da      	str	r2, [r3, #28]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_MspInit+0x44>)
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	055b      	lsls	r3, r3, #21
 80006b4:	4013      	ands	r3, r2
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	2314      	movs	r3, #20
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 fb42 	bl	8002d64 <memset>
  if(hadc->Instance==ADC1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <HAL_ADC_MspInit+0x84>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d12b      	bne.n	8000742 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <HAL_ADC_MspInit+0x88>)
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_ADC_MspInit+0x88>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0089      	lsls	r1, r1, #2
 80006f4:	430a      	orrs	r2, r1
 80006f6:	619a      	str	r2, [r3, #24]
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_ADC_MspInit+0x88>)
 80006fa:	699a      	ldr	r2, [r3, #24]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_ADC_MspInit+0x88>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_ADC_MspInit+0x88>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	02c9      	lsls	r1, r1, #11
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_ADC_MspInit+0x88>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	02db      	lsls	r3, r3, #11
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000722:	2114      	movs	r1, #20
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2203      	movs	r2, #3
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	187b      	adds	r3, r7, r1
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_ADC_MspInit+0x8c>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f000 fee7 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00a      	add	sp, #40	; 0x28
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40012400 	.word	0x40012400
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b091      	sub	sp, #68	; 0x44
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	232c      	movs	r3, #44	; 0x2c
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f002 fafa 	bl	8002d64 <memset>
  if(huart->Instance==USART1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4abb      	ldr	r2, [pc, #748]	; (8000a64 <HAL_UART_MspInit+0x30c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d000      	beq.n	800077c <HAL_UART_MspInit+0x24>
 800077a:	e0a9      	b.n	80008d0 <HAL_UART_MspInit+0x178>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800077c:	4bba      	ldr	r3, [pc, #744]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	4bb9      	ldr	r3, [pc, #740]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	01c9      	lsls	r1, r1, #7
 8000786:	430a      	orrs	r2, r1
 8000788:	619a      	str	r2, [r3, #24]
 800078a:	4bb7      	ldr	r3, [pc, #732]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800078c:	699a      	ldr	r2, [r3, #24]
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	01db      	lsls	r3, r3, #7
 8000792:	4013      	ands	r3, r2
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4bb3      	ldr	r3, [pc, #716]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	4bb2      	ldr	r3, [pc, #712]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	0289      	lsls	r1, r1, #10
 80007a2:	430a      	orrs	r2, r1
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	4bb0      	ldr	r3, [pc, #704]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	029b      	lsls	r3, r3, #10
 80007ae:	4013      	ands	r3, r2
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007b4:	212c      	movs	r1, #44	; 0x2c
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	22f0      	movs	r2, #240	; 0xf0
 80007ba:	0152      	lsls	r2, r2, #5
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2202      	movs	r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2203      	movs	r2, #3
 80007ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	187a      	adds	r2, r7, r1
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fe96 	bl	8001510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80007e4:	4ba1      	ldr	r3, [pc, #644]	; (8000a6c <HAL_UART_MspInit+0x314>)
 80007e6:	4aa2      	ldr	r2, [pc, #648]	; (8000a70 <HAL_UART_MspInit+0x318>)
 80007e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4ba0      	ldr	r3, [pc, #640]	; (8000a6c <HAL_UART_MspInit+0x314>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b9e      	ldr	r3, [pc, #632]	; (8000a6c <HAL_UART_MspInit+0x314>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b9d      	ldr	r3, [pc, #628]	; (8000a6c <HAL_UART_MspInit+0x314>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007fc:	4b9b      	ldr	r3, [pc, #620]	; (8000a6c <HAL_UART_MspInit+0x314>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000802:	4b9a      	ldr	r3, [pc, #616]	; (8000a6c <HAL_UART_MspInit+0x314>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000808:	4b98      	ldr	r3, [pc, #608]	; (8000a6c <HAL_UART_MspInit+0x314>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800080e:	4b97      	ldr	r3, [pc, #604]	; (8000a6c <HAL_UART_MspInit+0x314>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000814:	4b95      	ldr	r3, [pc, #596]	; (8000a6c <HAL_UART_MspInit+0x314>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fd2e 	bl	8001278 <HAL_DMA_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000820:	f7ff ff28 	bl	8000674 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000824:	4a93      	ldr	r2, [pc, #588]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 8000826:	23a8      	movs	r3, #168	; 0xa8
 8000828:	58d3      	ldr	r3, [r2, r3]
 800082a:	4992      	ldr	r1, [pc, #584]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 800082c:	220f      	movs	r2, #15
 800082e:	4393      	bics	r3, r2
 8000830:	22a8      	movs	r2, #168	; 0xa8
 8000832:	508b      	str	r3, [r1, r2]
 8000834:	4a8f      	ldr	r2, [pc, #572]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 8000836:	23a8      	movs	r3, #168	; 0xa8
 8000838:	58d3      	ldr	r3, [r2, r3]
 800083a:	498e      	ldr	r1, [pc, #568]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 800083c:	2208      	movs	r2, #8
 800083e:	4313      	orrs	r3, r2
 8000840:	22a8      	movs	r2, #168	; 0xa8
 8000842:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a89      	ldr	r2, [pc, #548]	; (8000a6c <HAL_UART_MspInit+0x314>)
 8000848:	66da      	str	r2, [r3, #108]	; 0x6c
 800084a:	4b88      	ldr	r3, [pc, #544]	; (8000a6c <HAL_UART_MspInit+0x314>)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000850:	4b89      	ldr	r3, [pc, #548]	; (8000a78 <HAL_UART_MspInit+0x320>)
 8000852:	4a8a      	ldr	r2, [pc, #552]	; (8000a7c <HAL_UART_MspInit+0x324>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000856:	4b88      	ldr	r3, [pc, #544]	; (8000a78 <HAL_UART_MspInit+0x320>)
 8000858:	2210      	movs	r2, #16
 800085a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800085c:	4b86      	ldr	r3, [pc, #536]	; (8000a78 <HAL_UART_MspInit+0x320>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000862:	4b85      	ldr	r3, [pc, #532]	; (8000a78 <HAL_UART_MspInit+0x320>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000868:	4b83      	ldr	r3, [pc, #524]	; (8000a78 <HAL_UART_MspInit+0x320>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086e:	4b82      	ldr	r3, [pc, #520]	; (8000a78 <HAL_UART_MspInit+0x320>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000874:	4b80      	ldr	r3, [pc, #512]	; (8000a78 <HAL_UART_MspInit+0x320>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b7f      	ldr	r3, [pc, #508]	; (8000a78 <HAL_UART_MspInit+0x320>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000880:	4b7d      	ldr	r3, [pc, #500]	; (8000a78 <HAL_UART_MspInit+0x320>)
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fcf8 	bl	8001278 <HAL_DMA_Init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800088c:	f7ff fef2 	bl	8000674 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 8000890:	4a78      	ldr	r2, [pc, #480]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 8000892:	23a8      	movs	r3, #168	; 0xa8
 8000894:	58d3      	ldr	r3, [r2, r3]
 8000896:	4977      	ldr	r1, [pc, #476]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 8000898:	4a79      	ldr	r2, [pc, #484]	; (8000a80 <HAL_UART_MspInit+0x328>)
 800089a:	4013      	ands	r3, r2
 800089c:	22a8      	movs	r2, #168	; 0xa8
 800089e:	508b      	str	r3, [r1, r2]
 80008a0:	4a74      	ldr	r2, [pc, #464]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 80008a2:	23a8      	movs	r3, #168	; 0xa8
 80008a4:	58d3      	ldr	r3, [r2, r3]
 80008a6:	4973      	ldr	r1, [pc, #460]	; (8000a74 <HAL_UART_MspInit+0x31c>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0212      	lsls	r2, r2, #8
 80008ac:	4313      	orrs	r3, r2
 80008ae:	22a8      	movs	r2, #168	; 0xa8
 80008b0:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a70      	ldr	r2, [pc, #448]	; (8000a78 <HAL_UART_MspInit+0x320>)
 80008b6:	669a      	str	r2, [r3, #104]	; 0x68
 80008b8:	4b6f      	ldr	r3, [pc, #444]	; (8000a78 <HAL_UART_MspInit+0x320>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	201b      	movs	r0, #27
 80008c4:	f000 fca6 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c8:	201b      	movs	r0, #27
 80008ca:	f000 fcb8 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80008ce:	e0c5      	b.n	8000a5c <HAL_UART_MspInit+0x304>
  else if(huart->Instance==USART2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a6b      	ldr	r2, [pc, #428]	; (8000a84 <HAL_UART_MspInit+0x32c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d133      	bne.n	8000942 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	0289      	lsls	r1, r1, #10
 80008e4:	430a      	orrs	r2, r1
 80008e6:	61da      	str	r2, [r3, #28]
 80008e8:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80008ea:	69da      	ldr	r2, [r3, #28]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	029b      	lsls	r3, r3, #10
 80008f0:	4013      	ands	r3, r2
 80008f2:	623b      	str	r3, [r7, #32]
 80008f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b5c      	ldr	r3, [pc, #368]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b5b      	ldr	r3, [pc, #364]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0289      	lsls	r1, r1, #10
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b58      	ldr	r3, [pc, #352]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	029b      	lsls	r3, r3, #10
 800090c:	4013      	ands	r3, r2
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000912:	212c      	movs	r1, #44	; 0x2c
 8000914:	187b      	adds	r3, r7, r1
 8000916:	220f      	movs	r2, #15
 8000918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2203      	movs	r2, #3
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	187a      	adds	r2, r7, r1
 8000934:	2390      	movs	r3, #144	; 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fde8 	bl	8001510 <HAL_GPIO_Init>
}
 8000940:	e08c      	b.n	8000a5c <HAL_UART_MspInit+0x304>
  else if(huart->Instance==USART4)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a50      	ldr	r2, [pc, #320]	; (8000a88 <HAL_UART_MspInit+0x330>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d000      	beq.n	800094e <HAL_UART_MspInit+0x1f6>
 800094c:	e086      	b.n	8000a5c <HAL_UART_MspInit+0x304>
    __HAL_RCC_USART4_CLK_ENABLE();
 800094e:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000950:	69da      	ldr	r2, [r3, #28]
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0309      	lsls	r1, r1, #12
 8000958:	430a      	orrs	r2, r1
 800095a:	61da      	str	r2, [r3, #28]
 800095c:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800095e:	69da      	ldr	r2, [r3, #28]
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	031b      	lsls	r3, r3, #12
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0289      	lsls	r1, r1, #10
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	029b      	lsls	r3, r3, #10
 8000980:	4013      	ands	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <HAL_UART_MspInit+0x310>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0309      	lsls	r1, r1, #12
 8000990:	430a      	orrs	r2, r1
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <HAL_UART_MspInit+0x310>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	031b      	lsls	r3, r3, #12
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	02c9      	lsls	r1, r1, #11
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_UART_MspInit+0x310>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	02db      	lsls	r3, r3, #11
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009be:	212c      	movs	r1, #44	; 0x2c
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	0212      	lsls	r2, r2, #8
 80009c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2202      	movs	r2, #2
 80009cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2203      	movs	r2, #3
 80009d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2204      	movs	r2, #4
 80009de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	000c      	movs	r4, r1
 80009e2:	187a      	adds	r2, r7, r1
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fd90 	bl	8001510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009f0:	0021      	movs	r1, r4
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	22c0      	movs	r2, #192	; 0xc0
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	000c      	movs	r4, r1
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_UART_MspInit+0x334>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f000 fd78 	bl	8001510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a20:	0021      	movs	r1, r4
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2203      	movs	r2, #3
 8000a38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_UART_MspInit+0x338>)
 8000a44:	0019      	movs	r1, r3
 8000a46:	0010      	movs	r0, r2
 8000a48:	f000 fd62 	bl	8001510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	201d      	movs	r0, #29
 8000a52:	f000 fbdf 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000a56:	201d      	movs	r0, #29
 8000a58:	f000 fbf1 	bl	800123e <HAL_NVIC_EnableIRQ>
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b011      	add	sp, #68	; 0x44
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	2000007c 	.word	0x2000007c
 8000a70:	40020008 	.word	0x40020008
 8000a74:	40020000 	.word	0x40020000
 8000a78:	20000038 	.word	0x20000038
 8000a7c:	40020044 	.word	0x40020044
 8000a80:	ffff0fff 	.word	0xffff0fff
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40004c00 	.word	0x40004c00
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	48000400 	.word	0x48000400

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8ac 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <DMA1_Channel1_IRQHandler+0x14>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 fc60 	bl	8001394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	2000007c 	.word	0x2000007c

08000ae0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fc54 	bl	8001394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000038 	.word	0x20000038

08000af8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <USART1_IRQHandler+0x14>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fc54 	bl	80023ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	200000c0 	.word	0x200000c0

08000b10 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <USART3_6_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fc48 	bl	80023ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000140 	.word	0x20000140

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b5e:	f7ff ffe3 	bl	8000b28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b62:	f002 f8db 	bl	8002d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fb59 	bl	800021c <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	08002dcc 	.word	0x08002dcc
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	20000284 	.word	0x20000284

08000b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>
	...

08000b88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_Init+0x24>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_Init+0x24>)
 8000b92:	2110      	movs	r1, #16
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f809 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9e:	f7ff fd6f 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_InitTick+0x60>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	23fa      	movs	r3, #250	; 0xfa
 8000bc4:	0098      	lsls	r0, r3, #2
 8000bc6:	f7ff fa9d 	bl	8000104 <__udivsi3>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f7ff fa98 	bl	8000104 <__udivsi3>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fb41 	bl	800125e <HAL_SYSTICK_Config>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e00f      	b.n	8000c04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d80b      	bhi.n	8000c02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fb0e 	bl	8001214 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_InitTick+0x64>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	18d2      	adds	r2, r2, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000280 	.word	0x20000280

08000c3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000280 	.word	0x20000280

08000c50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e125      	b.n	8000eba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10a      	bne.n	8000c8c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2234      	movs	r2, #52	; 0x34
 8000c80:	2100      	movs	r1, #0
 8000c82:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fd1e 	bl	80006c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c90:	2210      	movs	r2, #16
 8000c92:	4013      	ands	r3, r2
 8000c94:	d000      	beq.n	8000c98 <HAL_ADC_Init+0x48>
 8000c96:	e103      	b.n	8000ea0 <HAL_ADC_Init+0x250>
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d000      	beq.n	8000ca4 <HAL_ADC_Init+0x54>
 8000ca2:	e0fd      	b.n	8000ea0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2204      	movs	r2, #4
 8000cac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cae:	d000      	beq.n	8000cb2 <HAL_ADC_Init+0x62>
 8000cb0:	e0f6      	b.n	8000ea0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb6:	4a83      	ldr	r2, [pc, #524]	; (8000ec4 <HAL_ADC_Init+0x274>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2202      	movs	r2, #2
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d112      	bne.n	8000cf6 <HAL_ADC_Init+0xa6>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d009      	beq.n	8000cf2 <HAL_ADC_Init+0xa2>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	401a      	ands	r2, r3
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d101      	bne.n	8000cf6 <HAL_ADC_Init+0xa6>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_ADC_Init+0xa8>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d116      	bne.n	8000d2a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2218      	movs	r2, #24
 8000d04:	4393      	bics	r3, r2
 8000d06:	0019      	movs	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	0899      	lsrs	r1, r3, #2
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4964      	ldr	r1, [pc, #400]	; (8000ec8 <HAL_ADC_Init+0x278>)
 8000d36:	400a      	ands	r2, r1
 8000d38:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7e1b      	ldrb	r3, [r3, #24]
 8000d3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7e5b      	ldrb	r3, [r3, #25]
 8000d44:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d46:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7e9b      	ldrb	r3, [r3, #26]
 8000d4c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d002      	beq.n	8000d5e <HAL_ADC_Init+0x10e>
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	015b      	lsls	r3, r3, #5
 8000d5c:	e000      	b.n	8000d60 <HAL_ADC_Init+0x110>
 8000d5e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d66:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d101      	bne.n	8000d74 <HAL_ADC_Init+0x124>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e000      	b.n	8000d76 <HAL_ADC_Init+0x126>
 8000d74:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d76:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2124      	movs	r1, #36	; 0x24
 8000d7c:	5c5b      	ldrb	r3, [r3, r1]
 8000d7e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d80:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7edb      	ldrb	r3, [r3, #27]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d115      	bne.n	8000dbc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7e9b      	ldrb	r3, [r3, #26]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	0252      	lsls	r2, r2, #9
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	e00b      	b.n	8000dbc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da8:	2220      	movs	r2, #32
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db4:	2201      	movs	r2, #1
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	23c2      	movs	r3, #194	; 0xc2
 8000dc2:	33ff      	adds	r3, #255	; 0xff
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d007      	beq.n	8000dd8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68d9      	ldr	r1, [r3, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	055b      	lsls	r3, r3, #21
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d01b      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d017      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d013      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d00f      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d00b      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d007      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d003      	beq.n	8000e2c <HAL_ADC_Init+0x1dc>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d112      	bne.n	8000e52 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2107      	movs	r1, #7
 8000e38:	438a      	bics	r2, r1
 8000e3a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6959      	ldr	r1, [r3, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	2207      	movs	r2, #7
 8000e48:	401a      	ands	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <HAL_ADC_Init+0x27c>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d10b      	bne.n	8000e7a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4393      	bics	r3, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e78:	e01c      	b.n	8000eb4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7e:	2212      	movs	r2, #18
 8000e80:	4393      	bics	r3, r2
 8000e82:	2210      	movs	r2, #16
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8e:	2201      	movs	r2, #1
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e9e:	e009      	b.n	8000eb4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000eac:	230f      	movs	r3, #15
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	781b      	ldrb	r3, [r3, #0]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	fffffefd 	.word	0xfffffefd
 8000ec8:	fffe0219 	.word	0xfffe0219
 8000ecc:	833fffe7 	.word	0x833fffe7

08000ed0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eda:	230f      	movs	r3, #15
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d011      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x46>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d00d      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x46>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d009      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x46>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d005      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x46>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d001      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0x46>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2234      	movs	r2, #52	; 0x34
 8000f1a:	5c9b      	ldrb	r3, [r3, r2]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x54>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e0bb      	b.n	800109c <HAL_ADC_ConfigChannel+0x1cc>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2234      	movs	r2, #52	; 0x34
 8000f28:	2101      	movs	r1, #1
 8000f2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2204      	movs	r2, #4
 8000f34:	4013      	ands	r3, r2
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_ConfigChannel+0x6a>
 8000f38:	e09f      	b.n	800107a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a59      	ldr	r2, [pc, #356]	; (80010a4 <HAL_ADC_ConfigChannel+0x1d4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_ADC_ConfigChannel+0x76>
 8000f44:	e077      	b.n	8001036 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2201      	movs	r2, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	055b      	lsls	r3, r3, #21
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d037      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d033      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d02f      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d02b      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d027      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d023      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f94:	2b06      	cmp	r3, #6
 8000f96:	d01f      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d01b      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2107      	movs	r1, #7
 8000fac:	400b      	ands	r3, r1
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d012      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6959      	ldr	r1, [r3, #20]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2207      	movs	r2, #7
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d003      	beq.n	8000fe8 <HAL_ADC_ConfigChannel+0x118>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d152      	bne.n	800108e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_ADC_ConfigChannel+0x1d8>)
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b10      	cmp	r3, #16
 8000ff2:	d102      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x12a>
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	e001      	b.n	8000ffe <HAL_ADC_ConfigChannel+0x12e>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	03db      	lsls	r3, r3, #15
 8000ffe:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001000:	430b      	orrs	r3, r1
 8001002:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b10      	cmp	r3, #16
 800100a:	d140      	bne.n	800108e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_ADC_ConfigChannel+0x1dc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4927      	ldr	r1, [pc, #156]	; (80010b0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff f876 	bl	8000104 <__udivsi3>
 8001018:	0003      	movs	r3, r0
 800101a:	001a      	movs	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	189b      	adds	r3, r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001026:	e002      	b.n	800102e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3b01      	subs	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f9      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x158>
 8001034:	e02b      	b.n	800108e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	4099      	lsls	r1, r3
 8001044:	000b      	movs	r3, r1
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	400a      	ands	r2, r1
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b10      	cmp	r3, #16
 8001056:	d003      	beq.n	8001060 <HAL_ADC_ConfigChannel+0x190>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b11      	cmp	r3, #17
 800105e:	d116      	bne.n	800108e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d101      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1a0>
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_ADC_ConfigChannel+0x1e4>)
 800106e:	e000      	b.n	8001072 <HAL_ADC_ConfigChannel+0x1a2>
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001074:	400a      	ands	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e009      	b.n	800108e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	2220      	movs	r2, #32
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001086:	230f      	movs	r3, #15
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2234      	movs	r2, #52	; 0x34
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001096:	230f      	movs	r3, #15
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	00001001 	.word	0x00001001
 80010a8:	40012708 	.word	0x40012708
 80010ac:	20000000 	.word	0x20000000
 80010b0:	000f4240 	.word	0x000f4240
 80010b4:	ff7fffff 	.word	0xff7fffff
 80010b8:	ffbfffff 	.word	0xffbfffff

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	0002      	movs	r2, r0
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b7f      	cmp	r3, #127	; 0x7f
 80010ce:	d809      	bhi.n	80010e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	001a      	movs	r2, r3
 80010d6:	231f      	movs	r3, #31
 80010d8:	401a      	ands	r2, r3
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_EnableIRQ+0x30>)
 80010dc:	2101      	movs	r1, #1
 80010de:	4091      	lsls	r1, r2
 80010e0:	000a      	movs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
  }
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b7f      	cmp	r3, #127	; 0x7f
 8001104:	d828      	bhi.n	8001158 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <__NVIC_SetPriority+0xd4>)
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	33c0      	adds	r3, #192	; 0xc0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	589b      	ldr	r3, [r3, r2]
 8001116:	1dfa      	adds	r2, r7, #7
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	0011      	movs	r1, r2
 800111c:	2203      	movs	r2, #3
 800111e:	400a      	ands	r2, r1
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	21ff      	movs	r1, #255	; 0xff
 8001124:	4091      	lsls	r1, r2
 8001126:	000a      	movs	r2, r1
 8001128:	43d2      	mvns	r2, r2
 800112a:	401a      	ands	r2, r3
 800112c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	401a      	ands	r2, r3
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	2303      	movs	r3, #3
 800113e:	4003      	ands	r3, r0
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001144:	481f      	ldr	r0, [pc, #124]	; (80011c4 <__NVIC_SetPriority+0xd4>)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b25b      	sxtb	r3, r3
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	430a      	orrs	r2, r1
 8001150:	33c0      	adds	r3, #192	; 0xc0
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001156:	e031      	b.n	80011bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <__NVIC_SetPriority+0xd8>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0019      	movs	r1, r3
 8001160:	230f      	movs	r3, #15
 8001162:	400b      	ands	r3, r1
 8001164:	3b08      	subs	r3, #8
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3306      	adds	r3, #6
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	18d3      	adds	r3, r2, r3
 800116e:	3304      	adds	r3, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1dfa      	adds	r2, r7, #7
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	0011      	movs	r1, r2
 8001178:	2203      	movs	r2, #3
 800117a:	400a      	ands	r2, r1
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	21ff      	movs	r1, #255	; 0xff
 8001180:	4091      	lsls	r1, r2
 8001182:	000a      	movs	r2, r1
 8001184:	43d2      	mvns	r2, r2
 8001186:	401a      	ands	r2, r3
 8001188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	019b      	lsls	r3, r3, #6
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	401a      	ands	r2, r3
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	0018      	movs	r0, r3
 8001198:	2303      	movs	r3, #3
 800119a:	4003      	ands	r3, r0
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <__NVIC_SetPriority+0xd8>)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	001c      	movs	r4, r3
 80011a8:	230f      	movs	r3, #15
 80011aa:	4023      	ands	r3, r4
 80011ac:	3b08      	subs	r3, #8
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	430a      	orrs	r2, r1
 80011b2:	3306      	adds	r3, #6
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	18c3      	adds	r3, r0, r3
 80011b8:	3304      	adds	r3, #4
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b003      	add	sp, #12
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <SysTick_Config+0x40>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e010      	b.n	8001204 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <SysTick_Config+0x44>)
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	2301      	movs	r3, #1
 80011ec:	425b      	negs	r3, r3
 80011ee:	2103      	movs	r1, #3
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff7d 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SysTick_Config+0x44>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x44>)
 80011fe:	2207      	movs	r2, #7
 8001200:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001202:	2300      	movs	r3, #0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}
 800120c:	00ffffff 	.word	0x00ffffff
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	210f      	movs	r1, #15
 8001220:	187b      	adds	r3, r7, r1
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	0011      	movs	r1, r2
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	0002      	movs	r2, r0
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff33 	bl	80010bc <__NVIC_EnableIRQ>
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ffaf 	bl	80011cc <SysTick_Config>
 800126e:	0003      	movs	r3, r0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e036      	b.n	80012fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2221      	movs	r2, #33	; 0x21
 8001292:	2102      	movs	r1, #2
 8001294:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_DMA_Init+0x8c>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 f8fa 	bl	80014d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2221      	movs	r2, #33	; 0x21
 80012ee:	2101      	movs	r1, #1
 80012f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}  
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}
 8001304:	ffffc00f 	.word	0xffffc00f

08001308 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001310:	230f      	movs	r3, #15
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2221      	movs	r2, #33	; 0x21
 800131c:	5c9b      	ldrb	r3, [r3, r2]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d007      	beq.n	8001334 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2204      	movs	r2, #4
 8001328:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e028      	b.n	8001386 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	210e      	movs	r1, #14
 8001340:	438a      	bics	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2101      	movs	r1, #1
 8001350:	438a      	bics	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	2101      	movs	r1, #1
 800135e:	4091      	lsls	r1, r2
 8001360:	000a      	movs	r2, r1
 8001362:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2221      	movs	r2, #33	; 0x21
 8001368:	2101      	movs	r1, #1
 800136a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2220      	movs	r2, #32
 8001370:	2100      	movs	r1, #0
 8001372:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	0010      	movs	r0, r2
 8001384:	4798      	blx	r3
    } 
  }
  return status;
 8001386:	230f      	movs	r3, #15
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	781b      	ldrb	r3, [r3, #0]
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b004      	add	sp, #16
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	2204      	movs	r2, #4
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	d024      	beq.n	8001406 <HAL_DMA_IRQHandler+0x72>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2204      	movs	r2, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d020      	beq.n	8001406 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2220      	movs	r2, #32
 80013cc:	4013      	ands	r3, r2
 80013ce:	d107      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	2104      	movs	r1, #4
 80013ea:	4091      	lsls	r1, r2
 80013ec:	000a      	movs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d100      	bne.n	80013fa <HAL_DMA_IRQHandler+0x66>
 80013f8:	e06a      	b.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	0010      	movs	r0, r2
 8001402:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001404:	e064      	b.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2202      	movs	r2, #2
 800140c:	409a      	lsls	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_DMA_IRQHandler+0xda>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2202      	movs	r2, #2
 800141a:	4013      	ands	r3, r2
 800141c:	d027      	beq.n	800146e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2220      	movs	r2, #32
 8001426:	4013      	ands	r3, r2
 8001428:	d10b      	bne.n	8001442 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	210a      	movs	r1, #10
 8001436:	438a      	bics	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2221      	movs	r2, #33	; 0x21
 800143e:	2101      	movs	r1, #1
 8001440:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	2102      	movs	r1, #2
 800144c:	4091      	lsls	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	2b00      	cmp	r3, #0
 8001460:	d036      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	0010      	movs	r0, r2
 800146a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800146c:	e030      	b.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	d028      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2208      	movs	r2, #8
 8001482:	4013      	ands	r3, r2
 8001484:	d024      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	210e      	movs	r1, #14
 8001492:	438a      	bics	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	2101      	movs	r1, #1
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2221      	movs	r2, #33	; 0x21
 80014b0:	2101      	movs	r1, #1
 80014b2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	0010      	movs	r0, r2
 80014cc:	4798      	blx	r3
    }
   }
}  
 80014ce:	e7ff      	b.n	80014d0 <HAL_DMA_IRQHandler+0x13c>
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a08      	ldr	r2, [pc, #32]	; (8001508 <DMA_CalcBaseAndBitshift+0x30>)
 80014e6:	4694      	mov	ip, r2
 80014e8:	4463      	add	r3, ip
 80014ea:	2114      	movs	r1, #20
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe fe09 	bl	8000104 <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	009a      	lsls	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <DMA_CalcBaseAndBitshift+0x34>)
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}
 8001508:	bffdfff8 	.word	0xbffdfff8
 800150c:	40020000 	.word	0x40020000

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	e14f      	b.n	80017c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d100      	bne.n	8001538 <HAL_GPIO_Init+0x28>
 8001536:	e140      	b.n	80017ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x38>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	58d3      	ldr	r3, [r2, r3]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2207      	movs	r2, #7
 800155a:	4013      	ands	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	409a      	lsls	r2, r3
 8001562:	0013      	movs	r3, r2
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2107      	movs	r1, #7
 8001574:	400b      	ands	r3, r1
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	409a      	lsls	r2, r3
 800157a:	0013      	movs	r3, r2
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2203      	movs	r2, #3
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	409a      	lsls	r2, r3
 80015b6:	0013      	movs	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d00b      	beq.n	80015e4 <HAL_GPIO_Init+0xd4>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d8:	2b11      	cmp	r3, #17
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	0013      	movs	r3, r2
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	2201      	movs	r2, #1
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	055b      	lsls	r3, r3, #21
 800167e:	4013      	ands	r3, r2
 8001680:	d100      	bne.n	8001684 <HAL_GPIO_Init+0x174>
 8001682:	e09a      	b.n	80017ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001684:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <HAL_GPIO_Init+0x2c8>)
 8001686:	699a      	ldr	r2, [r3, #24]
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x2c8>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_GPIO_Init+0x2c8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_GPIO_Init+0x2cc>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	589b      	ldr	r3, [r3, r2]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	43da      	mvns	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	2390      	movs	r3, #144	; 0x90
 80016c4:	05db      	lsls	r3, r3, #23
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0x1e2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <HAL_GPIO_Init+0x2d0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00d      	beq.n	80016ee <HAL_GPIO_Init+0x1de>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <HAL_GPIO_Init+0x2d4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x1da>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a42      	ldr	r2, [pc, #264]	; (80017e8 <HAL_GPIO_Init+0x2d8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_GPIO_Init+0x1d6>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016f2:	2300      	movs	r3, #0
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	2103      	movs	r1, #3
 80016f8:	400a      	ands	r2, r1
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x2cc>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43da      	mvns	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4013      	ands	r3, r2
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	4013      	ands	r3, r2
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43da      	mvns	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	035b      	lsls	r3, r3, #13
 800177e:	4013      	ands	r3, r2
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43da      	mvns	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	039b      	lsls	r3, r3, #14
 80017a8:	4013      	ands	r3, r2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	40da      	lsrs	r2, r3
 80017c8:	1e13      	subs	r3, r2, #0
 80017ca:	d000      	beq.n	80017ce <HAL_GPIO_Init+0x2be>
 80017cc:	e6a8      	b.n	8001520 <HAL_GPIO_Init+0x10>
  } 
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b006      	add	sp, #24
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000800 	.word	0x48000800
 80017e8:	48000c00 	.word	0x48000c00
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e036      	b.n	8001870 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_IWDG_Init+0x88>)
 8001808:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_IWDG_Init+0x8c>)
 8001810:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6852      	ldr	r2, [r2, #4]
 800181a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6892      	ldr	r2, [r2, #8]
 8001824:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001826:	f7ff fa09 	bl	8000c3c <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800182e:	e008      	b.n	8001842 <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001830:	f7ff fa04 	bl	8000c3c <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b30      	cmp	r3, #48	; 0x30
 800183c:	d901      	bls.n	8001842 <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e016      	b.n	8001870 <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f1      	bne.n	8001830 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	429a      	cmp	r2, r3
 8001858:	d005      	beq.n	8001866 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68d2      	ldr	r2, [r2, #12]
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	e003      	b.n	800186e <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_IWDG_Init+0x90>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0000cccc 	.word	0x0000cccc
 800187c:	00005555 	.word	0x00005555
 8001880:	0000aaaa 	.word	0x0000aaaa

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e305      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	d100      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1e>
 80018a0:	e08d      	b.n	80019be <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018a2:	4bc5      	ldr	r3, [pc, #788]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	220c      	movs	r2, #12
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d00e      	beq.n	80018cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ae:	4bc2      	ldr	r3, [pc, #776]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	220c      	movs	r2, #12
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d116      	bne.n	80018e8 <HAL_RCC_OscConfig+0x64>
 80018ba:	4bbf      	ldr	r3, [pc, #764]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	401a      	ands	r2, r3
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10d      	bne.n	80018e8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4bba      	ldr	r3, [pc, #744]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x56>
 80018d8:	e070      	b.n	80019bc <HAL_RCC_OscConfig+0x138>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d000      	beq.n	80018e4 <HAL_RCC_OscConfig+0x60>
 80018e2:	e06b      	b.n	80019bc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e2dc      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x7c>
 80018f0:	4bb1      	ldr	r3, [pc, #708]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4bb0      	ldr	r3, [pc, #704]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0249      	lsls	r1, r1, #9
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e02f      	b.n	8001960 <HAL_RCC_OscConfig+0xdc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10c      	bne.n	8001922 <HAL_RCC_OscConfig+0x9e>
 8001908:	4bab      	ldr	r3, [pc, #684]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4baa      	ldr	r3, [pc, #680]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800190e:	49ab      	ldr	r1, [pc, #684]	; (8001bbc <HAL_RCC_OscConfig+0x338>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	4ba8      	ldr	r3, [pc, #672]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4ba7      	ldr	r3, [pc, #668]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800191a:	49a9      	ldr	r1, [pc, #676]	; (8001bc0 <HAL_RCC_OscConfig+0x33c>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e01e      	b.n	8001960 <HAL_RCC_OscConfig+0xdc>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d10e      	bne.n	8001948 <HAL_RCC_OscConfig+0xc4>
 800192a:	4ba3      	ldr	r3, [pc, #652]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4ba2      	ldr	r3, [pc, #648]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	02c9      	lsls	r1, r1, #11
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	4b9f      	ldr	r3, [pc, #636]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b9e      	ldr	r3, [pc, #632]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0249      	lsls	r1, r1, #9
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xdc>
 8001948:	4b9b      	ldr	r3, [pc, #620]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b9a      	ldr	r3, [pc, #616]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800194e:	499b      	ldr	r1, [pc, #620]	; (8001bbc <HAL_RCC_OscConfig+0x338>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4b98      	ldr	r3, [pc, #608]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b97      	ldr	r3, [pc, #604]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 800195a:	4999      	ldr	r1, [pc, #612]	; (8001bc0 <HAL_RCC_OscConfig+0x33c>)
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d014      	beq.n	8001992 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff f968 	bl	8000c3c <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff f963 	bl	8000c3c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e28e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0xee>
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff f953 	bl	8000c3c <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f94e 	bl	8000c3c <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e279      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b82      	ldr	r3, [pc, #520]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	029b      	lsls	r3, r3, #10
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x118>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x146>
 80019c8:	e06c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	220c      	movs	r2, #12
 80019d0:	4013      	ands	r3, r2
 80019d2:	d00e      	beq.n	80019f2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019d4:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	220c      	movs	r2, #12
 80019da:	4013      	ands	r3, r2
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d11f      	bne.n	8001a20 <HAL_RCC_OscConfig+0x19c>
 80019e0:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	23c0      	movs	r3, #192	; 0xc0
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	401a      	ands	r2, r3
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b71      	ldr	r3, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_OscConfig+0x184>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e24c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	22f8      	movs	r2, #248	; 0xf8
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e041      	b.n	8001aa4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d024      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f902 	bl	8000c3c <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f8fd 	bl	8000c3c <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e228      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0f1      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	22f8      	movs	r2, #248	; 0xf8
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00da      	lsls	r2, r3, #3
 8001a6a:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	438a      	bics	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f8dd 	bl	8000c3c <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8d8 	bl	8000c3c <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e203      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d1f1      	bne.n	8001a88 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d036      	beq.n	8001b1c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f8bb 	bl	8000c3c <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff f8b6 	bl	8000c3c <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1e1      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f1      	beq.n	8001acc <HAL_RCC_OscConfig+0x248>
 8001ae8:	e018      	b.n	8001b1c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aee:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	438a      	bics	r2, r1
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f8a1 	bl	8000c3c <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f89c 	bl	8000c3c <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1c7      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d1f1      	bne.n	8001b00 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d100      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2a4>
 8001b26:	e0b5      	b.n	8001c94 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b28:	231f      	movs	r3, #31
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	055b      	lsls	r3, r3, #21
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0549      	lsls	r1, r1, #21
 8001b46:	430a      	orrs	r2, r1
 8001b48:	61da      	str	r2, [r3, #28]
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	055b      	lsls	r3, r3, #21
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b58:	231f      	movs	r3, #31
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_RCC_OscConfig+0x340>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d11a      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_OscConfig+0x340>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_RCC_OscConfig+0x340>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0049      	lsls	r1, r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f85f 	bl	8000c3c <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff f85a 	bl	8000c3c <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e185      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_OscConfig+0x340>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x344>
 8001baa:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_RCC_OscConfig+0x334>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	621a      	str	r2, [r3, #32]
 8001bb6:	e035      	b.n	8001c24 <HAL_RCC_OscConfig+0x3a0>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	fffeffff 	.word	0xfffeffff
 8001bc0:	fffbffff 	.word	0xfffbffff
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x366>
 8001bd0:	4bb6      	ldr	r3, [pc, #728]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	4bb5      	ldr	r3, [pc, #724]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	621a      	str	r2, [r3, #32]
 8001bdc:	4bb3      	ldr	r3, [pc, #716]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001bde:	6a1a      	ldr	r2, [r3, #32]
 8001be0:	4bb2      	ldr	r3, [pc, #712]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001be2:	2104      	movs	r1, #4
 8001be4:	438a      	bics	r2, r1
 8001be6:	621a      	str	r2, [r3, #32]
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x3a0>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x388>
 8001bf2:	4bae      	ldr	r3, [pc, #696]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	4bad      	ldr	r3, [pc, #692]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	621a      	str	r2, [r3, #32]
 8001bfe:	4bab      	ldr	r3, [pc, #684]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	4baa      	ldr	r3, [pc, #680]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	621a      	str	r2, [r3, #32]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0x3a0>
 8001c0c:	4ba7      	ldr	r3, [pc, #668]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	4ba6      	ldr	r3, [pc, #664]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	438a      	bics	r2, r1
 8001c16:	621a      	str	r2, [r3, #32]
 8001c18:	4ba4      	ldr	r3, [pc, #656]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	4ba3      	ldr	r3, [pc, #652]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c1e:	2104      	movs	r1, #4
 8001c20:	438a      	bics	r2, r1
 8001c22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d014      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f806 	bl	8000c3c <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff f801 	bl	8000c3c <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a9b      	ldr	r2, [pc, #620]	; (8001eb0 <HAL_RCC_OscConfig+0x62c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e12b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4a:	4b98      	ldr	r3, [pc, #608]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x3b2>
 8001c54:	e013      	b.n	8001c7e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7fe fff1 	bl	8000c3c <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	e009      	b.n	8001c74 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7fe ffec 	bl	8000c3c <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	4a91      	ldr	r2, [pc, #580]	; (8001eb0 <HAL_RCC_OscConfig+0x62c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e116      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b8d      	ldr	r3, [pc, #564]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c7e:	231f      	movs	r3, #31
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	4b87      	ldr	r3, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001c8e:	4989      	ldr	r1, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0x630>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d12a      	bne.n	8001cfc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001caa:	4b80      	ldr	r3, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001cac:	2104      	movs	r1, #4
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cb2:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ffbd 	bl	8000c3c <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cc8:	f7fe ffb8 	bl	8000c3c <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0e3      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cda:	4b74      	ldr	r3, [pc, #464]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d0f1      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ce4:	4b71      	ldr	r3, [pc, #452]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	22f8      	movs	r2, #248	; 0xf8
 8001cea:	4393      	bics	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	00da      	lsls	r2, r3, #3
 8001cf4:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfa:	e034      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	3305      	adds	r3, #5
 8001d02:	d111      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d04:	4b69      	ldr	r3, [pc, #420]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d10:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	22f8      	movs	r2, #248	; 0xf8
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	00da      	lsls	r2, r3, #3
 8001d20:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
 8001d26:	e01e      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d28:	4b60      	ldr	r3, [pc, #384]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2c:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d2e:	2104      	movs	r1, #4
 8001d30:	430a      	orrs	r2, r1
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d34:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d38:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe ff7c 	bl	8000c3c <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d4a:	f7fe ff77 	bl	8000c3c <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0a2      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f1      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d100      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4ec>
 8001d6e:	e097      	b.n	8001ea0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d100      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4fa>
 8001d7c:	e06b      	b.n	8001e56 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d14c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b48      	ldr	r3, [pc, #288]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001d8c:	494a      	ldr	r1, [pc, #296]	; (8001eb8 <HAL_RCC_OscConfig+0x634>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe ff53 	bl	8000c3c <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe ff4e 	bl	8000c3c <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e079      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	049b      	lsls	r3, r3, #18
 8001db6:	4013      	ands	r3, r2
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <HAL_RCC_OscConfig+0x638>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	431a      	orrs	r2, r3
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	0449      	lsls	r1, r1, #17
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe ff21 	bl	8000c3c <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe ff1c 	bl	8000c3c <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e047      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	049b      	lsls	r3, r3, #18
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x57c>
 8001e1e:	e03f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001e26:	4924      	ldr	r1, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x634>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ff06 	bl	8000c3c <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e36:	f7fe ff01 	bl	8000c3c <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e02c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	049b      	lsls	r3, r3, #18
 8001e50:	4013      	ands	r3, r2
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x5b2>
 8001e54:	e024      	b.n	8001ea0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e01f      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_RCC_OscConfig+0x628>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	23c0      	movs	r3, #192	; 0xc0
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	401a      	ands	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d10e      	bne.n	8001e9c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	220f      	movs	r2, #15
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	23f0      	movs	r3, #240	; 0xf0
 8001e90:	039b      	lsls	r3, r3, #14
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b008      	add	sp, #32
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	00001388 	.word	0x00001388
 8001eb4:	efffffff 	.word	0xefffffff
 8001eb8:	feffffff 	.word	0xfeffffff
 8001ebc:	ffc27fff 	.word	0xffc27fff

08001ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0b3      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d911      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e09a      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	d006      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f20:	21e0      	movs	r1, #224	; 0xe0
 8001f22:	00c9      	lsls	r1, r1, #3
 8001f24:	430a      	orrs	r2, r1
 8001f26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	22f0      	movs	r2, #240	; 0xf0
 8001f2e:	4393      	bics	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d040      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	4013      	ands	r3, r2
 8001f58:	d114      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06e      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	049b      	lsls	r3, r3, #18
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e062      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e05b      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fe50 	bl	8000c3c <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa2:	f7fe fe4b 	bl	8000c3c <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_RCC_ClockConfig+0x18c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e042      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	220c      	movs	r2, #12
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1ec      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d211      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4393      	bics	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_RCC_ClockConfig+0x184>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e020      	b.n	800203c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4013      	ands	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_RCC_ClockConfig+0x190>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002018:	f000 f820 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201c:	0001      	movs	r1, r0
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x188>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	220f      	movs	r2, #15
 8002026:	4013      	ands	r3, r2
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x194>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	000a      	movs	r2, r1
 800202e:	40da      	lsrs	r2, r3
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x198>)
 8002032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002034:	2000      	movs	r0, #0
 8002036:	f7fe fdbb 	bl	8000bb0 <HAL_InitTick>
  
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	00001388 	.word	0x00001388
 8002050:	fffff8ff 	.word	0xfffff8ff
 8002054:	08002dac 	.word	0x08002dac
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b08f      	sub	sp, #60	; 0x3c
 8002060:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002062:	2314      	movs	r3, #20
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002068:	ca13      	ldmia	r2!, {r0, r1, r4}
 800206a:	c313      	stmia	r3!, {r0, r1, r4}
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002074:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002076:	c313      	stmia	r3!, {r0, r1, r4}
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	220c      	movs	r2, #12
 800209a:	4013      	ands	r3, r2
 800209c:	2b04      	cmp	r3, #4
 800209e:	d002      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x4a>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d003      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x50>
 80020a4:	e02f      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020aa:	e02f      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	0c9b      	lsrs	r3, r3, #18
 80020b0:	220f      	movs	r2, #15
 80020b2:	4013      	ands	r3, r2
 80020b4:	2214      	movs	r2, #20
 80020b6:	18ba      	adds	r2, r7, r2
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	220f      	movs	r2, #15
 80020c2:	4013      	ands	r3, r2
 80020c4:	1d3a      	adds	r2, r7, #4
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	401a      	ands	r2, r3
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	025b      	lsls	r3, r3, #9
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020dc:	4811      	ldr	r0, [pc, #68]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020de:	f7fe f811 	bl	8000104 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	001a      	movs	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	4353      	muls	r3, r2
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	e008      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020f2:	f7fe f807 	bl	8000104 <__udivsi3>
 80020f6:	0003      	movs	r3, r0
 80020f8:	001a      	movs	r2, r3
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	4353      	muls	r3, r2
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002104:	e002      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800210a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b00f      	add	sp, #60	; 0x3c
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	08002d8c 	.word	0x08002d8c
 800211c:	08002d9c 	.word	0x08002d9c
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200

08002128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <HAL_RCC_GetHCLKFreq+0x10>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002140:	f7ff fff2 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002144:	0001      	movs	r1, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	2207      	movs	r2, #7
 800214e:	4013      	ands	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	40d9      	lsrs	r1, r3
 8002156:	000b      	movs	r3, r1
}    
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	40021000 	.word	0x40021000
 8002164:	08002dbc 	.word	0x08002dbc

08002168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	4013      	ands	r3, r2
 8002182:	d100      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002184:	e08f      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2317      	movs	r3, #23
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	4013      	ands	r3, r2
 8002198:	d111      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b54      	ldr	r3, [pc, #336]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	0549      	lsls	r1, r1, #21
 80021a4:	430a      	orrs	r2, r1
 80021a6:	61da      	str	r2, [r3, #28]
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	055b      	lsls	r3, r3, #21
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2317      	movs	r3, #23
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	d11a      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	0049      	lsls	r1, r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fd30 	bl	8000c3c <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe fd2b 	bl	8000c3c <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	; 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e077      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	23c0      	movs	r3, #192	; 0xc0
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d034      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	23c0      	movs	r3, #192	; 0xc0
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4013      	ands	r3, r2
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	429a      	cmp	r2, r3
 8002220:	d02c      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002222:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a33      	ldr	r2, [pc, #204]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	0249      	lsls	r1, r1, #9
 8002236:	430a      	orrs	r2, r1
 8002238:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223a:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002240:	492d      	ldr	r1, [pc, #180]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002242:	400a      	ands	r2, r1
 8002244:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d013      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fcf2 	bl	8000c3c <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e009      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fced 	bl	8000c3c <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e038      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d0f0      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002282:	4013      	ands	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800228c:	430a      	orrs	r2, r1
 800228e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002290:	2317      	movs	r3, #23
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a0:	4917      	ldr	r1, [pc, #92]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	2203      	movs	r2, #3
 80022b6:	4393      	bics	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2220      	movs	r2, #32
 80022ca:	4013      	ands	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	2210      	movs	r2, #16
 80022d4:	4393      	bics	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b006      	add	sp, #24
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	fffffcff 	.word	0xfffffcff
 80022f8:	fffeffff 	.word	0xfffeffff
 80022fc:	00001388 	.word	0x00001388
 8002300:	efffffff 	.word	0xefffffff

08002304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e044      	b.n	80023a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2270      	movs	r2, #112	; 0x70
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f7fe fa15 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2224      	movs	r2, #36	; 0x24
 8002332:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	438a      	bics	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 f968 	bl	800261c <UART_SetConfig>
 800234c:	0003      	movs	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e024      	b.n	80023a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 fb11 	bl	8002988 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	490d      	ldr	r1, [pc, #52]	; (80023a8 <HAL_UART_Init+0xa4>)
 8002372:	400a      	ands	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2108      	movs	r1, #8
 8002382:	438a      	bics	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fba9 	bl	8002af0 <UART_CheckIdleState>
 800239e:	0003      	movs	r3, r0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	fffff7ff 	.word	0xfffff7ff

080023ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4a89      	ldr	r2, [pc, #548]	; (80025f4 <HAL_UART_IRQHandler+0x248>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d112      	bne.n	8002400 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2220      	movs	r2, #32
 80023de:	4013      	ands	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2220      	movs	r2, #32
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00a      	beq.n	8002400 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d100      	bne.n	80023f4 <HAL_UART_IRQHandler+0x48>
 80023f2:	e0f7      	b.n	80025e4 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	0010      	movs	r0, r2
 80023fc:	4798      	blx	r3
      }
      return;
 80023fe:	e0f1      	b.n	80025e4 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d100      	bne.n	8002408 <HAL_UART_IRQHandler+0x5c>
 8002406:	e0cd      	b.n	80025a4 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d105      	bne.n	800241c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	2390      	movs	r3, #144	; 0x90
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d100      	bne.n	800241c <HAL_UART_IRQHandler+0x70>
 800241a:	e0c3      	b.n	80025a4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_UART_IRQHandler+0x96>
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4013      	ands	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800243a:	2201      	movs	r2, #1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2202      	movs	r2, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_UART_IRQHandler+0xba>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2202      	movs	r2, #2
 8002458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245e:	2204      	movs	r2, #4
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2204      	movs	r2, #4
 800246a:	4013      	ands	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_UART_IRQHandler+0xde>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002482:	2202      	movs	r2, #2
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2208      	movs	r2, #8
 800248e:	4013      	ands	r3, r2
 8002490:	d011      	beq.n	80024b6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2220      	movs	r2, #32
 8002496:	4013      	ands	r3, r2
 8002498:	d103      	bne.n	80024a2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024a0:	d009      	beq.n	80024b6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ae:	2208      	movs	r2, #8
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4013      	ands	r3, r2
 80024be:	d00f      	beq.n	80024e0 <HAL_UART_IRQHandler+0x134>
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	04db      	lsls	r3, r3, #19
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d8:	2220      	movs	r2, #32
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d100      	bne.n	80024ea <HAL_UART_IRQHandler+0x13e>
 80024e8:	e07e      	b.n	80025e8 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2220      	movs	r2, #32
 80024ee:	4013      	ands	r3, r2
 80024f0:	d00c      	beq.n	800250c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2220      	movs	r2, #32
 80024f6:	4013      	ands	r3, r2
 80024f8:	d008      	beq.n	800250c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	0010      	movs	r0, r2
 800250a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002510:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	4013      	ands	r3, r2
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d003      	beq.n	8002528 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2228      	movs	r2, #40	; 0x28
 8002524:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002526:	d033      	beq.n	8002590 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fba4 	bl	8002c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	4013      	ands	r3, r2
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d123      	bne.n	8002586 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2140      	movs	r1, #64	; 0x40
 800254a:	438a      	bics	r2, r1
 800254c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d012      	beq.n	800257c <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <HAL_UART_IRQHandler+0x24c>)
 800255c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002562:	0018      	movs	r0, r3
 8002564:	f7fe fed0 	bl	8001308 <HAL_DMA_Abort_IT>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d019      	beq.n	80025a0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002576:	0018      	movs	r0, r3
 8002578:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257a:	e011      	b.n	80025a0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 f844 	bl	800260c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	e00c      	b.n	80025a0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0018      	movs	r0, r3
 800258a:	f000 f83f 	bl	800260c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258e:	e007      	b.n	80025a0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f83a 	bl	800260c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800259e:	e023      	b.n	80025e8 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	46c0      	nop			; (mov r8, r8)
    return;
 80025a2:	e021      	b.n	80025e8 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	4013      	ands	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	4013      	ands	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	0010      	movs	r0, r2
 80025c4:	4798      	blx	r3
    }
    return;
 80025c6:	e011      	b.n	80025ec <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	4013      	ands	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_UART_IRQHandler+0x242>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	4013      	ands	r3, r2
 80025d6:	d00a      	beq.n	80025ee <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fb83 	bl	8002ce6 <UART_EndTransmit_IT>
    return;
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	e004      	b.n	80025ee <HAL_UART_IRQHandler+0x242>
      return;
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	e002      	b.n	80025ee <HAL_UART_IRQHandler+0x242>
    return;
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	e000      	b.n	80025ee <HAL_UART_IRQHandler+0x242>
    return;
 80025ec:	46c0      	nop			; (mov r8, r8)
  }

}
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b008      	add	sp, #32
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	0000080f 	.word	0x0000080f
 80025f8:	08002cb9 	.word	0x08002cb9

080025fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002628:	2317      	movs	r3, #23
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4ac1      	ldr	r2, [pc, #772]	; (8002954 <UART_SetConfig+0x338>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4abc      	ldr	r2, [pc, #752]	; (8002958 <UART_SetConfig+0x33c>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4ab3      	ldr	r2, [pc, #716]	; (800295c <UART_SetConfig+0x340>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4aaf      	ldr	r2, [pc, #700]	; (8002960 <UART_SetConfig+0x344>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d125      	bne.n	80026f2 <UART_SetConfig+0xd6>
 80026a6:	4baf      	ldr	r3, [pc, #700]	; (8002964 <UART_SetConfig+0x348>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	2203      	movs	r2, #3
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d00f      	beq.n	80026d2 <UART_SetConfig+0xb6>
 80026b2:	d304      	bcc.n	80026be <UART_SetConfig+0xa2>
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d011      	beq.n	80026dc <UART_SetConfig+0xc0>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d005      	beq.n	80026c8 <UART_SetConfig+0xac>
 80026bc:	e013      	b.n	80026e6 <UART_SetConfig+0xca>
 80026be:	231f      	movs	r3, #31
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e04a      	b.n	800275e <UART_SetConfig+0x142>
 80026c8:	231f      	movs	r3, #31
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e045      	b.n	800275e <UART_SetConfig+0x142>
 80026d2:	231f      	movs	r3, #31
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e040      	b.n	800275e <UART_SetConfig+0x142>
 80026dc:	231f      	movs	r3, #31
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2208      	movs	r2, #8
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e03b      	b.n	800275e <UART_SetConfig+0x142>
 80026e6:	231f      	movs	r3, #31
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2210      	movs	r2, #16
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	e035      	b.n	800275e <UART_SetConfig+0x142>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a9c      	ldr	r2, [pc, #624]	; (8002968 <UART_SetConfig+0x34c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d104      	bne.n	8002706 <UART_SetConfig+0xea>
 80026fc:	231f      	movs	r3, #31
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e02b      	b.n	800275e <UART_SetConfig+0x142>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a98      	ldr	r2, [pc, #608]	; (800296c <UART_SetConfig+0x350>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d104      	bne.n	800271a <UART_SetConfig+0xfe>
 8002710:	231f      	movs	r3, #31
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e021      	b.n	800275e <UART_SetConfig+0x142>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a94      	ldr	r2, [pc, #592]	; (8002970 <UART_SetConfig+0x354>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d104      	bne.n	800272e <UART_SetConfig+0x112>
 8002724:	231f      	movs	r3, #31
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e017      	b.n	800275e <UART_SetConfig+0x142>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a90      	ldr	r2, [pc, #576]	; (8002974 <UART_SetConfig+0x358>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d104      	bne.n	8002742 <UART_SetConfig+0x126>
 8002738:	231f      	movs	r3, #31
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e00d      	b.n	800275e <UART_SetConfig+0x142>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a8c      	ldr	r2, [pc, #560]	; (8002978 <UART_SetConfig+0x35c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d104      	bne.n	8002756 <UART_SetConfig+0x13a>
 800274c:	231f      	movs	r3, #31
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e003      	b.n	800275e <UART_SetConfig+0x142>
 8002756:	231f      	movs	r3, #31
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2210      	movs	r2, #16
 800275c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	429a      	cmp	r2, r3
 8002768:	d000      	beq.n	800276c <UART_SetConfig+0x150>
 800276a:	e07d      	b.n	8002868 <UART_SetConfig+0x24c>
  {
    switch (clocksource)
 800276c:	231f      	movs	r3, #31
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d01c      	beq.n	80027b0 <UART_SetConfig+0x194>
 8002776:	dc02      	bgt.n	800277e <UART_SetConfig+0x162>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <UART_SetConfig+0x16c>
 800277c:	e04b      	b.n	8002816 <UART_SetConfig+0x1fa>
 800277e:	2b04      	cmp	r3, #4
 8002780:	d025      	beq.n	80027ce <UART_SetConfig+0x1b2>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d037      	beq.n	80027f6 <UART_SetConfig+0x1da>
 8002786:	e046      	b.n	8002816 <UART_SetConfig+0x1fa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002788:	f7ff fcd8 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 800278c:	0003      	movs	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	005a      	lsls	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	18d2      	adds	r2, r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0019      	movs	r1, r3
 80027a2:	0010      	movs	r0, r2
 80027a4:	f7fd fcae 	bl	8000104 <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	61bb      	str	r3, [r7, #24]
        break;
 80027ae:	e037      	b.n	8002820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	4a71      	ldr	r2, [pc, #452]	; (800297c <UART_SetConfig+0x360>)
 80027b8:	189a      	adds	r2, r3, r2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0019      	movs	r1, r3
 80027c0:	0010      	movs	r0, r2
 80027c2:	f7fd fc9f 	bl	8000104 <__udivsi3>
 80027c6:	0003      	movs	r3, r0
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	61bb      	str	r3, [r7, #24]
        break;
 80027cc:	e028      	b.n	8002820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ce:	f7ff fc45 	bl	800205c <HAL_RCC_GetSysClockFreq>
 80027d2:	0003      	movs	r3, r0
 80027d4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	005a      	lsls	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	18d2      	adds	r2, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f7fd fc8b 	bl	8000104 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	61bb      	str	r3, [r7, #24]
        break;
 80027f4:	e014      	b.n	8002820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0252      	lsls	r2, r2, #9
 8002800:	189a      	adds	r2, r3, r2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0019      	movs	r1, r3
 8002808:	0010      	movs	r0, r2
 800280a:	f7fd fc7b 	bl	8000104 <__udivsi3>
 800280e:	0003      	movs	r3, r0
 8002810:	b29b      	uxth	r3, r3
 8002812:	61bb      	str	r3, [r7, #24]
        break;
 8002814:	e004      	b.n	8002820 <UART_SetConfig+0x204>
      default:
        ret = HAL_ERROR;
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
        break;
 800281e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	d91b      	bls.n	800285e <UART_SetConfig+0x242>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4a55      	ldr	r2, [pc, #340]	; (8002980 <UART_SetConfig+0x364>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d817      	bhi.n	800285e <UART_SetConfig+0x242>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	b29a      	uxth	r2, r3
 8002832:	200a      	movs	r0, #10
 8002834:	183b      	adds	r3, r7, r0
 8002836:	210f      	movs	r1, #15
 8002838:	438a      	bics	r2, r1
 800283a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	2207      	movs	r2, #7
 8002844:	4013      	ands	r3, r2
 8002846:	b299      	uxth	r1, r3
 8002848:	183b      	adds	r3, r7, r0
 800284a:	183a      	adds	r2, r7, r0
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	183a      	adds	r2, r7, r0
 8002858:	8812      	ldrh	r2, [r2, #0]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	e06c      	b.n	8002938 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e067      	b.n	8002938 <UART_SetConfig+0x31c>
    }
  }
  else
  {
    switch (clocksource)
 8002868:	231f      	movs	r3, #31
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d01b      	beq.n	80028aa <UART_SetConfig+0x28e>
 8002872:	dc02      	bgt.n	800287a <UART_SetConfig+0x25e>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <UART_SetConfig+0x268>
 8002878:	e049      	b.n	800290e <UART_SetConfig+0x2f2>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d024      	beq.n	80028c8 <UART_SetConfig+0x2ac>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d035      	beq.n	80028ee <UART_SetConfig+0x2d2>
 8002882:	e044      	b.n	800290e <UART_SetConfig+0x2f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002884:	f7ff fc5a 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002888:	0003      	movs	r3, r0
 800288a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	085a      	lsrs	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	18d2      	adds	r2, r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0019      	movs	r1, r3
 800289c:	0010      	movs	r0, r2
 800289e:	f7fd fc31 	bl	8000104 <__udivsi3>
 80028a2:	0003      	movs	r3, r0
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	61bb      	str	r3, [r7, #24]
        break;
 80028a8:	e036      	b.n	8002918 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	4a34      	ldr	r2, [pc, #208]	; (8002984 <UART_SetConfig+0x368>)
 80028b2:	189a      	adds	r2, r3, r2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0019      	movs	r1, r3
 80028ba:	0010      	movs	r0, r2
 80028bc:	f7fd fc22 	bl	8000104 <__udivsi3>
 80028c0:	0003      	movs	r3, r0
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	61bb      	str	r3, [r7, #24]
        break;
 80028c6:	e027      	b.n	8002918 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c8:	f7ff fbc8 	bl	800205c <HAL_RCC_GetSysClockFreq>
 80028cc:	0003      	movs	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	085a      	lsrs	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	18d2      	adds	r2, r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0019      	movs	r1, r3
 80028e0:	0010      	movs	r0, r2
 80028e2:	f7fd fc0f 	bl	8000104 <__udivsi3>
 80028e6:	0003      	movs	r3, r0
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	61bb      	str	r3, [r7, #24]
        break;
 80028ec:	e014      	b.n	8002918 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	0212      	lsls	r2, r2, #8
 80028f8:	189a      	adds	r2, r3, r2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0019      	movs	r1, r3
 8002900:	0010      	movs	r0, r2
 8002902:	f7fd fbff 	bl	8000104 <__udivsi3>
 8002906:	0003      	movs	r3, r0
 8002908:	b29b      	uxth	r3, r3
 800290a:	61bb      	str	r3, [r7, #24]
        break;
 800290c:	e004      	b.n	8002918 <UART_SetConfig+0x2fc>
      default:
        ret = HAL_ERROR;
 800290e:	2317      	movs	r3, #23
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
        break;
 8002916:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	d908      	bls.n	8002930 <UART_SetConfig+0x314>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <UART_SetConfig+0x364>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d804      	bhi.n	8002930 <UART_SetConfig+0x314>
    {
      huart->Instance->BRR = usartdiv;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	e003      	b.n	8002938 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 8002930:	2317      	movs	r3, #23
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002944:	2317      	movs	r3, #23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b008      	add	sp, #32
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	efff69f3 	.word	0xefff69f3
 8002958:	ffffcfff 	.word	0xffffcfff
 800295c:	fffff4ff 	.word	0xfffff4ff
 8002960:	40013800 	.word	0x40013800
 8002964:	40021000 	.word	0x40021000
 8002968:	40004400 	.word	0x40004400
 800296c:	40004800 	.word	0x40004800
 8002970:	40004c00 	.word	0x40004c00
 8002974:	40005000 	.word	0x40005000
 8002978:	40011400 	.word	0x40011400
 800297c:	00f42400 	.word	0x00f42400
 8002980:	0000ffff 	.word	0x0000ffff
 8002984:	007a1200 	.word	0x007a1200

08002988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2201      	movs	r2, #1
 8002996:	4013      	ands	r3, r2
 8002998:	d00b      	beq.n	80029b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <UART_AdvFeatureConfig+0x144>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <UART_AdvFeatureConfig+0x148>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2204      	movs	r2, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <UART_AdvFeatureConfig+0x14c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2208      	movs	r2, #8
 80029fc:	4013      	ands	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <UART_AdvFeatureConfig+0x150>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <UART_AdvFeatureConfig+0x154>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2220      	movs	r2, #32
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <UART_AdvFeatureConfig+0x158>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	4013      	ands	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <UART_AdvFeatureConfig+0x15c>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	035b      	lsls	r3, r3, #13
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10b      	bne.n	8002aa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <UART_AdvFeatureConfig+0x160>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <UART_AdvFeatureConfig+0x164>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
  }
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	fffdffff 	.word	0xfffdffff
 8002ad0:	fffeffff 	.word	0xfffeffff
 8002ad4:	fffbffff 	.word	0xfffbffff
 8002ad8:	ffff7fff 	.word	0xffff7fff
 8002adc:	ffffefff 	.word	0xffffefff
 8002ae0:	ffffdfff 	.word	0xffffdfff
 8002ae4:	ffefffff 	.word	0xffefffff
 8002ae8:	ff9fffff 	.word	0xff9fffff
 8002aec:	fff7ffff 	.word	0xfff7ffff

08002af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002afe:	f7fe f89d 	bl	8000c3c <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d10d      	bne.n	8002b30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	0399      	lsls	r1, r3, #14
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <UART_CheckIdleState+0x88>)
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	0013      	movs	r3, r2
 8002b22:	2200      	movs	r2, #0
 8002b24:	f000 f82a 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e01f      	b.n	8002b70 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2204      	movs	r2, #4
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d10d      	bne.n	8002b5a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	03d9      	lsls	r1, r3, #15
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <UART_CheckIdleState+0x88>)
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f000 f815 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e00a      	b.n	8002b70 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2270      	movs	r2, #112	; 0x70
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	01ffffff 	.word	0x01ffffff

08002b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	1dfb      	adds	r3, r7, #7
 8002b8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8c:	e05d      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	3301      	adds	r3, #1
 8002b92:	d05a      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b94:	f7fe f852 	bl	8000c3c <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d302      	bcc.n	8002baa <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11b      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	492f      	ldr	r1, [pc, #188]	; (8002c74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2270      	movs	r2, #112	; 0x70
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e043      	b.n	8002c6a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2204      	movs	r2, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d02d      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d123      	bne.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4917      	ldr	r1, [pc, #92]	; (8002c74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2270      	movs	r2, #112	; 0x70
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e00f      	b.n	8002c6a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	4013      	ands	r3, r2
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	425a      	negs	r2, r3
 8002c5a:	4153      	adcs	r3, r2
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	001a      	movs	r2, r3
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d092      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b004      	add	sp, #16
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	fffffe5f 	.word	0xfffffe5f

08002c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <UART_EndRxTransfer+0x3c>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	fffffedf 	.word	0xfffffedf

08002cb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	225a      	movs	r2, #90	; 0x5a
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2252      	movs	r2, #82	; 0x52
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff fc97 	bl	800260c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff fc75 	bl	80025fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <__libc_init_array>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	2600      	movs	r6, #0
 8002d20:	4d0c      	ldr	r5, [pc, #48]	; (8002d54 <__libc_init_array+0x38>)
 8002d22:	4c0d      	ldr	r4, [pc, #52]	; (8002d58 <__libc_init_array+0x3c>)
 8002d24:	1b64      	subs	r4, r4, r5
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	42a6      	cmp	r6, r4
 8002d2a:	d109      	bne.n	8002d40 <__libc_init_array+0x24>
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	f000 f821 	bl	8002d74 <_init>
 8002d32:	4d0a      	ldr	r5, [pc, #40]	; (8002d5c <__libc_init_array+0x40>)
 8002d34:	4c0a      	ldr	r4, [pc, #40]	; (8002d60 <__libc_init_array+0x44>)
 8002d36:	1b64      	subs	r4, r4, r5
 8002d38:	10a4      	asrs	r4, r4, #2
 8002d3a:	42a6      	cmp	r6, r4
 8002d3c:	d105      	bne.n	8002d4a <__libc_init_array+0x2e>
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	00b3      	lsls	r3, r6, #2
 8002d42:	58eb      	ldr	r3, [r5, r3]
 8002d44:	4798      	blx	r3
 8002d46:	3601      	adds	r6, #1
 8002d48:	e7ee      	b.n	8002d28 <__libc_init_array+0xc>
 8002d4a:	00b3      	lsls	r3, r6, #2
 8002d4c:	58eb      	ldr	r3, [r5, r3]
 8002d4e:	4798      	blx	r3
 8002d50:	3601      	adds	r6, #1
 8002d52:	e7f2      	b.n	8002d3a <__libc_init_array+0x1e>
 8002d54:	08002dc4 	.word	0x08002dc4
 8002d58:	08002dc4 	.word	0x08002dc4
 8002d5c:	08002dc4 	.word	0x08002dc4
 8002d60:	08002dc8 	.word	0x08002dc8

08002d64 <memset>:
 8002d64:	0003      	movs	r3, r0
 8002d66:	1812      	adds	r2, r2, r0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <_init>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr

08002d80 <_fini>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr
