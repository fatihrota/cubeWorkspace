
stm32f030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08002e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08002e48  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000736c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000172f  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  00028ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  00029268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cc13  00000000  00000000  00029928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074d5  00000000  00000000  0003653b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004a827  00000000  00000000  0003da10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001978  00000000  00000000  000882b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002de4 	.word	0x08002de4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002de4 	.word	0x08002de4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fccc 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80f 	bl	8000246 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9a6 	bl	8000578 <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f97e 	bl	800052c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f8e6 	bl	8000400 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000234:	f000 f8c4 	bl	80003c0 <MX_IWDG_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f914 	bl	8000464 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 800023c:	f000 f944 	bl	80004c8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8000240:	f000 f862 	bl	8000308 <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x28>

08000246 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000246:	b590      	push	{r4, r7, lr}
 8000248:	b095      	sub	sp, #84	; 0x54
 800024a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024c:	2420      	movs	r4, #32
 800024e:	193b      	adds	r3, r7, r4
 8000250:	0018      	movs	r0, r3
 8000252:	2330      	movs	r3, #48	; 0x30
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 fdbc 	bl	8002dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	2310      	movs	r3, #16
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 fdb4 	bl	8002dd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	003b      	movs	r3, r7
 800026e:	0018      	movs	r0, r3
 8000270:	2310      	movs	r3, #16
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f002 fdad 	bl	8002dd4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800027a:	0021      	movs	r1, r4
 800027c:	187b      	adds	r3, r7, r1
 800027e:	221a      	movs	r2, #26
 8000280:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2201      	movs	r2, #1
 8000286:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2210      	movs	r2, #16
 8000298:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2201      	movs	r2, #1
 800029e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 fb23 	bl	80018f4 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002b2:	f000 f9f9 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	2110      	movs	r1, #16
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2100      	movs	r1, #0
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fe2b 	bl	8001f30 <HAL_RCC_ClockConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002de:	f000 f9e3 	bl	80006a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2201      	movs	r2, #1
 80002e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 ff71 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002fa:	f000 f9d5 	bl	80006a8 <Error_Handler>
  }
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b015      	add	sp, #84	; 0x54
 8000304:	bd90      	pop	{r4, r7, pc}
	...

08000308 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	230c      	movs	r3, #12
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f002 fd5c 	bl	8002dd4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <MX_ADC_Init+0xb0>)
 800031e:	4a27      	ldr	r2, [pc, #156]	; (80003bc <MX_ADC_Init+0xb4>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000322:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_ADC_Init+0xb0>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000336:	2201      	movs	r2, #1
 8000338:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_ADC_Init+0xb0>)
 800033c:	2204      	movs	r2, #4
 800033e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000342:	2200      	movs	r2, #0
 8000344:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000348:	2200      	movs	r2, #0
 800034a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_ADC_Init+0xb0>)
 800034e:	2201      	movs	r2, #1
 8000350:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000352:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000354:	2200      	movs	r2, #0
 8000356:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_ADC_Init+0xb0>)
 800035a:	22c2      	movs	r2, #194	; 0xc2
 800035c:	32ff      	adds	r2, #255	; 0xff
 800035e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000368:	2224      	movs	r2, #36	; 0x24
 800036a:	2100      	movs	r1, #0
 800036c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000370:	2201      	movs	r2, #1
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_ADC_Init+0xb0>)
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fc84 	bl	8000c84 <HAL_ADC_Init>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000380:	f000 f992 	bl	80006a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2208      	movs	r2, #8
 8000388:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	0152      	lsls	r2, r2, #5
 8000390:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0552      	lsls	r2, r2, #21
 8000398:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800039a:	1d3a      	adds	r2, r7, #4
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_ADC_Init+0xb0>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fdaf 	bl	8000f04 <HAL_ADC_ConfigChannel>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003aa:	f000 f97d 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b004      	add	sp, #16
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000240 	.word	0x20000240
 80003bc:	40012400 	.word	0x40012400

080003c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <MX_IWDG_Init+0x38>)
 80003c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <MX_IWDG_Init+0x3c>)
 80003d4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <MX_IWDG_Init+0x3c>)
 80003da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_IWDG_Init+0x34>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 fa3e 	bl	8001860 <HAL_IWDG_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80003e8:	f000 f95e 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40003000 	.word	0x40003000
 80003fc:	00000fff 	.word	0x00000fff

08000400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <MX_USART1_UART_Init+0x60>)
 8000408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800040c:	22e1      	movs	r2, #225	; 0xe1
 800040e:	0252      	lsls	r2, r2, #9
 8000410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800042c:	22c0      	movs	r2, #192	; 0xc0
 800042e:	0092      	lsls	r2, r2, #2
 8000430:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART1_UART_Init+0x5c>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_USART1_UART_Init+0x5c>)
 8000446:	0018      	movs	r0, r3
 8000448:	f001 ff94 	bl	8002374 <HAL_UART_Init>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000450:	f000 f92a 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	200000c0 	.word	0x200000c0
 8000460:	40013800 	.word	0x40013800

08000464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <MX_USART2_UART_Init+0x60>)
 800046c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000470:	22e1      	movs	r2, #225	; 0xe1
 8000472:	0252      	lsls	r2, r2, #9
 8000474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000490:	22c0      	movs	r2, #192	; 0xc0
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_USART2_UART_Init+0x5c>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 ff62 	bl	8002374 <HAL_UART_Init>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80004b4:	f000 f8f8 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200001c0 	.word	0x200001c0
 80004c4:	40004400 	.word	0x40004400

080004c8 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004ce:	4a16      	ldr	r2, [pc, #88]	; (8000528 <MX_USART4_UART_Init+0x60>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004d4:	22e1      	movs	r2, #225	; 0xe1
 80004d6:	0252      	lsls	r2, r2, #9
 80004d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004f4:	22c0      	movs	r2, #192	; 0xc0
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 8000502:	2200      	movs	r2, #0
 8000504:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 8000508:	2200      	movs	r2, #0
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_USART4_UART_Init+0x5c>)
 800050e:	0018      	movs	r0, r3
 8000510:	f001 ff30 	bl	8002374 <HAL_UART_Init>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_USART4_UART_Init+0x54>
  {
    Error_Handler();
 8000518:	f000 f8c6 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000140 	.word	0x20000140
 8000528:	40004c00 	.word	0x40004c00

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_DMA_Init+0x48>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_DMA_Init+0x48>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	615a      	str	r2, [r3, #20]
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_DMA_Init+0x48>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2009      	movs	r0, #9
 8000550:	f000 fe7a 	bl	8001248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000554:	2009      	movs	r0, #9
 8000556:	f000 fe8c 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	200b      	movs	r0, #11
 8000560:	f000 fe72 	bl	8001248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000564:	200b      	movs	r0, #11
 8000566:	f000 fe84 	bl	8001272 <HAL_NVIC_EnableIRQ>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	240c      	movs	r4, #12
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fc23 	bl	8002dd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b42      	ldr	r3, [pc, #264]	; (8000698 <MX_GPIO_Init+0x120>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b41      	ldr	r3, [pc, #260]	; (8000698 <MX_GPIO_Init+0x120>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0289      	lsls	r1, r1, #10
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <MX_GPIO_Init+0x120>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	029b      	lsls	r3, r3, #10
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <MX_GPIO_Init+0x120>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <MX_GPIO_Init+0x120>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0309      	lsls	r1, r1, #12
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <MX_GPIO_Init+0x120>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	031b      	lsls	r3, r3, #12
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b34      	ldr	r3, [pc, #208]	; (8000698 <MX_GPIO_Init+0x120>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <MX_GPIO_Init+0x120>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	02c9      	lsls	r1, r1, #11
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <MX_GPIO_Init+0x120>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	02db      	lsls	r3, r3, #11
 80005dc:	4013      	ands	r3, r2
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_GPIO_Init+0x124>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 f91b 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2210      	movs	r2, #16
 80005f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <MX_GPIO_Init+0x128>)
 80005f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	193a      	adds	r2, r7, r4
 8000602:	2390      	movs	r3, #144	; 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ff9b 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2220      	movs	r2, #32
 8000612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2202      	movs	r2, #2
 8000618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2203      	movs	r2, #3
 8000624:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	193a      	adds	r2, r7, r4
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f000 ff85 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800063a:	0021      	movs	r1, r4
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2220      	movs	r2, #32
 8000640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	000c      	movs	r4, r1
 8000656:	187b      	adds	r3, r7, r1
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <MX_GPIO_Init+0x124>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f000 ff71 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000662:	0021      	movs	r1, r4
 8000664:	187b      	adds	r3, r7, r1
 8000666:	22c0      	movs	r2, #192	; 0xc0
 8000668:	0092      	lsls	r2, r2, #2
 800066a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2212      	movs	r2, #18
 8000670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2203      	movs	r2, #3
 800067c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <MX_GPIO_Init+0x12c>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 ff5a 	bl	8001544 <HAL_GPIO_Init>

}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b009      	add	sp, #36	; 0x24
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800
 80006a0:	10110000 	.word	0x10110000
 80006a4:	48000400 	.word	0x48000400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	619a      	str	r2, [r3, #24]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	69da      	ldr	r2, [r3, #28]
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0549      	lsls	r1, r1, #21
 80006dc:	430a      	orrs	r2, r1
 80006de:	61da      	str	r2, [r3, #28]
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_MspInit+0x44>)
 80006e2:	69da      	ldr	r2, [r3, #28]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	055b      	lsls	r3, r3, #21
 80006e8:	4013      	ands	r3, r2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	2314      	movs	r3, #20
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f002 fb60 	bl	8002dd4 <memset>
  if(hadc->Instance==ADC1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_ADC_MspInit+0x84>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d12b      	bne.n	8000776 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <HAL_ADC_MspInit+0x88>)
 8000720:	699a      	ldr	r2, [r3, #24]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_ADC_MspInit+0x88>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0089      	lsls	r1, r1, #2
 8000728:	430a      	orrs	r2, r1
 800072a:	619a      	str	r2, [r3, #24]
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_ADC_MspInit+0x88>)
 800072e:	699a      	ldr	r2, [r3, #24]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_ADC_MspInit+0x88>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_ADC_MspInit+0x88>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	02c9      	lsls	r1, r1, #11
 8000744:	430a      	orrs	r2, r1
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_ADC_MspInit+0x88>)
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	02db      	lsls	r3, r3, #11
 8000750:	4013      	ands	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000756:	2114      	movs	r1, #20
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2203      	movs	r2, #3
 8000762:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	187b      	adds	r3, r7, r1
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_ADC_MspInit+0x8c>)
 800076e:	0019      	movs	r1, r3
 8000770:	0010      	movs	r0, r2
 8000772:	f000 fee7 	bl	8001544 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b00a      	add	sp, #40	; 0x28
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40012400 	.word	0x40012400
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b091      	sub	sp, #68	; 0x44
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	232c      	movs	r3, #44	; 0x2c
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f002 fb18 	bl	8002dd4 <memset>
  if(huart->Instance==USART1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4abb      	ldr	r2, [pc, #748]	; (8000a98 <HAL_UART_MspInit+0x30c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d000      	beq.n	80007b0 <HAL_UART_MspInit+0x24>
 80007ae:	e0a9      	b.n	8000904 <HAL_UART_MspInit+0x178>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b0:	4bba      	ldr	r3, [pc, #744]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80007b2:	699a      	ldr	r2, [r3, #24]
 80007b4:	4bb9      	ldr	r3, [pc, #740]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	01c9      	lsls	r1, r1, #7
 80007ba:	430a      	orrs	r2, r1
 80007bc:	619a      	str	r2, [r3, #24]
 80007be:	4bb7      	ldr	r3, [pc, #732]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80007c0:	699a      	ldr	r2, [r3, #24]
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	01db      	lsls	r3, r3, #7
 80007c6:	4013      	ands	r3, r2
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80007ca:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4bb3      	ldr	r3, [pc, #716]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	4bb2      	ldr	r3, [pc, #712]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	0289      	lsls	r1, r1, #10
 80007d6:	430a      	orrs	r2, r1
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	4bb0      	ldr	r3, [pc, #704]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	4013      	ands	r3, r2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007e8:	212c      	movs	r1, #44	; 0x2c
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	22f0      	movs	r2, #240	; 0xf0
 80007ee:	0152      	lsls	r2, r2, #5
 80007f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2202      	movs	r2, #2
 80007f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2203      	movs	r2, #3
 8000802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2201      	movs	r2, #1
 8000808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	187a      	adds	r2, r7, r1
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fe96 	bl	8001544 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000818:	4ba1      	ldr	r3, [pc, #644]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 800081a:	4aa2      	ldr	r2, [pc, #648]	; (8000aa4 <HAL_UART_MspInit+0x318>)
 800081c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081e:	4ba0      	ldr	r3, [pc, #640]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000824:	4b9e      	ldr	r3, [pc, #632]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800082a:	4b9d      	ldr	r3, [pc, #628]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000830:	4b9b      	ldr	r3, [pc, #620]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000836:	4b9a      	ldr	r3, [pc, #616]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800083c:	4b98      	ldr	r3, [pc, #608]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000842:	4b97      	ldr	r3, [pc, #604]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000848:	4b95      	ldr	r3, [pc, #596]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fd2e 	bl	80012ac <HAL_DMA_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000854:	f7ff ff28 	bl	80006a8 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000858:	4a93      	ldr	r2, [pc, #588]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 800085a:	23a8      	movs	r3, #168	; 0xa8
 800085c:	58d3      	ldr	r3, [r2, r3]
 800085e:	4992      	ldr	r1, [pc, #584]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 8000860:	220f      	movs	r2, #15
 8000862:	4393      	bics	r3, r2
 8000864:	22a8      	movs	r2, #168	; 0xa8
 8000866:	508b      	str	r3, [r1, r2]
 8000868:	4a8f      	ldr	r2, [pc, #572]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 800086a:	23a8      	movs	r3, #168	; 0xa8
 800086c:	58d3      	ldr	r3, [r2, r3]
 800086e:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 8000870:	2208      	movs	r2, #8
 8000872:	4313      	orrs	r3, r2
 8000874:	22a8      	movs	r2, #168	; 0xa8
 8000876:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a89      	ldr	r2, [pc, #548]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 800087c:	66da      	str	r2, [r3, #108]	; 0x6c
 800087e:	4b88      	ldr	r3, [pc, #544]	; (8000aa0 <HAL_UART_MspInit+0x314>)
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000884:	4b89      	ldr	r3, [pc, #548]	; (8000aac <HAL_UART_MspInit+0x320>)
 8000886:	4a8a      	ldr	r2, [pc, #552]	; (8000ab0 <HAL_UART_MspInit+0x324>)
 8000888:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088a:	4b88      	ldr	r3, [pc, #544]	; (8000aac <HAL_UART_MspInit+0x320>)
 800088c:	2210      	movs	r2, #16
 800088e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000890:	4b86      	ldr	r3, [pc, #536]	; (8000aac <HAL_UART_MspInit+0x320>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000896:	4b85      	ldr	r3, [pc, #532]	; (8000aac <HAL_UART_MspInit+0x320>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800089c:	4b83      	ldr	r3, [pc, #524]	; (8000aac <HAL_UART_MspInit+0x320>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a2:	4b82      	ldr	r3, [pc, #520]	; (8000aac <HAL_UART_MspInit+0x320>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008a8:	4b80      	ldr	r3, [pc, #512]	; (8000aac <HAL_UART_MspInit+0x320>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008ae:	4b7f      	ldr	r3, [pc, #508]	; (8000aac <HAL_UART_MspInit+0x320>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008b4:	4b7d      	ldr	r3, [pc, #500]	; (8000aac <HAL_UART_MspInit+0x320>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fcf8 	bl	80012ac <HAL_DMA_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80008c0:	f7ff fef2 	bl	80006a8 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 80008c4:	4a78      	ldr	r2, [pc, #480]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 80008c6:	23a8      	movs	r3, #168	; 0xa8
 80008c8:	58d3      	ldr	r3, [r2, r3]
 80008ca:	4977      	ldr	r1, [pc, #476]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 80008cc:	4a79      	ldr	r2, [pc, #484]	; (8000ab4 <HAL_UART_MspInit+0x328>)
 80008ce:	4013      	ands	r3, r2
 80008d0:	22a8      	movs	r2, #168	; 0xa8
 80008d2:	508b      	str	r3, [r1, r2]
 80008d4:	4a74      	ldr	r2, [pc, #464]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 80008d6:	23a8      	movs	r3, #168	; 0xa8
 80008d8:	58d3      	ldr	r3, [r2, r3]
 80008da:	4973      	ldr	r1, [pc, #460]	; (8000aa8 <HAL_UART_MspInit+0x31c>)
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	0212      	lsls	r2, r2, #8
 80008e0:	4313      	orrs	r3, r2
 80008e2:	22a8      	movs	r2, #168	; 0xa8
 80008e4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a70      	ldr	r2, [pc, #448]	; (8000aac <HAL_UART_MspInit+0x320>)
 80008ea:	669a      	str	r2, [r3, #104]	; 0x68
 80008ec:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <HAL_UART_MspInit+0x320>)
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	201b      	movs	r0, #27
 80008f8:	f000 fca6 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008fc:	201b      	movs	r0, #27
 80008fe:	f000 fcb8 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000902:	e0c5      	b.n	8000a90 <HAL_UART_MspInit+0x304>
  else if(huart->Instance==USART2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a6b      	ldr	r2, [pc, #428]	; (8000ab8 <HAL_UART_MspInit+0x32c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d133      	bne.n	8000976 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <HAL_UART_MspInit+0x310>)
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <HAL_UART_MspInit+0x310>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0289      	lsls	r1, r1, #10
 8000918:	430a      	orrs	r2, r1
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <HAL_UART_MspInit+0x310>)
 800091e:	69da      	ldr	r2, [r3, #28]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	4013      	ands	r3, r2
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <HAL_UART_MspInit+0x310>)
 800092c:	695a      	ldr	r2, [r3, #20]
 800092e:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <HAL_UART_MspInit+0x310>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0289      	lsls	r1, r1, #10
 8000934:	430a      	orrs	r2, r1
 8000936:	615a      	str	r2, [r3, #20]
 8000938:	4b58      	ldr	r3, [pc, #352]	; (8000a9c <HAL_UART_MspInit+0x310>)
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	029b      	lsls	r3, r3, #10
 8000940:	4013      	ands	r3, r2
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000946:	212c      	movs	r1, #44	; 0x2c
 8000948:	187b      	adds	r3, r7, r1
 800094a:	220f      	movs	r2, #15
 800094c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2202      	movs	r2, #2
 8000952:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2203      	movs	r2, #3
 800095e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2201      	movs	r2, #1
 8000964:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	187a      	adds	r2, r7, r1
 8000968:	2390      	movs	r3, #144	; 0x90
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fde8 	bl	8001544 <HAL_GPIO_Init>
}
 8000974:	e08c      	b.n	8000a90 <HAL_UART_MspInit+0x304>
  else if(huart->Instance==USART4)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a50      	ldr	r2, [pc, #320]	; (8000abc <HAL_UART_MspInit+0x330>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d000      	beq.n	8000982 <HAL_UART_MspInit+0x1f6>
 8000980:	e086      	b.n	8000a90 <HAL_UART_MspInit+0x304>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000982:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <HAL_UART_MspInit+0x310>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <HAL_UART_MspInit+0x310>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0309      	lsls	r1, r1, #12
 800098c:	430a      	orrs	r2, r1
 800098e:	61da      	str	r2, [r3, #28]
 8000990:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <HAL_UART_MspInit+0x310>)
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	031b      	lsls	r3, r3, #12
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0289      	lsls	r1, r1, #10
 80009a8:	430a      	orrs	r2, r1
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	029b      	lsls	r3, r3, #10
 80009b4:	4013      	ands	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0309      	lsls	r1, r1, #12
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	031b      	lsls	r3, r3, #12
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	02c9      	lsls	r1, r1, #11
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_UART_MspInit+0x310>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	02db      	lsls	r3, r3, #11
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009f2:	212c      	movs	r1, #44	; 0x2c
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0212      	lsls	r2, r2, #8
 80009fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2204      	movs	r2, #4
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	000c      	movs	r4, r1
 8000a16:	187a      	adds	r2, r7, r1
 8000a18:	2390      	movs	r3, #144	; 0x90
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fd90 	bl	8001544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	22c0      	movs	r2, #192	; 0xc0
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2202      	movs	r2, #2
 8000a32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a46:	000c      	movs	r4, r1
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_UART_MspInit+0x334>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 fd78 	bl	8001544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a54:	0021      	movs	r1, r4
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2202      	movs	r2, #2
 8000a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2204      	movs	r2, #4
 8000a72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_UART_MspInit+0x338>)
 8000a78:	0019      	movs	r1, r3
 8000a7a:	0010      	movs	r0, r2
 8000a7c:	f000 fd62 	bl	8001544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	201d      	movs	r0, #29
 8000a86:	f000 fbdf 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000a8a:	201d      	movs	r0, #29
 8000a8c:	f000 fbf1 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b011      	add	sp, #68	; 0x44
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	2000007c 	.word	0x2000007c
 8000aa4:	40020008 	.word	0x40020008
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	20000038 	.word	0x20000038
 8000ab0:	40020044 	.word	0x40020044
 8000ab4:	ffff0fff 	.word	0xffff0fff
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40004c00 	.word	0x40004c00
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f8ac 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <DMA1_Channel1_IRQHandler+0x14>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fc60 	bl	80013c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	2000007c 	.word	0x2000007c

08000b14 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fc54 	bl	80013c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000038 	.word	0x20000038

08000b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <USART1_IRQHandler+0x14>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 fc72 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	200000c0 	.word	0x200000c0

08000b44 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <USART3_6_IRQHandler+0x14>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fc66 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000140 	.word	0x20000140

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b92:	f7ff ffe3 	bl	8000b5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b96:	f002 f8f9 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9a:	f7ff fb3f 	bl	800021c <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   r0, =_estack
 8000ba0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	08002e3c 	.word	0x08002e3c
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	20000284 	.word	0x20000284

08000bb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_IRQHandler>
	...

08000bbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_Init+0x24>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_Init+0x24>)
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f809 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd2:	f7ff fd6f 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x5c>)
 8000bee:	681c      	ldr	r4, [r3, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	23fa      	movs	r3, #250	; 0xfa
 8000bf8:	0098      	lsls	r0, r3, #2
 8000bfa:	f7ff fa83 	bl	8000104 <__udivsi3>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	0019      	movs	r1, r3
 8000c02:	0020      	movs	r0, r4
 8000c04:	f7ff fa7e 	bl	8000104 <__udivsi3>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 fb41 	bl	8001292 <HAL_SYSTICK_Config>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e00f      	b.n	8000c38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d80b      	bhi.n	8000c36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	425b      	negs	r3, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fb0e 	bl	8001248 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_InitTick+0x64>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000280 	.word	0x20000280

08000c70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000280 	.word	0x20000280

08000c84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e125      	b.n	8000eee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10a      	bne.n	8000cc0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2234      	movs	r2, #52	; 0x34
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fd1e 	bl	80006fc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d000      	beq.n	8000ccc <HAL_ADC_Init+0x48>
 8000cca:	e103      	b.n	8000ed4 <HAL_ADC_Init+0x250>
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d000      	beq.n	8000cd8 <HAL_ADC_Init+0x54>
 8000cd6:	e0fd      	b.n	8000ed4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000ce2:	d000      	beq.n	8000ce6 <HAL_ADC_Init+0x62>
 8000ce4:	e0f6      	b.n	8000ed4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cea:	4a83      	ldr	r2, [pc, #524]	; (8000ef8 <HAL_ADC_Init+0x274>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	2202      	movs	r2, #2
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d112      	bne.n	8000d2a <HAL_ADC_Init+0xa6>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d009      	beq.n	8000d26 <HAL_ADC_Init+0xa2>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d101      	bne.n	8000d2a <HAL_ADC_Init+0xa6>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_ADC_Init+0xa8>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d116      	bne.n	8000d5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2218      	movs	r2, #24
 8000d38:	4393      	bics	r3, r2
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	0899      	lsrs	r1, r3, #2
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4964      	ldr	r1, [pc, #400]	; (8000efc <HAL_ADC_Init+0x278>)
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7e1b      	ldrb	r3, [r3, #24]
 8000d72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e5b      	ldrb	r3, [r3, #25]
 8000d78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e9b      	ldrb	r3, [r3, #26]
 8000d80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <HAL_ADC_Init+0x10e>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	015b      	lsls	r3, r3, #5
 8000d90:	e000      	b.n	8000d94 <HAL_ADC_Init+0x110>
 8000d92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_Init+0x124>
 8000da4:	2304      	movs	r3, #4
 8000da6:	e000      	b.n	8000daa <HAL_ADC_Init+0x126>
 8000da8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000daa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2124      	movs	r1, #36	; 0x24
 8000db0:	5c5b      	ldrb	r3, [r3, r1]
 8000db2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000db4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7edb      	ldrb	r3, [r3, #27]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d115      	bne.n	8000df0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e9b      	ldrb	r3, [r3, #26]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	0252      	lsls	r2, r2, #9
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	e00b      	b.n	8000df0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ddc:	2220      	movs	r2, #32
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de8:	2201      	movs	r2, #1
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69da      	ldr	r2, [r3, #28]
 8000df4:	23c2      	movs	r3, #194	; 0xc2
 8000df6:	33ff      	adds	r3, #255	; 0xff
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d007      	beq.n	8000e0c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e04:	4313      	orrs	r3, r2
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68d9      	ldr	r1, [r3, #12]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	055b      	lsls	r3, r3, #21
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d01b      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d017      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d013      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d00f      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d00b      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d007      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	d003      	beq.n	8000e60 <HAL_ADC_Init+0x1dc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d112      	bne.n	8000e86 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2107      	movs	r1, #7
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6959      	ldr	r1, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <HAL_ADC_Init+0x27c>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d10b      	bne.n	8000eae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eac:	e01c      	b.n	8000ee8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb2:	2212      	movs	r2, #18
 8000eb4:	4393      	bics	r3, r2
 8000eb6:	2210      	movs	r2, #16
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ed2:	e009      	b.n	8000ee8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed8:	2210      	movs	r2, #16
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	781b      	ldrb	r3, [r3, #0]
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	fffffefd 	.word	0xfffffefd
 8000efc:	fffe0219 	.word	0xfffe0219
 8000f00:	833fffe7 	.word	0x833fffe7

08000f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0e:	230f      	movs	r3, #15
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	055b      	lsls	r3, r3, #21
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d011      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x46>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d00d      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x46>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d009      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x46>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d005      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x46>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d001      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x46>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2234      	movs	r2, #52	; 0x34
 8000f4e:	5c9b      	ldrb	r3, [r3, r2]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d101      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x54>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e0bb      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x1cc>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2204      	movs	r2, #4
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d000      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x6a>
 8000f6c:	e09f      	b.n	80010ae <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a59      	ldr	r2, [pc, #356]	; (80010d8 <HAL_ADC_ConfigChannel+0x1d4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x76>
 8000f78:	e077      	b.n	800106a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2201      	movs	r2, #1
 8000f86:	409a      	lsls	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	055b      	lsls	r3, r3, #21
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d037      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d033      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d02f      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d02b      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d027      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d023      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	d01f      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d01b      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	2107      	movs	r1, #7
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d012      	beq.n	800100c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6959      	ldr	r1, [r3, #20]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2207      	movs	r2, #7
 8001002:	401a      	ands	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b10      	cmp	r3, #16
 8001012:	d003      	beq.n	800101c <HAL_ADC_ConfigChannel+0x118>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b11      	cmp	r3, #17
 800101a:	d152      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_ADC_ConfigChannel+0x1d8>)
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b10      	cmp	r3, #16
 8001026:	d102      	bne.n	800102e <HAL_ADC_ConfigChannel+0x12a>
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	e001      	b.n	8001032 <HAL_ADC_ConfigChannel+0x12e>
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	03db      	lsls	r3, r3, #15
 8001032:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <HAL_ADC_ConfigChannel+0x1d8>)
 8001034:	430b      	orrs	r3, r1
 8001036:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b10      	cmp	r3, #16
 800103e:	d140      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_ADC_ConfigChannel+0x1dc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_ADC_ConfigChannel+0x1e0>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff f85c 	bl	8000104 <__udivsi3>
 800104c:	0003      	movs	r3, r0
 800104e:	001a      	movs	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	189b      	adds	r3, r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800105a:	e002      	b.n	8001062 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3b01      	subs	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f9      	bne.n	800105c <HAL_ADC_ConfigChannel+0x158>
 8001068:	e02b      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	4099      	lsls	r1, r3
 8001078:	000b      	movs	r3, r1
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	400a      	ands	r2, r1
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b10      	cmp	r3, #16
 800108a:	d003      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x190>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b11      	cmp	r3, #17
 8001092:	d116      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_ADC_ConfigChannel+0x1d8>)
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b10      	cmp	r3, #16
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1a0>
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_ADC_ConfigChannel+0x1e4>)
 80010a2:	e000      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x1a2>
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_ADC_ConfigChannel+0x1e8>)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_ADC_ConfigChannel+0x1d8>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e009      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	2220      	movs	r2, #32
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80010ba:	230f      	movs	r3, #15
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2234      	movs	r2, #52	; 0x34
 80010c6:	2100      	movs	r1, #0
 80010c8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010ca:	230f      	movs	r3, #15
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	781b      	ldrb	r3, [r3, #0]
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	00001001 	.word	0x00001001
 80010dc:	40012708 	.word	0x40012708
 80010e0:	20000000 	.word	0x20000000
 80010e4:	000f4240 	.word	0x000f4240
 80010e8:	ff7fffff 	.word	0xff7fffff
 80010ec:	ffbfffff 	.word	0xffbfffff

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b7f      	cmp	r3, #127	; 0x7f
 8001102:	d809      	bhi.n	8001118 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	001a      	movs	r2, r3
 800110a:	231f      	movs	r3, #31
 800110c:	401a      	ands	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_EnableIRQ+0x30>)
 8001110:	2101      	movs	r1, #1
 8001112:	4091      	lsls	r1, r2
 8001114:	000a      	movs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
  }
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b7f      	cmp	r3, #127	; 0x7f
 8001138:	d828      	bhi.n	800118c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25b      	sxtb	r3, r3
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	33c0      	adds	r3, #192	; 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	589b      	ldr	r3, [r3, r2]
 800114a:	1dfa      	adds	r2, r7, #7
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	0011      	movs	r1, r2
 8001150:	2203      	movs	r2, #3
 8001152:	400a      	ands	r2, r1
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	21ff      	movs	r1, #255	; 0xff
 8001158:	4091      	lsls	r1, r2
 800115a:	000a      	movs	r2, r1
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	2303      	movs	r3, #3
 8001172:	4003      	ands	r3, r0
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	481f      	ldr	r0, [pc, #124]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	33c0      	adds	r3, #192	; 0xc0
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800118a:	e031      	b.n	80011f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <__NVIC_SetPriority+0xd8>)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0019      	movs	r1, r3
 8001194:	230f      	movs	r3, #15
 8001196:	400b      	ands	r3, r1
 8001198:	3b08      	subs	r3, #8
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3306      	adds	r3, #6
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	3304      	adds	r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1dfa      	adds	r2, r7, #7
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	2203      	movs	r2, #3
 80011ae:	400a      	ands	r2, r1
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	43d2      	mvns	r2, r2
 80011ba:	401a      	ands	r2, r3
 80011bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	401a      	ands	r2, r3
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	4003      	ands	r3, r0
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <__NVIC_SetPriority+0xd8>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	001c      	movs	r4, r3
 80011dc:	230f      	movs	r3, #15
 80011de:	4023      	ands	r3, r4
 80011e0:	3b08      	subs	r3, #8
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	430a      	orrs	r2, r1
 80011e6:	3306      	adds	r3, #6
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	18c3      	adds	r3, r0, r3
 80011ec:	3304      	adds	r3, #4
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b003      	add	sp, #12
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <SysTick_Config+0x40>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e010      	b.n	8001238 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <SysTick_Config+0x44>)
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	3a01      	subs	r2, #1
 800121c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	2301      	movs	r3, #1
 8001220:	425b      	negs	r3, r3
 8001222:	2103      	movs	r1, #3
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff7d 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SysTick_Config+0x44>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x44>)
 8001232:	2207      	movs	r2, #7
 8001234:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001236:	2300      	movs	r3, #0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	00ffffff 	.word	0x00ffffff
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	210f      	movs	r1, #15
 8001254:	187b      	adds	r3, r7, r1
 8001256:	1c02      	adds	r2, r0, #0
 8001258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	187b      	adds	r3, r7, r1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	0011      	movs	r1, r2
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	0002      	movs	r2, r0
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ffaf 	bl	8001200 <SysTick_Config>
 80012a2:	0003      	movs	r3, r0
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e036      	b.n	8001330 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2221      	movs	r2, #33	; 0x21
 80012c6:	2102      	movs	r1, #2
 80012c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_DMA_Init+0x8c>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0018      	movs	r0, r3
 8001314:	f000 f8fa 	bl	800150c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2221      	movs	r2, #33	; 0x21
 8001322:	2101      	movs	r1, #1
 8001324:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	2100      	movs	r1, #0
 800132c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}  
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}
 8001338:	ffffc00f 	.word	0xffffc00f

0800133c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	230f      	movs	r3, #15
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2221      	movs	r2, #33	; 0x21
 8001350:	5c9b      	ldrb	r3, [r3, r2]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d007      	beq.n	8001368 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2204      	movs	r2, #4
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800135e:	230f      	movs	r3, #15
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e028      	b.n	80013ba <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	210e      	movs	r1, #14
 8001374:	438a      	bics	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2101      	movs	r1, #1
 8001384:	438a      	bics	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	2101      	movs	r1, #1
 8001392:	4091      	lsls	r1, r2
 8001394:	000a      	movs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2221      	movs	r2, #33	; 0x21
 800139c:	2101      	movs	r1, #1
 800139e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	2100      	movs	r1, #0
 80013a6:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	0010      	movs	r0, r2
 80013b8:	4798      	blx	r3
    } 
  }
  return status;
 80013ba:	230f      	movs	r3, #15
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	781b      	ldrb	r3, [r3, #0]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b004      	add	sp, #16
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	2204      	movs	r2, #4
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	d024      	beq.n	800143a <HAL_DMA_IRQHandler+0x72>
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d020      	beq.n	800143a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2220      	movs	r2, #32
 8001400:	4013      	ands	r3, r2
 8001402:	d107      	bne.n	8001414 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2104      	movs	r1, #4
 8001410:	438a      	bics	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	2104      	movs	r1, #4
 800141e:	4091      	lsls	r1, r2
 8001420:	000a      	movs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d100      	bne.n	800142e <HAL_DMA_IRQHandler+0x66>
 800142c:	e06a      	b.n	8001504 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	0010      	movs	r0, r2
 8001436:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001438:	e064      	b.n	8001504 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2202      	movs	r2, #2
 8001440:	409a      	lsls	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xda>
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	d027      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2220      	movs	r2, #32
 800145a:	4013      	ands	r3, r2
 800145c:	d10b      	bne.n	8001476 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	210a      	movs	r1, #10
 800146a:	438a      	bics	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2221      	movs	r2, #33	; 0x21
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	2102      	movs	r1, #2
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2220      	movs	r2, #32
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	2b00      	cmp	r3, #0
 8001494:	d036      	beq.n	8001504 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	0010      	movs	r0, r2
 800149e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80014a0:	e030      	b.n	8001504 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2208      	movs	r2, #8
 80014a8:	409a      	lsls	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	d028      	beq.n	8001504 <HAL_DMA_IRQHandler+0x13c>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2208      	movs	r2, #8
 80014b6:	4013      	ands	r3, r2
 80014b8:	d024      	beq.n	8001504 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	210e      	movs	r1, #14
 80014c6:	438a      	bics	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d2:	2101      	movs	r1, #1
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2221      	movs	r2, #33	; 0x21
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	2100      	movs	r1, #0
 80014ee:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	0010      	movs	r0, r2
 8001500:	4798      	blx	r3
    }
   }
}  
 8001502:	e7ff      	b.n	8001504 <HAL_DMA_IRQHandler+0x13c>
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}

0800150c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a08      	ldr	r2, [pc, #32]	; (800153c <DMA_CalcBaseAndBitshift+0x30>)
 800151a:	4694      	mov	ip, r2
 800151c:	4463      	add	r3, ip
 800151e:	2114      	movs	r1, #20
 8001520:	0018      	movs	r0, r3
 8001522:	f7fe fdef 	bl	8000104 <__udivsi3>
 8001526:	0003      	movs	r3, r0
 8001528:	009a      	lsls	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <DMA_CalcBaseAndBitshift+0x34>)
 8001532:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}
 800153c:	bffdfff8 	.word	0xbffdfff8
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e14f      	b.n	80017f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4091      	lsls	r1, r2
 800155e:	000a      	movs	r2, r1
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d100      	bne.n	800156c <HAL_GPIO_Init+0x28>
 800156a:	e140      	b.n	80017ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x38>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	58d3      	ldr	r3, [r2, r3]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2207      	movs	r2, #7
 800158e:	4013      	ands	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2107      	movs	r1, #7
 80015a8:	400b      	ands	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	409a      	lsls	r2, r3
 80015ae:	0013      	movs	r3, r2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	6939      	ldr	r1, [r7, #16]
 80015c2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	409a      	lsls	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2203      	movs	r2, #3
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	409a      	lsls	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d00b      	beq.n	8001618 <HAL_GPIO_Init+0xd4>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160c:	2b11      	cmp	r3, #17
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b12      	cmp	r3, #18
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	409a      	lsls	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	43da      	mvns	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	409a      	lsls	r2, r3
 800163a:	0013      	movs	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	2201      	movs	r2, #1
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	43da      	mvns	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	055b      	lsls	r3, r3, #21
 80016b2:	4013      	ands	r3, r2
 80016b4:	d100      	bne.n	80016b8 <HAL_GPIO_Init+0x174>
 80016b6:	e09a      	b.n	80017ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b8:	4b54      	ldr	r3, [pc, #336]	; (800180c <HAL_GPIO_Init+0x2c8>)
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_GPIO_Init+0x2c8>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_GPIO_Init+0x2c8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d0:	4a4f      	ldr	r2, [pc, #316]	; (8001810 <HAL_GPIO_Init+0x2cc>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	589b      	ldr	r3, [r3, r2]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	409a      	lsls	r2, r3
 80016ea:	0013      	movs	r3, r2
 80016ec:	43da      	mvns	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	2390      	movs	r3, #144	; 0x90
 80016f8:	05db      	lsls	r3, r3, #23
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x1e2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a44      	ldr	r2, [pc, #272]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x1de>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a43      	ldr	r2, [pc, #268]	; (8001818 <HAL_GPIO_Init+0x2d4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x1da>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a42      	ldr	r2, [pc, #264]	; (800181c <HAL_GPIO_Init+0x2d8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x1d6>
 8001716:	2303      	movs	r3, #3
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x1e4>
 800171a:	2305      	movs	r3, #5
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x1e4>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x1e4>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x1e4>
 8001726:	2300      	movs	r3, #0
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	2103      	movs	r1, #3
 800172c:	400a      	ands	r2, r1
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001738:	4935      	ldr	r1, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x2cc>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43da      	mvns	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	4013      	ands	r3, r2
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43da      	mvns	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	035b      	lsls	r3, r3, #13
 80017b2:	4013      	ands	r3, r2
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43da      	mvns	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	039b      	lsls	r3, r3, #14
 80017dc:	4013      	ands	r3, r2
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	1e13      	subs	r3, r2, #0
 80017fe:	d000      	beq.n	8001802 <HAL_GPIO_Init+0x2be>
 8001800:	e6a8      	b.n	8001554 <HAL_GPIO_Init+0x10>
  } 
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b006      	add	sp, #24
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	48000400 	.word	0x48000400
 8001818:	48000800 	.word	0x48000800
 800181c:	48000c00 	.word	0x48000c00
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	0008      	movs	r0, r1
 800182e:	0011      	movs	r1, r2
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	1c02      	adds	r2, r0, #0
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	1c7b      	adds	r3, r7, #1
 8001838:	1c0a      	adds	r2, r1, #0
 800183a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183c:	1c7b      	adds	r3, r7, #1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001844:	1cbb      	adds	r3, r7, #2
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184e:	1cbb      	adds	r3, r7, #2
 8001850:	881a      	ldrh	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e036      	b.n	80018e0 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <HAL_IWDG_Init+0x88>)
 8001878:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <HAL_IWDG_Init+0x8c>)
 8001880:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6852      	ldr	r2, [r2, #4]
 800188a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6892      	ldr	r2, [r2, #8]
 8001894:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001896:	f7ff f9eb 	bl	8000c70 <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800189e:	e008      	b.n	80018b2 <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80018a0:	f7ff f9e6 	bl	8000c70 <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b30      	cmp	r3, #48	; 0x30
 80018ac:	d901      	bls.n	80018b2 <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e016      	b.n	80018e0 <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f1      	bne.n	80018a0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d005      	beq.n	80018d6 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68d2      	ldr	r2, [r2, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	e003      	b.n	80018de <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <HAL_IWDG_Init+0x90>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0000cccc 	.word	0x0000cccc
 80018ec:	00005555 	.word	0x00005555
 80018f0:	0000aaaa 	.word	0x0000aaaa

080018f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e305      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2201      	movs	r2, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x1e>
 8001910:	e08d      	b.n	8001a2e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001912:	4bc5      	ldr	r3, [pc, #788]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	2b04      	cmp	r3, #4
 800191c:	d00e      	beq.n	800193c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800191e:	4bc2      	ldr	r3, [pc, #776]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	220c      	movs	r2, #12
 8001924:	4013      	ands	r3, r2
 8001926:	2b08      	cmp	r3, #8
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x64>
 800192a:	4bbf      	ldr	r3, [pc, #764]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	025b      	lsls	r3, r3, #9
 8001932:	401a      	ands	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	429a      	cmp	r2, r3
 800193a:	d10d      	bne.n	8001958 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4bba      	ldr	r3, [pc, #744]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x56>
 8001948:	e070      	b.n	8001a2c <HAL_RCC_OscConfig+0x138>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d000      	beq.n	8001954 <HAL_RCC_OscConfig+0x60>
 8001952:	e06b      	b.n	8001a2c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e2dc      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x7c>
 8001960:	4bb1      	ldr	r3, [pc, #708]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4bb0      	ldr	r3, [pc, #704]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0249      	lsls	r1, r1, #9
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e02f      	b.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x9e>
 8001978:	4bab      	ldr	r3, [pc, #684]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4baa      	ldr	r3, [pc, #680]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800197e:	49ab      	ldr	r1, [pc, #684]	; (8001c2c <HAL_RCC_OscConfig+0x338>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4ba8      	ldr	r3, [pc, #672]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4ba7      	ldr	r3, [pc, #668]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800198a:	49a9      	ldr	r1, [pc, #676]	; (8001c30 <HAL_RCC_OscConfig+0x33c>)
 800198c:	400a      	ands	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e01e      	b.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10e      	bne.n	80019b8 <HAL_RCC_OscConfig+0xc4>
 800199a:	4ba3      	ldr	r3, [pc, #652]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4ba2      	ldr	r3, [pc, #648]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	02c9      	lsls	r1, r1, #11
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	4b9f      	ldr	r3, [pc, #636]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b9e      	ldr	r3, [pc, #632]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	0249      	lsls	r1, r1, #9
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 80019b8:	4b9b      	ldr	r3, [pc, #620]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b9a      	ldr	r3, [pc, #616]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019be:	499b      	ldr	r1, [pc, #620]	; (8001c2c <HAL_RCC_OscConfig+0x338>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019ca:	4999      	ldr	r1, [pc, #612]	; (8001c30 <HAL_RCC_OscConfig+0x33c>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d014      	beq.n	8001a02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f94a 	bl	8000c70 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff f945 	bl	8000c70 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e28e      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	029b      	lsls	r3, r3, #10
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0xee>
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f935 	bl	8000c70 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f930 	bl	8000c70 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e279      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	029b      	lsls	r3, r3, #10
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x118>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2202      	movs	r2, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d100      	bne.n	8001a3a <HAL_RCC_OscConfig+0x146>
 8001a38:	e06c      	b.n	8001b14 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	d00e      	beq.n	8001a62 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d11f      	bne.n	8001a90 <HAL_RCC_OscConfig+0x19c>
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	23c0      	movs	r3, #192	; 0xc0
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	401a      	ands	r2, r3
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x184>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e24c      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	22f8      	movs	r2, #248	; 0xf8
 8001a7e:	4393      	bics	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00da      	lsls	r2, r3, #3
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e041      	b.n	8001b14 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d024      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f8e4 	bl	8000c70 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff f8df 	bl	8000c70 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e228      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0f1      	beq.n	8001aae <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	22f8      	movs	r2, #248	; 0xf8
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00da      	lsls	r2, r3, #3
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	438a      	bics	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff f8bf 	bl	8000c70 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f8ba 	bl	8000c70 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e203      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d1f1      	bne.n	8001af8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d019      	beq.n	8001b5a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f89d 	bl	8000c70 <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f898 	bl	8000c70 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1e1      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0f1      	beq.n	8001b3c <HAL_RCC_OscConfig+0x248>
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5e:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b60:	2101      	movs	r1, #1
 8001b62:	438a      	bics	r2, r1
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff f883 	bl	8000c70 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff f87e 	bl	8000c70 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1c7      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d1f1      	bne.n	8001b70 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2204      	movs	r2, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2a4>
 8001b96:	e0b5      	b.n	8001d04 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b98:	231f      	movs	r3, #31
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	055b      	lsls	r3, r3, #21
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	0549      	lsls	r1, r1, #21
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	61da      	str	r2, [r3, #28]
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	055b      	lsls	r3, r3, #21
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bc8:	231f      	movs	r3, #31
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_RCC_OscConfig+0x340>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d11a      	bne.n	8001c12 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_RCC_OscConfig+0x340>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_RCC_OscConfig+0x340>)
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	0049      	lsls	r1, r1, #1
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff f841 	bl	8000c70 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7ff f83c 	bl	8000c70 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e185      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_OscConfig+0x340>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10e      	bne.n	8001c38 <HAL_RCC_OscConfig+0x344>
 8001c1a:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001c1c:	6a1a      	ldr	r2, [r3, #32]
 8001c1e:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	621a      	str	r2, [r3, #32]
 8001c26:	e035      	b.n	8001c94 <HAL_RCC_OscConfig+0x3a0>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	fffeffff 	.word	0xfffeffff
 8001c30:	fffbffff 	.word	0xfffbffff
 8001c34:	40007000 	.word	0x40007000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x366>
 8001c40:	4bb6      	ldr	r3, [pc, #728]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c42:	6a1a      	ldr	r2, [r3, #32]
 8001c44:	4bb5      	ldr	r3, [pc, #724]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	438a      	bics	r2, r1
 8001c4a:	621a      	str	r2, [r3, #32]
 8001c4c:	4bb3      	ldr	r3, [pc, #716]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	4bb2      	ldr	r3, [pc, #712]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c52:	2104      	movs	r1, #4
 8001c54:	438a      	bics	r2, r1
 8001c56:	621a      	str	r2, [r3, #32]
 8001c58:	e01c      	b.n	8001c94 <HAL_RCC_OscConfig+0x3a0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x388>
 8001c62:	4bae      	ldr	r3, [pc, #696]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	4bad      	ldr	r3, [pc, #692]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c68:	2104      	movs	r1, #4
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	621a      	str	r2, [r3, #32]
 8001c6e:	4bab      	ldr	r3, [pc, #684]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c70:	6a1a      	ldr	r2, [r3, #32]
 8001c72:	4baa      	ldr	r3, [pc, #680]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	621a      	str	r2, [r3, #32]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0x3a0>
 8001c7c:	4ba7      	ldr	r3, [pc, #668]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	4ba6      	ldr	r3, [pc, #664]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	438a      	bics	r2, r1
 8001c86:	621a      	str	r2, [r3, #32]
 8001c88:	4ba4      	ldr	r3, [pc, #656]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	4ba3      	ldr	r3, [pc, #652]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001c8e:	2104      	movs	r1, #4
 8001c90:	438a      	bics	r2, r1
 8001c92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d014      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ffe8 	bl	8000c70 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe ffe3 	bl	8000c70 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a9b      	ldr	r2, [pc, #620]	; (8001f20 <HAL_RCC_OscConfig+0x62c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e12b      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	4b98      	ldr	r3, [pc, #608]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3b2>
 8001cc4:	e013      	b.n	8001cee <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7fe ffd3 	bl	8000c70 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cce:	e009      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe ffce 	bl	8000c70 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4a91      	ldr	r2, [pc, #580]	; (8001f20 <HAL_RCC_OscConfig+0x62c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e116      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce4:	4b8d      	ldr	r3, [pc, #564]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cee:	231f      	movs	r3, #31
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf8:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	4b87      	ldr	r3, [pc, #540]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001cfe:	4989      	ldr	r1, [pc, #548]	; (8001f24 <HAL_RCC_OscConfig+0x630>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d12a      	bne.n	8001d6c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d16:	4b81      	ldr	r3, [pc, #516]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1a:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d22:	4b7e      	ldr	r3, [pc, #504]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d26:	4b7d      	ldr	r3, [pc, #500]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe ff9f 	bl	8000c70 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d38:	f7fe ff9a 	bl	8000c70 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0e3      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d4a:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d0f1      	beq.n	8001d38 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d54:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	22f8      	movs	r2, #248	; 0xf8
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	00da      	lsls	r2, r3, #3
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
 8001d6a:	e034      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	3305      	adds	r3, #5
 8001d72:	d111      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d74:	4b69      	ldr	r3, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d80:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	22f8      	movs	r2, #248	; 0xf8
 8001d86:	4393      	bics	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	00da      	lsls	r2, r3, #3
 8001d90:	4b62      	ldr	r3, [pc, #392]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
 8001d96:	e01e      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d98:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9c:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001d9e:	2104      	movs	r1, #4
 8001da0:	430a      	orrs	r2, r1
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001da4:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da8:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	438a      	bics	r2, r1
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7fe ff5e 	bl	8000c70 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dba:	f7fe ff59 	bl	8000c70 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0a2      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d1f1      	bne.n	8001dba <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d100      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4ec>
 8001dde:	e097      	b.n	8001f10 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de0:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	220c      	movs	r2, #12
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d100      	bne.n	8001dee <HAL_RCC_OscConfig+0x4fa>
 8001dec:	e06b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d14c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001dfc:	494a      	ldr	r1, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x634>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe ff35 	bl	8000c70 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe ff30 	bl	8000c70 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e079      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	220f      	movs	r2, #15
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0x638>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	431a      	orrs	r2, r3
 8001e52:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	0449      	lsls	r1, r1, #17
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe ff03 	bl	8000c70 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe fefe 	bl	8000c70 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e047      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	049b      	lsls	r3, r3, #18
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x57c>
 8001e8e:	e03f      	b.n	8001f10 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001e96:	4924      	ldr	r1, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x634>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fee8 	bl	8000c70 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe fee3 	bl	8000c70 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e02c      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	049b      	lsls	r3, r3, #18
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5b2>
 8001ec4:	e024      	b.n	8001f10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e01f      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d10e      	bne.n	8001f0c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	23f0      	movs	r3, #240	; 0xf0
 8001f00:	039b      	lsls	r3, r3, #14
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b008      	add	sp, #32
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	00001388 	.word	0x00001388
 8001f24:	efffffff 	.word	0xefffffff
 8001f28:	feffffff 	.word	0xfeffffff
 8001f2c:	ffc27fff 	.word	0xffc27fff

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b3      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d911      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4393      	bics	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e09a      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d015      	beq.n	8001fac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2204      	movs	r2, #4
 8001f86:	4013      	ands	r3, r2
 8001f88:	d006      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	21e0      	movs	r1, #224	; 0xe0
 8001f92:	00c9      	lsls	r1, r1, #3
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d040      	beq.n	8002038 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d114      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06e      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	049b      	lsls	r3, r3, #18
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d108      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e062      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e05b      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8002004:	430a      	orrs	r2, r1
 8002006:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7fe fe32 	bl	8000c70 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002010:	e009      	b.n	8002026 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002012:	f7fe fe2d 	bl	8000c70 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_RCC_ClockConfig+0x18c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e042      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	220c      	movs	r2, #12
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1ec      	bne.n	8002012 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	4013      	ands	r3, r2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d211      	bcs.n	800206a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	4393      	bics	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x184>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e020      	b.n	80020ac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <HAL_RCC_ClockConfig+0x190>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002088:	f000 f820 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208c:	0001      	movs	r1, r0
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x188>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	220f      	movs	r2, #15
 8002096:	4013      	ands	r3, r2
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x194>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	000a      	movs	r2, r1
 800209e:	40da      	lsrs	r2, r3
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x198>)
 80020a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7fe fd9d 	bl	8000be4 <HAL_InitTick>
  
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	00001388 	.word	0x00001388
 80020c0:	fffff8ff 	.word	0xfffff8ff
 80020c4:	08002e1c 	.word	0x08002e1c
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b08f      	sub	sp, #60	; 0x3c
 80020d0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020d2:	2314      	movs	r3, #20
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020da:	c313      	stmia	r3!, {r0, r1, r4}
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020e6:	c313      	stmia	r3!, {r0, r1, r4}
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	220c      	movs	r2, #12
 800210a:	4013      	ands	r3, r2
 800210c:	2b04      	cmp	r3, #4
 800210e:	d002      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x4a>
 8002110:	2b08      	cmp	r3, #8
 8002112:	d003      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x50>
 8002114:	e02f      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002116:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800211a:	e02f      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	220f      	movs	r2, #15
 8002122:	4013      	ands	r3, r2
 8002124:	2214      	movs	r2, #20
 8002126:	18ba      	adds	r2, r7, r2
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_RCC_GetSysClockFreq+0xc4>)
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	220f      	movs	r2, #15
 8002132:	4013      	ands	r3, r2
 8002134:	1d3a      	adds	r2, r7, #4
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800213a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	401a      	ands	r2, r3
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	429a      	cmp	r2, r3
 8002148:	d109      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800214a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc8>)
 800214e:	f7fd ffd9 	bl	8000104 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	001a      	movs	r2, r3
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	4353      	muls	r3, r2
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
 800215c:	e008      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800215e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002162:	f7fd ffcf 	bl	8000104 <__udivsi3>
 8002166:	0003      	movs	r3, r0
 8002168:	001a      	movs	r2, r3
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	4353      	muls	r3, r2
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002174:	e002      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800217a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b00f      	add	sp, #60	; 0x3c
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	08002dfc 	.word	0x08002dfc
 800218c:	08002e0c 	.word	0x08002e0c
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021b0:	f7ff fff2 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b4:	0001      	movs	r1, r0
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	2207      	movs	r2, #7
 80021be:	4013      	ands	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	40d9      	lsrs	r1, r3
 80021c6:	000b      	movs	r3, r1
}    
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08002e2c 	.word	0x08002e2c

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	025b      	lsls	r3, r3, #9
 80021f0:	4013      	ands	r3, r2
 80021f2:	d100      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021f4:	e08f      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2317      	movs	r3, #23
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b57      	ldr	r3, [pc, #348]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	055b      	lsls	r3, r3, #21
 8002206:	4013      	ands	r3, r2
 8002208:	d111      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	0549      	lsls	r1, r1, #21
 8002214:	430a      	orrs	r2, r1
 8002216:	61da      	str	r2, [r3, #28]
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2317      	movs	r3, #23
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d11a      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002248:	f7fe fd12 	bl	8000c70 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe fd0d 	bl	8000c70 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e077      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d0f0      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002270:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	23c0      	movs	r3, #192	; 0xc0
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d034      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	23c0      	movs	r3, #192	; 0xc0
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4013      	ands	r3, r2
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	429a      	cmp	r2, r3
 8002290:	d02c      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a33      	ldr	r2, [pc, #204]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b0:	492d      	ldr	r1, [pc, #180]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fcd4 	bl	8000c70 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e009      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fccf 	bl	8000c70 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a24      	ldr	r2, [pc, #144]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e038      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	2317      	movs	r3, #23
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002310:	4917      	ldr	r1, [pc, #92]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002312:	400a      	ands	r2, r1
 8002314:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2203      	movs	r2, #3
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002330:	430a      	orrs	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2220      	movs	r2, #32
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	2210      	movs	r2, #16
 8002344:	4393      	bics	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800234e:	430a      	orrs	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	fffffcff 	.word	0xfffffcff
 8002368:	fffeffff 	.word	0xfffeffff
 800236c:	00001388 	.word	0x00001388
 8002370:	efffffff 	.word	0xefffffff

08002374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e044      	b.n	8002410 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2270      	movs	r2, #112	; 0x70
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f7fe f9f7 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2224      	movs	r2, #36	; 0x24
 80023a2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2101      	movs	r1, #1
 80023b0:	438a      	bics	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 f968 	bl	800268c <UART_SetConfig>
 80023bc:	0003      	movs	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e024      	b.n	8002410 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fb11 	bl	80029f8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	490d      	ldr	r1, [pc, #52]	; (8002418 <HAL_UART_Init+0xa4>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2108      	movs	r1, #8
 80023f2:	438a      	bics	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	430a      	orrs	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fba9 	bl	8002b60 <UART_CheckIdleState>
 800240e:	0003      	movs	r3, r0
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}
 8002418:	fffff7ff 	.word	0xfffff7ff

0800241c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4a89      	ldr	r2, [pc, #548]	; (8002664 <HAL_UART_IRQHandler+0x248>)
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d112      	bne.n	8002470 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	2220      	movs	r2, #32
 800244e:	4013      	ands	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2220      	movs	r2, #32
 8002456:	4013      	ands	r3, r2
 8002458:	d00a      	beq.n	8002470 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	2b00      	cmp	r3, #0
 8002460:	d100      	bne.n	8002464 <HAL_UART_IRQHandler+0x48>
 8002462:	e0f7      	b.n	8002654 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	0010      	movs	r0, r2
 800246c:	4798      	blx	r3
      }
      return;
 800246e:	e0f1      	b.n	8002654 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d100      	bne.n	8002478 <HAL_UART_IRQHandler+0x5c>
 8002476:	e0cd      	b.n	8002614 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d105      	bne.n	800248c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	2390      	movs	r3, #144	; 0x90
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d100      	bne.n	800248c <HAL_UART_IRQHandler+0x70>
 800248a:	e0c3      	b.n	8002614 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2201      	movs	r2, #1
 8002490:	4013      	ands	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_UART_IRQHandler+0x96>
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024aa:	2201      	movs	r2, #1
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_UART_IRQHandler+0xba>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	d009      	beq.n	80024d6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2202      	movs	r2, #2
 80024c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ce:	2204      	movs	r2, #4
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2204      	movs	r2, #4
 80024da:	4013      	ands	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_UART_IRQHandler+0xde>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f2:	2202      	movs	r2, #2
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2208      	movs	r2, #8
 80024fe:	4013      	ands	r3, r2
 8002500:	d011      	beq.n	8002526 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2220      	movs	r2, #32
 8002506:	4013      	ands	r3, r2
 8002508:	d103      	bne.n	8002512 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002510:	d009      	beq.n	8002526 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2208      	movs	r2, #8
 8002518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251e:	2208      	movs	r2, #8
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	4013      	ands	r3, r2
 800252e:	d00f      	beq.n	8002550 <HAL_UART_IRQHandler+0x134>
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	04db      	lsls	r3, r3, #19
 8002536:	4013      	ands	r3, r2
 8002538:	d00a      	beq.n	8002550 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002548:	2220      	movs	r2, #32
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d100      	bne.n	800255a <HAL_UART_IRQHandler+0x13e>
 8002558:	e07e      	b.n	8002658 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2220      	movs	r2, #32
 800255e:	4013      	ands	r3, r2
 8002560:	d00c      	beq.n	800257c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2220      	movs	r2, #32
 8002566:	4013      	ands	r3, r2
 8002568:	d008      	beq.n	800257c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	0010      	movs	r0, r2
 800257a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002580:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	4013      	ands	r3, r2
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d003      	beq.n	8002598 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2228      	movs	r2, #40	; 0x28
 8002594:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002596:	d033      	beq.n	8002600 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fba4 	bl	8002ce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d123      	bne.n	80025f6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	438a      	bics	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <HAL_UART_IRQHandler+0x24c>)
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fe feb2 	bl	800133c <HAL_DMA_Abort_IT>
 80025d8:	1e03      	subs	r3, r0, #0
 80025da:	d019      	beq.n	8002610 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e6:	0018      	movs	r0, r3
 80025e8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ea:	e011      	b.n	8002610 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f844 	bl	800267c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	e00c      	b.n	8002610 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f83f 	bl	800267c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fe:	e007      	b.n	8002610 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0018      	movs	r0, r3
 8002604:	f000 f83a 	bl	800267c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800260e:	e023      	b.n	8002658 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002610:	46c0      	nop			; (mov r8, r8)
    return;
 8002612:	e021      	b.n	8002658 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	4013      	ands	r3, r2
 800261a:	d00d      	beq.n	8002638 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	4013      	ands	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002628:	2b00      	cmp	r3, #0
 800262a:	d017      	beq.n	800265c <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	0010      	movs	r0, r2
 8002634:	4798      	blx	r3
    }
    return;
 8002636:	e011      	b.n	800265c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	4013      	ands	r3, r2
 800263e:	d00e      	beq.n	800265e <HAL_UART_IRQHandler+0x242>
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	4013      	ands	r3, r2
 8002646:	d00a      	beq.n	800265e <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fb83 	bl	8002d56 <UART_EndTransmit_IT>
    return;
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	e004      	b.n	800265e <HAL_UART_IRQHandler+0x242>
      return;
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	e002      	b.n	800265e <HAL_UART_IRQHandler+0x242>
    return;
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	e000      	b.n	800265e <HAL_UART_IRQHandler+0x242>
    return;
 800265c:	46c0      	nop			; (mov r8, r8)
  }

}
 800265e:	46bd      	mov	sp, r7
 8002660:	b008      	add	sp, #32
 8002662:	bd80      	pop	{r7, pc}
 8002664:	0000080f 	.word	0x0000080f
 8002668:	08002d29 	.word	0x08002d29

0800266c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002698:	2317      	movs	r3, #23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4ac1      	ldr	r2, [pc, #772]	; (80029c4 <UART_SetConfig+0x338>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4abc      	ldr	r2, [pc, #752]	; (80029c8 <UART_SetConfig+0x33c>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4ab3      	ldr	r2, [pc, #716]	; (80029cc <UART_SetConfig+0x340>)
 80026fe:	4013      	ands	r3, r2
 8002700:	0019      	movs	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4aaf      	ldr	r2, [pc, #700]	; (80029d0 <UART_SetConfig+0x344>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d125      	bne.n	8002762 <UART_SetConfig+0xd6>
 8002716:	4baf      	ldr	r3, [pc, #700]	; (80029d4 <UART_SetConfig+0x348>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	2203      	movs	r2, #3
 800271c:	4013      	ands	r3, r2
 800271e:	2b01      	cmp	r3, #1
 8002720:	d00f      	beq.n	8002742 <UART_SetConfig+0xb6>
 8002722:	d304      	bcc.n	800272e <UART_SetConfig+0xa2>
 8002724:	2b02      	cmp	r3, #2
 8002726:	d011      	beq.n	800274c <UART_SetConfig+0xc0>
 8002728:	2b03      	cmp	r3, #3
 800272a:	d005      	beq.n	8002738 <UART_SetConfig+0xac>
 800272c:	e013      	b.n	8002756 <UART_SetConfig+0xca>
 800272e:	231f      	movs	r3, #31
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	e04a      	b.n	80027ce <UART_SetConfig+0x142>
 8002738:	231f      	movs	r3, #31
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e045      	b.n	80027ce <UART_SetConfig+0x142>
 8002742:	231f      	movs	r3, #31
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2204      	movs	r2, #4
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e040      	b.n	80027ce <UART_SetConfig+0x142>
 800274c:	231f      	movs	r3, #31
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2208      	movs	r2, #8
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e03b      	b.n	80027ce <UART_SetConfig+0x142>
 8002756:	231f      	movs	r3, #31
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2210      	movs	r2, #16
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	e035      	b.n	80027ce <UART_SetConfig+0x142>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a9c      	ldr	r2, [pc, #624]	; (80029d8 <UART_SetConfig+0x34c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d104      	bne.n	8002776 <UART_SetConfig+0xea>
 800276c:	231f      	movs	r3, #31
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e02b      	b.n	80027ce <UART_SetConfig+0x142>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a98      	ldr	r2, [pc, #608]	; (80029dc <UART_SetConfig+0x350>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d104      	bne.n	800278a <UART_SetConfig+0xfe>
 8002780:	231f      	movs	r3, #31
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e021      	b.n	80027ce <UART_SetConfig+0x142>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a94      	ldr	r2, [pc, #592]	; (80029e0 <UART_SetConfig+0x354>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d104      	bne.n	800279e <UART_SetConfig+0x112>
 8002794:	231f      	movs	r3, #31
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e017      	b.n	80027ce <UART_SetConfig+0x142>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a90      	ldr	r2, [pc, #576]	; (80029e4 <UART_SetConfig+0x358>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d104      	bne.n	80027b2 <UART_SetConfig+0x126>
 80027a8:	231f      	movs	r3, #31
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e00d      	b.n	80027ce <UART_SetConfig+0x142>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a8c      	ldr	r2, [pc, #560]	; (80029e8 <UART_SetConfig+0x35c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d104      	bne.n	80027c6 <UART_SetConfig+0x13a>
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e003      	b.n	80027ce <UART_SetConfig+0x142>
 80027c6:	231f      	movs	r3, #31
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2210      	movs	r2, #16
 80027cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d000      	beq.n	80027dc <UART_SetConfig+0x150>
 80027da:	e07d      	b.n	80028d8 <UART_SetConfig+0x24c>
  {
    switch (clocksource)
 80027dc:	231f      	movs	r3, #31
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d01c      	beq.n	8002820 <UART_SetConfig+0x194>
 80027e6:	dc02      	bgt.n	80027ee <UART_SetConfig+0x162>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <UART_SetConfig+0x16c>
 80027ec:	e04b      	b.n	8002886 <UART_SetConfig+0x1fa>
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d025      	beq.n	800283e <UART_SetConfig+0x1b2>
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d037      	beq.n	8002866 <UART_SetConfig+0x1da>
 80027f6:	e046      	b.n	8002886 <UART_SetConfig+0x1fa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f8:	f7ff fcd8 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	005a      	lsls	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	18d2      	adds	r2, r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0019      	movs	r1, r3
 8002812:	0010      	movs	r0, r2
 8002814:	f7fd fc76 	bl	8000104 <__udivsi3>
 8002818:	0003      	movs	r3, r0
 800281a:	b29b      	uxth	r3, r3
 800281c:	61bb      	str	r3, [r7, #24]
        break;
 800281e:	e037      	b.n	8002890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	4a71      	ldr	r2, [pc, #452]	; (80029ec <UART_SetConfig+0x360>)
 8002828:	189a      	adds	r2, r3, r2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0019      	movs	r1, r3
 8002830:	0010      	movs	r0, r2
 8002832:	f7fd fc67 	bl	8000104 <__udivsi3>
 8002836:	0003      	movs	r3, r0
 8002838:	b29b      	uxth	r3, r3
 800283a:	61bb      	str	r3, [r7, #24]
        break;
 800283c:	e028      	b.n	8002890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800283e:	f7ff fc45 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002842:	0003      	movs	r3, r0
 8002844:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	18d2      	adds	r2, r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0019      	movs	r1, r3
 8002858:	0010      	movs	r0, r2
 800285a:	f7fd fc53 	bl	8000104 <__udivsi3>
 800285e:	0003      	movs	r3, r0
 8002860:	b29b      	uxth	r3, r3
 8002862:	61bb      	str	r3, [r7, #24]
        break;
 8002864:	e014      	b.n	8002890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	0252      	lsls	r2, r2, #9
 8002870:	189a      	adds	r2, r3, r2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0019      	movs	r1, r3
 8002878:	0010      	movs	r0, r2
 800287a:	f7fd fc43 	bl	8000104 <__udivsi3>
 800287e:	0003      	movs	r3, r0
 8002880:	b29b      	uxth	r3, r3
 8002882:	61bb      	str	r3, [r7, #24]
        break;
 8002884:	e004      	b.n	8002890 <UART_SetConfig+0x204>
      default:
        ret = HAL_ERROR;
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
        break;
 800288e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	d91b      	bls.n	80028ce <UART_SetConfig+0x242>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <UART_SetConfig+0x364>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d817      	bhi.n	80028ce <UART_SetConfig+0x242>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	200a      	movs	r0, #10
 80028a4:	183b      	adds	r3, r7, r0
 80028a6:	210f      	movs	r1, #15
 80028a8:	438a      	bics	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	b299      	uxth	r1, r3
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	183a      	adds	r2, r7, r0
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	183a      	adds	r2, r7, r0
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	e06c      	b.n	80029a8 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 80028ce:	2317      	movs	r3, #23
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e067      	b.n	80029a8 <UART_SetConfig+0x31c>
    }
  }
  else
  {
    switch (clocksource)
 80028d8:	231f      	movs	r3, #31
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d01b      	beq.n	800291a <UART_SetConfig+0x28e>
 80028e2:	dc02      	bgt.n	80028ea <UART_SetConfig+0x25e>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <UART_SetConfig+0x268>
 80028e8:	e049      	b.n	800297e <UART_SetConfig+0x2f2>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d024      	beq.n	8002938 <UART_SetConfig+0x2ac>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d035      	beq.n	800295e <UART_SetConfig+0x2d2>
 80028f2:	e044      	b.n	800297e <UART_SetConfig+0x2f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f4:	f7ff fc5a 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 80028f8:	0003      	movs	r3, r0
 80028fa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	085a      	lsrs	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	18d2      	adds	r2, r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0019      	movs	r1, r3
 800290c:	0010      	movs	r0, r2
 800290e:	f7fd fbf9 	bl	8000104 <__udivsi3>
 8002912:	0003      	movs	r3, r0
 8002914:	b29b      	uxth	r3, r3
 8002916:	61bb      	str	r3, [r7, #24]
        break;
 8002918:	e036      	b.n	8002988 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	4a34      	ldr	r2, [pc, #208]	; (80029f4 <UART_SetConfig+0x368>)
 8002922:	189a      	adds	r2, r3, r2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0019      	movs	r1, r3
 800292a:	0010      	movs	r0, r2
 800292c:	f7fd fbea 	bl	8000104 <__udivsi3>
 8002930:	0003      	movs	r3, r0
 8002932:	b29b      	uxth	r3, r3
 8002934:	61bb      	str	r3, [r7, #24]
        break;
 8002936:	e027      	b.n	8002988 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002938:	f7ff fbc8 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800293c:	0003      	movs	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	085a      	lsrs	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	18d2      	adds	r2, r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0019      	movs	r1, r3
 8002950:	0010      	movs	r0, r2
 8002952:	f7fd fbd7 	bl	8000104 <__udivsi3>
 8002956:	0003      	movs	r3, r0
 8002958:	b29b      	uxth	r3, r3
 800295a:	61bb      	str	r3, [r7, #24]
        break;
 800295c:	e014      	b.n	8002988 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0212      	lsls	r2, r2, #8
 8002968:	189a      	adds	r2, r3, r2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0019      	movs	r1, r3
 8002970:	0010      	movs	r0, r2
 8002972:	f7fd fbc7 	bl	8000104 <__udivsi3>
 8002976:	0003      	movs	r3, r0
 8002978:	b29b      	uxth	r3, r3
 800297a:	61bb      	str	r3, [r7, #24]
        break;
 800297c:	e004      	b.n	8002988 <UART_SetConfig+0x2fc>
      default:
        ret = HAL_ERROR;
 800297e:	2317      	movs	r3, #23
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
        break;
 8002986:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d908      	bls.n	80029a0 <UART_SetConfig+0x314>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <UART_SetConfig+0x364>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d804      	bhi.n	80029a0 <UART_SetConfig+0x314>
    {
      huart->Instance->BRR = usartdiv;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	e003      	b.n	80029a8 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 80029a0:	2317      	movs	r3, #23
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80029b4:	2317      	movs	r3, #23
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	781b      	ldrb	r3, [r3, #0]
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b008      	add	sp, #32
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	efff69f3 	.word	0xefff69f3
 80029c8:	ffffcfff 	.word	0xffffcfff
 80029cc:	fffff4ff 	.word	0xfffff4ff
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40004400 	.word	0x40004400
 80029dc:	40004800 	.word	0x40004800
 80029e0:	40004c00 	.word	0x40004c00
 80029e4:	40005000 	.word	0x40005000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	0000ffff 	.word	0x0000ffff
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <UART_AdvFeatureConfig+0x144>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <UART_AdvFeatureConfig+0x148>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2204      	movs	r2, #4
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <UART_AdvFeatureConfig+0x14c>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <UART_AdvFeatureConfig+0x150>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <UART_AdvFeatureConfig+0x154>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <UART_AdvFeatureConfig+0x158>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <UART_AdvFeatureConfig+0x15c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	035b      	lsls	r3, r3, #13
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10b      	bne.n	8002b12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <UART_AdvFeatureConfig+0x160>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <UART_AdvFeatureConfig+0x164>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	fffdffff 	.word	0xfffdffff
 8002b40:	fffeffff 	.word	0xfffeffff
 8002b44:	fffbffff 	.word	0xfffbffff
 8002b48:	ffff7fff 	.word	0xffff7fff
 8002b4c:	ffffefff 	.word	0xffffefff
 8002b50:	ffffdfff 	.word	0xffffdfff
 8002b54:	ffefffff 	.word	0xffefffff
 8002b58:	ff9fffff 	.word	0xff9fffff
 8002b5c:	fff7ffff 	.word	0xfff7ffff

08002b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b6e:	f7fe f87f 	bl	8000c70 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d10d      	bne.n	8002ba0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	0399      	lsls	r1, r3, #14
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <UART_CheckIdleState+0x88>)
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	0013      	movs	r3, r2
 8002b92:	2200      	movs	r2, #0
 8002b94:	f000 f82a 	bl	8002bec <UART_WaitOnFlagUntilTimeout>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e01f      	b.n	8002be0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d10d      	bne.n	8002bca <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	03d9      	lsls	r1, r3, #15
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <UART_CheckIdleState+0x88>)
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	0013      	movs	r3, r2
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f000 f815 	bl	8002bec <UART_WaitOnFlagUntilTimeout>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e00a      	b.n	8002be0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2270      	movs	r2, #112	; 0x70
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	01ffffff 	.word	0x01ffffff

08002bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfc:	e05d      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3301      	adds	r3, #1
 8002c02:	d05a      	beq.n	8002cba <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fe f834 	bl	8000c70 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11b      	bne.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	492f      	ldr	r1, [pc, #188]	; (8002ce4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	438a      	bics	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2270      	movs	r2, #112	; 0x70
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e043      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d02d      	beq.n	8002cba <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	401a      	ands	r2, r3
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d123      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4917      	ldr	r1, [pc, #92]	; (8002ce4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2101      	movs	r1, #1
 8002c98:	438a      	bics	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2270      	movs	r2, #112	; 0x70
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e00f      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	425a      	negs	r2, r3
 8002cca:	4153      	adcs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	001a      	movs	r2, r3
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d092      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b004      	add	sp, #16
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	fffffe5f 	.word	0xfffffe5f

08002ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <UART_EndRxTransfer+0x3c>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fffffedf 	.word	0xfffffedf

08002d28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	225a      	movs	r2, #90	; 0x5a
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2252      	movs	r2, #82	; 0x52
 8002d42:	2100      	movs	r1, #0
 8002d44:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff fc97 	bl	800267c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff fc75 	bl	800266c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b002      	add	sp, #8
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4d0c      	ldr	r5, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	f000 f821 	bl	8002de4 <_init>
 8002da2:	4d0a      	ldr	r5, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	00b3      	lsls	r3, r6, #2
 8002db2:	58eb      	ldr	r3, [r5, r3]
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	00b3      	lsls	r3, r6, #2
 8002dbc:	58eb      	ldr	r3, [r5, r3]
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e34 	.word	0x08002e34
 8002dc8:	08002e34 	.word	0x08002e34
 8002dcc:	08002e34 	.word	0x08002e34
 8002dd0:	08002e38 	.word	0x08002e38

08002dd4 <memset>:
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	1812      	adds	r2, r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	7019      	strb	r1, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
