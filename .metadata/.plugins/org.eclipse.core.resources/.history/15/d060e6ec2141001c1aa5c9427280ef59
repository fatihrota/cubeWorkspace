/*
 * iap.c
 *
 *  Created on: Sep 26, 2017
 *      Author: LeventK
 */
#include "stm32l0xx_hal.h"
#include "iap.h"
#include "sha1.h"
#include <string.h>
#include "iap_common.h"
#include "debug.h"

typedef void (*pFunction)(void);

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;


void iap_PrepareForJump()
{
	//Disable all enabled interrupts
	//HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
	HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
	HAL_NVIC_DisableIRQ(SysTick_IRQn);
	HAL_NVIC_DisableIRQ(USART1_IRQn);
	HAL_NVIC_DisableIRQ(USART2_IRQn);

	//HAL_NVIC_DisableIRQ(TIM7_IRQn);

	HAL_DMA_Abort(huart1.hdmarx);
	HAL_DMA_Abort(huart1.hdmatx);
	HAL_DMA_Abort(huart2.hdmatx);
	__disable_irq();

}
typedef void (*pFunction)(void);



void iap_JumpToApplication()
{
	uint32_t  applicationStack;
	pFunction applicationEntry;

	iap_PrepareForJump();

	//Retrieve values
	applicationStack = *(__IO uint32_t *) (APPLICATION_ADDRESS);
	applicationEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);

	/*Set a valid stack pointer for the application */
	__set_MSP(applicationStack);


	/*Start the application */
	applicationEntry();
}


int iap_CheckApplication(void)
{
	SHA1_CTX sha1_ctx;
	uint8_t csha1[20];

	uint32_t length;
	unsigned char *p = (uint8_t *)(APPLICATION_ADDRESS);
	uint32_t JumpAddress= *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);

	if ((JumpAddress < APPLICATION_ADDRESS)|| (JumpAddress > APPLICATION_ADDRESS + MAX_APPLICATION_SIZE))
		return 1;

	length = *(__IO uint32_t*) (APPLICATION_LEN_ADDRESS);
	if ((length <= VECTOR_TABLE_SIZE) || (length > MAX_APPLICATION_SIZE))
	{
		return 2;
	}

	sha1_init(&sha1_ctx);
	sha1_update(&sha1_ctx,p,length);
	sha1_final(&sha1_ctx,csha1);

	if (memcmp(csha1,&p[length],20)!=0)
	{
		return 3;
	}
	return 0;
}

