
L0_WifiEnergyMeter_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_info     00000008  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007970  080000c8  080000c8  000100c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000658  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08008090  08008090  00028128  2**0
                  CONTENTS
  5 .ARM          00000008  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008098  08008098  00028128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAMVectorTable 00000100  20000000  20000000  00030000  2**2
                  ALLOC
 10 .IAPMailbox   00000008  20000100  20000100  00030000  2**2
                  ALLOC
 11 .data         00000074  20000108  080080a0  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .app_sha      00000014  08008114  08008114  00028114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .bss          0000136c  2000017c  2000017c  00030000  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  200014e8  200014e8  00030000  2**0
                  ALLOC
 15 .ARM.attributes 00000028  00000000  00000000  00028128  2**0
                  CONTENTS, READONLY
 16 .debug_info   00016cc8  00000000  00000000  00028150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00003406  00000000  00000000  0003ee18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00000e40  00000000  00000000  00042220  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000ce0  00000000  00000000  00043060  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00018048  00000000  00000000  00043d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000f323  00000000  00000000  0005bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00083a69  00000000  00000000  0006b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  000eeb14  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00003858  00000000  00000000  000eeb90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c8 <__do_global_dtors_aux>:
 80000c8:	b510      	push	{r4, lr}
 80000ca:	4c06      	ldr	r4, [pc, #24]	; (80000e4 <__do_global_dtors_aux+0x1c>)
 80000cc:	7823      	ldrb	r3, [r4, #0]
 80000ce:	2b00      	cmp	r3, #0
 80000d0:	d107      	bne.n	80000e2 <__do_global_dtors_aux+0x1a>
 80000d2:	4b05      	ldr	r3, [pc, #20]	; (80000e8 <__do_global_dtors_aux+0x20>)
 80000d4:	2b00      	cmp	r3, #0
 80000d6:	d002      	beq.n	80000de <__do_global_dtors_aux+0x16>
 80000d8:	4804      	ldr	r0, [pc, #16]	; (80000ec <__do_global_dtors_aux+0x24>)
 80000da:	e000      	b.n	80000de <__do_global_dtors_aux+0x16>
 80000dc:	bf00      	nop
 80000de:	2301      	movs	r3, #1
 80000e0:	7023      	strb	r3, [r4, #0]
 80000e2:	bd10      	pop	{r4, pc}
 80000e4:	2000017c 	.word	0x2000017c
 80000e8:	00000000 	.word	0x00000000
 80000ec:	08007a20 	.word	0x08007a20

080000f0 <frame_dummy>:
 80000f0:	4b04      	ldr	r3, [pc, #16]	; (8000104 <frame_dummy+0x14>)
 80000f2:	b510      	push	{r4, lr}
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d003      	beq.n	8000100 <frame_dummy+0x10>
 80000f8:	4903      	ldr	r1, [pc, #12]	; (8000108 <frame_dummy+0x18>)
 80000fa:	4804      	ldr	r0, [pc, #16]	; (800010c <frame_dummy+0x1c>)
 80000fc:	e000      	b.n	8000100 <frame_dummy+0x10>
 80000fe:	bf00      	nop
 8000100:	bd10      	pop	{r4, pc}
 8000102:	46c0      	nop			; (mov r8, r8)
 8000104:	00000000 	.word	0x00000000
 8000108:	20000180 	.word	0x20000180
 800010c:	08007a20 	.word	0x08007a20

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uldivmod>:
 8000228:	2b00      	cmp	r3, #0
 800022a:	d111      	bne.n	8000250 <__aeabi_uldivmod+0x28>
 800022c:	2a00      	cmp	r2, #0
 800022e:	d10f      	bne.n	8000250 <__aeabi_uldivmod+0x28>
 8000230:	2900      	cmp	r1, #0
 8000232:	d100      	bne.n	8000236 <__aeabi_uldivmod+0xe>
 8000234:	2800      	cmp	r0, #0
 8000236:	d002      	beq.n	800023e <__aeabi_uldivmod+0x16>
 8000238:	2100      	movs	r1, #0
 800023a:	43c9      	mvns	r1, r1
 800023c:	1c08      	adds	r0, r1, #0
 800023e:	b407      	push	{r0, r1, r2}
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <__aeabi_uldivmod+0x24>)
 8000242:	a102      	add	r1, pc, #8	; (adr r1, 800024c <__aeabi_uldivmod+0x24>)
 8000244:	1840      	adds	r0, r0, r1
 8000246:	9002      	str	r0, [sp, #8]
 8000248:	bd03      	pop	{r0, r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	ffffffd9 	.word	0xffffffd9
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f830 	bl	80002bc <__udivmoddi4>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_lmul>:
 8000268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026a:	46ce      	mov	lr, r9
 800026c:	4647      	mov	r7, r8
 800026e:	0415      	lsls	r5, r2, #16
 8000270:	0c2d      	lsrs	r5, r5, #16
 8000272:	002e      	movs	r6, r5
 8000274:	b580      	push	{r7, lr}
 8000276:	0407      	lsls	r7, r0, #16
 8000278:	0c14      	lsrs	r4, r2, #16
 800027a:	0c3f      	lsrs	r7, r7, #16
 800027c:	4699      	mov	r9, r3
 800027e:	0c03      	lsrs	r3, r0, #16
 8000280:	437e      	muls	r6, r7
 8000282:	435d      	muls	r5, r3
 8000284:	4367      	muls	r7, r4
 8000286:	4363      	muls	r3, r4
 8000288:	197f      	adds	r7, r7, r5
 800028a:	0c34      	lsrs	r4, r6, #16
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	469c      	mov	ip, r3
 8000290:	42a5      	cmp	r5, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x34>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	464b      	mov	r3, r9
 800029e:	4343      	muls	r3, r0
 80002a0:	4351      	muls	r1, r2
 80002a2:	0c25      	lsrs	r5, r4, #16
 80002a4:	0436      	lsls	r6, r6, #16
 80002a6:	4465      	add	r5, ip
 80002a8:	0c36      	lsrs	r6, r6, #16
 80002aa:	0424      	lsls	r4, r4, #16
 80002ac:	19a4      	adds	r4, r4, r6
 80002ae:	195b      	adds	r3, r3, r5
 80002b0:	1859      	adds	r1, r3, r1
 80002b2:	0020      	movs	r0, r4
 80002b4:	bc0c      	pop	{r2, r3}
 80002b6:	4690      	mov	r8, r2
 80002b8:	4699      	mov	r9, r3
 80002ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	464f      	mov	r7, r9
 80002c0:	4646      	mov	r6, r8
 80002c2:	46d6      	mov	lr, sl
 80002c4:	b5c0      	push	{r6, r7, lr}
 80002c6:	0004      	movs	r4, r0
 80002c8:	b082      	sub	sp, #8
 80002ca:	000d      	movs	r5, r1
 80002cc:	4691      	mov	r9, r2
 80002ce:	4698      	mov	r8, r3
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d82f      	bhi.n	8000334 <__udivmoddi4+0x78>
 80002d4:	d02c      	beq.n	8000330 <__udivmoddi4+0x74>
 80002d6:	4641      	mov	r1, r8
 80002d8:	4648      	mov	r0, r9
 80002da:	f000 f8b1 	bl	8000440 <__clzdi2>
 80002de:	0029      	movs	r1, r5
 80002e0:	0006      	movs	r6, r0
 80002e2:	0020      	movs	r0, r4
 80002e4:	f000 f8ac 	bl	8000440 <__clzdi2>
 80002e8:	1a33      	subs	r3, r6, r0
 80002ea:	469c      	mov	ip, r3
 80002ec:	3b20      	subs	r3, #32
 80002ee:	469a      	mov	sl, r3
 80002f0:	d500      	bpl.n	80002f4 <__udivmoddi4+0x38>
 80002f2:	e076      	b.n	80003e2 <__udivmoddi4+0x126>
 80002f4:	464b      	mov	r3, r9
 80002f6:	4652      	mov	r2, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001f      	movs	r7, r3
 80002fc:	464b      	mov	r3, r9
 80002fe:	4662      	mov	r2, ip
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d828      	bhi.n	800035a <__udivmoddi4+0x9e>
 8000308:	d025      	beq.n	8000356 <__udivmoddi4+0x9a>
 800030a:	4653      	mov	r3, sl
 800030c:	1ba4      	subs	r4, r4, r6
 800030e:	41bd      	sbcs	r5, r7
 8000310:	2b00      	cmp	r3, #0
 8000312:	da00      	bge.n	8000316 <__udivmoddi4+0x5a>
 8000314:	e07b      	b.n	800040e <__udivmoddi4+0x152>
 8000316:	2200      	movs	r2, #0
 8000318:	2300      	movs	r3, #0
 800031a:	9200      	str	r2, [sp, #0]
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4652      	mov	r2, sl
 8000322:	4093      	lsls	r3, r2
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	4662      	mov	r2, ip
 800032a:	4093      	lsls	r3, r2
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	e018      	b.n	8000362 <__udivmoddi4+0xa6>
 8000330:	4282      	cmp	r2, r0
 8000332:	d9d0      	bls.n	80002d6 <__udivmoddi4+0x1a>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <__udivmoddi4+0x8a>
 8000342:	601c      	str	r4, [r3, #0]
 8000344:	605d      	str	r5, [r3, #4]
 8000346:	9800      	ldr	r0, [sp, #0]
 8000348:	9901      	ldr	r1, [sp, #4]
 800034a:	b002      	add	sp, #8
 800034c:	bc1c      	pop	{r2, r3, r4}
 800034e:	4690      	mov	r8, r2
 8000350:	4699      	mov	r9, r3
 8000352:	46a2      	mov	sl, r4
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	42a3      	cmp	r3, r4
 8000358:	d9d7      	bls.n	800030a <__udivmoddi4+0x4e>
 800035a:	2200      	movs	r2, #0
 800035c:	2300      	movs	r3, #0
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	4663      	mov	r3, ip
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0e9      	beq.n	800033c <__udivmoddi4+0x80>
 8000368:	07fb      	lsls	r3, r7, #31
 800036a:	4698      	mov	r8, r3
 800036c:	4641      	mov	r1, r8
 800036e:	0872      	lsrs	r2, r6, #1
 8000370:	430a      	orrs	r2, r1
 8000372:	087b      	lsrs	r3, r7, #1
 8000374:	4666      	mov	r6, ip
 8000376:	e00e      	b.n	8000396 <__udivmoddi4+0xda>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d101      	bne.n	8000380 <__udivmoddi4+0xc4>
 800037c:	42a2      	cmp	r2, r4
 800037e:	d80c      	bhi.n	800039a <__udivmoddi4+0xde>
 8000380:	1aa4      	subs	r4, r4, r2
 8000382:	419d      	sbcs	r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2100      	movs	r1, #0
 800038c:	3e01      	subs	r6, #1
 800038e:	1824      	adds	r4, r4, r0
 8000390:	414d      	adcs	r5, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d006      	beq.n	80003a4 <__udivmoddi4+0xe8>
 8000396:	42ab      	cmp	r3, r5
 8000398:	d9ee      	bls.n	8000378 <__udivmoddi4+0xbc>
 800039a:	3e01      	subs	r6, #1
 800039c:	1924      	adds	r4, r4, r4
 800039e:	416d      	adcs	r5, r5
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d1f8      	bne.n	8000396 <__udivmoddi4+0xda>
 80003a4:	9800      	ldr	r0, [sp, #0]
 80003a6:	9901      	ldr	r1, [sp, #4]
 80003a8:	4653      	mov	r3, sl
 80003aa:	1900      	adds	r0, r0, r4
 80003ac:	4169      	adcs	r1, r5
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db23      	blt.n	80003fa <__udivmoddi4+0x13e>
 80003b2:	002b      	movs	r3, r5
 80003b4:	4652      	mov	r2, sl
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	002a      	movs	r2, r5
 80003ba:	4664      	mov	r4, ip
 80003bc:	40e2      	lsrs	r2, r4
 80003be:	001c      	movs	r4, r3
 80003c0:	4653      	mov	r3, sl
 80003c2:	0015      	movs	r5, r2
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	db2d      	blt.n	8000424 <__udivmoddi4+0x168>
 80003c8:	0026      	movs	r6, r4
 80003ca:	4657      	mov	r7, sl
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0033      	movs	r3, r6
 80003d0:	0026      	movs	r6, r4
 80003d2:	4667      	mov	r7, ip
 80003d4:	40be      	lsls	r6, r7
 80003d6:	0032      	movs	r2, r6
 80003d8:	1a80      	subs	r0, r0, r2
 80003da:	4199      	sbcs	r1, r3
 80003dc:	9000      	str	r0, [sp, #0]
 80003de:	9101      	str	r1, [sp, #4]
 80003e0:	e7ac      	b.n	800033c <__udivmoddi4+0x80>
 80003e2:	4662      	mov	r2, ip
 80003e4:	2320      	movs	r3, #32
 80003e6:	1a9b      	subs	r3, r3, r2
 80003e8:	464a      	mov	r2, r9
 80003ea:	40da      	lsrs	r2, r3
 80003ec:	4661      	mov	r1, ip
 80003ee:	0013      	movs	r3, r2
 80003f0:	4642      	mov	r2, r8
 80003f2:	408a      	lsls	r2, r1
 80003f4:	0017      	movs	r7, r2
 80003f6:	431f      	orrs	r7, r3
 80003f8:	e780      	b.n	80002fc <__udivmoddi4+0x40>
 80003fa:	4662      	mov	r2, ip
 80003fc:	2320      	movs	r3, #32
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	4666      	mov	r6, ip
 8000404:	409a      	lsls	r2, r3
 8000406:	0023      	movs	r3, r4
 8000408:	40f3      	lsrs	r3, r6
 800040a:	4313      	orrs	r3, r2
 800040c:	e7d4      	b.n	80003b8 <__udivmoddi4+0xfc>
 800040e:	4662      	mov	r2, ip
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e780      	b.n	8000326 <__udivmoddi4+0x6a>
 8000424:	2320      	movs	r3, #32
 8000426:	4662      	mov	r2, ip
 8000428:	0026      	movs	r6, r4
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	40de      	lsrs	r6, r3
 800042e:	002f      	movs	r7, r5
 8000430:	46b0      	mov	r8, r6
 8000432:	4666      	mov	r6, ip
 8000434:	40b7      	lsls	r7, r6
 8000436:	4646      	mov	r6, r8
 8000438:	003b      	movs	r3, r7
 800043a:	4333      	orrs	r3, r6
 800043c:	e7c8      	b.n	80003d0 <__udivmoddi4+0x114>
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__clzdi2>:
 8000440:	b510      	push	{r4, lr}
 8000442:	2900      	cmp	r1, #0
 8000444:	d103      	bne.n	800044e <__clzdi2+0xe>
 8000446:	f000 f807 	bl	8000458 <__clzsi2>
 800044a:	3020      	adds	r0, #32
 800044c:	e002      	b.n	8000454 <__clzdi2+0x14>
 800044e:	1c08      	adds	r0, r1, #0
 8000450:	f000 f802 	bl	8000458 <__clzsi2>
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__clzsi2>:
 8000458:	211c      	movs	r1, #28
 800045a:	2301      	movs	r3, #1
 800045c:	041b      	lsls	r3, r3, #16
 800045e:	4298      	cmp	r0, r3
 8000460:	d301      	bcc.n	8000466 <__clzsi2+0xe>
 8000462:	0c00      	lsrs	r0, r0, #16
 8000464:	3910      	subs	r1, #16
 8000466:	0a1b      	lsrs	r3, r3, #8
 8000468:	4298      	cmp	r0, r3
 800046a:	d301      	bcc.n	8000470 <__clzsi2+0x18>
 800046c:	0a00      	lsrs	r0, r0, #8
 800046e:	3908      	subs	r1, #8
 8000470:	091b      	lsrs	r3, r3, #4
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0x22>
 8000476:	0900      	lsrs	r0, r0, #4
 8000478:	3904      	subs	r1, #4
 800047a:	a202      	add	r2, pc, #8	; (adr r2, 8000484 <__clzsi2+0x2c>)
 800047c:	5c10      	ldrb	r0, [r2, r0]
 800047e:	1840      	adds	r0, r0, r1
 8000480:	4770      	bx	lr
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	02020304 	.word	0x02020304
 8000488:	01010101 	.word	0x01010101
	...

08000494 <getSBoxValue>:

/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	0002      	movs	r2, r0
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	701a      	strb	r2, [r3, #0]
  return sbox[num];
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4a02      	ldr	r2, [pc, #8]	; (80004b0 <getSBoxValue+0x1c>)
 80004a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	08007af8 	.word	0x08007af8

080004b4 <getSBoxInvert>:

static uint8_t getSBoxInvert(uint8_t num)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	0002      	movs	r2, r0
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	701a      	strb	r2, [r3, #0]
  return rsbox[num];
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4a02      	ldr	r2, [pc, #8]	; (80004d0 <getSBoxInvert+0x1c>)
 80004c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80004c8:	0018      	movs	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	08007bf8 	.word	0x08007bf8

080004d4 <KeyExpansion>:

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
  uint32_t i, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	e030      	b.n	8000542 <KeyExpansion+0x6e>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80004e0:	4b76      	ldr	r3, [pc, #472]	; (80006bc <KeyExpansion+0x1e8>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	18d2      	adds	r2, r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	7811      	ldrb	r1, [r2, #0]
 80004f0:	4a73      	ldr	r2, [pc, #460]	; (80006c0 <KeyExpansion+0x1ec>)
 80004f2:	54d1      	strb	r1, [r2, r3]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80004f4:	4b71      	ldr	r3, [pc, #452]	; (80006bc <KeyExpansion+0x1e8>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	3301      	adds	r3, #1
 80004fe:	18d2      	adds	r2, r2, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	3301      	adds	r3, #1
 8000506:	7811      	ldrb	r1, [r2, #0]
 8000508:	4a6d      	ldr	r2, [pc, #436]	; (80006c0 <KeyExpansion+0x1ec>)
 800050a:	54d1      	strb	r1, [r2, r3]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800050c:	4b6b      	ldr	r3, [pc, #428]	; (80006bc <KeyExpansion+0x1e8>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	3302      	adds	r3, #2
 8000516:	18d2      	adds	r2, r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	3302      	adds	r3, #2
 800051e:	7811      	ldrb	r1, [r2, #0]
 8000520:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <KeyExpansion+0x1ec>)
 8000522:	54d1      	strb	r1, [r2, r3]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000524:	4b65      	ldr	r3, [pc, #404]	; (80006bc <KeyExpansion+0x1e8>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	3303      	adds	r3, #3
 800052e:	18d2      	adds	r2, r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	3303      	adds	r3, #3
 8000536:	7811      	ldrb	r1, [r2, #0]
 8000538:	4a61      	ldr	r2, [pc, #388]	; (80006c0 <KeyExpansion+0x1ec>)
 800053a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < Nk; ++i)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2b03      	cmp	r3, #3
 8000546:	d9cb      	bls.n	80004e0 <KeyExpansion+0xc>
  }

  // All other round keys are found from the previous round keys.
  //i == Nk
  for (; i < Nb * (Nr + 1); ++i)
 8000548:	e0b0      	b.n	80006ac <KeyExpansion+0x1d8>
  {
    {
      tempa[0]=RoundKey[(i-1) * 4 + 0];
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4a5d      	ldr	r2, [pc, #372]	; (80006c4 <KeyExpansion+0x1f0>)
 800054e:	4694      	mov	ip, r2
 8000550:	4463      	add	r3, ip
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4a5a      	ldr	r2, [pc, #360]	; (80006c0 <KeyExpansion+0x1ec>)
 8000556:	5cd2      	ldrb	r2, [r2, r3]
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[(i-1) * 4 + 1];
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4a59      	ldr	r2, [pc, #356]	; (80006c4 <KeyExpansion+0x1f0>)
 8000560:	4694      	mov	ip, r2
 8000562:	4463      	add	r3, ip
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	3301      	adds	r3, #1
 8000568:	4a55      	ldr	r2, [pc, #340]	; (80006c0 <KeyExpansion+0x1ec>)
 800056a:	5cd2      	ldrb	r2, [r2, r3]
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[(i-1) * 4 + 2];
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4a54      	ldr	r2, [pc, #336]	; (80006c4 <KeyExpansion+0x1f0>)
 8000574:	4694      	mov	ip, r2
 8000576:	4463      	add	r3, ip
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	3302      	adds	r3, #2
 800057c:	4a50      	ldr	r2, [pc, #320]	; (80006c0 <KeyExpansion+0x1ec>)
 800057e:	5cd2      	ldrb	r2, [r2, r3]
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[(i-1) * 4 + 3];
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a4f      	ldr	r2, [pc, #316]	; (80006c4 <KeyExpansion+0x1f0>)
 8000588:	4694      	mov	ip, r2
 800058a:	4463      	add	r3, ip
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	3303      	adds	r3, #3
 8000590:	4a4b      	ldr	r2, [pc, #300]	; (80006c0 <KeyExpansion+0x1ec>)
 8000592:	5cd2      	ldrb	r2, [r2, r3]
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	70da      	strb	r2, [r3, #3]
    }

    if (i % Nk == 0)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2203      	movs	r2, #3
 800059c:	4013      	ands	r3, r2
 800059e:	d140      	bne.n	8000622 <KeyExpansion+0x14e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	60bb      	str	r3, [r7, #8]
        tempa[0] = tempa[1];
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	785a      	ldrb	r2, [r3, #1]
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	789a      	ldrb	r2, [r3, #2]
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	78da      	ldrb	r2, [r3, #3]
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	709a      	strb	r2, [r3, #2]
        tempa[3] = k;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ff62 	bl	8000494 <getSBoxValue>
 80005d0:	0003      	movs	r3, r0
 80005d2:	001a      	movs	r2, r3
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff ff59 	bl	8000494 <getSBoxValue>
 80005e2:	0003      	movs	r3, r0
 80005e4:	001a      	movs	r2, r3
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff50 	bl	8000494 <getSBoxValue>
 80005f4:	0003      	movs	r3, r0
 80005f6:	001a      	movs	r2, r3
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff47 	bl	8000494 <getSBoxValue>
 8000606:	0003      	movs	r3, r0
 8000608:	001a      	movs	r2, r3
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	492c      	ldr	r1, [pc, #176]	; (80006c8 <KeyExpansion+0x1f4>)
 8000618:	5ccb      	ldrb	r3, [r1, r3]
 800061a:	4053      	eors	r3, r2
 800061c:	b2da      	uxtb	r2, r3
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4a29      	ldr	r2, [pc, #164]	; (80006cc <KeyExpansion+0x1f8>)
 8000626:	4694      	mov	ip, r2
 8000628:	4463      	add	r3, ip
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <KeyExpansion+0x1ec>)
 800062e:	5cd1      	ldrb	r1, [r2, r3]
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	404a      	eors	r2, r1
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <KeyExpansion+0x1ec>)
 800063e:	54d1      	strb	r1, [r2, r3]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a22      	ldr	r2, [pc, #136]	; (80006cc <KeyExpansion+0x1f8>)
 8000644:	4694      	mov	ip, r2
 8000646:	4463      	add	r3, ip
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	3301      	adds	r3, #1
 800064c:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <KeyExpansion+0x1ec>)
 800064e:	5cd1      	ldrb	r1, [r2, r3]
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	785a      	ldrb	r2, [r3, #1]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	3301      	adds	r3, #1
 800065a:	404a      	eors	r2, r1
 800065c:	b2d1      	uxtb	r1, r2
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <KeyExpansion+0x1ec>)
 8000660:	54d1      	strb	r1, [r2, r3]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4a19      	ldr	r2, [pc, #100]	; (80006cc <KeyExpansion+0x1f8>)
 8000666:	4694      	mov	ip, r2
 8000668:	4463      	add	r3, ip
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	3302      	adds	r3, #2
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <KeyExpansion+0x1ec>)
 8000670:	5cd1      	ldrb	r1, [r2, r3]
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	789a      	ldrb	r2, [r3, #2]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	3302      	adds	r3, #2
 800067c:	404a      	eors	r2, r1
 800067e:	b2d1      	uxtb	r1, r2
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <KeyExpansion+0x1ec>)
 8000682:	54d1      	strb	r1, [r2, r3]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <KeyExpansion+0x1f8>)
 8000688:	4694      	mov	ip, r2
 800068a:	4463      	add	r3, ip
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	3303      	adds	r3, #3
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <KeyExpansion+0x1ec>)
 8000692:	5cd1      	ldrb	r1, [r2, r3]
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	78da      	ldrb	r2, [r3, #3]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	3303      	adds	r3, #3
 800069e:	404a      	eors	r2, r1
 80006a0:	b2d1      	uxtb	r1, r2
 80006a2:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <KeyExpansion+0x1ec>)
 80006a4:	54d1      	strb	r1, [r2, r3]
  for (; i < Nb * (Nr + 1); ++i)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3301      	adds	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b2b      	cmp	r3, #43	; 0x2b
 80006b0:	d800      	bhi.n	80006b4 <KeyExpansion+0x1e0>
 80006b2:	e74a      	b.n	800054a <KeyExpansion+0x76>
  }
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b004      	add	sp, #16
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000024c 	.word	0x2000024c
 80006c0:	2000019c 	.word	0x2000019c
 80006c4:	3fffffff 	.word	0x3fffffff
 80006c8:	08007cf8 	.word	0x08007cf8
 80006cc:	3ffffffc 	.word	0x3ffffffc

080006d0 <AddRoundKey>:

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0002      	movs	r2, r0
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i=0;i<4;++i)
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e038      	b.n	8000758 <AddRoundKey+0x88>
  {
    for (j = 0; j < 4; ++j)
 80006e6:	230e      	movs	r3, #14
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e028      	b.n	8000742 <AddRoundKey+0x72>
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <AddRoundKey+0x9c>)
 80006f2:	6819      	ldr	r1, [r3, #0]
 80006f4:	260f      	movs	r6, #15
 80006f6:	19bb      	adds	r3, r7, r6
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	200e      	movs	r0, #14
 80006fc:	183b      	adds	r3, r7, r0
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0092      	lsls	r2, r2, #2
 8000702:	188a      	adds	r2, r1, r2
 8000704:	5cd4      	ldrb	r4, [r2, r3]
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	009a      	lsls	r2, r3, #2
 800070c:	19bb      	adds	r3, r7, r6
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	18d3      	adds	r3, r2, r3
 8000712:	009a      	lsls	r2, r3, #2
 8000714:	0005      	movs	r5, r0
 8000716:	183b      	adds	r3, r7, r0
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	18d3      	adds	r3, r2, r3
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <AddRoundKey+0xa0>)
 800071e:	5cd0      	ldrb	r0, [r2, r3]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <AddRoundKey+0x9c>)
 8000722:	6819      	ldr	r1, [r3, #0]
 8000724:	19bb      	adds	r3, r7, r6
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	197b      	adds	r3, r7, r5
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4060      	eors	r0, r4
 800072e:	b2c0      	uxtb	r0, r0
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	188a      	adds	r2, r1, r2
 8000734:	1c01      	adds	r1, r0, #0
 8000736:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8000738:	197b      	adds	r3, r7, r5
 800073a:	197a      	adds	r2, r7, r5
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	3201      	adds	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	230e      	movs	r3, #14
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d9d1      	bls.n	80006f0 <AddRoundKey+0x20>
  for (i=0;i<4;++i)
 800074c:	220f      	movs	r2, #15
 800074e:	18bb      	adds	r3, r7, r2
 8000750:	18ba      	adds	r2, r7, r2
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	3201      	adds	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	230f      	movs	r3, #15
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9c1      	bls.n	80006e6 <AddRoundKey+0x16>
    }
  }
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b005      	add	sp, #20
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000198 	.word	0x20000198
 8000770:	2000019c 	.word	0x2000019c

08000774 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	0002      	movs	r2, r0
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b25a      	sxtb	r2, r3
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	09db      	lsrs	r3, r3, #7
 800078e:	b2db      	uxtb	r3, r3
 8000790:	1c19      	adds	r1, r3, #0
 8000792:	1c0b      	adds	r3, r1, #0
 8000794:	18db      	adds	r3, r3, r3
 8000796:	185b      	adds	r3, r3, r1
 8000798:	1c19      	adds	r1, r3, #0
 800079a:	00c8      	lsls	r0, r1, #3
 800079c:	1c19      	adds	r1, r3, #0
 800079e:	1c03      	adds	r3, r0, #0
 80007a0:	18cb      	adds	r3, r1, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	4053      	eors	r3, r2
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(void)
{
 80007b4:	b5b0      	push	{r4, r5, r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e3a0      	b.n	8000f02 <InvMixColumns+0x74e>
  {
    a = (*state)[i][0];
 80007c0:	4bfe      	ldr	r3, [pc, #1016]	; (8000bbc <InvMixColumns+0x408>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	1cfb      	adds	r3, r7, #3
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	0089      	lsls	r1, r1, #2
 80007ca:	5c8a      	ldrb	r2, [r1, r2]
 80007cc:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 80007ce:	4bfb      	ldr	r3, [pc, #1004]	; (8000bbc <InvMixColumns+0x408>)
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	1cbb      	adds	r3, r7, #2
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	0092      	lsls	r2, r2, #2
 80007d8:	188a      	adds	r2, r1, r2
 80007da:	3201      	adds	r2, #1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 80007e0:	4bf6      	ldr	r3, [pc, #984]	; (8000bbc <InvMixColumns+0x408>)
 80007e2:	6819      	ldr	r1, [r3, #0]
 80007e4:	1c7b      	adds	r3, r7, #1
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	0092      	lsls	r2, r2, #2
 80007ea:	188a      	adds	r2, r1, r2
 80007ec:	3202      	adds	r2, #2
 80007ee:	7812      	ldrb	r2, [r2, #0]
 80007f0:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 80007f2:	4bf2      	ldr	r3, [pc, #968]	; (8000bbc <InvMixColumns+0x408>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	003b      	movs	r3, r7
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	188a      	adds	r2, r1, r2
 80007fe:	3203      	adds	r2, #3
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000804:	1cfb      	adds	r3, r7, #3
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff ffb3 	bl	8000774 <xtime>
 800080e:	0003      	movs	r3, r0
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ffaf 	bl	8000774 <xtime>
 8000816:	0003      	movs	r3, r0
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ffab 	bl	8000774 <xtime>
 800081e:	0003      	movs	r3, r0
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ffa7 	bl	8000774 <xtime>
 8000826:	1cbb      	adds	r3, r7, #2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff ffa2 	bl	8000774 <xtime>
 8000830:	0003      	movs	r3, r0
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff9e 	bl	8000774 <xtime>
 8000838:	1cbb      	adds	r3, r7, #2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff ff99 	bl	8000774 <xtime>
 8000842:	0003      	movs	r3, r0
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ff95 	bl	8000774 <xtime>
 800084a:	0003      	movs	r3, r0
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff91 	bl	8000774 <xtime>
 8000852:	0003      	movs	r3, r0
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff8d 	bl	8000774 <xtime>
 800085a:	1c7b      	adds	r3, r7, #1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff88 	bl	8000774 <xtime>
 8000864:	1c7b      	adds	r3, r7, #1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff83 	bl	8000774 <xtime>
 800086e:	0003      	movs	r3, r0
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff7f 	bl	8000774 <xtime>
 8000876:	0003      	movs	r3, r0
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff7b 	bl	8000774 <xtime>
 800087e:	0003      	movs	r3, r0
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff ff77 	bl	8000774 <xtime>
 8000886:	003b      	movs	r3, r7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff ff72 	bl	8000774 <xtime>
 8000890:	003b      	movs	r3, r7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff6d 	bl	8000774 <xtime>
 800089a:	0003      	movs	r3, r0
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff69 	bl	8000774 <xtime>
 80008a2:	003b      	movs	r3, r7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff ff64 	bl	8000774 <xtime>
 80008ac:	0003      	movs	r3, r0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff ff60 	bl	8000774 <xtime>
 80008b4:	0003      	movs	r3, r0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff5c 	bl	8000774 <xtime>
 80008bc:	0003      	movs	r3, r0
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ff58 	bl	8000774 <xtime>
 80008c4:	1cfb      	adds	r3, r7, #3
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ff53 	bl	8000774 <xtime>
 80008ce:	0003      	movs	r3, r0
 80008d0:	001c      	movs	r4, r3
 80008d2:	1cfb      	adds	r3, r7, #3
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ff4c 	bl	8000774 <xtime>
 80008dc:	0003      	movs	r3, r0
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff ff48 	bl	8000774 <xtime>
 80008e4:	0003      	movs	r3, r0
 80008e6:	4063      	eors	r3, r4
 80008e8:	b2dc      	uxtb	r4, r3
 80008ea:	1cfb      	adds	r3, r7, #3
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff ff40 	bl	8000774 <xtime>
 80008f4:	0003      	movs	r3, r0
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff ff3c 	bl	8000774 <xtime>
 80008fc:	0003      	movs	r3, r0
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff ff38 	bl	8000774 <xtime>
 8000904:	0003      	movs	r3, r0
 8000906:	4063      	eors	r3, r4
 8000908:	b2dc      	uxtb	r4, r3
 800090a:	1cbb      	adds	r3, r7, #2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff ff30 	bl	8000774 <xtime>
 8000914:	0003      	movs	r3, r0
 8000916:	001a      	movs	r2, r3
 8000918:	1cbb      	adds	r3, r7, #2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4053      	eors	r3, r2
 800091e:	b2dd      	uxtb	r5, r3
 8000920:	1cbb      	adds	r3, r7, #2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff ff25 	bl	8000774 <xtime>
 800092a:	0003      	movs	r3, r0
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ff21 	bl	8000774 <xtime>
 8000932:	0003      	movs	r3, r0
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff ff1d 	bl	8000774 <xtime>
 800093a:	0003      	movs	r3, r0
 800093c:	406b      	eors	r3, r5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4063      	eors	r3, r4
 8000942:	b2dc      	uxtb	r4, r3
 8000944:	1c7b      	adds	r3, r7, #1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff13 	bl	8000774 <xtime>
 800094e:	0003      	movs	r3, r0
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ff0f 	bl	8000774 <xtime>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	1c7b      	adds	r3, r7, #1
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4053      	eors	r3, r2
 8000960:	b2dd      	uxtb	r5, r3
 8000962:	1c7b      	adds	r3, r7, #1
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff ff04 	bl	8000774 <xtime>
 800096c:	0003      	movs	r3, r0
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff00 	bl	8000774 <xtime>
 8000974:	0003      	movs	r3, r0
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fefc 	bl	8000774 <xtime>
 800097c:	0003      	movs	r3, r0
 800097e:	406b      	eors	r3, r5
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4063      	eors	r3, r4
 8000984:	b2dc      	uxtb	r4, r3
 8000986:	003b      	movs	r3, r7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff fef2 	bl	8000774 <xtime>
 8000990:	0003      	movs	r3, r0
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff feee 	bl	8000774 <xtime>
 8000998:	0003      	movs	r3, r0
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff feea 	bl	8000774 <xtime>
 80009a0:	0003      	movs	r3, r0
 80009a2:	001a      	movs	r2, r3
 80009a4:	003b      	movs	r3, r7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4053      	eors	r3, r2
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b83      	ldr	r3, [pc, #524]	; (8000bbc <InvMixColumns+0x408>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4062      	eors	r2, r4
 80009b2:	b2d1      	uxtb	r1, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80009ba:	1cfb      	adds	r3, r7, #3
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fed8 	bl	8000774 <xtime>
 80009c4:	1cfb      	adds	r3, r7, #3
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fed3 	bl	8000774 <xtime>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fecf 	bl	8000774 <xtime>
 80009d6:	1cfb      	adds	r3, r7, #3
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0018      	movs	r0, r3
 80009dc:	f7ff feca 	bl	8000774 <xtime>
 80009e0:	0003      	movs	r3, r0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff fec6 	bl	8000774 <xtime>
 80009e8:	0003      	movs	r3, r0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fec2 	bl	8000774 <xtime>
 80009f0:	0003      	movs	r3, r0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff febe 	bl	8000774 <xtime>
 80009f8:	1cbb      	adds	r3, r7, #2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff feb9 	bl	8000774 <xtime>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff feb5 	bl	8000774 <xtime>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff feb1 	bl	8000774 <xtime>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fead 	bl	8000774 <xtime>
 8000a1a:	1c7b      	adds	r3, r7, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fea8 	bl	8000774 <xtime>
 8000a24:	0003      	movs	r3, r0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fea4 	bl	8000774 <xtime>
 8000a2c:	1c7b      	adds	r3, r7, #1
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fe9f 	bl	8000774 <xtime>
 8000a36:	0003      	movs	r3, r0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fe9b 	bl	8000774 <xtime>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fe97 	bl	8000774 <xtime>
 8000a46:	0003      	movs	r3, r0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fe93 	bl	8000774 <xtime>
 8000a4e:	003b      	movs	r3, r7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fe8e 	bl	8000774 <xtime>
 8000a58:	003b      	movs	r3, r7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fe89 	bl	8000774 <xtime>
 8000a62:	0003      	movs	r3, r0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fe85 	bl	8000774 <xtime>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fe81 	bl	8000774 <xtime>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fe7d 	bl	8000774 <xtime>
 8000a7a:	1cfb      	adds	r3, r7, #3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fe78 	bl	8000774 <xtime>
 8000a84:	0003      	movs	r3, r0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fe74 	bl	8000774 <xtime>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fe70 	bl	8000774 <xtime>
 8000a94:	0003      	movs	r3, r0
 8000a96:	001a      	movs	r2, r3
 8000a98:	1cfb      	adds	r3, r7, #3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4053      	eors	r3, r2
 8000a9e:	b2dc      	uxtb	r4, r3
 8000aa0:	1cbb      	adds	r3, r7, #2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fe65 	bl	8000774 <xtime>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	001d      	movs	r5, r3
 8000aae:	1cbb      	adds	r3, r7, #2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff fe5e 	bl	8000774 <xtime>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fe5a 	bl	8000774 <xtime>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	406b      	eors	r3, r5
 8000ac4:	b2dd      	uxtb	r5, r3
 8000ac6:	1cbb      	adds	r3, r7, #2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fe52 	bl	8000774 <xtime>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fe4e 	bl	8000774 <xtime>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fe4a 	bl	8000774 <xtime>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	406b      	eors	r3, r5
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4063      	eors	r3, r4
 8000ae8:	b2dc      	uxtb	r4, r3
 8000aea:	1c7b      	adds	r3, r7, #1
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff fe40 	bl	8000774 <xtime>
 8000af4:	0003      	movs	r3, r0
 8000af6:	001a      	movs	r2, r3
 8000af8:	1c7b      	adds	r3, r7, #1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4053      	eors	r3, r2
 8000afe:	b2dd      	uxtb	r5, r3
 8000b00:	1c7b      	adds	r3, r7, #1
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fe35 	bl	8000774 <xtime>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fe31 	bl	8000774 <xtime>
 8000b12:	0003      	movs	r3, r0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fe2d 	bl	8000774 <xtime>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	406b      	eors	r3, r5
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4063      	eors	r3, r4
 8000b22:	b2dc      	uxtb	r4, r3
 8000b24:	003b      	movs	r3, r7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fe23 	bl	8000774 <xtime>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fe1f 	bl	8000774 <xtime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	001a      	movs	r2, r3
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4053      	eors	r3, r2
 8000b40:	b2dd      	uxtb	r5, r3
 8000b42:	003b      	movs	r3, r7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe14 	bl	8000774 <xtime>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fe10 	bl	8000774 <xtime>
 8000b54:	0003      	movs	r3, r0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fe0c 	bl	8000774 <xtime>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	406b      	eors	r3, r5
 8000b60:	b2d9      	uxtb	r1, r3
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <InvMixColumns+0x408>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	0023      	movs	r3, r4
 8000b68:	404b      	eors	r3, r1
 8000b6a:	b2d9      	uxtb	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	3301      	adds	r3, #1
 8000b74:	1c0a      	adds	r2, r1, #0
 8000b76:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000b78:	1cfb      	adds	r3, r7, #3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fdf9 	bl	8000774 <xtime>
 8000b82:	1cfb      	adds	r3, r7, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fdf4 	bl	8000774 <xtime>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fdf0 	bl	8000774 <xtime>
 8000b94:	0003      	movs	r3, r0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fdec 	bl	8000774 <xtime>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fde8 	bl	8000774 <xtime>
 8000ba4:	1cbb      	adds	r3, r7, #2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fde3 	bl	8000774 <xtime>
 8000bae:	1cbb      	adds	r3, r7, #2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff fdde 	bl	8000774 <xtime>
 8000bb8:	e002      	b.n	8000bc0 <InvMixColumns+0x40c>
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000198 	.word	0x20000198
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fdd6 	bl	8000774 <xtime>
 8000bc8:	1cbb      	adds	r3, r7, #2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fdd1 	bl	8000774 <xtime>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fdcd 	bl	8000774 <xtime>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fdc9 	bl	8000774 <xtime>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fdc5 	bl	8000774 <xtime>
 8000bea:	1c7b      	adds	r3, r7, #1
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fdc0 	bl	8000774 <xtime>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fdbc 	bl	8000774 <xtime>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fdb8 	bl	8000774 <xtime>
 8000c04:	0003      	movs	r3, r0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fdb4 	bl	8000774 <xtime>
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fdaf 	bl	8000774 <xtime>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fdab 	bl	8000774 <xtime>
 8000c1e:	003b      	movs	r3, r7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fda6 	bl	8000774 <xtime>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fda2 	bl	8000774 <xtime>
 8000c30:	0003      	movs	r3, r0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff fd9e 	bl	8000774 <xtime>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fd9a 	bl	8000774 <xtime>
 8000c40:	1cfb      	adds	r3, r7, #3
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fd95 	bl	8000774 <xtime>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fd91 	bl	8000774 <xtime>
 8000c52:	0003      	movs	r3, r0
 8000c54:	001a      	movs	r2, r3
 8000c56:	1cfb      	adds	r3, r7, #3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4053      	eors	r3, r2
 8000c5c:	b2dc      	uxtb	r4, r3
 8000c5e:	1cfb      	adds	r3, r7, #3
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fd86 	bl	8000774 <xtime>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fd82 	bl	8000774 <xtime>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff fd7e 	bl	8000774 <xtime>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	4063      	eors	r3, r4
 8000c7c:	b2dc      	uxtb	r4, r3
 8000c7e:	1cbb      	adds	r3, r7, #2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fd76 	bl	8000774 <xtime>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fd72 	bl	8000774 <xtime>
 8000c90:	0003      	movs	r3, r0
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fd6e 	bl	8000774 <xtime>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4063      	eors	r3, r4
 8000ca6:	b2dc      	uxtb	r4, r3
 8000ca8:	1c7b      	adds	r3, r7, #1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fd61 	bl	8000774 <xtime>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	1c7b      	adds	r3, r7, #1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fd5a 	bl	8000774 <xtime>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fd56 	bl	8000774 <xtime>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	406b      	eors	r3, r5
 8000ccc:	b2dd      	uxtb	r5, r3
 8000cce:	1c7b      	adds	r3, r7, #1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fd4e 	bl	8000774 <xtime>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fd4a 	bl	8000774 <xtime>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff fd46 	bl	8000774 <xtime>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	406b      	eors	r3, r5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4063      	eors	r3, r4
 8000cf0:	b2dc      	uxtb	r4, r3
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fd3c 	bl	8000774 <xtime>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	001a      	movs	r2, r3
 8000d00:	003b      	movs	r3, r7
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4053      	eors	r3, r2
 8000d06:	b2dd      	uxtb	r5, r3
 8000d08:	003b      	movs	r3, r7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fd31 	bl	8000774 <xtime>
 8000d12:	0003      	movs	r3, r0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff fd2d 	bl	8000774 <xtime>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fd29 	bl	8000774 <xtime>
 8000d22:	0003      	movs	r3, r0
 8000d24:	406b      	eors	r3, r5
 8000d26:	b2d9      	uxtb	r1, r3
 8000d28:	4b7a      	ldr	r3, [pc, #488]	; (8000f14 <InvMixColumns+0x760>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	0023      	movs	r3, r4
 8000d2e:	404b      	eors	r3, r1
 8000d30:	b2d9      	uxtb	r1, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	3302      	adds	r3, #2
 8000d3a:	1c0a      	adds	r2, r1, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000d3e:	1cfb      	adds	r3, r7, #3
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fd16 	bl	8000774 <xtime>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fd12 	bl	8000774 <xtime>
 8000d50:	1cfb      	adds	r3, r7, #3
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fd0d 	bl	8000774 <xtime>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fd09 	bl	8000774 <xtime>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fd05 	bl	8000774 <xtime>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fd01 	bl	8000774 <xtime>
 8000d72:	1cbb      	adds	r3, r7, #2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fcfc 	bl	8000774 <xtime>
 8000d7c:	1cbb      	adds	r3, r7, #2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fcf7 	bl	8000774 <xtime>
 8000d86:	0003      	movs	r3, r0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fcf3 	bl	8000774 <xtime>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff fcef 	bl	8000774 <xtime>
 8000d96:	0003      	movs	r3, r0
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fceb 	bl	8000774 <xtime>
 8000d9e:	1c7b      	adds	r3, r7, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fce6 	bl	8000774 <xtime>
 8000da8:	1c7b      	adds	r3, r7, #1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff fce1 	bl	8000774 <xtime>
 8000db2:	0003      	movs	r3, r0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fcdd 	bl	8000774 <xtime>
 8000dba:	1c7b      	adds	r3, r7, #1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fcd8 	bl	8000774 <xtime>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff fcd4 	bl	8000774 <xtime>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fcd0 	bl	8000774 <xtime>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fccc 	bl	8000774 <xtime>
 8000ddc:	003b      	movs	r3, r7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fcc7 	bl	8000774 <xtime>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff fcc3 	bl	8000774 <xtime>
 8000dee:	0003      	movs	r3, r0
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fcbf 	bl	8000774 <xtime>
 8000df6:	0003      	movs	r3, r0
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fcbb 	bl	8000774 <xtime>
 8000dfe:	1cfb      	adds	r3, r7, #3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fcb6 	bl	8000774 <xtime>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	1cfb      	adds	r3, r7, #3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4053      	eors	r3, r2
 8000e12:	b2dc      	uxtb	r4, r3
 8000e14:	1cfb      	adds	r3, r7, #3
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fcab 	bl	8000774 <xtime>
 8000e1e:	0003      	movs	r3, r0
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fca7 	bl	8000774 <xtime>
 8000e26:	0003      	movs	r3, r0
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff fca3 	bl	8000774 <xtime>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	4063      	eors	r3, r4
 8000e32:	b2dc      	uxtb	r4, r3
 8000e34:	1cbb      	adds	r3, r7, #2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fc9b 	bl	8000774 <xtime>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fc97 	bl	8000774 <xtime>
 8000e46:	0003      	movs	r3, r0
 8000e48:	001a      	movs	r2, r3
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4053      	eors	r3, r2
 8000e50:	b2dd      	uxtb	r5, r3
 8000e52:	1cbb      	adds	r3, r7, #2
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fc8c 	bl	8000774 <xtime>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fc88 	bl	8000774 <xtime>
 8000e64:	0003      	movs	r3, r0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff fc84 	bl	8000774 <xtime>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	406b      	eors	r3, r5
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4063      	eors	r3, r4
 8000e74:	b2dc      	uxtb	r4, r3
 8000e76:	1c7b      	adds	r3, r7, #1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fc7a 	bl	8000774 <xtime>
 8000e80:	0003      	movs	r3, r0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fc76 	bl	8000774 <xtime>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fc72 	bl	8000774 <xtime>
 8000e90:	0003      	movs	r3, r0
 8000e92:	001a      	movs	r2, r3
 8000e94:	1c7b      	adds	r3, r7, #1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4053      	eors	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4063      	eors	r3, r4
 8000e9e:	b2dc      	uxtb	r4, r3
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fc65 	bl	8000774 <xtime>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	001d      	movs	r5, r3
 8000eae:	003b      	movs	r3, r7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff fc5e 	bl	8000774 <xtime>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fc5a 	bl	8000774 <xtime>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	406b      	eors	r3, r5
 8000ec4:	b2dd      	uxtb	r5, r3
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fc52 	bl	8000774 <xtime>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fc4e 	bl	8000774 <xtime>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff fc4a 	bl	8000774 <xtime>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	406b      	eors	r3, r5
 8000ee4:	b2d9      	uxtb	r1, r3
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <InvMixColumns+0x760>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	0023      	movs	r3, r4
 8000eec:	404b      	eors	r3, r1
 8000eee:	b2d9      	uxtb	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	3303      	adds	r3, #3
 8000ef8:	1c0a      	adds	r2, r1, #0
 8000efa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	dc00      	bgt.n	8000f0a <InvMixColumns+0x756>
 8000f08:	e45a      	b.n	80007c0 <InvMixColumns+0xc>
  }
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000198 	.word	0x20000198

08000f18 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(void)
{
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e028      	b.n	8000f78 <InvSubBytes+0x60>
  {
    for (j = 0; j < 4; ++j)
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e01b      	b.n	8000f66 <InvSubBytes+0x4e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <InvSubBytes+0x70>)
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	188a      	adds	r2, r1, r2
 8000f3e:	5cd2      	ldrb	r2, [r2, r3]
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <InvSubBytes+0x70>)
 8000f42:	681d      	ldr	r5, [r3, #0]
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	781e      	ldrb	r6, [r3, #0]
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	781c      	ldrb	r4, [r3, #0]
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	f7ff fab1 	bl	80004b4 <getSBoxInvert>
 8000f52:	0003      	movs	r3, r0
 8000f54:	001a      	movs	r2, r3
 8000f56:	00b3      	lsls	r3, r6, #2
 8000f58:	18eb      	adds	r3, r5, r3
 8000f5a:	551a      	strb	r2, [r3, r4]
    for (j = 0; j < 4; ++j)
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	1dba      	adds	r2, r7, #6
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	3201      	adds	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d9df      	bls.n	8000f2e <InvSubBytes+0x16>
  for (i = 0; i < 4; ++i)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	1dfa      	adds	r2, r7, #7
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	3201      	adds	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d9d2      	bls.n	8000f26 <InvSubBytes+0xe>
    }
  }
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b003      	add	sp, #12
 8000f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f88:	20000198 	.word	0x20000198

08000f8c <InvShiftRows>:

static void InvShiftRows(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <InvShiftRows+0xc0>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	7b52      	ldrb	r2, [r2, #13]
 8000f9a:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <InvShiftRows+0xc0>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <InvShiftRows+0xc0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	7a52      	ldrb	r2, [r2, #9]
 8000fa6:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <InvShiftRows+0xc0>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <InvShiftRows+0xc0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	7952      	ldrb	r2, [r2, #5]
 8000fb2:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <InvShiftRows+0xc0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <InvShiftRows+0xc0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	7852      	ldrb	r2, [r2, #1]
 8000fbe:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <InvShiftRows+0xc0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1dfa      	adds	r2, r7, #7
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <InvShiftRows+0xc0>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	7892      	ldrb	r2, [r2, #2]
 8000fd2:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <InvShiftRows+0xc0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <InvShiftRows+0xc0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	7a92      	ldrb	r2, [r2, #10]
 8000fde:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <InvShiftRows+0xc0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1dfa      	adds	r2, r7, #7
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <InvShiftRows+0xc0>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	7992      	ldrb	r2, [r2, #6]
 8000ff2:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <InvShiftRows+0xc0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <InvShiftRows+0xc0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	7b92      	ldrb	r2, [r2, #14]
 8000ffe:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <InvShiftRows+0xc0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1dfa      	adds	r2, r7, #7
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <InvShiftRows+0xc0>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	78d2      	ldrb	r2, [r2, #3]
 8001012:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <InvShiftRows+0xc0>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <InvShiftRows+0xc0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	79d2      	ldrb	r2, [r2, #7]
 800101e:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <InvShiftRows+0xc0>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <InvShiftRows+0xc0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	7ad2      	ldrb	r2, [r2, #11]
 800102a:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <InvShiftRows+0xc0>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <InvShiftRows+0xc0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	7bd2      	ldrb	r2, [r2, #15]
 8001036:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <InvShiftRows+0xc0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1dfa      	adds	r2, r7, #7
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	73da      	strb	r2, [r3, #15]
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000198 	.word	0x20000198

08001050 <InvCipher>:
  ShiftRows();
  AddRoundKey(Nr);
}

static void InvCipher(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  uint8_t round=0;
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr);
 800105c:	200a      	movs	r0, #10
 800105e:	f7ff fb37 	bl	80006d0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	2209      	movs	r2, #9
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e00f      	b.n	800108a <InvCipher+0x3a>
  {
    InvShiftRows();
 800106a:	f7ff ff8f 	bl	8000f8c <InvShiftRows>
    InvSubBytes();
 800106e:	f7ff ff53 	bl	8000f18 <InvSubBytes>
    AddRoundKey(round);
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fb2a 	bl	80006d0 <AddRoundKey>
    InvMixColumns();
 800107c:	f7ff fb9a 	bl	80007b4 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	1dfa      	adds	r2, r7, #7
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	3a01      	subs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1eb      	bne.n	800106a <InvCipher+0x1a>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows();
 8001092:	f7ff ff7b 	bl	8000f8c <InvShiftRows>
  InvSubBytes();
 8001096:	f7ff ff3f 	bl	8000f18 <InvSubBytes>
  AddRoundKey(0);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fb18 	bl	80006d0 <AddRoundKey>
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for (i = 0; i < BLOCKLEN; ++i) //WAS for(i = 0; i < KEYLEN; ++i) but the block in AES is always 128bit so 16 bytes!
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e017      	b.n	80010ea <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 80010ba:	240f      	movs	r4, #15
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	18d3      	adds	r3, r2, r3
 80010c4:	7819      	ldrb	r1, [r3, #0]
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <XorWithIv+0x54>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	18d3      	adds	r3, r2, r3
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	18c3      	adds	r3, r0, r3
 80010da:	404a      	eors	r2, r1
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < BLOCKLEN; ++i) //WAS for(i = 0; i < KEYLEN; ++i) but the block in AES is always 128bit so 16 bytes!
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	193a      	adds	r2, r7, r4
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	3201      	adds	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d9e2      	bls.n	80010ba <XorWithIv+0x12>
  }
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b005      	add	sp, #20
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	20000250 	.word	0x20000250

08001100 <AES_CBC_decrypt_buffer>:
    Cipher();
  }
}

void AES_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  uintptr_t i;
  uint8_t extra = length % BLOCKLEN; /* Remaining bytes in the last non-full block */
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	2313      	movs	r3, #19
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	210f      	movs	r1, #15
 8001118:	400a      	ands	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]

  // Skip the key expansion if key is passed as 0
  if (0 != key)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <AES_CBC_decrypt_buffer+0x2c>
  {
    Key = key;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <AES_CBC_decrypt_buffer+0xa8>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	601a      	str	r2, [r3, #0]
    KeyExpansion();
 8001128:	f7ff f9d4 	bl	80004d4 <KeyExpansion>
  }

  // If iv is passed as 0, we continue to encrypt without re-setting the Iv
  if (iv != 0)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <AES_CBC_decrypt_buffer+0x38>
  {
    Iv = (uint8_t*)iv;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <AES_CBC_decrypt_buffer+0xac>)
 8001134:	6a3a      	ldr	r2, [r7, #32]
 8001136:	601a      	str	r2, [r3, #0]
  }

  for (i = 0; i < length; i += BLOCKLEN)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e01a      	b.n	8001174 <AES_CBC_decrypt_buffer+0x74>
  {
    memcpy(output, input, BLOCKLEN);
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2210      	movs	r2, #16
 8001144:	0018      	movs	r0, r3
 8001146:	f005 fcd8 	bl	8006afa <memcpy>
    state = (state_t*)output;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <AES_CBC_decrypt_buffer+0xb0>)
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	601a      	str	r2, [r3, #0]
    InvCipher();
 8001150:	f7ff ff7e 	bl	8001050 <InvCipher>
    XorWithIv(output);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ffa6 	bl	80010a8 <XorWithIv>
    Iv = input;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <AES_CBC_decrypt_buffer+0xac>)
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	601a      	str	r2, [r3, #0]
    input += BLOCKLEN;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3310      	adds	r3, #16
 8001166:	60bb      	str	r3, [r7, #8]
    output += BLOCKLEN;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3310      	adds	r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < length; i += BLOCKLEN)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3310      	adds	r3, #16
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3e0      	bcc.n	800113e <AES_CBC_decrypt_buffer+0x3e>
  }

  if (extra)
 800117c:	2313      	movs	r3, #19
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00c      	beq.n	80011a0 <AES_CBC_decrypt_buffer+0xa0>
  {
    memcpy(output, input, extra);
 8001186:	2313      	movs	r3, #19
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	0018      	movs	r0, r3
 8001192:	f005 fcb2 	bl	8006afa <memcpy>
    state = (state_t*)output;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <AES_CBC_decrypt_buffer+0xb0>)
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	601a      	str	r2, [r3, #0]
    InvCipher();
 800119c:	f7ff ff58 	bl	8001050 <InvCipher>
  }
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b006      	add	sp, #24
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000024c 	.word	0x2000024c
 80011ac:	20000250 	.word	0x20000250
 80011b0:	20000198 	.word	0x20000198

080011b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <__NVIC_SystemReset+0x18>)
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SystemReset+0x1c>)
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	e7fd      	b.n	80011c6 <__NVIC_SystemReset+0x12>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	05fa0004 	.word	0x05fa0004

080011d4 <bus_cmd_both_read_handler>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

uint32_t bus_cmd_both_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	230a      	movs	r3, #10
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	1c0a      	adds	r2, r1, #0
 80011e6:	801a      	strh	r2, [r3, #0]


	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <bus_cmd_tc_read_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 0
 */
uint32_t bus_cmd_tc_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	230a      	movs	r3, #10
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	1c0a      	adds	r2, r1, #0
 8001204:	801a      	strh	r2, [r3, #0]


	return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}

08001210 <bus_cmd_pa_read_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t bus_cmd_pa_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	230a      	movs	r3, #10
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	1c0a      	adds	r2, r1, #0
 8001222:	801a      	strh	r2, [r3, #0]

	return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}

0800122e <bus_cmd_ping_handler>:

/******************************************************************************/

uint32_t bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	230a      	movs	r3, #10
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	1c0a      	adds	r2, r1, #0
 8001240:	801a      	strh	r2, [r3, #0]
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}

0800124c <bus_cmd_tc_conf_read_handler>:

/******************************************************************************/

uint32_t bus_cmd_tc_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	230a      	movs	r3, #10
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	1c0a      	adds	r2, r1, #0
 800125e:	801a      	strh	r2, [r3, #0]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}

0800126a <bus_cmd_tc_conf_write_handler>:

/******************************************************************************/

uint32_t bus_cmd_tc_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	230a      	movs	r3, #10
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	1c0a      	adds	r2, r1, #0
 800127c:	801a      	strh	r2, [r3, #0]
	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b004      	add	sp, #16
 8001286:	bd80      	pop	{r7, pc}

08001288 <bus_cmd_pa_conf_read_handler>:

/******************************************************************************/

uint32_t bus_cmd_pa_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	230a      	movs	r3, #10
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	1c0a      	adds	r2, r1, #0
 800129a:	801a      	strh	r2, [r3, #0]
	return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <bus_cmd_pa_conf_write_handler>:

/******************************************************************************/

uint32_t bus_cmd_pa_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	230a      	movs	r3, #10
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	1c0a      	adds	r2, r1, #0
 80012b8:	801a      	strh	r2, [r3, #0]
	return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b004      	add	sp, #16
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <bus_cmd_read_info_handler>:

/******************************************************************************/

uint32_t bus_cmd_read_info_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	230a      	movs	r3, #10
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	1c0a      	adds	r2, r1, #0
 80012d6:	801a      	strh	r2, [r3, #0]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <rt_bus_cmd_enter_bootloader>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 0
 */
uint32_t rt_bus_cmd_enter_bootloader (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	230a      	movs	r3, #10
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	1c0a      	adds	r2, r1, #0
 80012f6:	801a      	strh	r2, [r3, #0]
	//bus_entering_bootlaoder_hook();
	enterBL = 1;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <rt_bus_cmd_enter_bootloader+0x24>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]

	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000254 	.word	0x20000254

0800130c <rt_bus_cmd_reset>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	230a      	movs	r3, #10
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	1c0a      	adds	r2, r1, #0
 800131e:	801a      	strh	r2, [r3, #0]
	iapMailbox[0] = 0;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <rt_bus_cmd_reset+0x24>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 8001326:	4b02      	ldr	r3, [pc, #8]	; (8001330 <rt_bus_cmd_reset+0x24>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]

	NVIC_SystemReset();
 800132c:	f7ff ff42 	bl	80011b4 <__NVIC_SystemReset>
 8001330:	20000100 	.word	0x20000100

08001334 <rt_bus_cmd_bl_stay>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t rt_bus_cmd_bl_stay (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	230a      	movs	r3, #10
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	1c0a      	adds	r2, r1, #0
 8001346:	801a      	strh	r2, [r3, #0]
	gStayInBootloader = 1;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <rt_bus_cmd_bl_stay+0x3c>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
	txData[0] = 1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
	txData[1] = blStay;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <rt_bus_cmd_bl_stay+0x40>)
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	701a      	strb	r2, [r3, #0]
	*txLen = 2;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2202      	movs	r2, #2
 8001362:	801a      	strh	r2, [r3, #0]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	20000668 	.word	0x20000668
 8001374:	20000108 	.word	0x20000108

08001378 <rt_bus_cmd_bl_read_handler>:

/******************************************************************************/

uint32_t rt_bus_cmd_bl_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	230a      	movs	r3, #10
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	1c0a      	adds	r2, r1, #0
 800138a:	801a      	strh	r2, [r3, #0]
	return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <get_mem_type>:
 *
 * @param address flash address
 * @return uint32_t
 */
uint32_t get_mem_type(uint32_t address)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if ((address >= FLASH_START_ADDRESS) & (address<=FLASH_END_ADDRESS))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <get_mem_type+0x5c>)
 80013a4:	429a      	cmp	r2, r3
 80013a6:	419b      	sbcs	r3, r3
 80013a8:	425b      	negs	r3, r3
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <get_mem_type+0x60>)
 80013b0:	2300      	movs	r3, #0
 80013b2:	4288      	cmp	r0, r1
 80013b4:	415b      	adcs	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <get_mem_type+0x2c>
		return MEM_TYPE_FLASH;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e012      	b.n	80013ea <get_mem_type+0x52>
	else if ((address >= RAM_START_ADDRESS) & (address <= RAM_END_ADDRESS))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <get_mem_type+0x64>)
 80013c8:	429a      	cmp	r2, r3
 80013ca:	419b      	sbcs	r3, r3
 80013cc:	425b      	negs	r3, r3
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <get_mem_type+0x68>)
 80013d4:	2300      	movs	r3, #0
 80013d6:	4288      	cmp	r0, r1
 80013d8:	415b      	adcs	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <get_mem_type+0x50>
		return MEM_TYPE_RAM;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <get_mem_type+0x52>
	else
		return MEM_TYPE_UNK;
 80013e8:	2303      	movs	r3, #3
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	07ffffff 	.word	0x07ffffff
 80013f8:	08030000 	.word	0x08030000
 80013fc:	1fffffff 	.word	0x1fffffff
 8001400:	20020000 	.word	0x20020000

08001404 <rt_bus_cmd_bl_write_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t
 */
uint32_t rt_bus_cmd_bl_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b08f      	sub	sp, #60	; 0x3c
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	230a      	movs	r3, #10
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	1c0a      	adds	r2, r1, #0
 8001416:	801a      	strh	r2, [r3, #0]
	uint32_t writeaddress;
	uint8_t *iv;
	uint8_t *data;
	uint8_t decBuffer[IV_LEN];

	rcvCount++;
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 8001420:	601a      	str	r2, [r3, #0]
	if (rcvCount == 1)
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <rt_bus_cmd_bl_write_handler+0x38>
	{
		memcpy(&rcvBufferBL[0], &rxData[0], ADDRESS_LEN + SPI_FW_PART);
 800142a:	23f8      	movs	r3, #248	; 0xf8
 800142c:	33ff      	adds	r3, #255	; 0xff
 800142e:	001a      	movs	r2, r3
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <rt_bus_cmd_bl_write_handler+0x170>)
 8001434:	0018      	movs	r0, r3
 8001436:	f005 fb60 	bl	8006afa <memcpy>
 800143a:	e094      	b.n	8001566 <rt_bus_cmd_bl_write_handler+0x162>
	}
	else if(rcvCount == 3)
 800143c:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d109      	bne.n	8001458 <rt_bus_cmd_bl_write_handler+0x54>
	{
		memcpy(&rcvBufferBL[ADDRESS_LEN + SPI_FW_PART], &rxData[ADDRESS_LEN], SPI_FW_PART);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1d19      	adds	r1, r3, #4
 8001448:	23f4      	movs	r3, #244	; 0xf4
 800144a:	33ff      	adds	r3, #255	; 0xff
 800144c:	001a      	movs	r2, r3
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <rt_bus_cmd_bl_write_handler+0x174>)
 8001450:	0018      	movs	r0, r3
 8001452:	f005 fb52 	bl	8006afa <memcpy>
 8001456:	e086      	b.n	8001566 <rt_bus_cmd_bl_write_handler+0x162>
	}
	else if (rcvCount == 5)
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d107      	bne.n	8001470 <rt_bus_cmd_bl_write_handler+0x6c>
	{
		memcpy(&rcvBufferBL[ADDRESS_LEN + SPI_FW_PART + SPI_FW_PART], &rxData[ADDRESS_LEN], SPI_FW_PART2);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1d19      	adds	r1, r3, #4
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <rt_bus_cmd_bl_write_handler+0x178>)
 8001466:	223a      	movs	r2, #58	; 0x3a
 8001468:	0018      	movs	r0, r3
 800146a:	f005 fb46 	bl	8006afa <memcpy>
 800146e:	e07a      	b.n	8001566 <rt_bus_cmd_bl_write_handler+0x162>
	}
	else if (rcvCount == 6)
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b06      	cmp	r3, #6
 8001476:	d000      	beq.n	800147a <rt_bus_cmd_bl_write_handler+0x76>
 8001478:	e075      	b.n	8001566 <rt_bus_cmd_bl_write_handler+0x162>
	{
		memcpy(&writeaddress, &rcvBufferBL[0], ADDRESS_LEN);
 800147a:	493e      	ldr	r1, [pc, #248]	; (8001574 <rt_bus_cmd_bl_write_handler+0x170>)
 800147c:	2320      	movs	r3, #32
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2204      	movs	r2, #4
 8001482:	0018      	movs	r0, r3
 8001484:	f005 fb39 	bl	8006afa <memcpy>
		uint32_t mtype;
		iv = &rcvBufferBL[ADDRESS_LEN];
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <rt_bus_cmd_bl_write_handler+0x17c>)
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
		data = &rcvBufferBL[ADDRESS_LEN + IV_LEN];
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <rt_bus_cmd_bl_write_handler+0x180>)
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28

		AES_CBC_decrypt_buffer(decBuffer, data, IV_LEN, aes_key, iv);
 8001490:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <rt_bus_cmd_bl_write_handler+0x184>)
 8001492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001494:	2410      	movs	r4, #16
 8001496:	1938      	adds	r0, r7, r4
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	0013      	movs	r3, r2
 800149e:	2210      	movs	r2, #16
 80014a0:	f7ff fe2e 	bl	8001100 <AES_CBC_decrypt_buffer>
		if (memcmp("ROTA",&decBuffer[0],4) != 0)
 80014a4:	1939      	adds	r1, r7, r4
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <rt_bus_cmd_bl_write_handler+0x188>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	0018      	movs	r0, r3
 80014ac:	f005 fb16 	bl	8006adc <memcmp>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d002      	beq.n	80014ba <rt_bus_cmd_bl_write_handler+0xb6>
			return -1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	425b      	negs	r3, r3
 80014b8:	e056      	b.n	8001568 <rt_bus_cmd_bl_write_handler+0x164>
		if (memcmp("ROTA",&decBuffer[12],4) != 0)
 80014ba:	2310      	movs	r3, #16
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	330c      	adds	r3, #12
 80014c0:	0019      	movs	r1, r3
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <rt_bus_cmd_bl_write_handler+0x188>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	0018      	movs	r0, r3
 80014c8:	f005 fb08 	bl	8006adc <memcmp>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d002      	beq.n	80014d6 <rt_bus_cmd_bl_write_handler+0xd2>
			return -1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	425b      	negs	r3, r3
 80014d4:	e048      	b.n	8001568 <rt_bus_cmd_bl_write_handler+0x164>

		AES_CBC_decrypt_buffer(flashBuffer, data, IV_LEN + FW_LEN, aes_key, iv);
 80014d6:	4c2c      	ldr	r4, [pc, #176]	; (8001588 <rt_bus_cmd_bl_write_handler+0x184>)
 80014d8:	2382      	movs	r3, #130	; 0x82
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014de:	482c      	ldr	r0, [pc, #176]	; (8001590 <rt_bus_cmd_bl_write_handler+0x18c>)
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	0023      	movs	r3, r4
 80014e6:	f7ff fe0b 	bl	8001100 <AES_CBC_decrypt_buffer>

		mtype = get_mem_type(writeaddress);
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ff53 	bl	8001398 <get_mem_type>
 80014f2:	0003      	movs	r3, r0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24

		if (mtype == MEM_TYPE_FLASH)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10d      	bne.n	8001518 <rt_bus_cmd_bl_write_handler+0x114>
		{
			FLASH_If_Init();
 80014fc:	f000 fa96 	bl	8001a2c <FLASH_If_Init>
			if (FLASH_If_Write(writeaddress, (uint32_t *)&flashBuffer[IV_LEN], FW_LEN/4) != HAL_OK)
 8001500:	6a38      	ldr	r0, [r7, #32]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <rt_bus_cmd_bl_write_handler+0x190>)
 8001508:	0019      	movs	r1, r3
 800150a:	f000 fad4 	bl	8001ab6 <FLASH_If_Write>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d012      	beq.n	8001538 <rt_bus_cmd_bl_write_handler+0x134>
				return -1;
 8001512:	2301      	movs	r3, #1
 8001514:	425b      	negs	r3, r3
 8001516:	e027      	b.n	8001568 <rt_bus_cmd_bl_write_handler+0x164>
		}
		else if (mtype == MEM_TYPE_RAM)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	2b01      	cmp	r3, #1
 800151c:	d109      	bne.n	8001532 <rt_bus_cmd_bl_write_handler+0x12e>
		{
			memcpy((uint8_t *)writeaddress, &rxData[ADDRESS_LEN], FW_LEN);
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	0018      	movs	r0, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1d19      	adds	r1, r3, #4
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	001a      	movs	r2, r3
 800152c:	f005 fae5 	bl	8006afa <memcpy>
 8001530:	e002      	b.n	8001538 <rt_bus_cmd_bl_write_handler+0x134>
		}
		else
		{
			return -1;
 8001532:	2301      	movs	r3, #1
 8001534:	425b      	negs	r3, r3
 8001536:	e017      	b.n	8001568 <rt_bus_cmd_bl_write_handler+0x164>
		}

		count++;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <rt_bus_cmd_bl_write_handler+0x194>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <rt_bus_cmd_bl_write_handler+0x194>)
 8001542:	701a      	strb	r2, [r3, #0]
		dbg_printf("Write Done : %d - %x - %d\n", count, writeaddress, mtype);
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <rt_bus_cmd_bl_write_handler+0x194>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	0019      	movs	r1, r3
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	4813      	ldr	r0, [pc, #76]	; (800159c <rt_bus_cmd_bl_write_handler+0x198>)
 8001550:	f005 fae4 	bl	8006b1c <iprintf>

		rcvCount = 0;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <rt_bus_cmd_bl_write_handler+0x16c>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
		memset(rcvBufferBL, 0, FW_LEN + FW_HEADER + ADDRESS_LEN);
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <rt_bus_cmd_bl_write_handler+0x19c>)
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <rt_bus_cmd_bl_write_handler+0x170>)
 800155e:	2100      	movs	r1, #0
 8001560:	0018      	movs	r0, r3
 8001562:	f005 fad3 	bl	8006b0c <memset>
	}

	return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b00d      	add	sp, #52	; 0x34
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	20000258 	.word	0x20000258
 8001574:	20000a88 	.word	0x20000a88
 8001578:	20000c7f 	.word	0x20000c7f
 800157c:	20000e72 	.word	0x20000e72
 8001580:	20000a8c 	.word	0x20000a8c
 8001584:	20000a9c 	.word	0x20000a9c
 8001588:	08007d04 	.word	0x08007d04
 800158c:	08007a38 	.word	0x08007a38
 8001590:	20000678 	.word	0x20000678
 8001594:	20000688 	.word	0x20000688
 8001598:	2000025c 	.word	0x2000025c
 800159c:	08007a40 	.word	0x08007a40
 80015a0:	00000424 	.word	0x00000424

080015a4 <rt_bus_cmd_bl_erase_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t
 */
uint32_t rt_bus_cmd_bl_erase_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	230a      	movs	r3, #10
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	1c0a      	adds	r2, r1, #0
 80015b6:	801a      	strh	r2, [r3, #0]
	uint32_t eraseaddress;
	uint32_t eraseLen;
	uint32_t mtype;

	memcpy(&eraseaddress, &rxData[0], ERASE_ADDR_LEN);
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	2318      	movs	r3, #24
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2204      	movs	r2, #4
 80015c0:	0018      	movs	r0, r3
 80015c2:	f005 fa9a 	bl	8006afa <memcpy>
	memcpy(&eraseLen, &rxData[ERASE_ADDR_LEN], ERASE_ADDR_LEN);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1d19      	adds	r1, r3, #4
 80015ca:	2314      	movs	r3, #20
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2204      	movs	r2, #4
 80015d0:	0018      	movs	r0, r3
 80015d2:	f005 fa92 	bl	8006afa <memcpy>

	if (eraseaddress % FLASH_PAGE_SIZE)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	227f      	movs	r2, #127	; 0x7f
 80015da:	4013      	ands	r3, r2
 80015dc:	d002      	beq.n	80015e4 <rt_bus_cmd_bl_erase_handler+0x40>
		return -1;
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	e030      	b.n	8001646 <rt_bus_cmd_bl_erase_handler+0xa2>
	if (eraseLen % FLASH_PAGE_SIZE)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	227f      	movs	r2, #127	; 0x7f
 80015e8:	4013      	ands	r3, r2
 80015ea:	d002      	beq.n	80015f2 <rt_bus_cmd_bl_erase_handler+0x4e>
		return -1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	425b      	negs	r3, r3
 80015f0:	e029      	b.n	8001646 <rt_bus_cmd_bl_erase_handler+0xa2>

	mtype = get_mem_type(eraseaddress);
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fecf 	bl	8001398 <get_mem_type>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61fb      	str	r3, [r7, #28]
	if (mtype == MEM_TYPE_FLASH)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <rt_bus_cmd_bl_erase_handler+0x84>
	{
		FLASH_If_Init();
 8001604:	f000 fa12 	bl	8001a2c <FLASH_If_Init>
		if (FLASH_If_Erase(eraseaddress,eraseLen) != HAL_OK)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f000 fa1c 	bl	8001a4c <FLASH_If_Erase>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d002      	beq.n	800161e <rt_bus_cmd_bl_erase_handler+0x7a>
			return -1;
 8001618:	2301      	movs	r3, #1
 800161a:	425b      	negs	r3, r3
 800161c:	e013      	b.n	8001646 <rt_bus_cmd_bl_erase_handler+0xa2>
		dbg_printf("Erase Done\n");
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <rt_bus_cmd_bl_erase_handler+0xac>)
 8001620:	0018      	movs	r0, r3
 8001622:	f005 faf5 	bl	8006c10 <puts>
 8001626:	e00d      	b.n	8001644 <rt_bus_cmd_bl_erase_handler+0xa0>
	}
	else if (mtype == MEM_TYPE_RAM)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <rt_bus_cmd_bl_erase_handler+0x9a>
	{
		memset((unsigned char *)eraseaddress,0,eraseLen);
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	0018      	movs	r0, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	001a      	movs	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	f005 fa68 	bl	8006b0c <memset>
 800163c:	e002      	b.n	8001644 <rt_bus_cmd_bl_erase_handler+0xa0>
	}
	else
	{
		return -1;
 800163e:	2301      	movs	r3, #1
 8001640:	425b      	negs	r3, r3
 8001642:	e000      	b.n	8001646 <rt_bus_cmd_bl_erase_handler+0xa2>
	}
	return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b008      	add	sp, #32
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	08007a5c 	.word	0x08007a5c

08001654 <crc_ccitt_byte>:
};

/******************************************************************************/

static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	0002      	movs	r2, r0
 800165c:	1dbb      	adds	r3, r7, #6
 800165e:	801a      	strh	r2, [r3, #0]
 8001660:	1d7b      	adds	r3, r7, #5
 8001662:	1c0a      	adds	r2, r1, #0
 8001664:	701a      	strb	r2, [r3, #0]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8001666:	1dbb      	adds	r3, r7, #6
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29a      	uxth	r2, r3
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	8819      	ldrh	r1, [r3, #0]
 8001672:	1d7b      	adds	r3, r7, #5
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	404b      	eors	r3, r1
 8001678:	21ff      	movs	r1, #255	; 0xff
 800167a:	4019      	ands	r1, r3
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <crc_ccitt_byte+0x3c>)
 800167e:	0049      	lsls	r1, r1, #1
 8001680:	5acb      	ldrh	r3, [r1, r3]
 8001682:	4053      	eors	r3, r2
 8001684:	b29b      	uxth	r3, r3
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	08007d8c 	.word	0x08007d8c

08001694 <crc16>:

/******************************************************************************/

unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	000a      	movs	r2, r1
 800169e:	1cbb      	adds	r3, r7, #2
 80016a0:	801a      	strh	r2, [r3, #0]
	unsigned int crc = 0x0000;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
	while (length--)
 80016a6:	e00a      	b.n	80016be <crc16+0x2a>
		crc = crc_ccitt_byte(crc, *data_p++);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	b298      	uxth	r0, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	0019      	movs	r1, r3
 80016b6:	f7ff ffcd 	bl	8001654 <crc_ccitt_byte>
 80016ba:	0003      	movs	r3, r0
 80016bc:	60fb      	str	r3, [r7, #12]
	while (length--)
 80016be:	1cbb      	adds	r3, r7, #2
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	1cba      	adds	r2, r7, #2
 80016c4:	1e59      	subs	r1, r3, #1
 80016c6:	8011      	strh	r1, [r2, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ed      	bne.n	80016a8 <crc16+0x14>
	return (crc>>8) | (crc<<8);;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b29b      	uxth	r3, r3
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <bus_frame_pack>:
 * @brief SPI send/receive data format. Received from VTS bus communication
 * @param cmd message command type
 * @param datalength message length
 */
void bus_frame_pack(uint8_t cmd, uint16_t *datalength)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	0002      	movs	r2, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	701a      	strb	r2, [r3, #0]
	uint16_t cCRC = 0;
 80016f6:	210e      	movs	r1, #14
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2200      	movs	r2, #0
 80016fc:	801a      	strh	r2, [r3, #0]

	spiTxBuffer[0] = PRT_STX;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <bus_frame_pack+0x8c>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]

	//txBuffer[1] = (uBusId & 0xFF00)>>8;
	//txBuffer[2] = (uBusId & 0x00FF);

	spiTxBuffer[3] = (((*datalength)+1) & 0xFF00)>>8;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	121b      	asrs	r3, r3, #8
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <bus_frame_pack+0x8c>)
 8001710:	70da      	strb	r2, [r3, #3]
	spiTxBuffer[4] = (((*datalength)+1) & 0xFF);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <bus_frame_pack+0x8c>)
 800171e:	711a      	strb	r2, [r3, #4]

	spiTxBuffer[5] = cmd;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <bus_frame_pack+0x8c>)
 8001722:	1dfa      	adds	r2, r7, #7
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	715a      	strb	r2, [r3, #5]

	cCRC =  crc16(&spiTxBuffer[PRT_AD_MSB_IDX], MAX_SPI_DATA - 4);
 8001728:	000d      	movs	r5, r1
 800172a:	187c      	adds	r4, r7, r1
 800172c:	23fe      	movs	r3, #254	; 0xfe
 800172e:	005a      	lsls	r2, r3, #1
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <bus_frame_pack+0x90>)
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ffad 	bl	8001694 <crc16>
 800173a:	0003      	movs	r3, r0
 800173c:	8023      	strh	r3, [r4, #0]

	spiTxBuffer[MAX_SPI_DATA - 3] = (cCRC & 0xFF00)>>8;
 800173e:	0029      	movs	r1, r5
 8001740:	0008      	movs	r0, r1
 8001742:	187b      	adds	r3, r7, r1
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	b2d9      	uxtb	r1, r3
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <bus_frame_pack+0x8c>)
 800174e:	23fe      	movs	r3, #254	; 0xfe
 8001750:	33ff      	adds	r3, #255	; 0xff
 8001752:	54d1      	strb	r1, [r2, r3]
	spiTxBuffer[MAX_SPI_DATA - 2] = (cCRC & 0x00FF);
 8001754:	0001      	movs	r1, r0
 8001756:	187b      	adds	r3, r7, r1
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b2d9      	uxtb	r1, r3
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <bus_frame_pack+0x8c>)
 800175e:	23ff      	movs	r3, #255	; 0xff
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	54d1      	strb	r1, [r2, r3]
	spiTxBuffer[MAX_SPI_DATA - 1] = PRT_ETX;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <bus_frame_pack+0x8c>)
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <bus_frame_pack+0x94>)
 8001768:	2103      	movs	r1, #3
 800176a:	5499      	strb	r1, [r3, r2]
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bdb0      	pop	{r4, r5, r7, pc}
 8001774:	20000eac 	.word	0x20000eac
 8001778:	20000ead 	.word	0x20000ead
 800177c:	000001ff 	.word	0x000001ff

08001780 <bus_process>:
/******************************************************************************/



void bus_process(void)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af02      	add	r7, sp, #8
	if (espMsgRcvd)
 8001786:	4b59      	ldr	r3, [pc, #356]	; (80018ec <bus_process+0x16c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <bus_process+0x10>
 800178e:	e0a8      	b.n	80018e2 <bus_process+0x162>
	{
		uint16_t calc_CRC = 0;
 8001790:	2308      	movs	r3, #8
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	2200      	movs	r2, #0
 8001796:	801a      	strh	r2, [r3, #0]
		uint16_t txSize = 0;
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	2200      	movs	r2, #0
 800179c:	801a      	strh	r2, [r3, #0]

		memset(spiTxBuffer, 0, MAX_SPI_DATA);
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	009a      	lsls	r2, r3, #2
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <bus_process+0x170>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	0018      	movs	r0, r3
 80017a8:	f005 f9b0 	bl	8006b0c <memset>
		dbg_printf("[0] : %d - [1] : %d - cmd[5] : %d - [511] : %d\r\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[5], spiRxBuffer[511]);
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <bus_process+0x174>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	0019      	movs	r1, r3
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <bus_process+0x174>)
 80017b4:	785b      	ldrb	r3, [r3, #1]
 80017b6:	001c      	movs	r4, r3
 80017b8:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <bus_process+0x174>)
 80017ba:	795b      	ldrb	r3, [r3, #5]
 80017bc:	001d      	movs	r5, r3
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <bus_process+0x174>)
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <bus_process+0x178>)
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	484d      	ldr	r0, [pc, #308]	; (80018fc <bus_process+0x17c>)
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	002b      	movs	r3, r5
 80017ca:	0022      	movs	r2, r4
 80017cc:	f005 f9a6 	bl	8006b1c <iprintf>
		spiTxBuffer[511] = 0x3;
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <bus_process+0x170>)
 80017d2:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <bus_process+0x178>)
 80017d4:	2103      	movs	r1, #3
 80017d6:	5499      	strb	r1, [r3, r2]

		if ((spiRxBuffer[PRT_STX_IDX] == PRT_STX) && spiRxBuffer[MAX_SPI_DATA - PRT_ETX_LEFT_IDX] == PRT_ETX)
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <bus_process+0x174>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d155      	bne.n	800188c <bus_process+0x10c>
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <bus_process+0x174>)
 80017e2:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <bus_process+0x178>)
 80017e4:	5c9b      	ldrb	r3, [r3, r2]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d150      	bne.n	800188c <bus_process+0x10c>
		{
			calc_CRC = crc16(&spiRxBuffer[PRT_AD_MSB_IDX], MAX_SPI_DATA-4);
 80017ea:	23fe      	movs	r3, #254	; 0xfe
 80017ec:	005a      	lsls	r2, r3, #1
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <bus_process+0x180>)
 80017f0:	0011      	movs	r1, r2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff ff4e 	bl	8001694 <crc16>
 80017f8:	0003      	movs	r3, r0
 80017fa:	001a      	movs	r2, r3
 80017fc:	2108      	movs	r1, #8
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	801a      	strh	r2, [r3, #0]
			if (memcmp(&spiRxBuffer[MAX_SPI_DATA-3],&calc_CRC,2)==0)
 8001802:	1879      	adds	r1, r7, r1
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <bus_process+0x184>)
 8001806:	2202      	movs	r2, #2
 8001808:	0018      	movs	r0, r3
 800180a:	f005 f967 	bl	8006adc <memcmp>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d135      	bne.n	800187e <bus_process+0xfe>
			{
				for (int i=0;i<gCommandCount ;i++)
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e02e      	b.n	8001876 <bus_process+0xf6>
				{
					if (commands[i].cmd == spiRxBuffer[PRT_CMD_IDX])
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <bus_process+0x188>)
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	00d2      	lsls	r2, r2, #3
 800181e:	5cd2      	ldrb	r2, [r2, r3]
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <bus_process+0x174>)
 8001822:	795b      	ldrb	r3, [r3, #5]
 8001824:	429a      	cmp	r2, r3
 8001826:	d123      	bne.n	8001870 <bus_process+0xf0>
					{
						uint8_t ret = commands[i].handler(&spiRxBuffer[PRT_DATA_S_IDX], MAX_SPI_DATA, &spiTxBuffer[PRT_DATA_S_IDX+1], &txSize);
 8001828:	4a37      	ldr	r2, [pc, #220]	; (8001908 <bus_process+0x188>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	18d3      	adds	r3, r2, r3
 8001830:	3304      	adds	r3, #4
 8001832:	681c      	ldr	r4, [r3, #0]
 8001834:	1dbd      	adds	r5, r7, #6
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <bus_process+0x18c>)
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	0099      	lsls	r1, r3, #2
 800183c:	4834      	ldr	r0, [pc, #208]	; (8001910 <bus_process+0x190>)
 800183e:	002b      	movs	r3, r5
 8001840:	47a0      	blx	r4
 8001842:	0002      	movs	r2, r0
 8001844:	230b      	movs	r3, #11
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	701a      	strb	r2, [r3, #0]

						spiTxBuffer[PRT_DATA_S_IDX] = PRT_ACK;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <bus_process+0x170>)
 800184c:	2200      	movs	r2, #0
 800184e:	719a      	strb	r2, [r3, #6]
						txSize ++;
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	1dbb      	adds	r3, r7, #6
 800185a:	801a      	strh	r2, [r3, #0]

						bus_frame_pack(commands[i].cmd,&txSize);
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <bus_process+0x188>)
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	1dba      	adds	r2, r7, #6
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ff3d 	bl	80016e8 <bus_frame_pack>
						//bus_transmit(MAX_SPI_DATA);
						break;
 800186e:	e006      	b.n	800187e <bus_process+0xfe>
				for (int i=0;i<gCommandCount ;i++)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3301      	adds	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	220f      	movs	r2, #15
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4293      	cmp	r3, r2
 800187c:	dbcc      	blt.n	8001818 <bus_process+0x98>
					}
				}
			}
			memset(spiRxBuffer, 0, MAX_SPI_DATA);
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <bus_process+0x174>)
 8001884:	2100      	movs	r1, #0
 8001886:	0018      	movs	r0, r3
 8001888:	f005 f940 	bl	8006b0c <memset>
		}



		/* Disable the peripheral */
		hdma_spi1_tx.Instance->CCR &= ~DMA_CCR_EN;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <bus_process+0x194>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <bus_process+0x194>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	438a      	bics	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma_spi1_tx.ChannelIndex);
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <bus_process+0x194>)
 800189e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <bus_process+0x194>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	2101      	movs	r1, #1
 80018a6:	4091      	lsls	r1, r2
 80018a8:	000a      	movs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
		/* Configure DMA Channel data length */
		hdma_spi1_tx.Instance->CNDTR = MAX_SPI_DATA;
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <bus_process+0x194>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	605a      	str	r2, [r3, #4]
		/* Configure DMA Channel destination address */
		hdma_spi1_tx.Instance->CPAR = (uint32_t)&hspi1.Instance->DR;
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <bus_process+0x198>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	330c      	adds	r3, #12
 80018bc:	001a      	movs	r2, r3
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <bus_process+0x194>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	609a      	str	r2, [r3, #8]
		/* Configure DMA Channel source address */
		hdma_spi1_tx.Instance->CMAR = (uint32_t)&spiTxBuffer[0];
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <bus_process+0x194>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <bus_process+0x170>)
 80018ca:	60da      	str	r2, [r3, #12]
		/* Enable the Peripheral */
		hdma_spi1_tx.Instance->CCR |= DMA_CCR_EN;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <bus_process+0x194>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <bus_process+0x194>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]


		espMsgRcvd = 0;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <bus_process+0x16c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]


	}


}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	20000664 	.word	0x20000664
 80018f0:	20000eac 	.word	0x20000eac
 80018f4:	20000464 	.word	0x20000464
 80018f8:	000001ff 	.word	0x000001ff
 80018fc:	08007a68 	.word	0x08007a68
 8001900:	20000465 	.word	0x20000465
 8001904:	20000661 	.word	0x20000661
 8001908:	08007d14 	.word	0x08007d14
 800190c:	20000eb3 	.word	0x20000eb3
 8001910:	2000046a 	.word	0x2000046a
 8001914:	20001480 	.word	0x20001480
 8001918:	200013e0 	.word	0x200013e0

0800191c <bus_comm_process>:

/******************************************************************************/

void bus_comm_process(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

	/*dbg_printf("main  :[0]: %x - [1] : %x - [2] : %x [3] : %x\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[2], spiRxBuffer[3]);
	dbg_printf("main  :[0]: %x - [1] : %x - [2] : %x [3] : %x\n", spiRxBuffer[4], spiRxBuffer[5], spiRxBuffer[6], spiRxBuffer[7]);
	dbg_printf("rxBuffer  :[511]: %x \n", spiRxBuffer[SPI_RX_BUFFER_SIZE-1]);*/

	if (enterBL)
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <bus_comm_process+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <bus_comm_process+0x14>
	{
		HAL_Delay(200);
 8001928:	20c8      	movs	r0, #200	; 0xc8
 800192a:	f001 fa3b 	bl	8002da4 <HAL_Delay>
		while(1)
 800192e:	e7fe      	b.n	800192e <bus_comm_process+0x12>
		{
			//bl_jump();
		}
	}

}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20000254 	.word	0x20000254

0800193c <debug_init>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void debug_init()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	005a      	lsls	r2, r3, #1
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <debug_init+0x20>)
 8001946:	2100      	movs	r1, #0
 8001948:	0018      	movs	r0, r3
 800194a:	f005 f8df 	bl	8006b0c <memset>
	dbg_tx_count = 0;
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <debug_init+0x24>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	200011ac 	.word	0x200011ac
 8001960:	20000260 	.word	0x20000260

08001964 <debug_transmit_buffer>:


/******************************************************************************/
void debug_transmit_buffer()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
	while ((DEBUG_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 800196e:	e002      	b.n	8001976 <debug_transmit_buffer+0x12>
	{
		//WDT_Feed();
		count ++;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	607b      	str	r3, [r7, #4]
	while ((DEBUG_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <debug_transmit_buffer+0x60>)
 8001978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800197a:	3b20      	subs	r3, #32
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	4193      	sbcs	r3, r2
 8001980:	b2da      	uxtb	r2, r3
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <debug_transmit_buffer+0x64>)
 8001986:	2300      	movs	r3, #0
 8001988:	4288      	cmp	r0, r1
 800198a:	415b      	adcs	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4013      	ands	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ec      	bne.n	8001970 <debug_transmit_buffer+0xc>
	}
	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <debug_transmit_buffer+0x68>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	490d      	ldr	r1, [pc, #52]	; (80019d0 <debug_transmit_buffer+0x6c>)
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <debug_transmit_buffer+0x70>)
 800199e:	0018      	movs	r0, r3
 80019a0:	f005 f8ab 	bl	8006afa <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <debug_transmit_buffer+0x68>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	490a      	ldr	r1, [pc, #40]	; (80019d4 <debug_transmit_buffer+0x70>)
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <debug_transmit_buffer+0x60>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f003 ff00 	bl	80057b4 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <debug_transmit_buffer+0x68>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	2000135c 	.word	0x2000135c
 80019c8:	0000fde7 	.word	0x0000fde7
 80019cc:	20000260 	.word	0x20000260
 80019d0:	200011ac 	.word	0x200011ac
 80019d4:	200010ac 	.word	0x200010ac

080019d8 <__io_putchar>:

/******************************************************************************/

PUTCHAR_PROTOTYPE
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b0d      	cmp	r3, #13
 80019e4:	d019      	beq.n	8001a1a <__io_putchar+0x42>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <__io_putchar+0x4c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <__io_putchar+0x4c>)
 80019ee:	6011      	str	r1, [r2, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	b2d1      	uxtb	r1, r2
 80019f4:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <__io_putchar+0x50>)
 80019f6:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	d003      	beq.n	8001a06 <__io_putchar+0x2e>
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <__io_putchar+0x4c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2bff      	cmp	r3, #255	; 0xff
 8001a04:	d909      	bls.n	8001a1a <__io_putchar+0x42>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <__io_putchar+0x4c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1c59      	adds	r1, r3, #1
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <__io_putchar+0x4c>)
 8001a0e:	6011      	str	r1, [r2, #0]
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <__io_putchar+0x50>)
 8001a12:	210d      	movs	r1, #13
 8001a14:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 8001a16:	f7ff ffa5 	bl	8001964 <debug_transmit_buffer>
		}
	}

	return ch;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000260 	.word	0x20000260
 8001a28:	200011ac 	.word	0x200011ac

08001a2c <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
void FLASH_If_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	/* Unlock the Program memory */
	HAL_FLASH_Unlock();
 8001a30:	f001 fdb0 	bl	8003594 <HAL_FLASH_Unlock>

	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <FLASH_If_Init+0x18>)
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <FLASH_If_Init+0x1c>)
 8001a38:	619a      	str	r2, [r3, #24]
	/* Unlock the Program memory */
	HAL_FLASH_Lock();
 8001a3a:	f001 fdfb 	bl	8003634 <HAL_FLASH_Lock>
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40022000 	.word	0x40022000
 8001a48:	00000302 	.word	0x00000302

08001a4c <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
	uint32_t PageError = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	241b      	movs	r4, #27
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001a66:	f001 fd95 	bl	8003594 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	09db      	lsrs	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a70:	2108      	movs	r1, #8
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
	pEraseInit.PageAddress = start;
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	605a      	str	r2, [r3, #4]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	609a      	str	r2, [r3, #8]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8001a84:	0025      	movs	r5, r4
 8001a86:	193c      	adds	r4, r7, r4
 8001a88:	2314      	movs	r3, #20
 8001a8a:	18fa      	adds	r2, r7, r3
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f001 fef1 	bl	8003878 <HAL_FLASHEx_Erase>
 8001a96:	0003      	movs	r3, r0
 8001a98:	7023      	strb	r3, [r4, #0]

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001a9a:	f001 fdcb 	bl	8003634 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 8001a9e:	002c      	movs	r4, r5
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <FLASH_If_Erase+0x60>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <FLASH_If_Erase+0x62>
	}

	return FLASHIF_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b008      	add	sp, #32
 8001ab4:	bdb0      	pop	{r4, r5, r7, pc}

08001ab6 <FLASH_If_Write>:
 * @retval uint32_t 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001ac6:	f001 fd65 	bl	8003594 <HAL_FLASH_Unlock>

	for (i = 0; i < length; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e01f      	b.n	8001b10 <FLASH_If_Write+0x5a>
	{
		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, (p_source[i])) == HAL_OK)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	18d3      	adds	r3, r2, r3
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0019      	movs	r1, r3
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f001 fd1c 	bl	800351c <HAL_FLASH_Program>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d10e      	bne.n	8001b06 <FLASH_If_Write+0x50>
		{
			/* Check the written value */
			if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	18cb      	adds	r3, r1, r3
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <FLASH_If_Write+0x48>
			{
				/* Flash content doesn't match SRAM content */
				return(FLASHIF_WRITINGCTRL_ERROR);
 8001afa:	2302      	movs	r3, #2
 8001afc:	e00f      	b.n	8001b1e <FLASH_If_Write+0x68>
			}
			/* Increment FLASH destination address */
			destination += 4;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e001      	b.n	8001b0a <FLASH_If_Write+0x54>
		}
		else
		{
			/* Error occurred while writing data in Flash memory */
			return (FLASHIF_WRITING_ERROR);
 8001b06:	2303      	movs	r3, #3
 8001b08:	e009      	b.n	8001b1e <FLASH_If_Write+0x68>
	for (i = 0; i < length; i++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3db      	bcc.n	8001ad0 <FLASH_If_Write+0x1a>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001b18:	f001 fd8c 	bl	8003634 <HAL_FLASH_Lock>

	return (FLASHIF_OK);
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b006      	add	sp, #24
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <iap_PrepareForJump>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void iap_PrepareForJump()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	//Disable all enabled interrupts
	HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8001b2c:	2009      	movs	r0, #9
 8001b2e:	f001 fa4c 	bl	8002fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 8001b32:	200a      	movs	r0, #10
 8001b34:	f001 fa49 	bl	8002fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel4_5_IRQn);
 8001b38:	200b      	movs	r0, #11
 8001b3a:	f001 fa46 	bl	8002fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SysTick_IRQn);
 8001b3e:	2301      	movs	r3, #1
 8001b40:	425b      	negs	r3, r3
 8001b42:	0018      	movs	r0, r3
 8001b44:	f001 fa41 	bl	8002fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001b48:	201b      	movs	r0, #27
 8001b4a:	f001 fa3e 	bl	8002fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001b4e:	2019      	movs	r0, #25
 8001b50:	f001 fa3b 	bl	8002fca <HAL_NVIC_DisableIRQ>

	HAL_DMA_Abort((&huart1)->hdmatx);
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <iap_PrepareForJump+0x48>)
 8001b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f001 fb7a 	bl	8003252 <HAL_DMA_Abort>
	HAL_DMA_Abort((&hspi1)->hdmatx);
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <iap_PrepareForJump+0x4c>)
 8001b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b62:	0018      	movs	r0, r3
 8001b64:	f001 fb75 	bl	8003252 <HAL_DMA_Abort>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i

	__disable_irq();

}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000135c 	.word	0x2000135c
 8001b74:	200013e0 	.word	0x200013e0

08001b78 <iap_JumpToApplication>:

/******************************************************************************/
void iap_JumpToApplication()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
	uint32_t  applicationStack;
	pFunction applicationEntry;

	iap_PrepareForJump();
 8001b7e:	f7ff ffd3 	bl	8001b28 <iap_PrepareForJump>

	//Retrieve values
	applicationStack = *(__IO uint32_t *) (APPLICATION_ADDRESS);
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <iap_JumpToApplication+0x2c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
	applicationEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <iap_JumpToApplication+0x30>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f383 8808 	msr	MSP, r3
	/*Set a valid stack pointer for the application */
	__set_MSP(applicationStack);


	/*Start the application */
	applicationEntry();
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4798      	blx	r3
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08005000 	.word	0x08005000
 8001ba8:	08005004 	.word	0x08005004

08001bac <iap_CheckApplication>:

/******************************************************************************/
int iap_CheckApplication(void)
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	b0a5      	sub	sp, #148	; 0x94
 8001bb0:	af00      	add	r7, sp, #0
	SHA1_CTX sha1_ctx;
	uint8_t csha1[20];

	uint32_t length;
	unsigned char *p = (uint8_t *)(APPLICATION_ADDRESS);
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <iap_CheckApplication+0xb4>)
 8001bb4:	228c      	movs	r2, #140	; 0x8c
 8001bb6:	18ba      	adds	r2, r7, r2
 8001bb8:	6013      	str	r3, [r2, #0]
	uint32_t JumpAddress= (__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <iap_CheckApplication+0xb8>)
 8001bbc:	2488      	movs	r4, #136	; 0x88
 8001bbe:	193a      	adds	r2, r7, r4
 8001bc0:	6013      	str	r3, [r2, #0]

	dbg_printf("Jump Addr : %d - %d\r\n", JumpAddress, APPLICATION_ADDRESS);
 8001bc2:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <iap_CheckApplication+0xb4>)
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <iap_CheckApplication+0xbc>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f004 ffa6 	bl	8006b1c <iprintf>
	if ((JumpAddress < APPLICATION_ADDRESS)|| (JumpAddress > APPLICATION_ADDRESS + MAX_APPLICATION_SIZE))
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <iap_CheckApplication+0xc0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d905      	bls.n	8001be6 <iap_CheckApplication+0x3a>
 8001bda:	2388      	movs	r3, #136	; 0x88
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <iap_CheckApplication+0xc4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <iap_CheckApplication+0x3e>
		return 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e035      	b.n	8001c56 <iap_CheckApplication+0xaa>

	length = *(__IO uint32_t*) (APPLICATION_LEN_ADDRESS);
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <iap_CheckApplication+0xc8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2284      	movs	r2, #132	; 0x84
 8001bf0:	18b9      	adds	r1, r7, r2
 8001bf2:	600b      	str	r3, [r1, #0]
	if ((length <= VECTOR_TABLE_SIZE) || (length > MAX_APPLICATION_SIZE))
 8001bf4:	18bb      	adds	r3, r7, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2bc0      	cmp	r3, #192	; 0xc0
 8001bfa:	d906      	bls.n	8001c0a <iap_CheckApplication+0x5e>
 8001bfc:	2384      	movs	r3, #132	; 0x84
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	23b0      	movs	r3, #176	; 0xb0
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d901      	bls.n	8001c0e <iap_CheckApplication+0x62>
	{
		return 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e023      	b.n	8001c56 <iap_CheckApplication+0xaa>
	}

	sha1_init(&sha1_ctx);
 8001c0e:	2414      	movs	r4, #20
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fca4 	bl	8002560 <sha1_init>
	sha1_update(&sha1_ctx,p,length);
 8001c18:	2584      	movs	r5, #132	; 0x84
 8001c1a:	197b      	adds	r3, r7, r5
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	268c      	movs	r6, #140	; 0x8c
 8001c20:	19bb      	adds	r3, r7, r6
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fcd8 	bl	80025dc <sha1_update>
	sha1_final(&sha1_ctx,csha1);
 8001c2c:	003a      	movs	r2, r7
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	0011      	movs	r1, r2
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fd14 	bl	8002660 <sha1_final>

	if (memcmp(csha1,&p[length],20)!=0)
 8001c38:	19bb      	adds	r3, r7, r6
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	197b      	adds	r3, r7, r5
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	18d1      	adds	r1, r2, r3
 8001c42:	003b      	movs	r3, r7
 8001c44:	2214      	movs	r2, #20
 8001c46:	0018      	movs	r0, r3
 8001c48:	f004 ff48 	bl	8006adc <memcmp>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d001      	beq.n	8001c54 <iap_CheckApplication+0xa8>
	{
		return 3;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e000      	b.n	8001c56 <iap_CheckApplication+0xaa>
	}
	return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b025      	add	sp, #148	; 0x94
 8001c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	08005000 	.word	0x08005000
 8001c64:	08005004 	.word	0x08005004
 8001c68:	08007a9c 	.word	0x08007a9c
 8001c6c:	08004fff 	.word	0x08004fff
 8001c70:	080b5000 	.word	0x080b5000
 8001c74:	080050c0 	.word	0x080050c0

08001c78 <HAL_SPI_RxCpltCallback>:
		//__HAL_SPI_ENABLE(&hspi1);

	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	//dbg_printf("RX ALL\r\n");

	memcpy(spiRxBuffer, SPI_RxDMABuffer, 512);
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_SPI_RxCpltCallback+0x3c>)
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_SPI_RxCpltCallback+0x40>)
 8001c84:	0010      	movs	r0, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	f004 ff34 	bl	8006afa <memcpy>
	espMsgRcvd = 1;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_SPI_RxCpltCallback+0x44>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
	bus_process();
 8001c98:	f7ff fd72 	bl	8001780 <bus_process>
	memset(SPI_RxDMABuffer, 0, 512);
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_SPI_RxCpltCallback+0x40>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f004 ff31 	bl	8006b0c <memset>
}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	20000464 	.word	0x20000464
 8001cb8:	20000264 	.word	0x20000264
 8001cbc:	20000664 	.word	0x20000664

08001cc0 <normalboot>:

void normalboot(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	iapMailbox[0] = 0;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <normalboot+0x24>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <normalboot+0x24>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
	dbg_printf("NB\n");
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <normalboot+0x28>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f004 ff9c 	bl	8006c10 <puts>
	iap_JumpToApplication();
 8001cd8:	f7ff ff4e 	bl	8001b78 <iap_JumpToApplication>
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000100 	.word	0x20000100
 8001ce8:	08007abc 	.word	0x08007abc

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int cnt = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
	int appStatus = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cfa:	f000 ffe3 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfe:	f000 f891 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d02:	f000 f98b 	bl	800201c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d06:	f000 f963 	bl	8001fd0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d0a:	f000 f931 	bl	8001f70 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001d0e:	f000 f8fb 	bl	8001f08 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FLASH_If_Init();
 8001d12:	f7ff fe8b 	bl	8001a2c <FLASH_If_Init>
  debug_init();
 8001d16:	f7ff fe11 	bl	800193c <debug_init>
  dbg_printf("Bootloader init\r\n");
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <main+0x100>)
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f004 ff77 	bl	8006c10 <puts>


  HAL_SPI_Receive_DMA(&hspi1, SPI_RxDMABuffer, 512);
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	4932      	ldr	r1, [pc, #200]	; (8001df0 <main+0x104>)
 8001d28:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <main+0x108>)
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f002 ffa8 	bl	8004c80 <HAL_SPI_Receive_DMA>
  //HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 512);

  //__HAL_SPI_ENABLE((&hspi1));
  SET_BIT(hspi1.Instance->CR2, SPI_CR2_TXDMAEN);
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <main+0x108>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <main+0x108>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSM);
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <main+0x108>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <main+0x108>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	492b      	ldr	r1, [pc, #172]	; (8001df8 <main+0x10c>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSI);
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <main+0x108>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <main+0x108>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4928      	ldr	r1, [pc, #160]	; (8001dfc <main+0x110>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  HAL_DMA_Start(&hdma_spi1_tx, (uint32_t)&spiTxBuffer[0], (uint32_t)&hspi1.Instance->DR, 512);
 8001d60:	4927      	ldr	r1, [pc, #156]	; (8001e00 <main+0x114>)
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <main+0x108>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	330c      	adds	r3, #12
 8001d68:	001a      	movs	r2, r3
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4825      	ldr	r0, [pc, #148]	; (8001e04 <main+0x118>)
 8001d70:	f001 f9c0 	bl	80030f4 <HAL_DMA_Start>

  while(cnt < 1000)
 8001d74:	e007      	b.n	8001d86 <main+0x9a>
  {
	  bus_comm_process();
 8001d76:	f7ff fdd1 	bl	800191c <bus_comm_process>
	  HAL_Delay(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f001 f812 	bl	8002da4 <HAL_Delay>
	  cnt++;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
  while(cnt < 1000)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <main+0x11c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	ddf3      	ble.n	8001d76 <main+0x8a>
  }
  if (gStayInBootloader)
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <main+0x120>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <main+0xb6>
  {
	  while(1)
	  {
		  bus_comm_process();
 8001d96:	f7ff fdc1 	bl	800191c <bus_comm_process>
		  HAL_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f001 f802 	bl	8002da4 <HAL_Delay>
		  bus_comm_process();
 8001da0:	e7f9      	b.n	8001d96 <main+0xaa>
	  }
  }

  blStay = 0;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <main+0x124>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]

  appStatus = iap_CheckApplication();
 8001da8:	f7ff ff00 	bl	8001bac <iap_CheckApplication>
 8001dac:	0003      	movs	r3, r0
 8001dae:	603b      	str	r3, [r7, #0]
  dbg_printf("App\n");
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <main+0x128>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f004 ff2c 	bl	8006c10 <puts>
  dbg_printf(" Status: %2.2X\n",(unsigned int)appStatus);
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <main+0x12c>)
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f004 feac 	bl	8006b1c <iprintf>
  dbg_printf(" Keys: %x %x\n",(unsigned int)iapMailbox[0],(unsigned int)iapMailbox[1]);
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <main+0x130>)
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <main+0x130>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <main+0x134>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f004 fea4 	bl	8006b1c <iprintf>

  if (appStatus == 0)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <main+0xf2>
  {
	  normalboot();
 8001dda:	f7ff ff71 	bl	8001cc0 <normalboot>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bus_comm_process();
 8001dde:	f7ff fd9d 	bl	800191c <bus_comm_process>
	  HAL_Delay(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 ffde 	bl	8002da4 <HAL_Delay>
	  bus_comm_process();
 8001de8:	e7f9      	b.n	8001dde <main+0xf2>
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	08007ac0 	.word	0x08007ac0
 8001df0:	20000264 	.word	0x20000264
 8001df4:	200013e0 	.word	0x200013e0
 8001df8:	fffffdff 	.word	0xfffffdff
 8001dfc:	fffffeff 	.word	0xfffffeff
 8001e00:	20000eac 	.word	0x20000eac
 8001e04:	20001480 	.word	0x20001480
 8001e08:	000003e7 	.word	0x000003e7
 8001e0c:	20000668 	.word	0x20000668
 8001e10:	20000108 	.word	0x20000108
 8001e14:	08007ad4 	.word	0x08007ad4
 8001e18:	08007ad8 	.word	0x08007ad8
 8001e1c:	20000100 	.word	0x20000100
 8001e20:	08007ae8 	.word	0x08007ae8

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b09f      	sub	sp, #124	; 0x7c
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	2440      	movs	r4, #64	; 0x40
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	0018      	movs	r0, r3
 8001e30:	2338      	movs	r3, #56	; 0x38
 8001e32:	001a      	movs	r2, r3
 8001e34:	2100      	movs	r1, #0
 8001e36:	f004 fe69 	bl	8006b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3a:	232c      	movs	r3, #44	; 0x2c
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	0018      	movs	r0, r3
 8001e40:	2314      	movs	r3, #20
 8001e42:	001a      	movs	r2, r3
 8001e44:	2100      	movs	r1, #0
 8001e46:	f004 fe61 	bl	8006b0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	2328      	movs	r3, #40	; 0x28
 8001e50:	001a      	movs	r2, r3
 8001e52:	2100      	movs	r1, #0
 8001e54:	f004 fe5a 	bl	8006b0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <SystemClock_Config+0xdc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <SystemClock_Config+0xe0>)
 8001e5e:	401a      	ands	r2, r3
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <SystemClock_Config+0xdc>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0109      	lsls	r1, r1, #4
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e6a:	0021      	movs	r1, r4
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	2202      	movs	r2, #2
 8001e70:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	2201      	movs	r2, #1
 8001e76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	2202      	movs	r2, #2
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	03d2      	lsls	r2, r2, #15
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f001 fef2 	bl	8003c84 <HAL_RCC_OscConfig>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ea4:	f000 f8e8 	bl	8002078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	220f      	movs	r2, #15
 8001eae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2101      	movs	r1, #1
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f002 faaf 	bl	8004430 <HAL_RCC_ClockConfig>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001ed6:	f000 f8cf 	bl	8002078 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f002 fcc1 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	1e03      	subs	r3, r0, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001ef2:	f000 f8c1 	bl	8002078 <Error_Handler>
  }
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b01f      	add	sp, #124	; 0x7c
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	40007000 	.word	0x40007000
 8001f04:	ffffe7ff 	.word	0xffffe7ff

08001f08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <MX_SPI1_Init+0x60>)
 8001f52:	0018      	movs	r0, r3
 8001f54:	f002 fe00 	bl	8004b58 <HAL_SPI_Init>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001f5c:	f000 f88c 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	200013e0 	.word	0x200013e0
 8001f6c:	40013000 	.word	0x40013000

08001f70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f76:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <MX_USART1_UART_Init+0x5c>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f7c:	22e1      	movs	r2, #225	; 0xe1
 8001f7e:	0252      	lsls	r2, r2, #9
 8001f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f96:	2208      	movs	r2, #8
 8001f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <MX_USART1_UART_Init+0x58>)
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f003 fba9 	bl	800570c <HAL_UART_Init>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fbe:	f000 f85b 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000135c 	.word	0x2000135c
 8001fcc:	40013800 	.word	0x40013800

08001fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_DMA_Init+0x48>)
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_DMA_Init+0x48>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <MX_DMA_Init+0x48>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4013      	ands	r3, r2
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f000 ffc4 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ff8:	200a      	movs	r0, #10
 8001ffa:	f000 ffd6 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	200b      	movs	r0, #11
 8002004:	f000 ffbc 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002008:	200b      	movs	r0, #11
 800200a:	f000 ffce 	bl	8002faa <HAL_NVIC_EnableIRQ>

}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40021000 	.word	0x40021000

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	0018      	movs	r0, r3
 8002026:	2314      	movs	r3, #20
 8002028:	001a      	movs	r2, r3
 800202a:	2100      	movs	r1, #0
 800202c:	f004 fd6e 	bl	8006b0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_GPIO_Init+0x58>)
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_GPIO_Init+0x58>)
 8002036:	2101      	movs	r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <MX_GPIO_Init+0x58>)
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	2201      	movs	r2, #1
 8002042:	4013      	ands	r3, r2
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : ESP_CS_Pin */
  GPIO_InitStruct.Pin = ESP_CS_Pin;
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2210      	movs	r2, #16
 800204c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2288      	movs	r2, #136	; 0x88
 8002052:	0352      	lsls	r2, r2, #13
 8002054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ESP_CS_GPIO_Port, &GPIO_InitStruct);
 800205c:	1d3a      	adds	r2, r7, #4
 800205e:	23a0      	movs	r3, #160	; 0xa0
 8002060:	05db      	lsls	r3, r3, #23
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f001 fc8f 	bl	8003988 <HAL_GPIO_Init>

}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b006      	add	sp, #24
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800207e:	e7fe      	b.n	800207e <Error_Handler+0x6>

08002080 <sha1_transform>:
#define ROTLEFT(a,b) ((a << b) | (a >> (32-b)))
#define DBL_INT_ADD(a,b,c) if (a > 0xffffffff - c) ++b; a += c;

/******************************************************************************/
void sha1_transform(SHA1_CTX *ctx, uchar data[])
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	b0db      	sub	sp, #364	; 0x16c
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
   uint a,b,c,d,e,i,j,t,m[80];

   for (i=0,j=0; i < 16; ++i, j += 4)
 800208a:	2300      	movs	r3, #0
 800208c:	22a8      	movs	r2, #168	; 0xa8
 800208e:	0052      	lsls	r2, r2, #1
 8002090:	18ba      	adds	r2, r7, r2
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	22a6      	movs	r2, #166	; 0xa6
 8002098:	0052      	lsls	r2, r2, #1
 800209a:	18ba      	adds	r2, r7, r2
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e037      	b.n	8002110 <sha1_transform+0x90>
      m[i] = (data[j] << 24) + (data[j+1] << 16) + (data[j+2] << 8) + (data[j+3]);
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	20a6      	movs	r0, #166	; 0xa6
 80020a4:	0040      	lsls	r0, r0, #1
 80020a6:	183b      	adds	r3, r7, r0
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	061a      	lsls	r2, r3, #24
 80020b0:	183b      	adds	r3, r7, r0
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	18cb      	adds	r3, r1, r3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	18d2      	adds	r2, r2, r3
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3302      	adds	r3, #2
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	18cb      	adds	r3, r1, r3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	183a      	adds	r2, r7, r0
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	3203      	adds	r2, #3
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	188a      	adds	r2, r1, r2
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	189b      	adds	r3, r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	4bd9      	ldr	r3, [pc, #868]	; (8002448 <sha1_transform+0x3c8>)
 80020e2:	22b4      	movs	r2, #180	; 0xb4
 80020e4:	0052      	lsls	r2, r2, #1
 80020e6:	4694      	mov	ip, r2
 80020e8:	44bc      	add	ip, r7
 80020ea:	4463      	add	r3, ip
 80020ec:	22a8      	movs	r2, #168	; 0xa8
 80020ee:	0052      	lsls	r2, r2, #1
 80020f0:	0014      	movs	r4, r2
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	50d1      	str	r1, [r2, r3]
   for (i=0,j=0; i < 16; ++i, j += 4)
 80020fa:	0022      	movs	r2, r4
 80020fc:	18bb      	adds	r3, r7, r2
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	18ba      	adds	r2, r7, r2
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	183b      	adds	r3, r7, r0
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3304      	adds	r3, #4
 800210c:	183a      	adds	r2, r7, r0
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	23a8      	movs	r3, #168	; 0xa8
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d9c1      	bls.n	80020a0 <sha1_transform+0x20>
   for ( ; i < 80; ++i) {
 800211c:	e05a      	b.n	80021d4 <sha1_transform+0x154>
      m[i] = (m[i-3] ^ m[i-8] ^ m[i-14] ^ m[i-16]);
 800211e:	20a8      	movs	r0, #168	; 0xa8
 8002120:	0040      	lsls	r0, r0, #1
 8002122:	183b      	adds	r3, r7, r0
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1eda      	subs	r2, r3, #3
 8002128:	4bc7      	ldr	r3, [pc, #796]	; (8002448 <sha1_transform+0x3c8>)
 800212a:	21b4      	movs	r1, #180	; 0xb4
 800212c:	0049      	lsls	r1, r1, #1
 800212e:	468c      	mov	ip, r1
 8002130:	44bc      	add	ip, r7
 8002132:	4463      	add	r3, ip
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	58d2      	ldr	r2, [r2, r3]
 8002138:	183b      	adds	r3, r7, r0
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3b08      	subs	r3, #8
 800213e:	0019      	movs	r1, r3
 8002140:	4bc1      	ldr	r3, [pc, #772]	; (8002448 <sha1_transform+0x3c8>)
 8002142:	24b4      	movs	r4, #180	; 0xb4
 8002144:	0064      	lsls	r4, r4, #1
 8002146:	46a4      	mov	ip, r4
 8002148:	44bc      	add	ip, r7
 800214a:	4463      	add	r3, ip
 800214c:	0089      	lsls	r1, r1, #2
 800214e:	58cb      	ldr	r3, [r1, r3]
 8002150:	405a      	eors	r2, r3
 8002152:	183b      	adds	r3, r7, r0
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3b0e      	subs	r3, #14
 8002158:	0019      	movs	r1, r3
 800215a:	4bbb      	ldr	r3, [pc, #748]	; (8002448 <sha1_transform+0x3c8>)
 800215c:	24b4      	movs	r4, #180	; 0xb4
 800215e:	0064      	lsls	r4, r4, #1
 8002160:	46a4      	mov	ip, r4
 8002162:	44bc      	add	ip, r7
 8002164:	4463      	add	r3, ip
 8002166:	0089      	lsls	r1, r1, #2
 8002168:	58cb      	ldr	r3, [r1, r3]
 800216a:	405a      	eors	r2, r3
 800216c:	183b      	adds	r3, r7, r0
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3b10      	subs	r3, #16
 8002172:	0019      	movs	r1, r3
 8002174:	4bb4      	ldr	r3, [pc, #720]	; (8002448 <sha1_transform+0x3c8>)
 8002176:	24b4      	movs	r4, #180	; 0xb4
 8002178:	0064      	lsls	r4, r4, #1
 800217a:	46a4      	mov	ip, r4
 800217c:	44bc      	add	ip, r7
 800217e:	4463      	add	r3, ip
 8002180:	0089      	lsls	r1, r1, #2
 8002182:	58cb      	ldr	r3, [r1, r3]
 8002184:	405a      	eors	r2, r3
 8002186:	0011      	movs	r1, r2
 8002188:	4baf      	ldr	r3, [pc, #700]	; (8002448 <sha1_transform+0x3c8>)
 800218a:	22b4      	movs	r2, #180	; 0xb4
 800218c:	0052      	lsls	r2, r2, #1
 800218e:	4694      	mov	ip, r2
 8002190:	44bc      	add	ip, r7
 8002192:	4463      	add	r3, ip
 8002194:	183a      	adds	r2, r7, r0
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	50d1      	str	r1, [r2, r3]
      m[i] = (m[i] << 1) | (m[i] >> 31);
 800219c:	4baa      	ldr	r3, [pc, #680]	; (8002448 <sha1_transform+0x3c8>)
 800219e:	22b4      	movs	r2, #180	; 0xb4
 80021a0:	0052      	lsls	r2, r2, #1
 80021a2:	4694      	mov	ip, r2
 80021a4:	44bc      	add	ip, r7
 80021a6:	4463      	add	r3, ip
 80021a8:	183a      	adds	r2, r7, r0
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	58d3      	ldr	r3, [r2, r3]
 80021b0:	221f      	movs	r2, #31
 80021b2:	41d3      	rors	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	4ba4      	ldr	r3, [pc, #656]	; (8002448 <sha1_transform+0x3c8>)
 80021b8:	22b4      	movs	r2, #180	; 0xb4
 80021ba:	0052      	lsls	r2, r2, #1
 80021bc:	4694      	mov	ip, r2
 80021be:	44bc      	add	ip, r7
 80021c0:	4463      	add	r3, ip
 80021c2:	183a      	adds	r2, r7, r0
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	50d1      	str	r1, [r2, r3]
   for ( ; i < 80; ++i) {
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	183a      	adds	r2, r7, r0
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	23a8      	movs	r3, #168	; 0xa8
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b4f      	cmp	r3, #79	; 0x4f
 80021de:	d99e      	bls.n	800211e <sha1_transform+0x9e>
   }

   a = ctx->state[0];
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	22b2      	movs	r2, #178	; 0xb2
 80021e6:	0052      	lsls	r2, r2, #1
 80021e8:	18ba      	adds	r2, r7, r2
 80021ea:	6013      	str	r3, [r2, #0]
   b = ctx->state[1];
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	22b0      	movs	r2, #176	; 0xb0
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	18ba      	adds	r2, r7, r2
 80021f6:	6013      	str	r3, [r2, #0]
   c = ctx->state[2];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	22ae      	movs	r2, #174	; 0xae
 80021fe:	0052      	lsls	r2, r2, #1
 8002200:	18ba      	adds	r2, r7, r2
 8002202:	6013      	str	r3, [r2, #0]
   d = ctx->state[3];
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	22ac      	movs	r2, #172	; 0xac
 800220a:	0052      	lsls	r2, r2, #1
 800220c:	18ba      	adds	r2, r7, r2
 800220e:	6013      	str	r3, [r2, #0]
   e = ctx->state[4];
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	22aa      	movs	r2, #170	; 0xaa
 8002216:	0052      	lsls	r2, r2, #1
 8002218:	18ba      	adds	r2, r7, r2
 800221a:	6013      	str	r3, [r2, #0]

   for (i=0; i < 20; ++i) {
 800221c:	2300      	movs	r3, #0
 800221e:	22a8      	movs	r2, #168	; 0xa8
 8002220:	0052      	lsls	r2, r2, #1
 8002222:	18ba      	adds	r2, r7, r2
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e054      	b.n	80022d2 <sha1_transform+0x252>
      t = ROTLEFT(a,5) + ((b & c) ^ (~b & d)) + e + ctx->k[0] + m[i];
 8002228:	25b2      	movs	r5, #178	; 0xb2
 800222a:	006d      	lsls	r5, r5, #1
 800222c:	197b      	adds	r3, r7, r5
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	221b      	movs	r2, #27
 8002232:	41d3      	rors	r3, r2
 8002234:	001a      	movs	r2, r3
 8002236:	24b0      	movs	r4, #176	; 0xb0
 8002238:	0064      	lsls	r4, r4, #1
 800223a:	193b      	adds	r3, r7, r4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	26ae      	movs	r6, #174	; 0xae
 8002240:	0076      	lsls	r6, r6, #1
 8002242:	19b9      	adds	r1, r7, r6
 8002244:	6809      	ldr	r1, [r1, #0]
 8002246:	4019      	ands	r1, r3
 8002248:	193b      	adds	r3, r7, r4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	43db      	mvns	r3, r3
 800224e:	20ac      	movs	r0, #172	; 0xac
 8002250:	0040      	lsls	r0, r0, #1
 8002252:	1838      	adds	r0, r7, r0
 8002254:	6800      	ldr	r0, [r0, #0]
 8002256:	4003      	ands	r3, r0
 8002258:	404b      	eors	r3, r1
 800225a:	18d2      	adds	r2, r2, r3
 800225c:	23aa      	movs	r3, #170	; 0xaa
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	18d2      	adds	r2, r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	18d2      	adds	r2, r2, r3
 800226c:	4b76      	ldr	r3, [pc, #472]	; (8002448 <sha1_transform+0x3c8>)
 800226e:	21b4      	movs	r1, #180	; 0xb4
 8002270:	0049      	lsls	r1, r1, #1
 8002272:	468c      	mov	ip, r1
 8002274:	44bc      	add	ip, r7
 8002276:	4463      	add	r3, ip
 8002278:	21a8      	movs	r1, #168	; 0xa8
 800227a:	0049      	lsls	r1, r1, #1
 800227c:	0008      	movs	r0, r1
 800227e:	1879      	adds	r1, r7, r1
 8002280:	6809      	ldr	r1, [r1, #0]
 8002282:	0089      	lsls	r1, r1, #2
 8002284:	58cb      	ldr	r3, [r1, r3]
 8002286:	18d3      	adds	r3, r2, r3
 8002288:	21a4      	movs	r1, #164	; 0xa4
 800228a:	0049      	lsls	r1, r1, #1
 800228c:	187a      	adds	r2, r7, r1
 800228e:	6013      	str	r3, [r2, #0]
      e = d;
 8002290:	22ac      	movs	r2, #172	; 0xac
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	18bb      	adds	r3, r7, r2
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	21aa      	movs	r1, #170	; 0xaa
 800229a:	0049      	lsls	r1, r1, #1
 800229c:	1879      	adds	r1, r7, r1
 800229e:	600b      	str	r3, [r1, #0]
      d = c;
 80022a0:	19bb      	adds	r3, r7, r6
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	18ba      	adds	r2, r7, r2
 80022a6:	6013      	str	r3, [r2, #0]
      c = ROTLEFT(b,30);
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2202      	movs	r2, #2
 80022ae:	41d3      	rors	r3, r2
 80022b0:	19ba      	adds	r2, r7, r6
 80022b2:	6013      	str	r3, [r2, #0]
      b = a;
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	193a      	adds	r2, r7, r4
 80022ba:	6013      	str	r3, [r2, #0]
      a = t;
 80022bc:	21a4      	movs	r1, #164	; 0xa4
 80022be:	0049      	lsls	r1, r1, #1
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	197a      	adds	r2, r7, r5
 80022c6:	6013      	str	r3, [r2, #0]
   for (i=0; i < 20; ++i) {
 80022c8:	183b      	adds	r3, r7, r0
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	183a      	adds	r2, r7, r0
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	23a8      	movs	r3, #168	; 0xa8
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b13      	cmp	r3, #19
 80022dc:	d9a4      	bls.n	8002228 <sha1_transform+0x1a8>
   }
   for ( ; i < 40; ++i) {
 80022de:	e04f      	b.n	8002380 <sha1_transform+0x300>
      t = ROTLEFT(a,5) + (b ^ c ^ d) + e + ctx->k[1] + m[i];
 80022e0:	20b2      	movs	r0, #178	; 0xb2
 80022e2:	0040      	lsls	r0, r0, #1
 80022e4:	183b      	adds	r3, r7, r0
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	221b      	movs	r2, #27
 80022ea:	41d3      	rors	r3, r2
 80022ec:	001a      	movs	r2, r3
 80022ee:	24b0      	movs	r4, #176	; 0xb0
 80022f0:	0064      	lsls	r4, r4, #1
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	25ae      	movs	r5, #174	; 0xae
 80022f8:	006d      	lsls	r5, r5, #1
 80022fa:	197b      	adds	r3, r7, r5
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4059      	eors	r1, r3
 8002300:	26ac      	movs	r6, #172	; 0xac
 8002302:	0076      	lsls	r6, r6, #1
 8002304:	19bb      	adds	r3, r7, r6
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	404b      	eors	r3, r1
 800230a:	18d2      	adds	r2, r2, r3
 800230c:	23aa      	movs	r3, #170	; 0xaa
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	18d2      	adds	r2, r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231a:	18d2      	adds	r2, r2, r3
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <sha1_transform+0x3c8>)
 800231e:	21b4      	movs	r1, #180	; 0xb4
 8002320:	0049      	lsls	r1, r1, #1
 8002322:	468c      	mov	ip, r1
 8002324:	44bc      	add	ip, r7
 8002326:	4463      	add	r3, ip
 8002328:	21a8      	movs	r1, #168	; 0xa8
 800232a:	0049      	lsls	r1, r1, #1
 800232c:	1879      	adds	r1, r7, r1
 800232e:	6809      	ldr	r1, [r1, #0]
 8002330:	0089      	lsls	r1, r1, #2
 8002332:	58cb      	ldr	r3, [r1, r3]
 8002334:	18d3      	adds	r3, r2, r3
 8002336:	22a4      	movs	r2, #164	; 0xa4
 8002338:	0052      	lsls	r2, r2, #1
 800233a:	18b9      	adds	r1, r7, r2
 800233c:	600b      	str	r3, [r1, #0]
      e = d;
 800233e:	19bb      	adds	r3, r7, r6
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	21aa      	movs	r1, #170	; 0xaa
 8002344:	0049      	lsls	r1, r1, #1
 8002346:	1879      	adds	r1, r7, r1
 8002348:	600b      	str	r3, [r1, #0]
      d = c;
 800234a:	197b      	adds	r3, r7, r5
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	19be      	adds	r6, r7, r6
 8002350:	6033      	str	r3, [r6, #0]
      c = ROTLEFT(b,30);
 8002352:	193e      	adds	r6, r7, r4
 8002354:	6833      	ldr	r3, [r6, #0]
 8002356:	2202      	movs	r2, #2
 8002358:	41d3      	rors	r3, r2
 800235a:	197d      	adds	r5, r7, r5
 800235c:	602b      	str	r3, [r5, #0]
      b = a;
 800235e:	183d      	adds	r5, r7, r0
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	193c      	adds	r4, r7, r4
 8002364:	6023      	str	r3, [r4, #0]
      a = t;
 8002366:	23a4      	movs	r3, #164	; 0xa4
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1838      	adds	r0, r7, r0
 8002370:	6003      	str	r3, [r0, #0]
   for ( ; i < 40; ++i) {
 8002372:	22a8      	movs	r2, #168	; 0xa8
 8002374:	0052      	lsls	r2, r2, #1
 8002376:	18bb      	adds	r3, r7, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	18ba      	adds	r2, r7, r2
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	23a8      	movs	r3, #168	; 0xa8
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b27      	cmp	r3, #39	; 0x27
 800238a:	d9a9      	bls.n	80022e0 <sha1_transform+0x260>
   }
   for ( ; i < 60; ++i) {
 800238c:	e055      	b.n	800243a <sha1_transform+0x3ba>
      t = ROTLEFT(a,5) + ((b & c) ^ (b & d) ^ (c & d))  + e + ctx->k[2] + m[i];
 800238e:	26b2      	movs	r6, #178	; 0xb2
 8002390:	0076      	lsls	r6, r6, #1
 8002392:	19bb      	adds	r3, r7, r6
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	221b      	movs	r2, #27
 8002398:	41d3      	rors	r3, r2
 800239a:	001a      	movs	r2, r3
 800239c:	24ae      	movs	r4, #174	; 0xae
 800239e:	0064      	lsls	r4, r4, #1
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	25ac      	movs	r5, #172	; 0xac
 80023a6:	006d      	lsls	r5, r5, #1
 80023a8:	197b      	adds	r3, r7, r5
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	404b      	eors	r3, r1
 80023ae:	21b0      	movs	r1, #176	; 0xb0
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	1878      	adds	r0, r7, r1
 80023b4:	6801      	ldr	r1, [r0, #0]
 80023b6:	4019      	ands	r1, r3
 80023b8:	193b      	adds	r3, r7, r4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1978      	adds	r0, r7, r5
 80023be:	6800      	ldr	r0, [r0, #0]
 80023c0:	4003      	ands	r3, r0
 80023c2:	404b      	eors	r3, r1
 80023c4:	18d2      	adds	r2, r2, r3
 80023c6:	23aa      	movs	r3, #170	; 0xaa
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	18f8      	adds	r0, r7, r3
 80023cc:	6803      	ldr	r3, [r0, #0]
 80023ce:	18d2      	adds	r2, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d4:	18d2      	adds	r2, r2, r3
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <sha1_transform+0x3c8>)
 80023d8:	20b4      	movs	r0, #180	; 0xb4
 80023da:	0040      	lsls	r0, r0, #1
 80023dc:	4684      	mov	ip, r0
 80023de:	44bc      	add	ip, r7
 80023e0:	4463      	add	r3, ip
 80023e2:	20a8      	movs	r0, #168	; 0xa8
 80023e4:	0040      	lsls	r0, r0, #1
 80023e6:	1839      	adds	r1, r7, r0
 80023e8:	6809      	ldr	r1, [r1, #0]
 80023ea:	0089      	lsls	r1, r1, #2
 80023ec:	58cb      	ldr	r3, [r1, r3]
 80023ee:	18d3      	adds	r3, r2, r3
 80023f0:	22a4      	movs	r2, #164	; 0xa4
 80023f2:	0052      	lsls	r2, r2, #1
 80023f4:	18ba      	adds	r2, r7, r2
 80023f6:	6013      	str	r3, [r2, #0]
      e = d;
 80023f8:	197b      	adds	r3, r7, r5
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22aa      	movs	r2, #170	; 0xaa
 80023fe:	0052      	lsls	r2, r2, #1
 8002400:	18ba      	adds	r2, r7, r2
 8002402:	6013      	str	r3, [r2, #0]
      d = c;
 8002404:	193b      	adds	r3, r7, r4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	197d      	adds	r5, r7, r5
 800240a:	602b      	str	r3, [r5, #0]
      c = ROTLEFT(b,30);
 800240c:	21b0      	movs	r1, #176	; 0xb0
 800240e:	0049      	lsls	r1, r1, #1
 8002410:	187b      	adds	r3, r7, r1
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2202      	movs	r2, #2
 8002416:	41d3      	rors	r3, r2
 8002418:	193c      	adds	r4, r7, r4
 800241a:	6023      	str	r3, [r4, #0]
      b = a;
 800241c:	19bb      	adds	r3, r7, r6
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1879      	adds	r1, r7, r1
 8002422:	600b      	str	r3, [r1, #0]
      a = t;
 8002424:	22a4      	movs	r2, #164	; 0xa4
 8002426:	0052      	lsls	r2, r2, #1
 8002428:	18bb      	adds	r3, r7, r2
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	19ba      	adds	r2, r7, r6
 800242e:	6013      	str	r3, [r2, #0]
   for ( ; i < 60; ++i) {
 8002430:	183b      	adds	r3, r7, r0
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	183a      	adds	r2, r7, r0
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	23a8      	movs	r3, #168	; 0xa8
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b3b      	cmp	r3, #59	; 0x3b
 8002444:	d9a3      	bls.n	800238e <sha1_transform+0x30e>
   }
   for ( ; i < 80; ++i) {
 8002446:	e051      	b.n	80024ec <sha1_transform+0x46c>
 8002448:	fffffea0 	.word	0xfffffea0
      t = ROTLEFT(a,5) + (b ^ c ^ d) + e + ctx->k[3] + m[i];
 800244c:	20b2      	movs	r0, #178	; 0xb2
 800244e:	0040      	lsls	r0, r0, #1
 8002450:	183b      	adds	r3, r7, r0
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	221b      	movs	r2, #27
 8002456:	41d3      	rors	r3, r2
 8002458:	001a      	movs	r2, r3
 800245a:	24b0      	movs	r4, #176	; 0xb0
 800245c:	0064      	lsls	r4, r4, #1
 800245e:	193b      	adds	r3, r7, r4
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	25ae      	movs	r5, #174	; 0xae
 8002464:	006d      	lsls	r5, r5, #1
 8002466:	197b      	adds	r3, r7, r5
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4059      	eors	r1, r3
 800246c:	26ac      	movs	r6, #172	; 0xac
 800246e:	0076      	lsls	r6, r6, #1
 8002470:	19bb      	adds	r3, r7, r6
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	404b      	eors	r3, r1
 8002476:	18d2      	adds	r2, r2, r3
 8002478:	23aa      	movs	r3, #170	; 0xaa
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	18d2      	adds	r2, r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	18d2      	adds	r2, r2, r3
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <sha1_transform+0x4dc>)
 800248a:	21b4      	movs	r1, #180	; 0xb4
 800248c:	0049      	lsls	r1, r1, #1
 800248e:	468c      	mov	ip, r1
 8002490:	44bc      	add	ip, r7
 8002492:	4463      	add	r3, ip
 8002494:	21a8      	movs	r1, #168	; 0xa8
 8002496:	0049      	lsls	r1, r1, #1
 8002498:	1879      	adds	r1, r7, r1
 800249a:	6809      	ldr	r1, [r1, #0]
 800249c:	0089      	lsls	r1, r1, #2
 800249e:	58cb      	ldr	r3, [r1, r3]
 80024a0:	18d3      	adds	r3, r2, r3
 80024a2:	22a4      	movs	r2, #164	; 0xa4
 80024a4:	0052      	lsls	r2, r2, #1
 80024a6:	18b9      	adds	r1, r7, r2
 80024a8:	600b      	str	r3, [r1, #0]
      e = d;
 80024aa:	19bb      	adds	r3, r7, r6
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	21aa      	movs	r1, #170	; 0xaa
 80024b0:	0049      	lsls	r1, r1, #1
 80024b2:	1879      	adds	r1, r7, r1
 80024b4:	600b      	str	r3, [r1, #0]
      d = c;
 80024b6:	197b      	adds	r3, r7, r5
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	19be      	adds	r6, r7, r6
 80024bc:	6033      	str	r3, [r6, #0]
      c = ROTLEFT(b,30);
 80024be:	193e      	adds	r6, r7, r4
 80024c0:	6833      	ldr	r3, [r6, #0]
 80024c2:	2202      	movs	r2, #2
 80024c4:	41d3      	rors	r3, r2
 80024c6:	197d      	adds	r5, r7, r5
 80024c8:	602b      	str	r3, [r5, #0]
      b = a;
 80024ca:	183d      	adds	r5, r7, r0
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	193c      	adds	r4, r7, r4
 80024d0:	6023      	str	r3, [r4, #0]
      a = t;
 80024d2:	23a4      	movs	r3, #164	; 0xa4
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1838      	adds	r0, r7, r0
 80024dc:	6003      	str	r3, [r0, #0]
   for ( ; i < 80; ++i) {
 80024de:	22a8      	movs	r2, #168	; 0xa8
 80024e0:	0052      	lsls	r2, r2, #1
 80024e2:	18bb      	adds	r3, r7, r2
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	18ba      	adds	r2, r7, r2
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	23a8      	movs	r3, #168	; 0xa8
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b4f      	cmp	r3, #79	; 0x4f
 80024f6:	d9a9      	bls.n	800244c <sha1_transform+0x3cc>
   }

   ctx->state[0] += a;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024fc:	23b2      	movs	r3, #178	; 0xb2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	18d2      	adds	r2, r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	64da      	str	r2, [r3, #76]	; 0x4c
   ctx->state[1] += b;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800250e:	23b0      	movs	r3, #176	; 0xb0
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	18d2      	adds	r2, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	651a      	str	r2, [r3, #80]	; 0x50
   ctx->state[2] += c;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002520:	23ae      	movs	r3, #174	; 0xae
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	18d2      	adds	r2, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
   ctx->state[3] += d;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002532:	23ac      	movs	r3, #172	; 0xac
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	18d2      	adds	r2, r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
   ctx->state[4] += e;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002544:	23aa      	movs	r3, #170	; 0xaa
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	18d2      	adds	r2, r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b05b      	add	sp, #364	; 0x16c
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	fffffea0 	.word	0xfffffea0

08002560 <sha1_init>:

/******************************************************************************/
void sha1_init(SHA1_CTX *ctx)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
   ctx->datalen = 0;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
   ctx->bitlen[0] = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
   ctx->bitlen[1] = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	649a      	str	r2, [r3, #72]	; 0x48
   ctx->state[0] = 0x67452301;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <sha1_init+0x58>)
 800257e:	64da      	str	r2, [r3, #76]	; 0x4c
   ctx->state[1] = 0xEFCDAB89;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <sha1_init+0x5c>)
 8002584:	651a      	str	r2, [r3, #80]	; 0x50
   ctx->state[2] = 0x98BADCFE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <sha1_init+0x60>)
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
   ctx->state[3] = 0x10325476;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <sha1_init+0x64>)
 8002590:	659a      	str	r2, [r3, #88]	; 0x58
   ctx->state[4] = 0xc3d2e1f0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <sha1_init+0x68>)
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c
   ctx->k[0] = 0x5a827999;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <sha1_init+0x6c>)
 800259c:	661a      	str	r2, [r3, #96]	; 0x60
   ctx->k[1] = 0x6ed9eba1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <sha1_init+0x70>)
 80025a2:	665a      	str	r2, [r3, #100]	; 0x64
   ctx->k[2] = 0x8f1bbcdc;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <sha1_init+0x74>)
 80025a8:	669a      	str	r2, [r3, #104]	; 0x68
   ctx->k[3] = 0xca62c1d6;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <sha1_init+0x78>)
 80025ae:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	67452301 	.word	0x67452301
 80025bc:	efcdab89 	.word	0xefcdab89
 80025c0:	98badcfe 	.word	0x98badcfe
 80025c4:	10325476 	.word	0x10325476
 80025c8:	c3d2e1f0 	.word	0xc3d2e1f0
 80025cc:	5a827999 	.word	0x5a827999
 80025d0:	6ed9eba1 	.word	0x6ed9eba1
 80025d4:	8f1bbcdc 	.word	0x8f1bbcdc
 80025d8:	ca62c1d6 	.word	0xca62c1d6

080025dc <sha1_update>:

/******************************************************************************/
void sha1_update(SHA1_CTX *ctx, uchar data[], uint len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
   uint i;

   for (i=0; i < len; ++i) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e02d      	b.n	800264a <sha1_update+0x6e>
      ctx->data[ctx->datalen] = data[i];
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	18d2      	adds	r2, r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	7811      	ldrb	r1, [r2, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	54d1      	strb	r1, [r2, r3]
      ctx->datalen++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
      if (ctx->datalen == 64) {
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d119      	bne.n	8002644 <sha1_update+0x68>
         sha1_transform(ctx,ctx->data);
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	0011      	movs	r1, r2
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff fd32 	bl	8002080 <sha1_transform>
         DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <sha1_update+0x80>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d904      	bls.n	8002630 <sha1_update+0x54>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	649a      	str	r2, [r3, #72]	; 0x48
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	189a      	adds	r2, r3, r2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
         ctx->datalen = 0;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
   for (i=0; i < len; ++i) {
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d3cd      	bcc.n	80025ee <sha1_update+0x12>
      }
   }
}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	fffffdff 	.word	0xfffffdff

08002660 <sha1_final>:

/******************************************************************************/
void sha1_final(SHA1_CTX *ctx, uchar hash[])
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
   uint i;

   i = ctx->datalen;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	60fb      	str	r3, [r7, #12]

   // Pad whatever data is left in the buffer.
   if (ctx->datalen < 56) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	2b37      	cmp	r3, #55	; 0x37
 8002676:	d810      	bhi.n	800269a <sha1_final+0x3a>
      ctx->data[i++] = 0x80;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60fa      	str	r2, [r7, #12]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	54d1      	strb	r1, [r2, r3]
      while (i < 56)
 8002684:	e005      	b.n	8002692 <sha1_final+0x32>
         ctx->data[i++] = 0x00;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	60fa      	str	r2, [r7, #12]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	2100      	movs	r1, #0
 8002690:	54d1      	strb	r1, [r2, r3]
      while (i < 56)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b37      	cmp	r3, #55	; 0x37
 8002696:	d9f6      	bls.n	8002686 <sha1_final+0x26>
 8002698:	e01b      	b.n	80026d2 <sha1_final+0x72>
   }
   else {
      ctx->data[i++] = 0x80;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60fa      	str	r2, [r7, #12]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	54d1      	strb	r1, [r2, r3]
      while (i < 64)
 80026a6:	e005      	b.n	80026b4 <sha1_final+0x54>
         ctx->data[i++] = 0x00;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	60fa      	str	r2, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	2100      	movs	r1, #0
 80026b2:	54d1      	strb	r1, [r2, r3]
      while (i < 64)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b3f      	cmp	r3, #63	; 0x3f
 80026b8:	d9f6      	bls.n	80026a8 <sha1_final+0x48>
      sha1_transform(ctx,ctx->data);
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff fcdd 	bl	8002080 <sha1_transform>
      memset(ctx->data,0,56);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2238      	movs	r2, #56	; 0x38
 80026ca:	2100      	movs	r1, #0
 80026cc:	0018      	movs	r0, r3
 80026ce:	f004 fa1d 	bl	8006b0c <memset>
   }

   // Append to the padding the total message's length in bits and transform.
   DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	43db      	mvns	r3, r3
 80026de:	429a      	cmp	r2, r3
 80026e0:	d904      	bls.n	80026ec <sha1_final+0x8c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	649a      	str	r2, [r3, #72]	; 0x48
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	18d2      	adds	r2, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
   ctx->data[63] = ctx->bitlen[0];
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	b2d9      	uxtb	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	5499      	strb	r1, [r3, r2]
   ctx->data[62] = ctx->bitlen[0] >> 8;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	b2d9      	uxtb	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223e      	movs	r2, #62	; 0x3e
 8002714:	5499      	strb	r1, [r3, r2]
   ctx->data[61] = ctx->bitlen[0] >> 16;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	b2d9      	uxtb	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	223d      	movs	r2, #61	; 0x3d
 8002722:	5499      	strb	r1, [r3, r2]
   ctx->data[60] = ctx->bitlen[0] >> 24;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	0e1b      	lsrs	r3, r3, #24
 800272a:	b2d9      	uxtb	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	223c      	movs	r2, #60	; 0x3c
 8002730:	5499      	strb	r1, [r3, r2]
   ctx->data[59] = ctx->bitlen[1];
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	b2d9      	uxtb	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	223b      	movs	r2, #59	; 0x3b
 800273c:	5499      	strb	r1, [r3, r2]
   ctx->data[58] = ctx->bitlen[1] >> 8;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b2d9      	uxtb	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223a      	movs	r2, #58	; 0x3a
 800274a:	5499      	strb	r1, [r3, r2]
   ctx->data[57] = ctx->bitlen[1] >> 16;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2239      	movs	r2, #57	; 0x39
 8002758:	5499      	strb	r1, [r3, r2]
   ctx->data[56] = ctx->bitlen[1] >> 24;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275e:	0e1b      	lsrs	r3, r3, #24
 8002760:	b2d9      	uxtb	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2238      	movs	r2, #56	; 0x38
 8002766:	5499      	strb	r1, [r3, r2]
   sha1_transform(ctx,ctx->data);
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0011      	movs	r1, r2
 800276e:	0018      	movs	r0, r3
 8002770:	f7ff fc86 	bl	8002080 <sha1_transform>

   // Since this implementation uses little endian byte ordering and MD uses big endian,
   // reverse all the bytes when copying the final state to the output hash.
   for (i=0; i < 4; ++i) {
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e04c      	b.n	8002814 <sha1_final+0x1b4>
      hash[i]    = (ctx->state[0] >> (24-i*8)) & 0x000000ff;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	0013      	movs	r3, r2
 8002782:	075b      	lsls	r3, r3, #29
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3318      	adds	r3, #24
 800278a:	40d9      	lsrs	r1, r3
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
      hash[i+4]  = (ctx->state[1] >> (24-i*8)) & 0x000000ff;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	0013      	movs	r3, r2
 800279e:	075b      	lsls	r3, r3, #29
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	3318      	adds	r3, #24
 80027a6:	40d9      	lsrs	r1, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3304      	adds	r3, #4
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	18d3      	adds	r3, r2, r3
 80027b0:	b2ca      	uxtb	r2, r1
 80027b2:	701a      	strb	r2, [r3, #0]
      hash[i+8]  = (ctx->state[2] >> (24-i*8)) & 0x000000ff;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	0013      	movs	r3, r2
 80027bc:	075b      	lsls	r3, r3, #29
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3318      	adds	r3, #24
 80027c4:	40d9      	lsrs	r1, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3308      	adds	r3, #8
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	18d3      	adds	r3, r2, r3
 80027ce:	b2ca      	uxtb	r2, r1
 80027d0:	701a      	strb	r2, [r3, #0]
      hash[i+12] = (ctx->state[3] >> (24-i*8)) & 0x000000ff;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	0013      	movs	r3, r2
 80027da:	075b      	lsls	r3, r3, #29
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	3318      	adds	r3, #24
 80027e2:	40d9      	lsrs	r1, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	330c      	adds	r3, #12
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	18d3      	adds	r3, r2, r3
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      hash[i+16] = (ctx->state[4] >> (24-i*8)) & 0x000000ff;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	0013      	movs	r3, r2
 80027f8:	075b      	lsls	r3, r3, #29
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	3318      	adds	r3, #24
 8002800:	40d9      	lsrs	r1, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3310      	adds	r3, #16
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	18d3      	adds	r3, r2, r3
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
   for (i=0; i < 4; ++i) {
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d9af      	bls.n	800277a <sha1_final+0x11a>
   }
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_MspInit+0x24>)
 800282a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_MspInit+0x24>)
 800282e:	2101      	movs	r1, #1
 8002830:	430a      	orrs	r2, r1
 8002832:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <HAL_MspInit+0x24>)
 8002836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_MspInit+0x24>)
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	0549      	lsls	r1, r1, #21
 800283e:	430a      	orrs	r2, r1
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	230c      	movs	r3, #12
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	0018      	movs	r0, r3
 800285a:	2314      	movs	r3, #20
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f004 f954 	bl	8006b0c <memset>
  if(hspi->Instance==SPI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_SPI_MspInit+0x138>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d000      	beq.n	8002870 <HAL_SPI_MspInit+0x24>
 800286e:	e085      	b.n	800297c <HAL_SPI_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002870:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_SPI_MspInit+0x13c>)
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_SPI_MspInit+0x13c>)
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	0149      	lsls	r1, r1, #5
 800287a:	430a      	orrs	r2, r1
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_SPI_MspInit+0x13c>)
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_SPI_MspInit+0x13c>)
 8002884:	2101      	movs	r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_SPI_MspInit+0x13c>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2201      	movs	r2, #1
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002896:	210c      	movs	r1, #12
 8002898:	187b      	adds	r3, r7, r1
 800289a:	22e0      	movs	r2, #224	; 0xe0
 800289c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2202      	movs	r2, #2
 80028a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2203      	movs	r2, #3
 80028ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	187a      	adds	r2, r7, r1
 80028b8:	23a0      	movs	r3, #160	; 0xa0
 80028ba:	05db      	lsls	r3, r3, #23
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f001 f862 	bl	8003988 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80028c4:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028c6:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_SPI_MspInit+0x144>)
 80028c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d6:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028f0:	2220      	movs	r2, #32
 80028f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	0192      	lsls	r2, r2, #6
 80028fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_SPI_MspInit+0x140>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fb80 	bl	8003004 <HAL_DMA_Init>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8002908:	f7ff fbb6 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_SPI_MspInit+0x140>)
 8002910:	64da      	str	r2, [r3, #76]	; 0x4c
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_SPI_MspInit+0x140>)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_SPI_MspInit+0x148>)
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_SPI_MspInit+0x14c>)
 800291c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002920:	2201      	movs	r2, #1
 8002922:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002926:	2210      	movs	r2, #16
 8002928:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_SPI_MspInit+0x148>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002938:	2200      	movs	r2, #0
 800293a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_SPI_MspInit+0x148>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002944:	2200      	movs	r2, #0
 8002946:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_SPI_MspInit+0x148>)
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	0152      	lsls	r2, r2, #5
 800294e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fb56 	bl	8003004 <HAL_DMA_Init>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d001      	beq.n	8002960 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 800295c:	f7ff fb8c 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002964:	649a      	str	r2, [r3, #72]	; 0x48
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_SPI_MspInit+0x148>)
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	2019      	movs	r0, #25
 8002972:	f000 fb05 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002976:	2019      	movs	r0, #25
 8002978:	f000 fb17 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b008      	add	sp, #32
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40013000 	.word	0x40013000
 8002988:	40021000 	.word	0x40021000
 800298c:	20001438 	.word	0x20001438
 8002990:	4002001c 	.word	0x4002001c
 8002994:	20001480 	.word	0x20001480
 8002998:	40020030 	.word	0x40020030

0800299c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	230c      	movs	r3, #12
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	0018      	movs	r0, r3
 80029aa:	2314      	movs	r3, #20
 80029ac:	001a      	movs	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	f004 f8ac 	bl	8006b0c <memset>
  if(huart->Instance==USART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <HAL_UART_MspInit+0xe4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d15b      	bne.n	8002a76 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_UART_MspInit+0xe8>)
 80029c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_UART_MspInit+0xe8>)
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	01c9      	lsls	r1, r1, #7
 80029c8:	430a      	orrs	r2, r1
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_UART_MspInit+0xe8>)
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_UART_MspInit+0xe8>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_UART_MspInit+0xe8>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029e4:	210c      	movs	r1, #12
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	22c0      	movs	r2, #192	; 0xc0
 80029ea:	00d2      	lsls	r2, r2, #3
 80029ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2202      	movs	r2, #2
 80029f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2203      	movs	r2, #3
 80029fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	2204      	movs	r2, #4
 8002a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	187a      	adds	r2, r7, r1
 8002a08:	23a0      	movs	r3, #160	; 0xa0
 8002a0a:	05db      	lsls	r3, r3, #23
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 ffba 	bl	8003988 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_UART_MspInit+0xf0>)
 8002a18:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a22:	2210      	movs	r2, #16
 8002a24:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fad9 	bl	8003004 <HAL_DMA_Init>
 8002a52:	1e03      	subs	r3, r0, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8002a56:	f7ff fb0f 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_UART_MspInit+0xec>)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	201b      	movs	r0, #27
 8002a6c:	f000 fa88 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a70:	201b      	movs	r0, #27
 8002a72:	f000 fa9a 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b008      	add	sp, #32
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40021000 	.word	0x40021000
 8002a88:	20001314 	.word	0x20001314
 8002a8c:	40020044 	.word	0x40020044

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <NMI_Handler+0x4>

08002a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler+0x4>

08002a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab4:	f000 f95a 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 fc4b 	bl	8003362 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 fc47 	bl	8003362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20001438 	.word	0x20001438
 8002ae0:	20001480 	.word	0x20001480

08002ae4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fc39 	bl	8003362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	20001314 	.word	0x20001314

08002afc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <SPI1_IRQHandler+0x14>)
 8002b02:	0018      	movs	r0, r3
 8002b04:	f002 fab0 	bl	8005068 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	200013e0 	.word	0x200013e0

08002b14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <USART1_IRQHandler+0x14>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f002 feea 	bl	80058f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	2000135c 	.word	0x2000135c

08002b2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e00a      	b.n	8002b54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b3e:	e000      	b.n	8002b42 <_read+0x16>
 8002b40:	bf00      	nop
 8002b42:	0001      	movs	r1, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	b2ca      	uxtb	r2, r1
 8002b4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dbf0      	blt.n	8002b3e <_read+0x12>
	}

return len;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b006      	add	sp, #24
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e009      	b.n	8002b8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	60ba      	str	r2, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7fe ff29 	bl	80019d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dbf1      	blt.n	8002b78 <_write+0x12>
	}
	return len;
 8002b94:	687b      	ldr	r3, [r7, #4]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_close>:

int _close(int file)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	425b      	negs	r3, r3
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b002      	add	sp, #8
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	0192      	lsls	r2, r2, #6
 8002bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <_isatty>:

int _isatty(int file)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <_sbrk+0x5c>)
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <_sbrk+0x60>)
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <_sbrk+0x64>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <_sbrk+0x68>)
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <_sbrk+0x64>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d207      	bcs.n	8002c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c28:	f003 ff2e 	bl	8006a88 <__errno>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	220c      	movs	r2, #12
 8002c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	425b      	negs	r3, r3
 8002c36:	e009      	b.n	8002c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	18d2      	adds	r2, r2, r3
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <_sbrk+0x64>)
 8002c48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20005000 	.word	0x20005000
 8002c58:	00000400 	.word	0x00000400
 8002c5c:	2000066c 	.word	0x2000066c
 8002c60:	200014e8 	.word	0x200014e8

08002c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002c72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopForever+0x6>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopForever+0xe>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopForever+0x16>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c9a:	f7ff ffe3 	bl	8002c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f003 fef9 	bl	8006a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7ff f823 	bl	8001cec <main>

08002ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ca6:	e7fe      	b.n	8002ca6 <LoopForever>
   ldr   r0, =_estack
 8002ca8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002cac:	20000108 	.word	0x20000108
  ldr r1, =_edata
 8002cb0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002cb4:	080080a0 	.word	0x080080a0
  ldr r2, =_sbss
 8002cb8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8002cbc:	200014e8 	.word	0x200014e8

08002cc0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC1_COMP_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_Init+0x3c>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_Init+0x3c>)
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f000 f811 	bl	8002d04 <HAL_InitTick>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e001      	b.n	8002cf2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cee:	f7ff fd99 	bl	8002824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cf2:	1dfb      	adds	r3, r7, #7
 8002cf4:	781b      	ldrb	r3, [r3, #0]
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40022000 	.word	0x40022000

08002d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_InitTick+0x5c>)
 8002d0e:	681c      	ldr	r4, [r3, #0]
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_InitTick+0x60>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	0019      	movs	r1, r3
 8002d16:	23fa      	movs	r3, #250	; 0xfa
 8002d18:	0098      	lsls	r0, r3, #2
 8002d1a:	f7fd f9f9 	bl	8000110 <__udivsi3>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	0019      	movs	r1, r3
 8002d22:	0020      	movs	r0, r4
 8002d24:	f7fd f9f4 	bl	8000110 <__udivsi3>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f95d 	bl	8002fea <HAL_SYSTICK_Config>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e00f      	b.n	8002d58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d80b      	bhi.n	8002d56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	2301      	movs	r3, #1
 8002d42:	425b      	negs	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 f91a 	bl	8002f80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_InitTick+0x64>)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b003      	add	sp, #12
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	2000010c 	.word	0x2000010c
 8002d64:	20000114 	.word	0x20000114
 8002d68:	20000110 	.word	0x20000110

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_IncTick+0x1c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	001a      	movs	r2, r3
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_IncTick+0x20>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	18d2      	adds	r2, r2, r3
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_IncTick+0x20>)
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000114 	.word	0x20000114
 8002d8c:	200014c8 	.word	0x200014c8

08002d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_GetTick+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	200014c8 	.word	0x200014c8

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_Delay+0x40>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	f7ff ffe0 	bl	8002d90 <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b004      	add	sp, #16
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000114 	.word	0x20000114

08002de8 <__NVIC_EnableIRQ>:
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	0002      	movs	r2, r0
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	1dfb      	adds	r3, r7, #7
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dfa:	d809      	bhi.n	8002e10 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	001a      	movs	r2, r3
 8002e02:	231f      	movs	r3, #31
 8002e04:	401a      	ands	r2, r3
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <__NVIC_EnableIRQ+0x30>)
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4091      	lsls	r1, r2
 8002e0c:	000a      	movs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	e000e100 	.word	0xe000e100

08002e1c <__NVIC_DisableIRQ>:
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	0002      	movs	r2, r0
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e2e:	d80e      	bhi.n	8002e4e <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	001a      	movs	r2, r3
 8002e36:	231f      	movs	r3, #31
 8002e38:	4013      	ands	r3, r2
 8002e3a:	4907      	ldr	r1, [pc, #28]	; (8002e58 <__NVIC_DisableIRQ+0x3c>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	0013      	movs	r3, r2
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e4a:	f3bf 8f6f 	isb	sy
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	0002      	movs	r2, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e70:	d828      	bhi.n	8002ec4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <__NVIC_SetPriority+0xd4>)
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	33c0      	adds	r3, #192	; 0xc0
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	589b      	ldr	r3, [r3, r2]
 8002e82:	1dfa      	adds	r2, r7, #7
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	0011      	movs	r1, r2
 8002e88:	2203      	movs	r2, #3
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	00d2      	lsls	r2, r2, #3
 8002e8e:	21ff      	movs	r1, #255	; 0xff
 8002e90:	4091      	lsls	r1, r2
 8002e92:	000a      	movs	r2, r1
 8002e94:	43d2      	mvns	r2, r2
 8002e96:	401a      	ands	r2, r3
 8002e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	4003      	ands	r3, r0
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb0:	481f      	ldr	r0, [pc, #124]	; (8002f30 <__NVIC_SetPriority+0xd4>)
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	33c0      	adds	r3, #192	; 0xc0
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	501a      	str	r2, [r3, r0]
}
 8002ec2:	e031      	b.n	8002f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <__NVIC_SetPriority+0xd8>)
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	0019      	movs	r1, r3
 8002ecc:	230f      	movs	r3, #15
 8002ece:	400b      	ands	r3, r1
 8002ed0:	3b08      	subs	r3, #8
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3306      	adds	r3, #6
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	18d3      	adds	r3, r2, r3
 8002eda:	3304      	adds	r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1dfa      	adds	r2, r7, #7
 8002ee0:	7812      	ldrb	r2, [r2, #0]
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	00d2      	lsls	r2, r2, #3
 8002eea:	21ff      	movs	r1, #255	; 0xff
 8002eec:	4091      	lsls	r1, r2
 8002eee:	000a      	movs	r2, r1
 8002ef0:	43d2      	mvns	r2, r2
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	22ff      	movs	r2, #255	; 0xff
 8002efc:	401a      	ands	r2, r3
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	2303      	movs	r3, #3
 8002f06:	4003      	ands	r3, r0
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f0c:	4809      	ldr	r0, [pc, #36]	; (8002f34 <__NVIC_SetPriority+0xd8>)
 8002f0e:	1dfb      	adds	r3, r7, #7
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	001c      	movs	r4, r3
 8002f14:	230f      	movs	r3, #15
 8002f16:	4023      	ands	r3, r4
 8002f18:	3b08      	subs	r3, #8
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	3306      	adds	r3, #6
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	18c3      	adds	r3, r0, r3
 8002f24:	3304      	adds	r3, #4
 8002f26:	601a      	str	r2, [r3, #0]
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b003      	add	sp, #12
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <SysTick_Config+0x40>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e010      	b.n	8002f70 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <SysTick_Config+0x44>)
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	3a01      	subs	r2, #1
 8002f54:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	2301      	movs	r3, #1
 8002f58:	425b      	negs	r3, r3
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ff7d 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <SysTick_Config+0x44>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <SysTick_Config+0x44>)
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	00ffffff 	.word	0x00ffffff
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	1c02      	adds	r2, r0, #0
 8002f90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff ff5d 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ff13 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b25b      	sxtb	r3, r3
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff ff1d 	bl	8002e1c <__NVIC_DisableIRQ>
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff9f 	bl	8002f38 <SysTick_Config>
 8002ffa:	0003      	movs	r3, r0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e061      	b.n	80030da <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <HAL_DMA_Init+0xe0>)
 800301c:	4694      	mov	ip, r2
 800301e:	4463      	add	r3, ip
 8003020:	2114      	movs	r1, #20
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd f874 	bl	8000110 <__udivsi3>
 8003028:	0003      	movs	r3, r0
 800302a:	009a      	lsls	r2, r3, #2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_DMA_Init+0xe4>)
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2225      	movs	r2, #37	; 0x25
 800303a:	2102      	movs	r1, #2
 800303c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a28      	ldr	r2, [pc, #160]	; (80030ec <HAL_DMA_Init+0xe8>)
 800304a:	4013      	ands	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	01db      	lsls	r3, r3, #7
 800308c:	429a      	cmp	r2, r3
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_DMA_Init+0xec>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	211c      	movs	r1, #28
 800309a:	400b      	ands	r3, r1
 800309c:	210f      	movs	r1, #15
 800309e:	4099      	lsls	r1, r3
 80030a0:	000b      	movs	r3, r1
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_DMA_Init+0xec>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_DMA_Init+0xec>)
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	201c      	movs	r0, #28
 80030b8:	4003      	ands	r3, r0
 80030ba:	409a      	lsls	r2, r3
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_DMA_Init+0xec>)
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2225      	movs	r2, #37	; 0x25
 80030cc:	2101      	movs	r1, #1
 80030ce:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	bffdfff8 	.word	0xbffdfff8
 80030e8:	40020000 	.word	0x40020000
 80030ec:	ffff800f 	.word	0xffff800f
 80030f0:	400200a8 	.word	0x400200a8

080030f4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2317      	movs	r3, #23
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2224      	movs	r2, #36	; 0x24
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_DMA_Start+0x24>
 8003114:	2302      	movs	r3, #2
 8003116:	e032      	b.n	800317e <HAL_DMA_Start+0x8a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	2101      	movs	r1, #1
 800311e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2225      	movs	r2, #37	; 0x25
 8003124:	5c9b      	ldrb	r3, [r3, r2]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d11d      	bne.n	8003168 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2225      	movs	r2, #37	; 0x25
 8003130:	2102      	movs	r1, #2
 8003132:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	438a      	bics	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f9b4 	bl	80034be <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e007      	b.n	8003178 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 8003170:	2317      	movs	r3, #23
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003178:	2317      	movs	r3, #23
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	781b      	ldrb	r3, [r3, #0]
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b006      	add	sp, #24
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2317      	movs	r3, #23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Start_IT+0x24>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e04f      	b.n	800324a <HAL_DMA_Start_IT+0xc4>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2224      	movs	r2, #36	; 0x24
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2225      	movs	r2, #37	; 0x25
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d13a      	bne.n	8003234 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2225      	movs	r2, #37	; 0x25
 80031c2:	2102      	movs	r1, #2
 80031c4:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	438a      	bics	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f96b 	bl	80034be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	210e      	movs	r1, #14
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e00f      	b.n	8003222 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2104      	movs	r1, #4
 800320e:	438a      	bics	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	210a      	movs	r1, #10
 800321e:	430a      	orrs	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e007      	b.n	8003244 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800323c:	2317      	movs	r3, #23
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2202      	movs	r2, #2
 8003242:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003244:	2317      	movs	r3, #23
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	781b      	ldrb	r3, [r3, #0]
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b006      	add	sp, #24
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	230f      	movs	r3, #15
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2225      	movs	r2, #37	; 0x25
 8003266:	5c9b      	ldrb	r3, [r3, r2]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e024      	b.n	80032ca <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	210e      	movs	r1, #14
 800328c:	438a      	bics	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	438a      	bics	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	221c      	movs	r2, #28
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2101      	movs	r1, #1
 80032ae:	4091      	lsls	r1, r2
 80032b0:	000a      	movs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2225      	movs	r2, #37	; 0x25
 80032b8:	2101      	movs	r1, #1
 80032ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]

    return status;
 80032c4:	230f      	movs	r3, #15
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	230f      	movs	r3, #15
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2225      	movs	r2, #37	; 0x25
 80032e6:	5c9b      	ldrb	r3, [r3, r2]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d007      	beq.n	80032fe <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2204      	movs	r2, #4
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032f4:	230f      	movs	r3, #15
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e02a      	b.n	8003354 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	210e      	movs	r1, #14
 800330a:	438a      	bics	r2, r1
 800330c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	438a      	bics	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	221c      	movs	r2, #28
 8003324:	401a      	ands	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2101      	movs	r1, #1
 800332c:	4091      	lsls	r1, r2
 800332e:	000a      	movs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2225      	movs	r2, #37	; 0x25
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2224      	movs	r2, #36	; 0x24
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	0010      	movs	r0, r2
 8003352:	4798      	blx	r3
    }
  }
  return status;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	221c      	movs	r2, #28
 8003380:	4013      	ands	r3, r2
 8003382:	2204      	movs	r2, #4
 8003384:	409a      	lsls	r2, r3
 8003386:	0013      	movs	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	d026      	beq.n	80033dc <HAL_DMA_IRQHandler+0x7a>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2204      	movs	r2, #4
 8003392:	4013      	ands	r3, r2
 8003394:	d022      	beq.n	80033dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2220      	movs	r2, #32
 800339e:	4013      	ands	r3, r2
 80033a0:	d107      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2104      	movs	r1, #4
 80033ae:	438a      	bics	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	221c      	movs	r2, #28
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2104      	movs	r1, #4
 80033c0:	4091      	lsls	r1, r2
 80033c2:	000a      	movs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d100      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x6e>
 80033ce:	e071      	b.n	80034b4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	0010      	movs	r0, r2
 80033d8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80033da:	e06b      	b.n	80034b4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	221c      	movs	r2, #28
 80033e2:	4013      	ands	r3, r2
 80033e4:	2202      	movs	r2, #2
 80033e6:	409a      	lsls	r2, r3
 80033e8:	0013      	movs	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	d02d      	beq.n	800344c <HAL_DMA_IRQHandler+0xea>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2202      	movs	r2, #2
 80033f4:	4013      	ands	r3, r2
 80033f6:	d029      	beq.n	800344c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2220      	movs	r2, #32
 8003400:	4013      	ands	r3, r2
 8003402:	d10b      	bne.n	800341c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	210a      	movs	r1, #10
 8003410:	438a      	bics	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2225      	movs	r2, #37	; 0x25
 8003418:	2101      	movs	r1, #1
 800341a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	221c      	movs	r2, #28
 8003422:	401a      	ands	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2102      	movs	r1, #2
 800342a:	4091      	lsls	r1, r2
 800342c:	000a      	movs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d039      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	0010      	movs	r0, r2
 8003448:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800344a:	e033      	b.n	80034b4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	221c      	movs	r2, #28
 8003452:	4013      	ands	r3, r2
 8003454:	2208      	movs	r2, #8
 8003456:	409a      	lsls	r2, r3
 8003458:	0013      	movs	r3, r2
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	d02a      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x154>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2208      	movs	r2, #8
 8003464:	4013      	ands	r3, r2
 8003466:	d026      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	210e      	movs	r1, #14
 8003474:	438a      	bics	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	221c      	movs	r2, #28
 800347e:	401a      	ands	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2101      	movs	r1, #1
 8003486:	4091      	lsls	r1, r2
 8003488:	000a      	movs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2225      	movs	r2, #37	; 0x25
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	0010      	movs	r0, r2
 80034b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46c0      	nop			; (mov r8, r8)
}
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}

080034be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	221c      	movs	r2, #28
 80034d2:	401a      	ands	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2101      	movs	r1, #1
 80034da:	4091      	lsls	r1, r2
 80034dc:	000a      	movs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d108      	bne.n	8003502 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003500:	e007      	b.n	8003512 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	60da      	str	r2, [r3, #12]
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003528:	2317      	movs	r3, #23
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003530:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_FLASH_Program+0x70>)
 8003532:	7c1b      	ldrb	r3, [r3, #16]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_FLASH_Program+0x20>
 8003538:	2302      	movs	r3, #2
 800353a:	e022      	b.n	8003582 <HAL_FLASH_Program+0x66>
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_FLASH_Program+0x70>)
 800353e:	2201      	movs	r2, #1
 8003540:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003542:	2517      	movs	r5, #23
 8003544:	197c      	adds	r4, r7, r5
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_FLASH_Program+0x74>)
 8003548:	0018      	movs	r0, r3
 800354a:	f000 f887 	bl	800365c <FLASH_WaitForLastOperation>
 800354e:	0003      	movs	r3, r0
 8003550:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8003552:	197b      	adds	r3, r7, r5
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10d      	bne.n	8003576 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_FLASH_Program+0x70>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003566:	2317      	movs	r3, #23
 8003568:	18fc      	adds	r4, r7, r3
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_FLASH_Program+0x74>)
 800356c:	0018      	movs	r0, r3
 800356e:	f000 f875 	bl	800365c <FLASH_WaitForLastOperation>
 8003572:	0003      	movs	r3, r0
 8003574:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_FLASH_Program+0x70>)
 8003578:	2200      	movs	r2, #0
 800357a:	741a      	strb	r2, [r3, #16]

  return status;
 800357c:	2317      	movs	r3, #23
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	781b      	ldrb	r3, [r3, #0]
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b006      	add	sp, #24
 8003588:	bdb0      	pop	{r4, r5, r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	200014cc 	.word	0x200014cc
 8003590:	0000c350 	.word	0x0000c350

08003594 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d118      	bne.n	80035d8 <HAL_FLASH_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ac:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80035ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b0:	b672      	cpsid	i
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <HAL_FLASH_Unlock+0x90>)
 80035b6:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_FLASH_Unlock+0x94>)
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80035c8:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_FLASH_Unlock+0x44>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e01f      	b.n	8003618 <HAL_FLASH_Unlock+0x84>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	4013      	ands	r3, r2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d118      	bne.n	8003616 <HAL_FLASH_Unlock+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8310 	mrs	r3, PRIMASK
 80035e8:	607b      	str	r3, [r7, #4]
  return(result);
 80035ea:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80035ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ee:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_FLASH_Unlock+0x98>)
 80035f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 80035f8:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <HAL_FLASH_Unlock+0x9c>)
 80035fa:	611a      	str	r2, [r3, #16]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_FLASH_Unlock+0x8c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d101      	bne.n	8003616 <HAL_FLASH_Unlock+0x82>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_FLASH_Unlock+0x84>
    }
  }

  return HAL_OK; 
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b006      	add	sp, #24
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40022000 	.word	0x40022000
 8003624:	89abcdef 	.word	0x89abcdef
 8003628:	02030405 	.word	0x02030405
 800362c:	8c9daebf 	.word	0x8c9daebf
 8003630:	13141516 	.word	0x13141516

08003634 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_FLASH_Lock+0x24>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_FLASH_Lock+0x24>)
 800363e:	2102      	movs	r1, #2
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <HAL_FLASH_Lock+0x24>)
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <HAL_FLASH_Lock+0x24>)
 800364a:	2101      	movs	r1, #1
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8003650:	2300      	movs	r3, #0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40022000 	.word	0x40022000

0800365c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7ff fb94 	bl	8002d90 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800366c:	e00f      	b.n	800368e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3301      	adds	r3, #1
 8003672:	d00c      	beq.n	800368e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <FLASH_WaitForLastOperation+0x2e>
 800367a:	f7ff fb89 	bl	8002d90 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d201      	bcs.n	800368e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e052      	b.n	8003734 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2201      	movs	r2, #1
 8003694:	4013      	ands	r3, r2
 8003696:	2b01      	cmp	r3, #1
 8003698:	d0e9      	beq.n	800366e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800369a:	4b28      	ldr	r3, [pc, #160]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d102      	bne.n	80036ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80036a6:	4b25      	ldr	r3, [pc, #148]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 80036a8:	2202      	movs	r2, #2
 80036aa:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	401a      	ands	r2, r3
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d035      	beq.n	800372a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d02c      	beq.n	800372a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	429a      	cmp	r2, r3
 80036e0:	d023      	beq.n	800372a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d01a      	beq.n	800372a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	429a      	cmp	r2, r3
 8003704:	d011      	beq.n	800372a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	029b      	lsls	r3, r3, #10
 800370e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	429a      	cmp	r2, r3
 8003716:	d008      	beq.n	800372a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <FLASH_WaitForLastOperation+0xe0>)
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	025b      	lsls	r3, r3, #9
 8003720:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	025b      	lsls	r3, r3, #9
 8003726:	429a      	cmp	r2, r3
 8003728:	d103      	bne.n	8003732 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800372a:	f000 f809 	bl	8003740 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40022000 	.word	0x40022000

08003740 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <FLASH_SetErrorCode+0x130>)
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	401a      	ands	r2, r3
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	429a      	cmp	r2, r3
 800375a:	d10a      	bne.n	8003772 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800375c:	4b45      	ldr	r3, [pc, #276]	; (8003874 <FLASH_SetErrorCode+0x134>)
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2202      	movs	r2, #2
 8003762:	431a      	orrs	r2, r3
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <FLASH_SetErrorCode+0x134>)
 8003766:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	0052      	lsls	r2, r2, #1
 800376e:	4313      	orrs	r3, r2
 8003770:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003772:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <FLASH_SetErrorCode+0x130>)
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	401a      	ands	r2, r3
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d10a      	bne.n	800379a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <FLASH_SetErrorCode+0x134>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	2201      	movs	r2, #1
 800378a:	431a      	orrs	r2, r3
 800378c:	4b39      	ldr	r3, [pc, #228]	; (8003874 <FLASH_SetErrorCode+0x134>)
 800378e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4313      	orrs	r3, r2
 8003798:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <FLASH_SetErrorCode+0x130>)
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	401a      	ands	r2, r3
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d10a      	bne.n	80037c2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <FLASH_SetErrorCode+0x134>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	2208      	movs	r2, #8
 80037b2:	431a      	orrs	r2, r3
 80037b4:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <FLASH_SetErrorCode+0x134>)
 80037b6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	4313      	orrs	r3, r2
 80037c0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <FLASH_SetErrorCode+0x130>)
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	401a      	ands	r2, r3
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10a      	bne.n	80037ea <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <FLASH_SetErrorCode+0x134>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	2204      	movs	r2, #4
 80037da:	431a      	orrs	r2, r3
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <FLASH_SetErrorCode+0x134>)
 80037de:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	4313      	orrs	r3, r2
 80037e8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <FLASH_SetErrorCode+0x130>)
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	401a      	ands	r2, r3
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	019b      	lsls	r3, r3, #6
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10a      	bne.n	8003812 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <FLASH_SetErrorCode+0x134>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	2210      	movs	r2, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <FLASH_SetErrorCode+0x134>)
 8003806:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	0192      	lsls	r2, r2, #6
 800380e:	4313      	orrs	r3, r2
 8003810:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <FLASH_SetErrorCode+0x130>)
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	029b      	lsls	r3, r3, #10
 800381a:	401a      	ands	r2, r3
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	429a      	cmp	r2, r3
 8003822:	d109      	bne.n	8003838 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <FLASH_SetErrorCode+0x134>)
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	2220      	movs	r2, #32
 800382a:	431a      	orrs	r2, r3
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <FLASH_SetErrorCode+0x134>)
 800382e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	4313      	orrs	r3, r2
 8003836:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <FLASH_SetErrorCode+0x130>)
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	025b      	lsls	r3, r3, #9
 8003840:	401a      	ands	r2, r3
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	025b      	lsls	r3, r3, #9
 8003846:	429a      	cmp	r2, r3
 8003848:	d10a      	bne.n	8003860 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <FLASH_SetErrorCode+0x134>)
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	431a      	orrs	r2, r3
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <FLASH_SetErrorCode+0x134>)
 8003854:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	0252      	lsls	r2, r2, #9
 800385c:	4313      	orrs	r3, r2
 800385e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <FLASH_SetErrorCode+0x130>)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	619a      	str	r2, [r3, #24]
}  
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	40022000 	.word	0x40022000
 8003874:	200014cc 	.word	0x200014cc

08003878 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003882:	230f      	movs	r3, #15
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_FLASHEx_Erase+0xbc>)
 8003890:	7c1b      	ldrb	r3, [r3, #16]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_FLASHEx_Erase+0x22>
 8003896:	2302      	movs	r3, #2
 8003898:	e048      	b.n	800392c <HAL_FLASHEx_Erase+0xb4>
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_FLASHEx_Erase+0xbc>)
 800389c:	2201      	movs	r2, #1
 800389e:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038a0:	250f      	movs	r5, #15
 80038a2:	197c      	adds	r4, r7, r5
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_FLASHEx_Erase+0xc0>)
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7ff fed8 	bl	800365c <FLASH_WaitForLastOperation>
 80038ac:	0003      	movs	r3, r0
 80038ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80038b0:	197b      	adds	r3, r7, r5
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d133      	bne.n	8003920 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4252      	negs	r2, r2
 80038be:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	e022      	b.n	800390e <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f83a 	bl	8003944 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038d0:	250f      	movs	r5, #15
 80038d2:	197c      	adds	r4, r7, r5
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_FLASHEx_Erase+0xc0>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7ff fec0 	bl	800365c <FLASH_WaitForLastOperation>
 80038dc:	0003      	movs	r3, r0
 80038de:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <HAL_FLASHEx_Erase+0xc4>)
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	4b15      	ldr	r3, [pc, #84]	; (800393c <HAL_FLASHEx_Erase+0xc4>)
 80038e6:	2108      	movs	r1, #8
 80038e8:	438a      	bics	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_FLASHEx_Erase+0xc4>)
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_FLASHEx_Erase+0xc4>)
 80038f2:	4913      	ldr	r1, [pc, #76]	; (8003940 <HAL_FLASHEx_Erase+0xc8>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 80038f8:	197b      	adds	r3, r7, r5
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	601a      	str	r2, [r3, #0]
        break;
 8003906:	e00b      	b.n	8003920 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3380      	adds	r3, #128	; 0x80
 800390c:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	01da      	lsls	r2, r3, #7
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d3d3      	bcc.n	80038c8 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <HAL_FLASHEx_Erase+0xbc>)
 8003922:	2200      	movs	r2, #0
 8003924:	741a      	strb	r2, [r3, #16]

  return status;
 8003926:	230f      	movs	r3, #15
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	781b      	ldrb	r3, [r3, #0]
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b004      	add	sp, #16
 8003932:	bdb0      	pop	{r4, r5, r7, pc}
 8003934:	200014cc 	.word	0x200014cc
 8003938:	0000c350 	.word	0x0000c350
 800393c:	40022000 	.word	0x40022000
 8003940:	fffffdff 	.word	0xfffffdff

08003944 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <FLASH_PageErase+0x3c>)
 800394e:	2200      	movs	r2, #0
 8003950:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <FLASH_PageErase+0x40>)
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <FLASH_PageErase+0x40>)
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0089      	lsls	r1, r1, #2
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <FLASH_PageErase+0x40>)
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <FLASH_PageErase+0x40>)
 8003966:	2108      	movs	r1, #8
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	227f      	movs	r2, #127	; 0x7f
 8003970:	4393      	bics	r3, r2
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	200014cc 	.word	0x200014cc
 8003984:	40022000 	.word	0x40022000

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800399e:	e155      	b.n	8003c4c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4091      	lsls	r1, r2
 80039aa:	000a      	movs	r2, r1
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d100      	bne.n	80039b8 <HAL_GPIO_Init+0x30>
 80039b6:	e146      	b.n	8003c46 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2203      	movs	r2, #3
 80039be:	4013      	ands	r3, r2
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d005      	beq.n	80039d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d130      	bne.n	8003a32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	409a      	lsls	r2, r3
 80039de:	0013      	movs	r3, r2
 80039e0:	43da      	mvns	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	0013      	movs	r3, r2
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a06:	2201      	movs	r2, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	401a      	ands	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2203      	movs	r2, #3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d017      	beq.n	8003a6e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	0013      	movs	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2203      	movs	r2, #3
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d123      	bne.n	8003ac2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	0092      	lsls	r2, r2, #2
 8003a84:	58d3      	ldr	r3, [r2, r3]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	43da      	mvns	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2107      	movs	r1, #7
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	0092      	lsls	r2, r2, #2
 8003abe:	6939      	ldr	r1, [r7, #16]
 8003ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	0013      	movs	r3, r2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	23c0      	movs	r3, #192	; 0xc0
 8003afc:	029b      	lsls	r3, r3, #10
 8003afe:	4013      	ands	r3, r2
 8003b00:	d100      	bne.n	8003b04 <HAL_GPIO_Init+0x17c>
 8003b02:	e0a0      	b.n	8003c46 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b04:	4b57      	ldr	r3, [pc, #348]	; (8003c64 <HAL_GPIO_Init+0x2dc>)
 8003b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b08:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <HAL_GPIO_Init+0x2dc>)
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b10:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <HAL_GPIO_Init+0x2e0>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3302      	adds	r3, #2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2203      	movs	r2, #3
 8003b22:	4013      	ands	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	220f      	movs	r2, #15
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	23a0      	movs	r3, #160	; 0xa0
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d01f      	beq.n	8003b7e <HAL_GPIO_Init+0x1f6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <HAL_GPIO_Init+0x2e4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d019      	beq.n	8003b7a <HAL_GPIO_Init+0x1f2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a49      	ldr	r2, [pc, #292]	; (8003c70 <HAL_GPIO_Init+0x2e8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a48      	ldr	r2, [pc, #288]	; (8003c74 <HAL_GPIO_Init+0x2ec>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00d      	beq.n	8003b72 <HAL_GPIO_Init+0x1ea>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a47      	ldr	r2, [pc, #284]	; (8003c78 <HAL_GPIO_Init+0x2f0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <HAL_GPIO_Init+0x1e6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a46      	ldr	r2, [pc, #280]	; (8003c7c <HAL_GPIO_Init+0x2f4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_GPIO_Init+0x1e2>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e00a      	b.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x1f8>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	2103      	movs	r1, #3
 8003b84:	400a      	ands	r2, r1
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b90:	4935      	ldr	r1, [pc, #212]	; (8003c68 <HAL_GPIO_Init+0x2e0>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	025b      	lsls	r3, r3, #9
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	4013      	ands	r3, r2
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	035b      	lsls	r3, r3, #13
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43da      	mvns	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	039b      	lsls	r3, r3, #14
 8003c34:	4013      	ands	r3, r2
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_GPIO_Init+0x2f8>)
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	40da      	lsrs	r2, r3
 8003c54:	1e13      	subs	r3, r2, #0
 8003c56:	d000      	beq.n	8003c5a <HAL_GPIO_Init+0x2d2>
 8003c58:	e6a2      	b.n	80039a0 <HAL_GPIO_Init+0x18>
  }
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b006      	add	sp, #24
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	50000400 	.word	0x50000400
 8003c70:	50000800 	.word	0x50000800
 8003c74:	50000c00 	.word	0x50000c00
 8003c78:	50001000 	.word	0x50001000
 8003c7c:	50001c00 	.word	0x50001c00
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b5b0      	push	{r4, r5, r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f000 fbc2 	bl	800441c <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c98:	4bca      	ldr	r3, [pc, #808]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	220c      	movs	r2, #12
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca2:	4bc8      	ldr	r3, [pc, #800]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	025b      	lsls	r3, r3, #9
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d100      	bne.n	8003cba <HAL_RCC_OscConfig+0x36>
 8003cb8:	e07e      	b.n	8003db8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d007      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d112      	bne.n	8003cec <HAL_RCC_OscConfig+0x68>
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d10d      	bne.n	8003cec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	4bbc      	ldr	r3, [pc, #752]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	029b      	lsls	r3, r3, #10
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d100      	bne.n	8003cde <HAL_RCC_OscConfig+0x5a>
 8003cdc:	e06b      	b.n	8003db6 <HAL_RCC_OscConfig+0x132>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d167      	bne.n	8003db6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f000 fb98 	bl	800441c <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	025b      	lsls	r3, r3, #9
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x84>
 8003cf8:	4bb2      	ldr	r3, [pc, #712]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4bb1      	ldr	r3, [pc, #708]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	0249      	lsls	r1, r1, #9
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e027      	b.n	8003d58 <HAL_RCC_OscConfig+0xd4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	23a0      	movs	r3, #160	; 0xa0
 8003d0e:	02db      	lsls	r3, r3, #11
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d10e      	bne.n	8003d32 <HAL_RCC_OscConfig+0xae>
 8003d14:	4bab      	ldr	r3, [pc, #684]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4baa      	ldr	r3, [pc, #680]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	02c9      	lsls	r1, r1, #11
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4ba8      	ldr	r3, [pc, #672]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4ba7      	ldr	r3, [pc, #668]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0249      	lsls	r1, r1, #9
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e012      	b.n	8003d58 <HAL_RCC_OscConfig+0xd4>
 8003d32:	4ba4      	ldr	r3, [pc, #656]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4ba3      	ldr	r3, [pc, #652]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d38:	49a3      	ldr	r1, [pc, #652]	; (8003fc8 <HAL_RCC_OscConfig+0x344>)
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	4ba1      	ldr	r3, [pc, #644]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	4013      	ands	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4b9d      	ldr	r3, [pc, #628]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b9c      	ldr	r3, [pc, #624]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d52:	499e      	ldr	r1, [pc, #632]	; (8003fcc <HAL_RCC_OscConfig+0x348>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7ff f816 	bl	8002d90 <HAL_GetTick>
 8003d64:	0003      	movs	r3, r0
 8003d66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d68:	e009      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6a:	f7ff f811 	bl	8002d90 <HAL_GetTick>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	; 0x64
 8003d76:	d902      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	f000 fb4f 	bl	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d7e:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	4013      	ands	r3, r2
 8003d88:	d0ef      	beq.n	8003d6a <HAL_RCC_OscConfig+0xe6>
 8003d8a:	e015      	b.n	8003db8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7ff f800 	bl	8002d90 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d96:	f7fe fffb 	bl	8002d90 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	; 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e339      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003da8:	4b86      	ldr	r3, [pc, #536]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	4013      	ands	r3, r2
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCC_OscConfig+0x112>
 8003db4:	e000      	b.n	8003db8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d100      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x140>
 8003dc2:	e09a      	b.n	8003efa <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2220      	movs	r2, #32
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003dd2:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003dd8:	2120      	movs	r1, #32
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	2220      	movs	r2, #32
 8003de2:	4393      	bics	r3, r2
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d13f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1ee>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d13c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003df8:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_RCC_OscConfig+0x188>
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e307      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6f      	ldr	r2, [pc, #444]	; (8003fd0 <HAL_RCC_OscConfig+0x34c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	021a      	lsls	r2, r3, #8
 8003e1c:	4b69      	ldr	r3, [pc, #420]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e22:	4b68      	ldr	r3, [pc, #416]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2209      	movs	r2, #9
 8003e28:	4393      	bics	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e34:	f000 fc44 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8003e38:	0001      	movs	r1, r0
 8003e3a:	4b62      	ldr	r3, [pc, #392]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	220f      	movs	r2, #15
 8003e42:	4013      	ands	r3, r2
 8003e44:	4a63      	ldr	r2, [pc, #396]	; (8003fd4 <HAL_RCC_OscConfig+0x350>)
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	000a      	movs	r2, r1
 8003e4a:	40da      	lsrs	r2, r3
 8003e4c:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <HAL_RCC_OscConfig+0x354>)
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003e50:	4b62      	ldr	r3, [pc, #392]	; (8003fdc <HAL_RCC_OscConfig+0x358>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2513      	movs	r5, #19
 8003e56:	197c      	adds	r4, r7, r5
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7fe ff53 	bl	8002d04 <HAL_InitTick>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003e62:	197b      	adds	r3, r7, r5
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d047      	beq.n	8003efa <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8003e6a:	2313      	movs	r3, #19
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	e2d4      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d027      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e78:	4b52      	ldr	r3, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2209      	movs	r2, #9
 8003e7e:	4393      	bics	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fe ff81 	bl	8002d90 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fe ff7c 	bl	8002d90 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e2ba      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ea6:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d0f1      	beq.n	8003e94 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4b44      	ldr	r3, [pc, #272]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a46      	ldr	r2, [pc, #280]	; (8003fd0 <HAL_RCC_OscConfig+0x34c>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e018      	b.n	8003efa <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec8:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe ff5c 	bl	8002d90 <HAL_GetTick>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fe ff57 	bl	8002d90 <HAL_GetTick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e295      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ef0:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d1f1      	bne.n	8003ede <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	4013      	ands	r3, r2
 8003f02:	d100      	bne.n	8003f06 <HAL_RCC_OscConfig+0x282>
 8003f04:	e0a3      	b.n	800404e <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d141      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4013      	ands	r3, r2
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2a0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e27b      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <HAL_RCC_OscConfig+0x35c>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	0a19      	lsrs	r1, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	061a      	lsls	r2, r3, #24
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	0b5b      	lsrs	r3, r3, #13
 8003f52:	3301      	adds	r3, #1
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	0212      	lsls	r2, r2, #8
 8003f58:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	210f      	movs	r1, #15
 8003f62:	400b      	ands	r3, r1
 8003f64:	491b      	ldr	r1, [pc, #108]	; (8003fd4 <HAL_RCC_OscConfig+0x350>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x354>)
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x358>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2513      	movs	r5, #19
 8003f74:	197c      	adds	r4, r7, r5
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fe fec4 	bl	8002d04 <HAL_InitTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003f80:	197b      	adds	r3, r7, r5
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d062      	beq.n	800404e <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 8003f88:	2313      	movs	r3, #19
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	e245      	b.n	800441c <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d040      	beq.n	800401a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x340>)
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	0049      	lsls	r1, r1, #1
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fef3 	bl	8002d90 <HAL_GetTick>
 8003faa:	0003      	movs	r3, r0
 8003fac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fae:	e019      	b.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fb0:	f7fe feee 	bl	8002d90 <HAL_GetTick>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d912      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e22c      	b.n	800441c <HAL_RCC_OscConfig+0x798>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	fffeffff 	.word	0xfffeffff
 8003fcc:	fffbffff 	.word	0xfffbffff
 8003fd0:	ffffe0ff 	.word	0xffffe0ff
 8003fd4:	08007f8c 	.word	0x08007f8c
 8003fd8:	2000010c 	.word	0x2000010c
 8003fdc:	20000110 	.word	0x20000110
 8003fe0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fe4:	4bc6      	ldr	r3, [pc, #792]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d0df      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff0:	4bc3      	ldr	r3, [pc, #780]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4ac3      	ldr	r2, [pc, #780]	; (8004304 <HAL_RCC_OscConfig+0x680>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffe:	4bc0      	ldr	r3, [pc, #768]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004004:	4bbe      	ldr	r3, [pc, #760]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	0a19      	lsrs	r1, r3, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	061a      	lsls	r2, r3, #24
 8004012:	4bbb      	ldr	r3, [pc, #748]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	e019      	b.n	800404e <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800401a:	4bb9      	ldr	r3, [pc, #740]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4bb8      	ldr	r3, [pc, #736]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004020:	49b9      	ldr	r1, [pc, #740]	; (8004308 <HAL_RCC_OscConfig+0x684>)
 8004022:	400a      	ands	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fe feb3 	bl	8002d90 <HAL_GetTick>
 800402a:	0003      	movs	r3, r0
 800402c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004030:	f7fe feae 	bl	8002d90 <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e1ec      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004042:	4baf      	ldr	r3, [pc, #700]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4013      	ands	r3, r2
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2208      	movs	r2, #8
 8004054:	4013      	ands	r3, r2
 8004056:	d036      	beq.n	80040c6 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d019      	beq.n	8004094 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004060:	4ba7      	ldr	r3, [pc, #668]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004064:	4ba6      	ldr	r3, [pc, #664]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004066:	2101      	movs	r1, #1
 8004068:	430a      	orrs	r2, r1
 800406a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406c:	f7fe fe90 	bl	8002d90 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004076:	f7fe fe8b 	bl	8002d90 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e1c9      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004088:	4b9d      	ldr	r3, [pc, #628]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d0f1      	beq.n	8004076 <HAL_RCC_OscConfig+0x3f2>
 8004092:	e018      	b.n	80040c6 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	4b9a      	ldr	r3, [pc, #616]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004098:	4b99      	ldr	r3, [pc, #612]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800409a:	2101      	movs	r1, #1
 800409c:	438a      	bics	r2, r1
 800409e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a0:	f7fe fe76 	bl	8002d90 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040aa:	f7fe fe71 	bl	8002d90 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1af      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040bc:	4b90      	ldr	r3, [pc, #576]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	2202      	movs	r2, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	d1f1      	bne.n	80040aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2204      	movs	r2, #4
 80040cc:	4013      	ands	r3, r2
 80040ce:	d100      	bne.n	80040d2 <HAL_RCC_OscConfig+0x44e>
 80040d0:	e0af      	b.n	8004232 <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d2:	2323      	movs	r3, #35	; 0x23
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80040dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	055b      	lsls	r3, r3, #21
 80040e2:	4013      	ands	r3, r2
 80040e4:	d10a      	bne.n	80040fc <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	4b86      	ldr	r3, [pc, #536]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	0549      	lsls	r1, r1, #21
 80040f0:	430a      	orrs	r2, r1
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80040f4:	2323      	movs	r3, #35	; 0x23
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fc:	4b83      	ldr	r3, [pc, #524]	; (800430c <HAL_RCC_OscConfig+0x688>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4013      	ands	r3, r2
 8004106:	d11a      	bne.n	800413e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004108:	4b80      	ldr	r3, [pc, #512]	; (800430c <HAL_RCC_OscConfig+0x688>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b7f      	ldr	r3, [pc, #508]	; (800430c <HAL_RCC_OscConfig+0x688>)
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	0049      	lsls	r1, r1, #1
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004116:	f7fe fe3b 	bl	8002d90 <HAL_GetTick>
 800411a:	0003      	movs	r3, r0
 800411c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fe fe36 	bl	8002d90 <HAL_GetTick>
 8004124:	0002      	movs	r2, r0
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e174      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_OscConfig+0x688>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4013      	ands	r3, r2
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	429a      	cmp	r2, r3
 8004148:	d107      	bne.n	800415a <HAL_RCC_OscConfig+0x4d6>
 800414a:	4b6d      	ldr	r3, [pc, #436]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800414c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800414e:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	0049      	lsls	r1, r1, #1
 8004154:	430a      	orrs	r2, r1
 8004156:	651a      	str	r2, [r3, #80]	; 0x50
 8004158:	e031      	b.n	80041be <HAL_RCC_OscConfig+0x53a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x4f8>
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004166:	4b66      	ldr	r3, [pc, #408]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004168:	4967      	ldr	r1, [pc, #412]	; (8004308 <HAL_RCC_OscConfig+0x684>)
 800416a:	400a      	ands	r2, r1
 800416c:	651a      	str	r2, [r3, #80]	; 0x50
 800416e:	4b64      	ldr	r3, [pc, #400]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004172:	4b63      	ldr	r3, [pc, #396]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004174:	4966      	ldr	r1, [pc, #408]	; (8004310 <HAL_RCC_OscConfig+0x68c>)
 8004176:	400a      	ands	r2, r1
 8004178:	651a      	str	r2, [r3, #80]	; 0x50
 800417a:	e020      	b.n	80041be <HAL_RCC_OscConfig+0x53a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	23a0      	movs	r3, #160	; 0xa0
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	429a      	cmp	r2, r3
 8004186:	d10e      	bne.n	80041a6 <HAL_RCC_OscConfig+0x522>
 8004188:	4b5d      	ldr	r3, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800418a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800418c:	4b5c      	ldr	r3, [pc, #368]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	00c9      	lsls	r1, r1, #3
 8004192:	430a      	orrs	r2, r1
 8004194:	651a      	str	r2, [r3, #80]	; 0x50
 8004196:	4b5a      	ldr	r3, [pc, #360]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800419a:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	0049      	lsls	r1, r1, #1
 80041a0:	430a      	orrs	r2, r1
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
 80041a4:	e00b      	b.n	80041be <HAL_RCC_OscConfig+0x53a>
 80041a6:	4b56      	ldr	r3, [pc, #344]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80041a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041aa:	4b55      	ldr	r3, [pc, #340]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80041ac:	4956      	ldr	r1, [pc, #344]	; (8004308 <HAL_RCC_OscConfig+0x684>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	651a      	str	r2, [r3, #80]	; 0x50
 80041b2:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80041b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041b6:	4b52      	ldr	r3, [pc, #328]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80041b8:	4955      	ldr	r1, [pc, #340]	; (8004310 <HAL_RCC_OscConfig+0x68c>)
 80041ba:	400a      	ands	r2, r1
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d015      	beq.n	80041f2 <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c6:	f7fe fde3 	bl	8002d90 <HAL_GetTick>
 80041ca:	0003      	movs	r3, r0
 80041cc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ce:	e009      	b.n	80041e4 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe fdde 	bl	8002d90 <HAL_GetTick>
 80041d4:	0002      	movs	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	4a4e      	ldr	r2, [pc, #312]	; (8004314 <HAL_RCC_OscConfig+0x690>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e11b      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041e4:	4b46      	ldr	r3, [pc, #280]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80041e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0ef      	beq.n	80041d0 <HAL_RCC_OscConfig+0x54c>
 80041f0:	e014      	b.n	800421c <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fe fdcd 	bl	8002d90 <HAL_GetTick>
 80041f6:	0003      	movs	r3, r0
 80041f8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041fa:	e009      	b.n	8004210 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe fdc8 	bl	8002d90 <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	4a43      	ldr	r2, [pc, #268]	; (8004314 <HAL_RCC_OscConfig+0x690>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e105      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004210:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4013      	ands	r3, r2
 800421a:	d1ef      	bne.n	80041fc <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800421c:	2323      	movs	r3, #35	; 0x23
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	4b35      	ldr	r3, [pc, #212]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800422c:	493a      	ldr	r1, [pc, #232]	; (8004318 <HAL_RCC_OscConfig+0x694>)
 800422e:	400a      	ands	r2, r1
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	4013      	ands	r3, r2
 800423a:	d049      	beq.n	80042d0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d026      	beq.n	8004292 <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004244:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 800424a:	2101      	movs	r1, #1
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004254:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004256:	2101      	movs	r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	635a      	str	r2, [r3, #52]	; 0x34
 800425c:	4b2f      	ldr	r3, [pc, #188]	; (800431c <HAL_RCC_OscConfig+0x698>)
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	4b2e      	ldr	r3, [pc, #184]	; (800431c <HAL_RCC_OscConfig+0x698>)
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	0189      	lsls	r1, r1, #6
 8004266:	430a      	orrs	r2, r1
 8004268:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fe fd91 	bl	8002d90 <HAL_GetTick>
 800426e:	0003      	movs	r3, r0
 8004270:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004274:	f7fe fd8c 	bl	8002d90 <HAL_GetTick>
 8004278:	0002      	movs	r2, r0
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0ca      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2202      	movs	r2, #2
 800428c:	4013      	ands	r3, r2
 800428e:	d0f1      	beq.n	8004274 <HAL_RCC_OscConfig+0x5f0>
 8004290:	e01e      	b.n	80042d0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 8004298:	2101      	movs	r1, #1
 800429a:	438a      	bics	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	4b1f      	ldr	r3, [pc, #124]	; (800431c <HAL_RCC_OscConfig+0x698>)
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_RCC_OscConfig+0x698>)
 80042a4:	491e      	ldr	r1, [pc, #120]	; (8004320 <HAL_RCC_OscConfig+0x69c>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fe fd71 	bl	8002d90 <HAL_GetTick>
 80042ae:	0003      	movs	r3, r0
 80042b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b4:	f7fe fd6c 	bl	8002d90 <HAL_GetTick>
 80042b8:	0002      	movs	r2, r0
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0aa      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2202      	movs	r2, #2
 80042cc:	4013      	ands	r3, r2
 80042ce:	d1f1      	bne.n	80042b4 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d100      	bne.n	80042da <HAL_RCC_OscConfig+0x656>
 80042d8:	e09f      	b.n	800441a <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d100      	bne.n	80042e2 <HAL_RCC_OscConfig+0x65e>
 80042e0:	e078      	b.n	80043d4 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d159      	bne.n	800439e <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_RCC_OscConfig+0x67c>)
 80042f0:	490c      	ldr	r1, [pc, #48]	; (8004324 <HAL_RCC_OscConfig+0x6a0>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fe fd4b 	bl	8002d90 <HAL_GetTick>
 80042fa:	0003      	movs	r3, r0
 80042fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042fe:	e01c      	b.n	800433a <HAL_RCC_OscConfig+0x6b6>
 8004300:	40021000 	.word	0x40021000
 8004304:	ffff1fff 	.word	0xffff1fff
 8004308:	fffffeff 	.word	0xfffffeff
 800430c:	40007000 	.word	0x40007000
 8004310:	fffffbff 	.word	0xfffffbff
 8004314:	00001388 	.word	0x00001388
 8004318:	efffffff 	.word	0xefffffff
 800431c:	40010000 	.word	0x40010000
 8004320:	ffffdfff 	.word	0xffffdfff
 8004324:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe fd32 	bl	8002d90 <HAL_GetTick>
 800432c:	0002      	movs	r2, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e070      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800433a:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	049b      	lsls	r3, r3, #18
 8004342:	4013      	ands	r3, r2
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4a37      	ldr	r2, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x7a4>)
 800434c:	4013      	ands	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	431a      	orrs	r2, r3
 8004360:	4b30      	ldr	r3, [pc, #192]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 8004362:	430a      	orrs	r2, r1
 8004364:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004366:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	0449      	lsls	r1, r1, #17
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fd0c 	bl	8002d90 <HAL_GetTick>
 8004378:	0003      	movs	r3, r0
 800437a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fe fd07 	bl	8002d90 <HAL_GetTick>
 8004382:	0002      	movs	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e045      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004390:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	049b      	lsls	r3, r3, #18
 8004398:	4013      	ands	r3, r2
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x6fa>
 800439c:	e03d      	b.n	800441a <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b21      	ldr	r3, [pc, #132]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 80043a4:	4921      	ldr	r1, [pc, #132]	; (800442c <HAL_RCC_OscConfig+0x7a8>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fe fcf1 	bl	8002d90 <HAL_GetTick>
 80043ae:	0003      	movs	r3, r0
 80043b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe fcec 	bl	8002d90 <HAL_GetTick>
 80043b8:	0002      	movs	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e02a      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	049b      	lsls	r3, r3, #18
 80043ce:	4013      	ands	r3, r2
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x730>
 80043d2:	e022      	b.n	800441a <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e01d      	b.n	800441c <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCC_OscConfig+0x7a0>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	025b      	lsls	r3, r3, #9
 80043ec:	401a      	ands	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d10f      	bne.n	8004416 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	23f0      	movs	r3, #240	; 0xf0
 80043fa:	039b      	lsls	r3, r3, #14
 80043fc:	401a      	ands	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d107      	bne.n	8004416 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	23c0      	movs	r3, #192	; 0xc0
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	401a      	ands	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b00a      	add	sp, #40	; 0x28
 8004422:	bdb0      	pop	{r4, r5, r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	ff02ffff 	.word	0xff02ffff
 800442c:	feffffff 	.word	0xfeffffff

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e129      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b96      	ldr	r3, [pc, #600]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	4013      	ands	r3, r2
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d91e      	bls.n	8004490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	4393      	bics	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	4b90      	ldr	r3, [pc, #576]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004464:	f7fe fc94 	bl	8002d90 <HAL_GetTick>
 8004468:	0003      	movs	r3, r0
 800446a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446c:	e009      	b.n	8004482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446e:	f7fe fc8f 	bl	8002d90 <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	4a8a      	ldr	r2, [pc, #552]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e10a      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b87      	ldr	r3, [pc, #540]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2201      	movs	r2, #1
 8004488:	4013      	ands	r3, r2
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2202      	movs	r2, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449a:	4b83      	ldr	r3, [pc, #524]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	22f0      	movs	r2, #240	; 0xf0
 80044a0:	4393      	bics	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	4b7f      	ldr	r3, [pc, #508]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 80044aa:	430a      	orrs	r2, r1
 80044ac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	4013      	ands	r3, r2
 80044b6:	d100      	bne.n	80044ba <HAL_RCC_ClockConfig+0x8a>
 80044b8:	e089      	b.n	80045ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044c2:	4b79      	ldr	r3, [pc, #484]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	4013      	ands	r3, r2
 80044cc:	d120      	bne.n	8004510 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0e2      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044da:	4b73      	ldr	r3, [pc, #460]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	049b      	lsls	r3, r3, #18
 80044e2:	4013      	ands	r3, r2
 80044e4:	d114      	bne.n	8004510 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0d6      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f2:	4b6d      	ldr	r3, [pc, #436]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	4013      	ands	r3, r2
 80044fa:	d109      	bne.n	8004510 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0cb      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004500:	4b69      	ldr	r3, [pc, #420]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4013      	ands	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0c3      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004510:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2203      	movs	r2, #3
 8004516:	4393      	bics	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004520:	430a      	orrs	r2, r1
 8004522:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fe fc34 	bl	8002d90 <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d111      	bne.n	8004558 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004534:	e009      	b.n	800454a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004536:	f7fe fc2b 	bl	8002d90 <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0a6      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800454a:	4b57      	ldr	r3, [pc, #348]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	220c      	movs	r2, #12
 8004550:	4013      	ands	r3, r2
 8004552:	2b08      	cmp	r3, #8
 8004554:	d1ef      	bne.n	8004536 <HAL_RCC_ClockConfig+0x106>
 8004556:	e03a      	b.n	80045ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d111      	bne.n	8004584 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004560:	e009      	b.n	8004576 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004562:	f7fe fc15 	bl	8002d90 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	4a4d      	ldr	r2, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e090      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004576:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	220c      	movs	r2, #12
 800457c:	4013      	ands	r3, r2
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d1ef      	bne.n	8004562 <HAL_RCC_ClockConfig+0x132>
 8004582:	e024      	b.n	80045ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11b      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800458c:	e009      	b.n	80045a2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458e:	f7fe fbff 	bl	8002d90 <HAL_GetTick>
 8004592:	0002      	movs	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e07a      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	220c      	movs	r2, #12
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d1ef      	bne.n	800458e <HAL_RCC_ClockConfig+0x15e>
 80045ae:	e00e      	b.n	80045ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fe fbee 	bl	8002d90 <HAL_GetTick>
 80045b4:	0002      	movs	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	4a3a      	ldr	r2, [pc, #232]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e069      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80045c4:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	220c      	movs	r2, #12
 80045ca:	4013      	ands	r3, r2
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ce:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2201      	movs	r2, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d21e      	bcs.n	800461a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045dc:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2201      	movs	r2, #1
 80045e2:	4393      	bics	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045ee:	f7fe fbcf 	bl	8002d90 <HAL_GetTick>
 80045f2:	0003      	movs	r3, r0
 80045f4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	e009      	b.n	800460c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fe fbca 	bl	8002d90 <HAL_GetTick>
 80045fc:	0002      	movs	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	4a28      	ldr	r2, [pc, #160]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e045      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2201      	movs	r2, #1
 8004612:	4013      	ands	r3, r2
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d1ee      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	4013      	ands	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a20      	ldr	r2, [pc, #128]	; (80046ac <HAL_RCC_ClockConfig+0x27c>)
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004634:	430a      	orrs	r2, r1
 8004636:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	4013      	ands	r3, r2
 8004640:	d00a      	beq.n	8004658 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_RCC_ClockConfig+0x280>)
 8004648:	4013      	ands	r3, r2
 800464a:	0019      	movs	r1, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00da      	lsls	r2, r3, #3
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004654:	430a      	orrs	r2, r1
 8004656:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004658:	f000 f832 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800465c:	0001      	movs	r1, r0
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <HAL_RCC_ClockConfig+0x278>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	220f      	movs	r2, #15
 8004666:	4013      	ands	r3, r2
 8004668:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <HAL_RCC_ClockConfig+0x284>)
 800466a:	5cd3      	ldrb	r3, [r2, r3]
 800466c:	000a      	movs	r2, r1
 800466e:	40da      	lsrs	r2, r3
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <HAL_RCC_ClockConfig+0x288>)
 8004672:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <HAL_RCC_ClockConfig+0x28c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	250b      	movs	r5, #11
 800467a:	197c      	adds	r4, r7, r5
 800467c:	0018      	movs	r0, r3
 800467e:	f7fe fb41 	bl	8002d04 <HAL_InitTick>
 8004682:	0003      	movs	r3, r0
 8004684:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004686:	197b      	adds	r3, r7, r5
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800468e:	230b      	movs	r3, #11
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	e000      	b.n	8004698 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	b004      	add	sp, #16
 800469e:	bdb0      	pop	{r4, r5, r7, pc}
 80046a0:	40022000 	.word	0x40022000
 80046a4:	00001388 	.word	0x00001388
 80046a8:	40021000 	.word	0x40021000
 80046ac:	fffff8ff 	.word	0xfffff8ff
 80046b0:	ffffc7ff 	.word	0xffffc7ff
 80046b4:	08007f8c 	.word	0x08007f8c
 80046b8:	2000010c 	.word	0x2000010c
 80046bc:	20000110 	.word	0x20000110

080046c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	b08f      	sub	sp, #60	; 0x3c
 80046c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80046c6:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x130>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ce:	230c      	movs	r3, #12
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d00f      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x36>
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d010      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x3c>
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d000      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x20>
 80046de:	e073      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x130>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2210      	movs	r2, #16
 80046e6:	4013      	ands	r3, r2
 80046e8:	d002      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80046ea:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x134>)
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80046ee:	e079      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046f4:	e076      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046f6:	4b41      	ldr	r3, [pc, #260]	; (80047fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046fa:	e073      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	0c9a      	lsrs	r2, r3, #18
 8004700:	230f      	movs	r3, #15
 8004702:	401a      	ands	r2, r3
 8004704:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCC_GetSysClockFreq+0x140>)
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	0d9a      	lsrs	r2, r3, #22
 800470e:	2303      	movs	r3, #3
 8004710:	4013      	ands	r3, r2
 8004712:	3301      	adds	r3, #1
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x130>)
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	025b      	lsls	r3, r3, #9
 800471e:	4013      	ands	r3, r2
 8004720:	d019      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	4a34      	ldr	r2, [pc, #208]	; (80047fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800472c:	2300      	movs	r3, #0
 800472e:	69b8      	ldr	r0, [r7, #24]
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	f7fb fd99 	bl	8000268 <__aeabi_lmul>
 8004736:	0003      	movs	r3, r0
 8004738:	000c      	movs	r4, r1
 800473a:	0018      	movs	r0, r3
 800473c:	0021      	movs	r1, r4
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f7fb fd6d 	bl	8000228 <__aeabi_uldivmod>
 800474e:	0003      	movs	r3, r0
 8004750:	000c      	movs	r4, r1
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	e035      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x130>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2210      	movs	r2, #16
 800475c:	4013      	ands	r3, r2
 800475e:	d019      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x134>)
 800476a:	2300      	movs	r3, #0
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	f7fb fd7a 	bl	8000268 <__aeabi_lmul>
 8004774:	0003      	movs	r3, r0
 8004776:	000c      	movs	r4, r1
 8004778:	0018      	movs	r0, r3
 800477a:	0021      	movs	r1, r4
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f7fb fd4e 	bl	8000228 <__aeabi_uldivmod>
 800478c:	0003      	movs	r3, r0
 800478e:	000c      	movs	r4, r1
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
 8004792:	e016      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	0018      	movs	r0, r3
 8004798:	2300      	movs	r3, #0
 800479a:	0019      	movs	r1, r3
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800479e:	2300      	movs	r3, #0
 80047a0:	f7fb fd62 	bl	8000268 <__aeabi_lmul>
 80047a4:	0003      	movs	r3, r0
 80047a6:	000c      	movs	r4, r1
 80047a8:	0018      	movs	r0, r3
 80047aa:	0021      	movs	r1, r4
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	001d      	movs	r5, r3
 80047b0:	2300      	movs	r3, #0
 80047b2:	001e      	movs	r6, r3
 80047b4:	002a      	movs	r2, r5
 80047b6:	0033      	movs	r3, r6
 80047b8:	f7fb fd36 	bl	8000228 <__aeabi_uldivmod>
 80047bc:	0003      	movs	r3, r0
 80047be:	000c      	movs	r4, r1
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047c6:	e00d      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x130>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	0b5b      	lsrs	r3, r3, #13
 80047ce:	2207      	movs	r2, #7
 80047d0:	4013      	ands	r3, r2
 80047d2:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	3301      	adds	r3, #1
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	0212      	lsls	r2, r2, #8
 80047dc:	409a      	lsls	r2, r3
 80047de:	0013      	movs	r3, r2
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b00f      	add	sp, #60	; 0x3c
 80047ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	40021000 	.word	0x40021000
 80047f4:	003d0900 	.word	0x003d0900
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	007a1200 	.word	0x007a1200
 8004800:	08007fa4 	.word	0x08007fa4

08004804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <HAL_RCC_GetHCLKFreq+0x10>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	2000010c 	.word	0x2000010c

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800481c:	f7ff fff2 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004820:	0001      	movs	r1, r0
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	2207      	movs	r2, #7
 800482a:	4013      	ands	r3, r2
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	40d9      	lsrs	r1, r3
 8004832:	000b      	movs	r3, r1
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	40021000 	.word	0x40021000
 8004840:	08007f9c 	.word	0x08007f9c

08004844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004848:	f7ff ffdc 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 800484c:	0001      	movs	r1, r0
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	0adb      	lsrs	r3, r3, #11
 8004854:	2207      	movs	r2, #7
 8004856:	4013      	ands	r3, r2
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <HAL_RCC_GetPCLK2Freq+0x28>)
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	40d9      	lsrs	r1, r3
 800485e:	000b      	movs	r3, r1
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	40021000 	.word	0x40021000
 800486c:	08007f9c 	.word	0x08007f9c

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004878:	2317      	movs	r3, #23
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2220      	movs	r2, #32
 8004886:	4013      	ands	r3, r2
 8004888:	d106      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4013      	ands	r3, r2
 8004894:	d100      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004896:	e0d9      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004898:	4ba4      	ldr	r3, [pc, #656]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800489a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	055b      	lsls	r3, r3, #21
 80048a0:	4013      	ands	r3, r2
 80048a2:	d10a      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a4:	4ba1      	ldr	r3, [pc, #644]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a8:	4ba0      	ldr	r3, [pc, #640]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048aa:	2180      	movs	r1, #128	; 0x80
 80048ac:	0549      	lsls	r1, r1, #21
 80048ae:	430a      	orrs	r2, r1
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80048b2:	2317      	movs	r3, #23
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ba:	4b9d      	ldr	r3, [pc, #628]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	d11a      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c6:	4b9a      	ldr	r3, [pc, #616]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b99      	ldr	r3, [pc, #612]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	0049      	lsls	r1, r1, #1
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d4:	f7fe fa5c 	bl	8002d90 <HAL_GetTick>
 80048d8:	0003      	movs	r3, r0
 80048da:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	e008      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048de:	f7fe fa57 	bl	8002d90 <HAL_GetTick>
 80048e2:	0002      	movs	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b64      	cmp	r3, #100	; 0x64
 80048ea:	d901      	bls.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e118      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f0:	4b8f      	ldr	r3, [pc, #572]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2380      	movs	r3, #128	; 0x80
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4013      	ands	r3, r2
 80048fa:	d0f0      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048fc:	4b8b      	ldr	r3, [pc, #556]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	23c0      	movs	r3, #192	; 0xc0
 8004902:	039b      	lsls	r3, r3, #14
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	23c0      	movs	r3, #192	; 0xc0
 800490e:	039b      	lsls	r3, r3, #14
 8004910:	4013      	ands	r3, r2
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	23c0      	movs	r3, #192	; 0xc0
 800491e:	039b      	lsls	r3, r3, #14
 8004920:	4013      	ands	r3, r2
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d013      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	23c0      	movs	r3, #192	; 0xc0
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	401a      	ands	r2, r3
 8004932:	23c0      	movs	r3, #192	; 0xc0
 8004934:	029b      	lsls	r3, r3, #10
 8004936:	429a      	cmp	r2, r3
 8004938:	d10a      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800493a:	4b7c      	ldr	r3, [pc, #496]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	029b      	lsls	r3, r3, #10
 8004942:	401a      	ands	r2, r3
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	429a      	cmp	r2, r3
 800494a:	d101      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0e8      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004950:	4b76      	ldr	r3, [pc, #472]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004954:	23c0      	movs	r3, #192	; 0xc0
 8004956:	029b      	lsls	r3, r3, #10
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d049      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	23c0      	movs	r3, #192	; 0xc0
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	4013      	ands	r3, r2
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	429a      	cmp	r2, r3
 8004970:	d004      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2220      	movs	r2, #32
 8004978:	4013      	ands	r3, r2
 800497a:	d10d      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	23c0      	movs	r3, #192	; 0xc0
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	4013      	ands	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d034      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	4013      	ands	r3, r2
 8004996:	d02e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004998:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800499a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499c:	4a65      	ldr	r2, [pc, #404]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049a2:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049a6:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	0309      	lsls	r1, r1, #12
 80049ac:	430a      	orrs	r2, r1
 80049ae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b0:	4b5e      	ldr	r3, [pc, #376]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049b4:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049b6:	4960      	ldr	r1, [pc, #384]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80049bc:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4013      	ands	r3, r2
 80049ca:	d014      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fe f9e0 	bl	8002d90 <HAL_GetTick>
 80049d0:	0003      	movs	r3, r0
 80049d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d4:	e009      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fe f9db 	bl	8002d90 <HAL_GetTick>
 80049da:	0002      	movs	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	4a56      	ldr	r2, [pc, #344]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e09b      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049ea:	4b50      	ldr	r3, [pc, #320]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4013      	ands	r3, r2
 80049f4:	d0ef      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	23c0      	movs	r3, #192	; 0xc0
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	401a      	ands	r2, r3
 8004a00:	23c0      	movs	r3, #192	; 0xc0
 8004a02:	029b      	lsls	r3, r3, #10
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004a08:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a4c      	ldr	r2, [pc, #304]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	0019      	movs	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	23c0      	movs	r3, #192	; 0xc0
 8004a18:	039b      	lsls	r3, r3, #14
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	23c0      	movs	r3, #192	; 0xc0
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	401a      	ands	r2, r3
 8004a30:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a32:	430a      	orrs	r2, r1
 8004a34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a36:	2317      	movs	r3, #23
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a44:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a46:	493f      	ldr	r1, [pc, #252]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2201      	movs	r2, #1
 8004a52:	4013      	ands	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	4013      	ands	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a74:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	220c      	movs	r2, #12
 8004a7a:	4393      	bics	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a84:	430a      	orrs	r2, r1
 8004a86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2208      	movs	r2, #8
 8004aac:	4013      	ands	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4013      	ands	r3, r2
 8004ace:	d009      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad4:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69da      	ldr	r2, [r3, #28]
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2240      	movs	r2, #64	; 0x40
 8004aea:	4013      	ands	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	0019      	movs	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004afe:	430a      	orrs	r2, r1
 8004b00:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2280      	movs	r2, #128	; 0x80
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b006      	add	sp, #24
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40007000 	.word	0x40007000
 8004b34:	fffcffff 	.word	0xfffcffff
 8004b38:	fff7ffff 	.word	0xfff7ffff
 8004b3c:	00001388 	.word	0x00001388
 8004b40:	ffcfffff 	.word	0xffcfffff
 8004b44:	efffffff 	.word	0xefffffff
 8004b48:	fffff3ff 	.word	0xfffff3ff
 8004b4c:	ffffcfff 	.word	0xffffcfff
 8004b50:	fbffffff 	.word	0xfbffffff
 8004b54:	fff3ffff 	.word	0xfff3ffff

08004b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e083      	b.n	8004c72 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	2382      	movs	r3, #130	; 0x82
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d009      	beq.n	8004b92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	61da      	str	r2, [r3, #28]
 8004b84:	e005      	b.n	8004b92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2251      	movs	r2, #81	; 0x51
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d107      	bne.n	8004bb4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2250      	movs	r2, #80	; 0x50
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fd fe4c 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2251      	movs	r2, #81	; 0x51
 8004bb8:	2102      	movs	r1, #2
 8004bba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2140      	movs	r1, #64	; 0x40
 8004bc8:	438a      	bics	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	2382      	movs	r3, #130	; 0x82
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6899      	ldr	r1, [r3, #8]
 8004bda:	2384      	movs	r3, #132	; 0x84
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	400b      	ands	r3, r1
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68d9      	ldr	r1, [r3, #12]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	400b      	ands	r3, r1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	400b      	ands	r3, r1
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6999      	ldr	r1, [r3, #24]
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2138      	movs	r1, #56	; 0x38
 8004c14:	400b      	ands	r3, r1
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	400b      	ands	r3, r1
 8004c20:	431a      	orrs	r2, r3
 8004c22:	0011      	movs	r1, r2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	019b      	lsls	r3, r3, #6
 8004c2c:	401a      	ands	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	0c1b      	lsrs	r3, r3, #16
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	4013      	ands	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2210      	movs	r2, #16
 8004c48:	401a      	ands	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4907      	ldr	r1, [pc, #28]	; (8004c7c <HAL_SPI_Init+0x124>)
 8004c5e:	400a      	ands	r2, r1
 8004c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2251      	movs	r2, #81	; 0x51
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b002      	add	sp, #8
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	fffff7ff 	.word	0xfffff7ff

08004c80 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	1dbb      	adds	r3, r7, #6
 8004c8c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c8e:	2317      	movs	r3, #23
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d112      	bne.n	8004cc4 <HAL_SPI_Receive_DMA+0x44>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	2382      	movs	r3, #130	; 0x82
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2251      	movs	r2, #81	; 0x51
 8004cae:	2104      	movs	r1, #4
 8004cb0:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004cb2:	1dbb      	adds	r3, r7, #6
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f8ba 	bl	8004e34 <HAL_SPI_TransmitReceive_DMA>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	e0aa      	b.n	8004e1a <HAL_SPI_Receive_DMA+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2250      	movs	r2, #80	; 0x50
 8004cc8:	5c9b      	ldrb	r3, [r3, r2]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_SPI_Receive_DMA+0x52>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e0a3      	b.n	8004e1a <HAL_SPI_Receive_DMA+0x19a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2250      	movs	r2, #80	; 0x50
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2251      	movs	r2, #81	; 0x51
 8004cde:	5c9b      	ldrb	r3, [r3, r2]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d004      	beq.n	8004cf0 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8004ce6:	2317      	movs	r3, #23
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
    goto error;
 8004cee:	e08d      	b.n	8004e0c <HAL_SPI_Receive_DMA+0x18c>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_SPI_Receive_DMA+0x7e>
 8004cf6:	1dbb      	adds	r3, r7, #6
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8004cfe:	2317      	movs	r3, #23
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d06:	e081      	b.n	8004e0c <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2251      	movs	r2, #81	; 0x51
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1dba      	adds	r2, r7, #6
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1dba      	adds	r2, r7, #6
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d10f      	bne.n	8004d70 <HAL_SPI_Receive_DMA+0xf0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2140      	movs	r1, #64	; 0x40
 8004d5c:	438a      	bics	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	492e      	ldr	r1, [pc, #184]	; (8004e24 <HAL_SPI_Receive_DMA+0x1a4>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	4a2c      	ldr	r2, [pc, #176]	; (8004e28 <HAL_SPI_Receive_DMA+0x1a8>)
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7c:	4a2b      	ldr	r2, [pc, #172]	; (8004e2c <HAL_SPI_Receive_DMA+0x1ac>)
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <HAL_SPI_Receive_DMA+0x1b0>)
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004da8:	f7fe f9ed 	bl	8003186 <HAL_DMA_Start_IT>
 8004dac:	1e03      	subs	r3, r0, #0
 8004dae:	d00e      	beq.n	8004dce <HAL_SPI_Receive_DMA+0x14e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	2210      	movs	r2, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004dbc:	2317      	movs	r3, #23
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2251      	movs	r2, #81	; 0x51
 8004dc8:	2101      	movs	r1, #1
 8004dca:	5499      	strb	r1, [r3, r2]
    goto error;
 8004dcc:	e01e      	b.n	8004e0c <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2240      	movs	r2, #64	; 0x40
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d007      	beq.n	8004dec <HAL_SPI_Receive_DMA+0x16c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2140      	movs	r1, #64	; 0x40
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2120      	movs	r1, #32
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2101      	movs	r1, #1
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2250      	movs	r2, #80	; 0x50
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004e14:	2317      	movs	r3, #23
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	781b      	ldrb	r3, [r3, #0]
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b006      	add	sp, #24
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	ffffbfff 	.word	0xffffbfff
 8004e28:	080053e7 	.word	0x080053e7
 8004e2c:	080052a5 	.word	0x080052a5
 8004e30:	08005423 	.word	0x08005423

08004e34 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	001a      	movs	r2, r3
 8004e42:	1cbb      	adds	r3, r7, #2
 8004e44:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e46:	2317      	movs	r3, #23
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2250      	movs	r2, #80	; 0x50
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_SPI_TransmitReceive_DMA+0x28>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e0f6      	b.n	800504a <HAL_SPI_TransmitReceive_DMA+0x216>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2250      	movs	r2, #80	; 0x50
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e64:	2016      	movs	r0, #22
 8004e66:	183b      	adds	r3, r7, r0
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	2151      	movs	r1, #81	; 0x51
 8004e6c:	5c52      	ldrb	r2, [r2, r1]
 8004e6e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004e76:	183b      	adds	r3, r7, r0
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d012      	beq.n	8004ea4 <HAL_SPI_TransmitReceive_DMA+0x70>
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	2382      	movs	r3, #130	; 0x82
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d108      	bne.n	8004e9a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <HAL_SPI_TransmitReceive_DMA+0x66>
 8004e90:	2316      	movs	r3, #22
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d004      	beq.n	8004ea4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8004e9a:	2317      	movs	r3, #23
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ea2:	e0cb      	b.n	800503c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <HAL_SPI_TransmitReceive_DMA+0x84>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_SPI_TransmitReceive_DMA+0x84>
 8004eb0:	1cbb      	adds	r3, r7, #2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8004eb8:	2317      	movs	r3, #23
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ec0:	e0bc      	b.n	800503c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2251      	movs	r2, #81	; 0x51
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d003      	beq.n	8004ed6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2251      	movs	r2, #81	; 0x51
 8004ed2:	2105      	movs	r1, #5
 8004ed4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1cba      	adds	r2, r7, #2
 8004ee6:	8812      	ldrh	r2, [r2, #0]
 8004ee8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1cba      	adds	r2, r7, #2
 8004eee:	8812      	ldrh	r2, [r2, #0]
 8004ef0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1cba      	adds	r2, r7, #2
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1cba      	adds	r2, r7, #2
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2251      	movs	r2, #81	; 0x51
 8004f18:	5c9b      	ldrb	r3, [r3, r2]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d108      	bne.n	8004f32 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	4a4b      	ldr	r2, [pc, #300]	; (8005054 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2c:	4a4a      	ldr	r2, [pc, #296]	; (8005058 <HAL_SPI_TransmitReceive_DMA+0x224>)
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f30:	e007      	b.n	8004f42 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	4a49      	ldr	r2, [pc, #292]	; (800505c <HAL_SPI_TransmitReceive_DMA+0x228>)
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	4a48      	ldr	r2, [pc, #288]	; (8005060 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 8004f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	4a47      	ldr	r2, [pc, #284]	; (8005064 <HAL_SPI_TransmitReceive_DMA+0x230>)
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	2200      	movs	r2, #0
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f6a:	f7fe f90c 	bl	8003186 <HAL_DMA_Start_IT>
 8004f6e:	1e03      	subs	r3, r0, #0
 8004f70:	d00e      	beq.n	8004f90 <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	2210      	movs	r2, #16
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f7e:	2317      	movs	r3, #23
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2251      	movs	r2, #81	; 0x51
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]
    goto error;
 8004f8e:	e055      	b.n	800503c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fac:	2200      	movs	r2, #0
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	0019      	movs	r1, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004fd8:	f7fe f8d5 	bl	8003186 <HAL_DMA_Start_IT>
 8004fdc:	1e03      	subs	r3, r0, #0
 8004fde:	d00e      	beq.n	8004ffe <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fec:	2317      	movs	r3, #23
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2251      	movs	r2, #81	; 0x51
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	5499      	strb	r1, [r3, r2]
    goto error;
 8004ffc:	e01e      	b.n	800503c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2240      	movs	r2, #64	; 0x40
 8005006:	4013      	ands	r3, r2
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d007      	beq.n	800501c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2120      	movs	r1, #32
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2102      	movs	r1, #2
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2250      	movs	r2, #80	; 0x50
 8005040:	2100      	movs	r1, #0
 8005042:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b006      	add	sp, #24
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	080053e7 	.word	0x080053e7
 8005058:	080052a5 	.word	0x080052a5
 800505c:	08005405 	.word	0x08005405
 8005060:	08005353 	.word	0x08005353
 8005064:	08005423 	.word	0x08005423

08005068 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	001a      	movs	r2, r3
 8005086:	2301      	movs	r3, #1
 8005088:	4013      	ands	r3, r2
 800508a:	d10f      	bne.n	80050ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2201      	movs	r2, #1
 8005090:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005092:	d00b      	beq.n	80050ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	001a      	movs	r2, r3
 800509a:	2301      	movs	r3, #1
 800509c:	4013      	ands	r3, r2
 800509e:	d005      	beq.n	80050ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	0010      	movs	r0, r2
 80050a8:	4798      	blx	r3
    return;
 80050aa:	e0d6      	b.n	800525a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	001a      	movs	r2, r3
 80050b2:	2301      	movs	r3, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <HAL_SPI_IRQHandler+0x68>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	09db      	lsrs	r3, r3, #7
 80050bc:	001a      	movs	r2, r3
 80050be:	2301      	movs	r3, #1
 80050c0:	4013      	ands	r3, r2
 80050c2:	d005      	beq.n	80050d0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	0010      	movs	r0, r2
 80050cc:	4798      	blx	r3
    return;
 80050ce:	e0c4      	b.n	800525a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	001a      	movs	r2, r3
 80050d6:	2301      	movs	r3, #1
 80050d8:	4013      	ands	r3, r2
 80050da:	d10c      	bne.n	80050f6 <HAL_SPI_IRQHandler+0x8e>
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	001a      	movs	r2, r3
 80050e2:	2301      	movs	r3, #1
 80050e4:	4013      	ands	r3, r2
 80050e6:	d106      	bne.n	80050f6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	001a      	movs	r2, r3
 80050ee:	2301      	movs	r3, #1
 80050f0:	4013      	ands	r3, r2
 80050f2:	d100      	bne.n	80050f6 <HAL_SPI_IRQHandler+0x8e>
 80050f4:	e0b1      	b.n	800525a <HAL_SPI_IRQHandler+0x1f2>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	001a      	movs	r2, r3
 80050fc:	2301      	movs	r3, #1
 80050fe:	4013      	ands	r3, r2
 8005100:	d100      	bne.n	8005104 <HAL_SPI_IRQHandler+0x9c>
 8005102:	e0aa      	b.n	800525a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	001a      	movs	r2, r3
 800510a:	2301      	movs	r3, #1
 800510c:	4013      	ands	r3, r2
 800510e:	d023      	beq.n	8005158 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2251      	movs	r2, #81	; 0x51
 8005114:	5c9b      	ldrb	r3, [r3, r2]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d011      	beq.n	8005140 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	2204      	movs	r2, #4
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	e00b      	b.n	8005158 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	693b      	ldr	r3, [r7, #16]
        return;
 8005156:	e080      	b.n	800525a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	001a      	movs	r2, r3
 800515e:	2301      	movs	r3, #1
 8005160:	4013      	ands	r3, r2
 8005162:	d014      	beq.n	800518e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	2201      	movs	r2, #1
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2140      	movs	r1, #64	; 0x40
 8005188:	438a      	bics	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	001a      	movs	r2, r3
 8005194:	2301      	movs	r3, #1
 8005196:	4013      	ands	r3, r2
 8005198:	d00c      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	2208      	movs	r2, #8
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d04d      	beq.n	8005258 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	21e0      	movs	r1, #224	; 0xe0
 80051c8:	438a      	bics	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2251      	movs	r2, #81	; 0x51
 80051d0:	2101      	movs	r1, #1
 80051d2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2202      	movs	r2, #2
 80051d8:	4013      	ands	r3, r2
 80051da:	d103      	bne.n	80051e4 <HAL_SPI_IRQHandler+0x17c>
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2201      	movs	r2, #1
 80051e0:	4013      	ands	r3, r2
 80051e2:	d032      	beq.n	800524a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2103      	movs	r1, #3
 80051f0:	438a      	bics	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	4a17      	ldr	r2, [pc, #92]	; (8005260 <HAL_SPI_IRQHandler+0x1f8>)
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005208:	0018      	movs	r0, r3
 800520a:	f7fe f862 	bl	80032d2 <HAL_DMA_Abort_IT>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d005      	beq.n	800521e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522a:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <HAL_SPI_IRQHandler+0x1f8>)
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	0018      	movs	r0, r3
 8005234:	f7fe f84d 	bl	80032d2 <HAL_DMA_Abort_IT>
 8005238:	1e03      	subs	r3, r0, #0
 800523a:	d00b      	beq.n	8005254 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	2240      	movs	r2, #64	; 0x40
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005248:	e004      	b.n	8005254 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	0018      	movs	r0, r3
 800524e:	f000 f821 	bl	8005294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005252:	e000      	b.n	8005256 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005254:	46c0      	nop			; (mov r8, r8)
    return;
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	46c0      	nop			; (mov r8, r8)
  }
}
 800525a:	46bd      	mov	sp, r7
 800525c:	b008      	add	sp, #32
 800525e:	bd80      	pop	{r7, pc}
 8005260:	08005465 	.word	0x08005465

08005264 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800527c:	46c0      	nop			; (mov r8, r8)
 800527e:	46bd      	mov	sp, r7
 8005280:	b002      	add	sp, #8
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b002      	add	sp, #8
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b2:	f7fd fd6d 	bl	8002d90 <HAL_GetTick>
 80052b6:	0003      	movs	r3, r0
 80052b8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2220      	movs	r2, #32
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d03d      	beq.n	8005344 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2120      	movs	r1, #32
 80052d4:	438a      	bics	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10e      	bne.n	80052fe <SPI_DMAReceiveCplt+0x5a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	2382      	movs	r3, #130	; 0x82
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d108      	bne.n	80052fe <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2103      	movs	r1, #3
 80052f8:	438a      	bics	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	e007      	b.n	800530e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2101      	movs	r1, #1
 800530a:	438a      	bics	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2164      	movs	r1, #100	; 0x64
 8005314:	0018      	movs	r0, r3
 8005316:	f000 f949 	bl	80055ac <SPI_EndRxTransaction>
 800531a:	1e03      	subs	r3, r0, #0
 800531c:	d002      	beq.n	8005324 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2251      	movs	r2, #81	; 0x51
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	0018      	movs	r0, r3
 800533e:	f7ff ffa9 	bl	8005294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005342:	e003      	b.n	800534c <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	0018      	movs	r0, r3
 8005348:	f7fc fc96 	bl	8001c78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800534c:	46bd      	mov	sp, r7
 800534e:	b004      	add	sp, #16
 8005350:	bd80      	pop	{r7, pc}

08005352 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005360:	f7fd fd16 	bl	8002d90 <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2220      	movs	r2, #32
 8005370:	4013      	ands	r3, r2
 8005372:	2b20      	cmp	r3, #32
 8005374:	d030      	beq.n	80053d8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2120      	movs	r1, #32
 8005382:	438a      	bics	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2164      	movs	r1, #100	; 0x64
 800538c:	0018      	movs	r0, r3
 800538e:	f000 f977 	bl	8005680 <SPI_EndRxTxTransaction>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d005      	beq.n	80053a2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	2220      	movs	r2, #32
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2103      	movs	r1, #3
 80053ae:	438a      	bics	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2251      	movs	r2, #81	; 0x51
 80053c2:	2101      	movs	r1, #1
 80053c4:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7ff ff5f 	bl	8005294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80053d6:	e003      	b.n	80053e0 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	0018      	movs	r0, r3
 80053dc:	f7ff ff42 	bl	8005264 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b004      	add	sp, #16
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff ff3c 	bl	8005274 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b004      	add	sp, #16
 8005402:	bd80      	pop	{r7, pc}

08005404 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	0018      	movs	r0, r3
 8005416:	f7ff ff35 	bl	8005284 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bd80      	pop	{r7, pc}

08005422 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2103      	movs	r1, #3
 800543c:	438a      	bics	r2, r1
 800543e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	2210      	movs	r2, #16
 8005446:	431a      	orrs	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2251      	movs	r2, #81	; 0x51
 8005450:	2101      	movs	r1, #1
 8005452:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	0018      	movs	r0, r3
 8005458:	f7ff ff1c 	bl	8005294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}

08005464 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	0018      	movs	r0, r3
 8005482:	f7ff ff07 	bl	8005294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b004      	add	sp, #16
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	1dfb      	adds	r3, r7, #7
 800549e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054a0:	f7fd fc76 	bl	8002d90 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	18d3      	adds	r3, r2, r3
 80054ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054b0:	f7fd fc6e 	bl	8002d90 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054b8:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	015b      	lsls	r3, r3, #5
 80054be:	0d1b      	lsrs	r3, r3, #20
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	4353      	muls	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c6:	e058      	b.n	800557a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	d055      	beq.n	800557a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054ce:	f7fd fc5f 	bl	8002d90 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d902      	bls.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d142      	bne.n	800556a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	21e0      	movs	r1, #224	; 0xe0
 80054f0:	438a      	bics	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	2382      	movs	r3, #130	; 0x82
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d113      	bne.n	8005528 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	429a      	cmp	r2, r3
 800550a:	d005      	beq.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	429a      	cmp	r2, r3
 8005516:	d107      	bne.n	8005528 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2140      	movs	r1, #64	; 0x40
 8005524:	438a      	bics	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	019b      	lsls	r3, r3, #6
 8005530:	429a      	cmp	r2, r3
 8005532:	d110      	bne.n	8005556 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	491a      	ldr	r1, [pc, #104]	; (80055a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005540:	400a      	ands	r2, r1
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	0189      	lsls	r1, r1, #6
 8005552:	430a      	orrs	r2, r1
 8005554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2251      	movs	r2, #81	; 0x51
 800555a:	2101      	movs	r1, #1
 800555c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2250      	movs	r2, #80	; 0x50
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e017      	b.n	800559a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3b01      	subs	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	425a      	negs	r2, r3
 800558a:	4153      	adcs	r3, r2
 800558c:	b2db      	uxtb	r3, r3
 800558e:	001a      	movs	r2, r3
 8005590:	1dfb      	adds	r3, r7, #7
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d197      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b008      	add	sp, #32
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	2000010c 	.word	0x2000010c
 80055a8:	ffffdfff 	.word	0xffffdfff

080055ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	2382      	movs	r3, #130	; 0x82
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d113      	bne.n	80055ec <SPI_EndRxTransaction+0x40>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d005      	beq.n	80055dc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	2380      	movs	r3, #128	; 0x80
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2140      	movs	r1, #64	; 0x40
 80055e8:	438a      	bics	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	2382      	movs	r3, #130	; 0x82
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d12b      	bne.n	8005650 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	429a      	cmp	r2, r3
 8005602:	d012      	beq.n	800562a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	0013      	movs	r3, r2
 800560e:	2200      	movs	r2, #0
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	f7ff ff3d 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 8005616:	1e03      	subs	r3, r0, #0
 8005618:	d02d      	beq.n	8005676 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	2220      	movs	r2, #32
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e026      	b.n	8005678 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	0013      	movs	r3, r2
 8005634:	2200      	movs	r2, #0
 8005636:	2101      	movs	r1, #1
 8005638:	f7ff ff2a 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d01a      	beq.n	8005676 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	2220      	movs	r2, #32
 8005646:	431a      	orrs	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e013      	b.n	8005678 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	0013      	movs	r3, r2
 800565a:	2200      	movs	r2, #0
 800565c:	2101      	movs	r1, #1
 800565e:	f7ff ff17 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 8005662:	1e03      	subs	r3, r0, #0
 8005664:	d007      	beq.n	8005676 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	2220      	movs	r2, #32
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e000      	b.n	8005678 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b004      	add	sp, #16
 800567e:	bd80      	pop	{r7, pc}

08005680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <SPI_EndRxTxTransaction+0x84>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	491d      	ldr	r1, [pc, #116]	; (8005708 <SPI_EndRxTxTransaction+0x88>)
 8005692:	0018      	movs	r0, r3
 8005694:	f7fa fd3c 	bl	8000110 <__udivsi3>
 8005698:	0003      	movs	r3, r0
 800569a:	001a      	movs	r2, r3
 800569c:	0013      	movs	r3, r2
 800569e:	015b      	lsls	r3, r3, #5
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	189b      	adds	r3, r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	2382      	movs	r3, #130	; 0x82
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d112      	bne.n	80056dc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	0013      	movs	r3, r2
 80056c0:	2200      	movs	r2, #0
 80056c2:	2180      	movs	r1, #128	; 0x80
 80056c4:	f7ff fee4 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 80056c8:	1e03      	subs	r3, r0, #0
 80056ca:	d016      	beq.n	80056fa <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	2220      	movs	r2, #32
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e00f      	b.n	80056fc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d0f2      	beq.n	80056dc <SPI_EndRxTxTransaction+0x5c>
 80056f6:	e000      	b.n	80056fa <SPI_EndRxTxTransaction+0x7a>
        break;
 80056f8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	0018      	movs	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	b006      	add	sp, #24
 8005702:	bd80      	pop	{r7, pc}
 8005704:	2000010c 	.word	0x2000010c
 8005708:	016e3600 	.word	0x016e3600

0800570c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e044      	b.n	80057a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2274      	movs	r2, #116	; 0x74
 800572a:	2100      	movs	r1, #0
 800572c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f7fd f933 	bl	800299c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2224      	movs	r2, #36	; 0x24
 800573a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2101      	movs	r1, #1
 8005748:	438a      	bics	r2, r1
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fbc6 	bl	8005ee0 <UART_SetConfig>
 8005754:	0003      	movs	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e024      	b.n	80057a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	0018      	movs	r0, r3
 800576a:	f000 fe75 	bl	8006458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	490d      	ldr	r1, [pc, #52]	; (80057b0 <HAL_UART_Init+0xa4>)
 800577a:	400a      	ands	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	212a      	movs	r1, #42	; 0x2a
 800578a:	438a      	bics	r2, r1
 800578c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2101      	movs	r1, #1
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f000 ff0d 	bl	80065c0 <UART_CheckIdleState>
 80057a6:	0003      	movs	r3, r0
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	ffffb7ff 	.word	0xffffb7ff

080057b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	1dbb      	adds	r3, r7, #6
 80057c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d000      	beq.n	80057cc <HAL_UART_Transmit_DMA+0x18>
 80057ca:	e088      	b.n	80058de <HAL_UART_Transmit_DMA+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_UART_Transmit_DMA+0x26>
 80057d2:	1dbb      	adds	r3, r7, #6
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e080      	b.n	80058e0 <HAL_UART_Transmit_DMA+0x12c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	015b      	lsls	r3, r3, #5
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d109      	bne.n	80057fe <HAL_UART_Transmit_DMA+0x4a>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2201      	movs	r2, #1
 80057f6:	4013      	ands	r3, r2
 80057f8:	d001      	beq.n	80057fe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e070      	b.n	80058e0 <HAL_UART_Transmit_DMA+0x12c>
      }
    }

    __HAL_LOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2274      	movs	r2, #116	; 0x74
 8005802:	5c9b      	ldrb	r3, [r3, r2]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_UART_Transmit_DMA+0x58>
 8005808:	2302      	movs	r3, #2
 800580a:	e069      	b.n	80058e0 <HAL_UART_Transmit_DMA+0x12c>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2274      	movs	r2, #116	; 0x74
 8005810:	2101      	movs	r1, #1
 8005812:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1dba      	adds	r2, r7, #6
 800581e:	2150      	movs	r1, #80	; 0x50
 8005820:	8812      	ldrh	r2, [r2, #0]
 8005822:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1dba      	adds	r2, r7, #6
 8005828:	2152      	movs	r1, #82	; 0x52
 800582a:	8812      	ldrh	r2, [r2, #0]
 800582c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2280      	movs	r2, #128	; 0x80
 8005832:	2100      	movs	r1, #0
 8005834:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2221      	movs	r2, #33	; 0x21
 800583a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d02b      	beq.n	800589c <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_UART_Transmit_DMA+0x134>)
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005850:	4a26      	ldr	r2, [pc, #152]	; (80058ec <HAL_UART_Transmit_DMA+0x138>)
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005858:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <HAL_UART_Transmit_DMA+0x13c>)
 800585a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005860:	2200      	movs	r2, #0
 8005862:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	0019      	movs	r1, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3328      	adds	r3, #40	; 0x28
 8005874:	001a      	movs	r2, r3
 8005876:	1dbb      	adds	r3, r7, #6
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	f7fd fc84 	bl	8003186 <HAL_DMA_Start_IT>
 800587e:	1e03      	subs	r3, r0, #0
 8005880:	d00c      	beq.n	800589c <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	2110      	movs	r1, #16
 8005888:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2274      	movs	r2, #116	; 0x74
 800588e:	2100      	movs	r1, #0
 8005890:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e021      	b.n	80058e0 <HAL_UART_Transmit_DMA+0x12c>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2240      	movs	r2, #64	; 0x40
 80058a2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2274      	movs	r2, #116	; 0x74
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	613b      	str	r3, [r7, #16]
  return(result);
 80058b2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	2301      	movs	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f383 8810 	msr	PRIMASK, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_UART_Transmit_DMA+0x12c>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b008      	add	sp, #32
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	080068c9 	.word	0x080068c9
 80058ec:	08006959 	.word	0x08006959
 80058f0:	08006977 	.word	0x08006977

080058f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0aa      	sub	sp, #168	; 0xa8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	22a4      	movs	r2, #164	; 0xa4
 8005904:	18b9      	adds	r1, r7, r2
 8005906:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	21a0      	movs	r1, #160	; 0xa0
 8005910:	1879      	adds	r1, r7, r1
 8005912:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	219c      	movs	r1, #156	; 0x9c
 800591c:	1879      	adds	r1, r7, r1
 800591e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005920:	18bb      	adds	r3, r7, r2
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a99      	ldr	r2, [pc, #612]	; (8005b8c <HAL_UART_IRQHandler+0x298>)
 8005926:	4013      	ands	r3, r2
 8005928:	2298      	movs	r2, #152	; 0x98
 800592a:	18b9      	adds	r1, r7, r2
 800592c:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 800592e:	18bb      	adds	r3, r7, r2
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d116      	bne.n	8005964 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005936:	23a4      	movs	r3, #164	; 0xa4
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2220      	movs	r2, #32
 800593e:	4013      	ands	r3, r2
 8005940:	d010      	beq.n	8005964 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005942:	23a0      	movs	r3, #160	; 0xa0
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2220      	movs	r2, #32
 800594a:	4013      	ands	r3, r2
 800594c:	d00a      	beq.n	8005964 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005952:	2b00      	cmp	r3, #0
 8005954:	d100      	bne.n	8005958 <HAL_UART_IRQHandler+0x64>
 8005956:	e28e      	b.n	8005e76 <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	0010      	movs	r0, r2
 8005960:	4798      	blx	r3
      }
      return;
 8005962:	e288      	b.n	8005e76 <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005964:	2398      	movs	r3, #152	; 0x98
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d100      	bne.n	8005970 <HAL_UART_IRQHandler+0x7c>
 800596e:	e113      	b.n	8005b98 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005970:	239c      	movs	r3, #156	; 0x9c
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2201      	movs	r2, #1
 8005978:	4013      	ands	r3, r2
 800597a:	d106      	bne.n	800598a <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800597c:	23a0      	movs	r3, #160	; 0xa0
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a83      	ldr	r2, [pc, #524]	; (8005b90 <HAL_UART_IRQHandler+0x29c>)
 8005984:	4013      	ands	r3, r2
 8005986:	d100      	bne.n	800598a <HAL_UART_IRQHandler+0x96>
 8005988:	e106      	b.n	8005b98 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800598a:	23a4      	movs	r3, #164	; 0xa4
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	4013      	ands	r3, r2
 8005994:	d012      	beq.n	80059bc <HAL_UART_IRQHandler+0xc8>
 8005996:	23a0      	movs	r3, #160	; 0xa0
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4013      	ands	r3, r2
 80059a2:	d00b      	beq.n	80059bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	589b      	ldr	r3, [r3, r2]
 80059b2:	2201      	movs	r2, #1
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059bc:	23a4      	movs	r3, #164	; 0xa4
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2202      	movs	r2, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	d011      	beq.n	80059ec <HAL_UART_IRQHandler+0xf8>
 80059c8:	239c      	movs	r3, #156	; 0x9c
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00b      	beq.n	80059ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2202      	movs	r2, #2
 80059da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2280      	movs	r2, #128	; 0x80
 80059e0:	589b      	ldr	r3, [r3, r2]
 80059e2:	2204      	movs	r2, #4
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ec:	23a4      	movs	r3, #164	; 0xa4
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2204      	movs	r2, #4
 80059f4:	4013      	ands	r3, r2
 80059f6:	d011      	beq.n	8005a1c <HAL_UART_IRQHandler+0x128>
 80059f8:	239c      	movs	r3, #156	; 0x9c
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2280      	movs	r2, #128	; 0x80
 8005a10:	589b      	ldr	r3, [r3, r2]
 8005a12:	2202      	movs	r2, #2
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a1c:	23a4      	movs	r3, #164	; 0xa4
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2208      	movs	r2, #8
 8005a24:	4013      	ands	r3, r2
 8005a26:	d017      	beq.n	8005a58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a28:	23a0      	movs	r3, #160	; 0xa0
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	4013      	ands	r3, r2
 8005a32:	d105      	bne.n	8005a40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a34:	239c      	movs	r3, #156	; 0x9c
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a3e:	d00b      	beq.n	8005a58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2208      	movs	r2, #8
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	589b      	ldr	r3, [r3, r2]
 8005a4e:	2208      	movs	r2, #8
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2180      	movs	r1, #128	; 0x80
 8005a56:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a58:	23a4      	movs	r3, #164	; 0xa4
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	4013      	ands	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_UART_IRQHandler+0x19a>
 8005a66:	23a0      	movs	r3, #160	; 0xa0
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	04db      	lsls	r3, r3, #19
 8005a70:	4013      	ands	r3, r2
 8005a72:	d00c      	beq.n	8005a8e <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	0112      	lsls	r2, r2, #4
 8005a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	589b      	ldr	r3, [r3, r2]
 8005a84:	2220      	movs	r2, #32
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2180      	movs	r1, #128	; 0x80
 8005a8c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	589b      	ldr	r3, [r3, r2]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d100      	bne.n	8005a9a <HAL_UART_IRQHandler+0x1a6>
 8005a98:	e1ef      	b.n	8005e7a <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a9a:	23a4      	movs	r3, #164	; 0xa4
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aa6:	23a0      	movs	r3, #160	; 0xa0
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2220      	movs	r2, #32
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d008      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	0010      	movs	r0, r2
 8005ac2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	589b      	ldr	r3, [r3, r2]
 8005aca:	2294      	movs	r2, #148	; 0x94
 8005acc:	18ba      	adds	r2, r7, r2
 8005ace:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2240      	movs	r2, #64	; 0x40
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d005      	beq.n	8005aea <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ade:	2394      	movs	r3, #148	; 0x94
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2228      	movs	r2, #40	; 0x28
 8005ae6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ae8:	d045      	beq.n	8005b76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 fe8f 	bl	8006810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2240      	movs	r2, #64	; 0x40
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d135      	bne.n	8005b6c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b00:	f3ef 8310 	mrs	r3, PRIMASK
 8005b04:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b08:	2090      	movs	r0, #144	; 0x90
 8005b0a:	183a      	adds	r2, r7, r0
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	2301      	movs	r3, #1
 8005b10:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b14:	f383 8810 	msr	PRIMASK, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2140      	movs	r1, #64	; 0x40
 8005b24:	438a      	bics	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	183b      	adds	r3, r7, r0
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b30:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <HAL_UART_IRQHandler+0x2a0>)
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7fd fbc2 	bl	80032d2 <HAL_DMA_Abort_IT>
 8005b4e:	1e03      	subs	r3, r0, #0
 8005b50:	d01a      	beq.n	8005b88 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	e012      	b.n	8005b88 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 f9a7 	bl	8005eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6a:	e00d      	b.n	8005b88 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f9a2 	bl	8005eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e008      	b.n	8005b88 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f000 f99d 	bl	8005eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2280      	movs	r2, #128	; 0x80
 8005b82:	2100      	movs	r1, #0
 8005b84:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b86:	e178      	b.n	8005e7a <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	46c0      	nop			; (mov r8, r8)
    return;
 8005b8a:	e176      	b.n	8005e7a <HAL_UART_IRQHandler+0x586>
 8005b8c:	0000080f 	.word	0x0000080f
 8005b90:	04000120 	.word	0x04000120
 8005b94:	080069f9 	.word	0x080069f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d000      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x2ae>
 8005ba0:	e129      	b.n	8005df6 <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ba2:	23a4      	movs	r3, #164	; 0xa4
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	4013      	ands	r3, r2
 8005bac:	d100      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x2bc>
 8005bae:	e122      	b.n	8005df6 <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bb0:	23a0      	movs	r3, #160	; 0xa0
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d100      	bne.n	8005bbe <HAL_UART_IRQHandler+0x2ca>
 8005bbc:	e11b      	b.n	8005df6 <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d000      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x2e2>
 8005bd4:	e097      	b.n	8005d06 <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	217e      	movs	r1, #126	; 0x7e
 8005be0:	187b      	adds	r3, r7, r1
 8005be2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005be4:	187b      	adds	r3, r7, r1
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d100      	bne.n	8005bee <HAL_UART_IRQHandler+0x2fa>
 8005bec:	e147      	b.n	8005e7e <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2258      	movs	r2, #88	; 0x58
 8005bf2:	5a9b      	ldrh	r3, [r3, r2]
 8005bf4:	227e      	movs	r2, #126	; 0x7e
 8005bf6:	18ba      	adds	r2, r7, r2
 8005bf8:	8812      	ldrh	r2, [r2, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d300      	bcc.n	8005c00 <HAL_UART_IRQHandler+0x30c>
 8005bfe:	e13e      	b.n	8005e7e <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	227e      	movs	r2, #126	; 0x7e
 8005c04:	18ba      	adds	r2, r7, r2
 8005c06:	215a      	movs	r1, #90	; 0x5a
 8005c08:	8812      	ldrh	r2, [r2, #0]
 8005c0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2220      	movs	r2, #32
 8005c16:	4013      	ands	r3, r2
 8005c18:	d166      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c22:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c24:	2301      	movs	r3, #1
 8005c26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2a:	f383 8810 	msr	PRIMASK, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4995      	ldr	r1, [pc, #596]	; (8005e90 <HAL_UART_IRQHandler+0x59c>)
 8005c3a:	400a      	ands	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c48:	f3ef 8310 	mrs	r3, PRIMASK
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c50:	677b      	str	r3, [r7, #116]	; 0x74
 8005c52:	2301      	movs	r3, #1
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c58:	f383 8810 	msr	PRIMASK, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2101      	movs	r1, #1
 8005c68:	438a      	bics	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c72:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c76:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c80:	2301      	movs	r3, #1
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	f383 8810 	msr	PRIMASK, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2140      	movs	r1, #64	; 0x40
 8005c96:	438a      	bics	r2, r1
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca0:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cba:	2301      	movs	r3, #1
 8005cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc0:	f383 8810 	msr	PRIMASK, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2110      	movs	r1, #16
 8005cd0:	438a      	bics	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cda:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fd fab5 	bl	8003252 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2258      	movs	r2, #88	; 0x58
 8005cec:	5a9a      	ldrh	r2, [r3, r2]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	215a      	movs	r1, #90	; 0x5a
 8005cf2:	5a5b      	ldrh	r3, [r3, r1]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	0011      	movs	r1, r2
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 f8e2 	bl	8005ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d04:	e0bb      	b.n	8005e7e <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2258      	movs	r2, #88	; 0x58
 8005d0a:	5a99      	ldrh	r1, [r3, r2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	225a      	movs	r2, #90	; 0x5a
 8005d10:	5a9b      	ldrh	r3, [r3, r2]
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	238e      	movs	r3, #142	; 0x8e
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	1a8a      	subs	r2, r1, r2
 8005d1a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	225a      	movs	r2, #90	; 0x5a
 8005d20:	5a9b      	ldrh	r3, [r3, r2]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d100      	bne.n	8005d2a <HAL_UART_IRQHandler+0x436>
 8005d28:	e0ab      	b.n	8005e82 <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 8005d2a:	238e      	movs	r3, #142	; 0x8e
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d100      	bne.n	8005d36 <HAL_UART_IRQHandler+0x442>
 8005d34:	e0a5      	b.n	8005e82 <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d36:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	2088      	movs	r0, #136	; 0x88
 8005d40:	183a      	adds	r2, r7, r0
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	2301      	movs	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f383 8810 	msr	PRIMASK, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	494e      	ldr	r1, [pc, #312]	; (8005e94 <HAL_UART_IRQHandler+0x5a0>)
 8005d5a:	400a      	ands	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	183b      	adds	r3, r7, r0
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d70:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	2084      	movs	r0, #132	; 0x84
 8005d74:	183a      	adds	r2, r7, r0
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f383 8810 	msr	PRIMASK, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	438a      	bics	r2, r1
 8005d90:	609a      	str	r2, [r3, #8]
 8005d92:	183b      	adds	r3, r7, r0
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8310 	mrs	r3, PRIMASK
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	2080      	movs	r0, #128	; 0x80
 8005dba:	183a      	adds	r2, r7, r0
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	f383 8810 	msr	PRIMASK, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2110      	movs	r1, #16
 8005dd4:	438a      	bics	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	183b      	adds	r3, r7, r0
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de4:	238e      	movs	r3, #142	; 0x8e
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	881a      	ldrh	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0011      	movs	r1, r2
 8005dee:	0018      	movs	r0, r3
 8005df0:	f000 f86a 	bl	8005ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df4:	e045      	b.n	8005e82 <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005df6:	23a4      	movs	r3, #164	; 0xa4
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	035b      	lsls	r3, r3, #13
 8005e00:	4013      	ands	r3, r2
 8005e02:	d010      	beq.n	8005e26 <HAL_UART_IRQHandler+0x532>
 8005e04:	239c      	movs	r3, #156	; 0x9c
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	03db      	lsls	r3, r3, #15
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	0352      	lsls	r2, r2, #13
 8005e1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fe2a 	bl	8006a78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e24:	e030      	b.n	8005e88 <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e26:	23a4      	movs	r3, #164	; 0xa4
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e32:	23a0      	movs	r3, #160	; 0xa0
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2280      	movs	r2, #128	; 0x80
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01f      	beq.n	8005e86 <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	0010      	movs	r0, r2
 8005e4e:	4798      	blx	r3
    }
    return;
 8005e50:	e019      	b.n	8005e86 <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e52:	23a4      	movs	r3, #164	; 0xa4
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2240      	movs	r2, #64	; 0x40
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d014      	beq.n	8005e88 <HAL_UART_IRQHandler+0x594>
 8005e5e:	23a0      	movs	r3, #160	; 0xa0
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2240      	movs	r2, #64	; 0x40
 8005e66:	4013      	ands	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f000 fdda 	bl	8006a26 <UART_EndTransmit_IT>
    return;
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	e008      	b.n	8005e88 <HAL_UART_IRQHandler+0x594>
      return;
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	e006      	b.n	8005e88 <HAL_UART_IRQHandler+0x594>
    return;
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	e004      	b.n	8005e88 <HAL_UART_IRQHandler+0x594>
      return;
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	e002      	b.n	8005e88 <HAL_UART_IRQHandler+0x594>
      return;
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	e000      	b.n	8005e88 <HAL_UART_IRQHandler+0x594>
    return;
 8005e86:	46c0      	nop			; (mov r8, r8)
  }

}
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b02a      	add	sp, #168	; 0xa8
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	fffffeff 	.word	0xfffffeff
 8005e94:	fffffedf 	.word	0xfffffedf

08005e98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ea0:	46c0      	nop			; (mov r8, r8)
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	000a      	movs	r2, r1
 8005ed2:	1cbb      	adds	r3, r7, #2
 8005ed4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b002      	add	sp, #8
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	b5b0      	push	{r4, r5, r7, lr}
 8005ee2:	b08e      	sub	sp, #56	; 0x38
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee8:	231a      	movs	r3, #26
 8005eea:	2218      	movs	r2, #24
 8005eec:	4694      	mov	ip, r2
 8005eee:	44bc      	add	ip, r7
 8005ef0:	4463      	add	r3, ip
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4acb      	ldr	r2, [pc, #812]	; (8006244 <UART_SetConfig+0x364>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	4ac7      	ldr	r2, [pc, #796]	; (8006248 <UART_SetConfig+0x368>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	0019      	movs	r1, r3
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4ac1      	ldr	r2, [pc, #772]	; (800624c <UART_SetConfig+0x36c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f52:	4313      	orrs	r3, r2
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	4abc      	ldr	r2, [pc, #752]	; (8006250 <UART_SetConfig+0x370>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	0019      	movs	r1, r3
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4ab8      	ldr	r2, [pc, #736]	; (8006254 <UART_SetConfig+0x374>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d134      	bne.n	8005fe0 <UART_SetConfig+0x100>
 8005f76:	4bb8      	ldr	r3, [pc, #736]	; (8006258 <UART_SetConfig+0x378>)
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d015      	beq.n	8005fae <UART_SetConfig+0xce>
 8005f82:	d304      	bcc.n	8005f8e <UART_SetConfig+0xae>
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d00a      	beq.n	8005f9e <UART_SetConfig+0xbe>
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d018      	beq.n	8005fbe <UART_SetConfig+0xde>
 8005f8c:	e01f      	b.n	8005fce <UART_SetConfig+0xee>
 8005f8e:	231b      	movs	r3, #27
 8005f90:	2218      	movs	r2, #24
 8005f92:	4694      	mov	ip, r2
 8005f94:	44bc      	add	ip, r7
 8005f96:	4463      	add	r3, ip
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e0c5      	b.n	800612a <UART_SetConfig+0x24a>
 8005f9e:	231b      	movs	r3, #27
 8005fa0:	2218      	movs	r2, #24
 8005fa2:	4694      	mov	ip, r2
 8005fa4:	44bc      	add	ip, r7
 8005fa6:	4463      	add	r3, ip
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	e0bd      	b.n	800612a <UART_SetConfig+0x24a>
 8005fae:	231b      	movs	r3, #27
 8005fb0:	2218      	movs	r2, #24
 8005fb2:	4694      	mov	ip, r2
 8005fb4:	44bc      	add	ip, r7
 8005fb6:	4463      	add	r3, ip
 8005fb8:	2204      	movs	r2, #4
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e0b5      	b.n	800612a <UART_SetConfig+0x24a>
 8005fbe:	231b      	movs	r3, #27
 8005fc0:	2218      	movs	r2, #24
 8005fc2:	4694      	mov	ip, r2
 8005fc4:	44bc      	add	ip, r7
 8005fc6:	4463      	add	r3, ip
 8005fc8:	2208      	movs	r2, #8
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	e0ad      	b.n	800612a <UART_SetConfig+0x24a>
 8005fce:	231b      	movs	r3, #27
 8005fd0:	2218      	movs	r2, #24
 8005fd2:	4694      	mov	ip, r2
 8005fd4:	44bc      	add	ip, r7
 8005fd6:	4463      	add	r3, ip
 8005fd8:	2210      	movs	r2, #16
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	e0a4      	b.n	800612a <UART_SetConfig+0x24a>
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a9d      	ldr	r2, [pc, #628]	; (800625c <UART_SetConfig+0x37c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d137      	bne.n	800605a <UART_SetConfig+0x17a>
 8005fea:	4b9b      	ldr	r3, [pc, #620]	; (8006258 <UART_SetConfig+0x378>)
 8005fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fee:	220c      	movs	r2, #12
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d018      	beq.n	8006028 <UART_SetConfig+0x148>
 8005ff6:	d802      	bhi.n	8005ffe <UART_SetConfig+0x11e>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <UART_SetConfig+0x128>
 8005ffc:	e024      	b.n	8006048 <UART_SetConfig+0x168>
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d00a      	beq.n	8006018 <UART_SetConfig+0x138>
 8006002:	2b0c      	cmp	r3, #12
 8006004:	d018      	beq.n	8006038 <UART_SetConfig+0x158>
 8006006:	e01f      	b.n	8006048 <UART_SetConfig+0x168>
 8006008:	231b      	movs	r3, #27
 800600a:	2218      	movs	r2, #24
 800600c:	4694      	mov	ip, r2
 800600e:	44bc      	add	ip, r7
 8006010:	4463      	add	r3, ip
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e088      	b.n	800612a <UART_SetConfig+0x24a>
 8006018:	231b      	movs	r3, #27
 800601a:	2218      	movs	r2, #24
 800601c:	4694      	mov	ip, r2
 800601e:	44bc      	add	ip, r7
 8006020:	4463      	add	r3, ip
 8006022:	2202      	movs	r2, #2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e080      	b.n	800612a <UART_SetConfig+0x24a>
 8006028:	231b      	movs	r3, #27
 800602a:	2218      	movs	r2, #24
 800602c:	4694      	mov	ip, r2
 800602e:	44bc      	add	ip, r7
 8006030:	4463      	add	r3, ip
 8006032:	2204      	movs	r2, #4
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e078      	b.n	800612a <UART_SetConfig+0x24a>
 8006038:	231b      	movs	r3, #27
 800603a:	2218      	movs	r2, #24
 800603c:	4694      	mov	ip, r2
 800603e:	44bc      	add	ip, r7
 8006040:	4463      	add	r3, ip
 8006042:	2208      	movs	r2, #8
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e070      	b.n	800612a <UART_SetConfig+0x24a>
 8006048:	231b      	movs	r3, #27
 800604a:	2218      	movs	r2, #24
 800604c:	4694      	mov	ip, r2
 800604e:	44bc      	add	ip, r7
 8006050:	4463      	add	r3, ip
 8006052:	2210      	movs	r2, #16
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	e067      	b.n	800612a <UART_SetConfig+0x24a>
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a80      	ldr	r2, [pc, #512]	; (8006260 <UART_SetConfig+0x380>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d107      	bne.n	8006074 <UART_SetConfig+0x194>
 8006064:	231b      	movs	r3, #27
 8006066:	2218      	movs	r2, #24
 8006068:	4694      	mov	ip, r2
 800606a:	44bc      	add	ip, r7
 800606c:	4463      	add	r3, ip
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e05a      	b.n	800612a <UART_SetConfig+0x24a>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a7a      	ldr	r2, [pc, #488]	; (8006264 <UART_SetConfig+0x384>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d107      	bne.n	800608e <UART_SetConfig+0x1ae>
 800607e:	231b      	movs	r3, #27
 8006080:	2218      	movs	r2, #24
 8006082:	4694      	mov	ip, r2
 8006084:	44bc      	add	ip, r7
 8006086:	4463      	add	r3, ip
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e04d      	b.n	800612a <UART_SetConfig+0x24a>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a6e      	ldr	r2, [pc, #440]	; (800624c <UART_SetConfig+0x36c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d141      	bne.n	800611c <UART_SetConfig+0x23c>
 8006098:	4b6f      	ldr	r3, [pc, #444]	; (8006258 <UART_SetConfig+0x378>)
 800609a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800609c:	23c0      	movs	r3, #192	; 0xc0
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4013      	ands	r3, r2
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	00d2      	lsls	r2, r2, #3
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01f      	beq.n	80060ea <UART_SetConfig+0x20a>
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	00d2      	lsls	r2, r2, #3
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <UART_SetConfig+0x1d8>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <UART_SetConfig+0x1ea>
 80060b6:	e028      	b.n	800610a <UART_SetConfig+0x22a>
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	0112      	lsls	r2, r2, #4
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00c      	beq.n	80060da <UART_SetConfig+0x1fa>
 80060c0:	22c0      	movs	r2, #192	; 0xc0
 80060c2:	0112      	lsls	r2, r2, #4
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <UART_SetConfig+0x21a>
 80060c8:	e01f      	b.n	800610a <UART_SetConfig+0x22a>
 80060ca:	231b      	movs	r3, #27
 80060cc:	2218      	movs	r2, #24
 80060ce:	4694      	mov	ip, r2
 80060d0:	44bc      	add	ip, r7
 80060d2:	4463      	add	r3, ip
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e027      	b.n	800612a <UART_SetConfig+0x24a>
 80060da:	231b      	movs	r3, #27
 80060dc:	2218      	movs	r2, #24
 80060de:	4694      	mov	ip, r2
 80060e0:	44bc      	add	ip, r7
 80060e2:	4463      	add	r3, ip
 80060e4:	2202      	movs	r2, #2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e01f      	b.n	800612a <UART_SetConfig+0x24a>
 80060ea:	231b      	movs	r3, #27
 80060ec:	2218      	movs	r2, #24
 80060ee:	4694      	mov	ip, r2
 80060f0:	44bc      	add	ip, r7
 80060f2:	4463      	add	r3, ip
 80060f4:	2204      	movs	r2, #4
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e017      	b.n	800612a <UART_SetConfig+0x24a>
 80060fa:	231b      	movs	r3, #27
 80060fc:	2218      	movs	r2, #24
 80060fe:	4694      	mov	ip, r2
 8006100:	44bc      	add	ip, r7
 8006102:	4463      	add	r3, ip
 8006104:	2208      	movs	r2, #8
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e00f      	b.n	800612a <UART_SetConfig+0x24a>
 800610a:	231b      	movs	r3, #27
 800610c:	2218      	movs	r2, #24
 800610e:	4694      	mov	ip, r2
 8006110:	44bc      	add	ip, r7
 8006112:	4463      	add	r3, ip
 8006114:	2210      	movs	r2, #16
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	e006      	b.n	800612a <UART_SetConfig+0x24a>
 800611c:	231b      	movs	r3, #27
 800611e:	2218      	movs	r2, #24
 8006120:	4694      	mov	ip, r2
 8006122:	44bc      	add	ip, r7
 8006124:	4463      	add	r3, ip
 8006126:	2210      	movs	r2, #16
 8006128:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a47      	ldr	r2, [pc, #284]	; (800624c <UART_SetConfig+0x36c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d000      	beq.n	8006136 <UART_SetConfig+0x256>
 8006134:	e0a0      	b.n	8006278 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006136:	231b      	movs	r3, #27
 8006138:	2218      	movs	r2, #24
 800613a:	4694      	mov	ip, r2
 800613c:	44bc      	add	ip, r7
 800613e:	4463      	add	r3, ip
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d00d      	beq.n	8006162 <UART_SetConfig+0x282>
 8006146:	dc02      	bgt.n	800614e <UART_SetConfig+0x26e>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <UART_SetConfig+0x278>
 800614c:	e01d      	b.n	800618a <UART_SetConfig+0x2aa>
 800614e:	2b04      	cmp	r3, #4
 8006150:	d012      	beq.n	8006178 <UART_SetConfig+0x298>
 8006152:	2b08      	cmp	r3, #8
 8006154:	d015      	beq.n	8006182 <UART_SetConfig+0x2a2>
 8006156:	e018      	b.n	800618a <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006158:	f7fe fb5e 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 800615c:	0003      	movs	r3, r0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006160:	e01d      	b.n	800619e <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006162:	4b3d      	ldr	r3, [pc, #244]	; (8006258 <UART_SetConfig+0x378>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	4013      	ands	r3, r2
 800616a:	d002      	beq.n	8006172 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800616c:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <UART_SetConfig+0x388>)
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006170:	e015      	b.n	800619e <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8006172:	4b3e      	ldr	r3, [pc, #248]	; (800626c <UART_SetConfig+0x38c>)
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006176:	e012      	b.n	800619e <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006178:	f7fe faa2 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800617c:	0003      	movs	r3, r0
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006180:	e00d      	b.n	800619e <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006188:	e009      	b.n	800619e <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800618e:	231a      	movs	r3, #26
 8006190:	2218      	movs	r2, #24
 8006192:	4694      	mov	ip, r2
 8006194:	44bc      	add	ip, r7
 8006196:	4463      	add	r3, ip
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
        break;
 800619c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d100      	bne.n	80061a6 <UART_SetConfig+0x2c6>
 80061a4:	e13c      	b.n	8006420 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	0013      	movs	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d305      	bcc.n	80061c2 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061be:	429a      	cmp	r2, r3
 80061c0:	d907      	bls.n	80061d2 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 80061c2:	231a      	movs	r3, #26
 80061c4:	2218      	movs	r2, #24
 80061c6:	4694      	mov	ip, r2
 80061c8:	44bc      	add	ip, r7
 80061ca:	4463      	add	r3, ip
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e126      	b.n	8006420 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	6939      	ldr	r1, [r7, #16]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	000b      	movs	r3, r1
 80061e0:	0e1b      	lsrs	r3, r3, #24
 80061e2:	0010      	movs	r0, r2
 80061e4:	0205      	lsls	r5, r0, #8
 80061e6:	431d      	orrs	r5, r3
 80061e8:	000b      	movs	r3, r1
 80061ea:	021c      	lsls	r4, r3, #8
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	1900      	adds	r0, r0, r4
 80061fe:	4169      	adcs	r1, r5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f7fa f80b 	bl	8000228 <__aeabi_uldivmod>
 8006212:	0003      	movs	r3, r0
 8006214:	000c      	movs	r4, r1
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	4a15      	ldr	r2, [pc, #84]	; (8006270 <UART_SetConfig+0x390>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d908      	bls.n	8006232 <UART_SetConfig+0x352>
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	4a14      	ldr	r2, [pc, #80]	; (8006274 <UART_SetConfig+0x394>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d804      	bhi.n	8006232 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622e:	60da      	str	r2, [r3, #12]
 8006230:	e0f6      	b.n	8006420 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8006232:	231a      	movs	r3, #26
 8006234:	2218      	movs	r2, #24
 8006236:	4694      	mov	ip, r2
 8006238:	44bc      	add	ip, r7
 800623a:	4463      	add	r3, ip
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e0ee      	b.n	8006420 <UART_SetConfig+0x540>
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	efff69f3 	.word	0xefff69f3
 8006248:	ffffcfff 	.word	0xffffcfff
 800624c:	40004800 	.word	0x40004800
 8006250:	fffff4ff 	.word	0xfffff4ff
 8006254:	40013800 	.word	0x40013800
 8006258:	40021000 	.word	0x40021000
 800625c:	40004400 	.word	0x40004400
 8006260:	40004c00 	.word	0x40004c00
 8006264:	40005000 	.word	0x40005000
 8006268:	003d0900 	.word	0x003d0900
 800626c:	00f42400 	.word	0x00f42400
 8006270:	000002ff 	.word	0x000002ff
 8006274:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	429a      	cmp	r2, r3
 8006282:	d000      	beq.n	8006286 <UART_SetConfig+0x3a6>
 8006284:	e073      	b.n	800636e <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8006286:	231b      	movs	r3, #27
 8006288:	2218      	movs	r2, #24
 800628a:	4694      	mov	ip, r2
 800628c:	44bc      	add	ip, r7
 800628e:	4463      	add	r3, ip
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b08      	cmp	r3, #8
 8006294:	d822      	bhi.n	80062dc <UART_SetConfig+0x3fc>
 8006296:	009a      	lsls	r2, r3, #2
 8006298:	4b69      	ldr	r3, [pc, #420]	; (8006440 <UART_SetConfig+0x560>)
 800629a:	18d3      	adds	r3, r2, r3
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe faba 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 80062a4:	0003      	movs	r3, r0
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a8:	e022      	b.n	80062f0 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062aa:	f7fe facb 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 80062ae:	0003      	movs	r3, r0
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b2:	e01d      	b.n	80062f0 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b4:	4b63      	ldr	r3, [pc, #396]	; (8006444 <UART_SetConfig+0x564>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2210      	movs	r2, #16
 80062ba:	4013      	ands	r3, r2
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80062be:	4b62      	ldr	r3, [pc, #392]	; (8006448 <UART_SetConfig+0x568>)
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062c2:	e015      	b.n	80062f0 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 80062c4:	4b61      	ldr	r3, [pc, #388]	; (800644c <UART_SetConfig+0x56c>)
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c8:	e012      	b.n	80062f0 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ca:	f7fe f9f9 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 80062ce:	0003      	movs	r3, r0
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d2:	e00d      	b.n	80062f0 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062da:	e009      	b.n	80062f0 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062e0:	231a      	movs	r3, #26
 80062e2:	2218      	movs	r2, #24
 80062e4:	4694      	mov	ip, r2
 80062e6:	44bc      	add	ip, r7
 80062e8:	4463      	add	r3, ip
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
        break;
 80062ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d100      	bne.n	80062f8 <UART_SetConfig+0x418>
 80062f6:	e093      	b.n	8006420 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	005a      	lsls	r2, r3, #1
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	18d2      	adds	r2, r2, r3
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	0019      	movs	r1, r3
 800630a:	0010      	movs	r0, r2
 800630c:	f7f9 ff00 	bl	8000110 <__udivsi3>
 8006310:	0003      	movs	r3, r0
 8006312:	b29b      	uxth	r3, r3
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b0f      	cmp	r3, #15
 800631a:	d920      	bls.n	800635e <UART_SetConfig+0x47e>
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	4a4c      	ldr	r2, [pc, #304]	; (8006450 <UART_SetConfig+0x570>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d81c      	bhi.n	800635e <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	b29a      	uxth	r2, r3
 8006328:	200e      	movs	r0, #14
 800632a:	2418      	movs	r4, #24
 800632c:	193b      	adds	r3, r7, r4
 800632e:	181b      	adds	r3, r3, r0
 8006330:	210f      	movs	r1, #15
 8006332:	438a      	bics	r2, r1
 8006334:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	2207      	movs	r2, #7
 800633e:	4013      	ands	r3, r2
 8006340:	b299      	uxth	r1, r3
 8006342:	193b      	adds	r3, r7, r4
 8006344:	181b      	adds	r3, r3, r0
 8006346:	193a      	adds	r2, r7, r4
 8006348:	1812      	adds	r2, r2, r0
 800634a:	8812      	ldrh	r2, [r2, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	193a      	adds	r2, r7, r4
 8006356:	1812      	adds	r2, r2, r0
 8006358:	8812      	ldrh	r2, [r2, #0]
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	e060      	b.n	8006420 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800635e:	231a      	movs	r3, #26
 8006360:	2218      	movs	r2, #24
 8006362:	4694      	mov	ip, r2
 8006364:	44bc      	add	ip, r7
 8006366:	4463      	add	r3, ip
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e058      	b.n	8006420 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 800636e:	231b      	movs	r3, #27
 8006370:	2218      	movs	r2, #24
 8006372:	4694      	mov	ip, r2
 8006374:	44bc      	add	ip, r7
 8006376:	4463      	add	r3, ip
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b08      	cmp	r3, #8
 800637c:	d822      	bhi.n	80063c4 <UART_SetConfig+0x4e4>
 800637e:	009a      	lsls	r2, r3, #2
 8006380:	4b34      	ldr	r3, [pc, #208]	; (8006454 <UART_SetConfig+0x574>)
 8006382:	18d3      	adds	r3, r2, r3
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fe fa46 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 800638c:	0003      	movs	r3, r0
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006390:	e022      	b.n	80063d8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006392:	f7fe fa57 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 8006396:	0003      	movs	r3, r0
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800639a:	e01d      	b.n	80063d8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800639c:	4b29      	ldr	r3, [pc, #164]	; (8006444 <UART_SetConfig+0x564>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2210      	movs	r2, #16
 80063a2:	4013      	ands	r3, r2
 80063a4:	d002      	beq.n	80063ac <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063a6:	4b28      	ldr	r3, [pc, #160]	; (8006448 <UART_SetConfig+0x568>)
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063aa:	e015      	b.n	80063d8 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 80063ac:	4b27      	ldr	r3, [pc, #156]	; (800644c <UART_SetConfig+0x56c>)
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063b0:	e012      	b.n	80063d8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b2:	f7fe f985 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 80063b6:	0003      	movs	r3, r0
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ba:	e00d      	b.n	80063d8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063c2:	e009      	b.n	80063d8 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063c8:	231a      	movs	r3, #26
 80063ca:	2218      	movs	r2, #24
 80063cc:	4694      	mov	ip, r2
 80063ce:	44bc      	add	ip, r7
 80063d0:	4463      	add	r3, ip
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
        break;
 80063d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d020      	beq.n	8006420 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	085a      	lsrs	r2, r3, #1
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	18d2      	adds	r2, r2, r3
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	0019      	movs	r1, r3
 80063ee:	0010      	movs	r0, r2
 80063f0:	f7f9 fe8e 	bl	8000110 <__udivsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2b0f      	cmp	r3, #15
 80063fe:	d908      	bls.n	8006412 <UART_SetConfig+0x532>
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <UART_SetConfig+0x570>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d804      	bhi.n	8006412 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	e006      	b.n	8006420 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8006412:	231a      	movs	r3, #26
 8006414:	2218      	movs	r2, #24
 8006416:	4694      	mov	ip, r2
 8006418:	44bc      	add	ip, r7
 800641a:	4463      	add	r3, ip
 800641c:	2201      	movs	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2200      	movs	r2, #0
 8006424:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2200      	movs	r2, #0
 800642a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800642c:	231a      	movs	r3, #26
 800642e:	2218      	movs	r2, #24
 8006430:	4694      	mov	ip, r2
 8006432:	44bc      	add	ip, r7
 8006434:	4463      	add	r3, ip
 8006436:	781b      	ldrb	r3, [r3, #0]
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	b00e      	add	sp, #56	; 0x38
 800643e:	bdb0      	pop	{r4, r5, r7, pc}
 8006440:	08007fb0 	.word	0x08007fb0
 8006444:	40021000 	.word	0x40021000
 8006448:	003d0900 	.word	0x003d0900
 800644c:	00f42400 	.word	0x00f42400
 8006450:	0000ffff 	.word	0x0000ffff
 8006454:	08007fd4 	.word	0x08007fd4

08006458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2201      	movs	r2, #1
 8006466:	4013      	ands	r3, r2
 8006468:	d00b      	beq.n	8006482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a4a      	ldr	r2, [pc, #296]	; (800659c <UART_AdvFeatureConfig+0x144>)
 8006472:	4013      	ands	r3, r2
 8006474:	0019      	movs	r1, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	2202      	movs	r2, #2
 8006488:	4013      	ands	r3, r2
 800648a:	d00b      	beq.n	80064a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4a43      	ldr	r2, [pc, #268]	; (80065a0 <UART_AdvFeatureConfig+0x148>)
 8006494:	4013      	ands	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2204      	movs	r2, #4
 80064aa:	4013      	ands	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4a3b      	ldr	r2, [pc, #236]	; (80065a4 <UART_AdvFeatureConfig+0x14c>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	0019      	movs	r1, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	2208      	movs	r2, #8
 80064cc:	4013      	ands	r3, r2
 80064ce:	d00b      	beq.n	80064e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4a34      	ldr	r2, [pc, #208]	; (80065a8 <UART_AdvFeatureConfig+0x150>)
 80064d8:	4013      	ands	r3, r2
 80064da:	0019      	movs	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2210      	movs	r2, #16
 80064ee:	4013      	ands	r3, r2
 80064f0:	d00b      	beq.n	800650a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <UART_AdvFeatureConfig+0x154>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	0019      	movs	r1, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2220      	movs	r2, #32
 8006510:	4013      	ands	r3, r2
 8006512:	d00b      	beq.n	800652c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <UART_AdvFeatureConfig+0x158>)
 800651c:	4013      	ands	r3, r2
 800651e:	0019      	movs	r1, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2240      	movs	r2, #64	; 0x40
 8006532:	4013      	ands	r3, r2
 8006534:	d01d      	beq.n	8006572 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <UART_AdvFeatureConfig+0x15c>)
 800653e:	4013      	ands	r3, r2
 8006540:	0019      	movs	r1, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	035b      	lsls	r3, r3, #13
 8006556:	429a      	cmp	r2, r3
 8006558:	d10b      	bne.n	8006572 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <UART_AdvFeatureConfig+0x160>)
 8006562:	4013      	ands	r3, r2
 8006564:	0019      	movs	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2280      	movs	r2, #128	; 0x80
 8006578:	4013      	ands	r3, r2
 800657a:	d00b      	beq.n	8006594 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4a0e      	ldr	r2, [pc, #56]	; (80065bc <UART_AdvFeatureConfig+0x164>)
 8006584:	4013      	ands	r3, r2
 8006586:	0019      	movs	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}
 800659c:	fffdffff 	.word	0xfffdffff
 80065a0:	fffeffff 	.word	0xfffeffff
 80065a4:	fffbffff 	.word	0xfffbffff
 80065a8:	ffff7fff 	.word	0xffff7fff
 80065ac:	ffffefff 	.word	0xffffefff
 80065b0:	ffffdfff 	.word	0xffffdfff
 80065b4:	ffefffff 	.word	0xffefffff
 80065b8:	ff9fffff 	.word	0xff9fffff
 80065bc:	fff7ffff 	.word	0xfff7ffff

080065c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2280      	movs	r2, #128	; 0x80
 80065cc:	2100      	movs	r1, #0
 80065ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065d0:	f7fc fbde 	bl	8002d90 <HAL_GetTick>
 80065d4:	0003      	movs	r3, r0
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2208      	movs	r2, #8
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d10d      	bne.n	8006602 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	0399      	lsls	r1, r3, #14
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	4b18      	ldr	r3, [pc, #96]	; (8006650 <UART_CheckIdleState+0x90>)
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	0013      	movs	r3, r2
 80065f4:	2200      	movs	r2, #0
 80065f6:	f000 f82d 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80065fa:	1e03      	subs	r3, r0, #0
 80065fc:	d001      	beq.n	8006602 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e022      	b.n	8006648 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2204      	movs	r2, #4
 800660a:	4013      	ands	r3, r2
 800660c:	2b04      	cmp	r3, #4
 800660e:	d10d      	bne.n	800662c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	03d9      	lsls	r1, r3, #15
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <UART_CheckIdleState+0x90>)
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	0013      	movs	r3, r2
 800661e:	2200      	movs	r2, #0
 8006620:	f000 f818 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8006624:	1e03      	subs	r3, r0, #0
 8006626:	d001      	beq.n	800662c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e00d      	b.n	8006648 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2274      	movs	r2, #116	; 0x74
 8006642:	2100      	movs	r1, #0
 8006644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b004      	add	sp, #16
 800664e:	bd80      	pop	{r7, pc}
 8006650:	01ffffff 	.word	0x01ffffff

08006654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b094      	sub	sp, #80	; 0x50
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	1dfb      	adds	r3, r7, #7
 8006662:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006664:	e09b      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006668:	3301      	adds	r3, #1
 800666a:	d100      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0x1a>
 800666c:	e097      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fc fb8f 	bl	8002d90 <HAL_GetTick>
 8006672:	0002      	movs	r2, r0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <UART_WaitOnFlagUntilTimeout+0x30>
 800667e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006680:	2b00      	cmp	r3, #0
 8006682:	d139      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006684:	f3ef 8310 	mrs	r3, PRIMASK
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
 800668e:	2301      	movs	r3, #1
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	f383 8810 	msr	PRIMASK, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4949      	ldr	r1, [pc, #292]	; (80067c8 <UART_WaitOnFlagUntilTimeout+0x174>)
 80066a4:	400a      	ands	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b2:	f3ef 8310 	mrs	r3, PRIMASK
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	2301      	movs	r3, #1
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f383 8810 	msr	PRIMASK, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2101      	movs	r1, #1
 80066d2:	438a      	bics	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]
 80066d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2274      	movs	r2, #116	; 0x74
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e063      	b.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2204      	movs	r2, #4
 8006700:	4013      	ands	r3, r2
 8006702:	d04c      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	2380      	movs	r3, #128	; 0x80
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	401a      	ands	r2, r3
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	429a      	cmp	r2, r3
 8006716:	d142      	bne.n	800679e <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2280      	movs	r2, #128	; 0x80
 800671e:	0112      	lsls	r2, r2, #4
 8006720:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006722:	f3ef 8310 	mrs	r3, PRIMASK
 8006726:	613b      	str	r3, [r7, #16]
  return(result);
 8006728:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f383 8810 	msr	PRIMASK, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4921      	ldr	r1, [pc, #132]	; (80067c8 <UART_WaitOnFlagUntilTimeout+0x174>)
 8006742:	400a      	ands	r2, r1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006750:	f3ef 8310 	mrs	r3, PRIMASK
 8006754:	61fb      	str	r3, [r7, #28]
  return(result);
 8006756:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006758:	64bb      	str	r3, [r7, #72]	; 0x48
 800675a:	2301      	movs	r3, #1
 800675c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	f383 8810 	msr	PRIMASK, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2101      	movs	r1, #1
 8006770:	438a      	bics	r2, r1
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2280      	movs	r2, #128	; 0x80
 800678e:	2120      	movs	r1, #32
 8006790:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2274      	movs	r2, #116	; 0x74
 8006796:	2100      	movs	r1, #0
 8006798:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e010      	b.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	425a      	negs	r2, r3
 80067ae:	4153      	adcs	r3, r2
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	001a      	movs	r2, r3
 80067b4:	1dfb      	adds	r3, r7, #7
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d100      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0x16a>
 80067bc:	e753      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	0018      	movs	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b014      	add	sp, #80	; 0x50
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	fffffe5f 	.word	0xfffffe5f

080067cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d4:	f3ef 8310 	mrs	r3, PRIMASK
 80067d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	2301      	movs	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f383 8810 	msr	PRIMASK, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	21c0      	movs	r1, #192	; 0xc0
 80067f4:	438a      	bics	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f383 8810 	msr	PRIMASK, r3

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b006      	add	sp, #24
 800680e:	bd80      	pop	{r7, pc}

08006810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08e      	sub	sp, #56	; 0x38
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
 800681c:	617b      	str	r3, [r7, #20]
  return(result);
 800681e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
 8006822:	2301      	movs	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f383 8810 	msr	PRIMASK, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4923      	ldr	r1, [pc, #140]	; (80068c4 <UART_EndRxTransfer+0xb4>)
 8006838:	400a      	ands	r2, r1
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006846:	f3ef 8310 	mrs	r3, PRIMASK
 800684a:	623b      	str	r3, [r7, #32]
  return(result);
 800684c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	633b      	str	r3, [r7, #48]	; 0x30
 8006850:	2301      	movs	r3, #1
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	f383 8810 	msr	PRIMASK, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	438a      	bics	r2, r1
 8006868:	609a      	str	r2, [r3, #8]
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006878:	2b01      	cmp	r3, #1
 800687a:	d116      	bne.n	80068aa <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800687c:	f3ef 8310 	mrs	r3, PRIMASK
 8006880:	60bb      	str	r3, [r7, #8]
  return(result);
 8006882:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006886:	2301      	movs	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f383 8810 	msr	PRIMASK, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2110      	movs	r1, #16
 800689c:	438a      	bics	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b00e      	add	sp, #56	; 0x38
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	fffffedf 	.word	0xfffffedf

080068c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08c      	sub	sp, #48	; 0x30
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2220      	movs	r2, #32
 80068de:	4013      	ands	r3, r2
 80068e0:	d132      	bne.n	8006948 <UART_DMATransmitCplt+0x80>
  {
    huart->TxXferCount = 0U;
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2252      	movs	r2, #82	; 0x52
 80068e6:	2100      	movs	r1, #0
 80068e8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ea:	f3ef 8310 	mrs	r3, PRIMASK
 80068ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80068f0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f4:	2301      	movs	r3, #1
 80068f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f383 8810 	msr	PRIMASK, r3
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	438a      	bics	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006918:	f3ef 8310 	mrs	r3, PRIMASK
 800691c:	61bb      	str	r3, [r7, #24]
  return(result);
 800691e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
 8006922:	2301      	movs	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f383 8810 	msr	PRIMASK, r3
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2140      	movs	r1, #64	; 0x40
 8006938:	430a      	orrs	r2, r1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	623b      	str	r3, [r7, #32]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	f383 8810 	msr	PRIMASK, r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006946:	e003      	b.n	8006950 <UART_DMATransmitCplt+0x88>
    HAL_UART_TxCpltCallback(huart);
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	0018      	movs	r0, r3
 800694c:	f7ff faa4 	bl	8005e98 <HAL_UART_TxCpltCallback>
}
 8006950:	46c0      	nop			; (mov r8, r8)
 8006952:	46bd      	mov	sp, r7
 8006954:	b00c      	add	sp, #48	; 0x30
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	0018      	movs	r0, r3
 800696a:	f7ff fa9d 	bl	8005ea8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b004      	add	sp, #16
 8006974:	bd80      	pop	{r7, pc}

08006976 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006988:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800698e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2280      	movs	r2, #128	; 0x80
 8006998:	4013      	ands	r3, r2
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	d10a      	bne.n	80069b4 <UART_DMAError+0x3e>
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b21      	cmp	r3, #33	; 0x21
 80069a2:	d107      	bne.n	80069b4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2252      	movs	r2, #82	; 0x52
 80069a8:	2100      	movs	r1, #0
 80069aa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7ff ff0c 	bl	80067cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	4013      	ands	r3, r2
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d10a      	bne.n	80069d8 <UART_DMAError+0x62>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b22      	cmp	r3, #34	; 0x22
 80069c6:	d107      	bne.n	80069d8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	225a      	movs	r2, #90	; 0x5a
 80069cc:	2100      	movs	r1, #0
 80069ce:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff ff1c 	bl	8006810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2280      	movs	r2, #128	; 0x80
 80069dc:	589b      	ldr	r3, [r3, r2]
 80069de:	2210      	movs	r2, #16
 80069e0:	431a      	orrs	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7ff fa64 	bl	8005eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b006      	add	sp, #24
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	225a      	movs	r2, #90	; 0x5a
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2252      	movs	r2, #82	; 0x52
 8006a12:	2100      	movs	r1, #0
 8006a14:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f7ff fa4d 	bl	8005eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b004      	add	sp, #16
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a32:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a34:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	2301      	movs	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f383 8810 	msr	PRIMASK, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2140      	movs	r1, #64	; 0x40
 8006a4e:	438a      	bics	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7ff fa14 	bl	8005e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a70:	46c0      	nop			; (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b006      	add	sp, #24
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b002      	add	sp, #8
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <__errno>:
 8006a88:	4b01      	ldr	r3, [pc, #4]	; (8006a90 <__errno+0x8>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	4770      	bx	lr
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	20000118 	.word	0x20000118

08006a94 <__libc_init_array>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	2600      	movs	r6, #0
 8006a98:	4d0c      	ldr	r5, [pc, #48]	; (8006acc <__libc_init_array+0x38>)
 8006a9a:	4c0d      	ldr	r4, [pc, #52]	; (8006ad0 <__libc_init_array+0x3c>)
 8006a9c:	1b64      	subs	r4, r4, r5
 8006a9e:	10a4      	asrs	r4, r4, #2
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d109      	bne.n	8006ab8 <__libc_init_array+0x24>
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	f000 ffbb 	bl	8007a20 <_init>
 8006aaa:	4d0a      	ldr	r5, [pc, #40]	; (8006ad4 <__libc_init_array+0x40>)
 8006aac:	4c0a      	ldr	r4, [pc, #40]	; (8006ad8 <__libc_init_array+0x44>)
 8006aae:	1b64      	subs	r4, r4, r5
 8006ab0:	10a4      	asrs	r4, r4, #2
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	d105      	bne.n	8006ac2 <__libc_init_array+0x2e>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	00b3      	lsls	r3, r6, #2
 8006aba:	58eb      	ldr	r3, [r5, r3]
 8006abc:	4798      	blx	r3
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7ee      	b.n	8006aa0 <__libc_init_array+0xc>
 8006ac2:	00b3      	lsls	r3, r6, #2
 8006ac4:	58eb      	ldr	r3, [r5, r3]
 8006ac6:	4798      	blx	r3
 8006ac8:	3601      	adds	r6, #1
 8006aca:	e7f2      	b.n	8006ab2 <__libc_init_array+0x1e>
 8006acc:	08008098 	.word	0x08008098
 8006ad0:	08008098 	.word	0x08008098
 8006ad4:	08008098 	.word	0x08008098
 8006ad8:	0800809c 	.word	0x0800809c

08006adc <memcmp>:
 8006adc:	b530      	push	{r4, r5, lr}
 8006ade:	2400      	movs	r4, #0
 8006ae0:	42a2      	cmp	r2, r4
 8006ae2:	d101      	bne.n	8006ae8 <memcmp+0xc>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e005      	b.n	8006af4 <memcmp+0x18>
 8006ae8:	5d03      	ldrb	r3, [r0, r4]
 8006aea:	1c65      	adds	r5, r4, #1
 8006aec:	5d0c      	ldrb	r4, [r1, r4]
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	d001      	beq.n	8006af6 <memcmp+0x1a>
 8006af2:	1b18      	subs	r0, r3, r4
 8006af4:	bd30      	pop	{r4, r5, pc}
 8006af6:	002c      	movs	r4, r5
 8006af8:	e7f2      	b.n	8006ae0 <memcmp+0x4>

08006afa <memcpy>:
 8006afa:	2300      	movs	r3, #0
 8006afc:	b510      	push	{r4, lr}
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d100      	bne.n	8006b04 <memcpy+0xa>
 8006b02:	bd10      	pop	{r4, pc}
 8006b04:	5ccc      	ldrb	r4, [r1, r3]
 8006b06:	54c4      	strb	r4, [r0, r3]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	e7f8      	b.n	8006afe <memcpy+0x4>

08006b0c <memset>:
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	1812      	adds	r2, r2, r0
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d100      	bne.n	8006b16 <memset+0xa>
 8006b14:	4770      	bx	lr
 8006b16:	7019      	strb	r1, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	e7f9      	b.n	8006b10 <memset+0x4>

08006b1c <iprintf>:
 8006b1c:	b40f      	push	{r0, r1, r2, r3}
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <iprintf+0x30>)
 8006b20:	b513      	push	{r0, r1, r4, lr}
 8006b22:	681c      	ldr	r4, [r3, #0]
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d005      	beq.n	8006b34 <iprintf+0x18>
 8006b28:	69a3      	ldr	r3, [r4, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <iprintf+0x18>
 8006b2e:	0020      	movs	r0, r4
 8006b30:	f000 fa3c 	bl	8006fac <__sinit>
 8006b34:	ab05      	add	r3, sp, #20
 8006b36:	9a04      	ldr	r2, [sp, #16]
 8006b38:	68a1      	ldr	r1, [r4, #8]
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	f000 fc05 	bl	800734c <_vfiprintf_r>
 8006b42:	bc16      	pop	{r1, r2, r4}
 8006b44:	bc08      	pop	{r3}
 8006b46:	b004      	add	sp, #16
 8006b48:	4718      	bx	r3
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	20000118 	.word	0x20000118

08006b50 <_puts_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	0005      	movs	r5, r0
 8006b54:	000e      	movs	r6, r1
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d004      	beq.n	8006b64 <_puts_r+0x14>
 8006b5a:	6983      	ldr	r3, [r0, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <_puts_r+0x14>
 8006b60:	f000 fa24 	bl	8006fac <__sinit>
 8006b64:	69ab      	ldr	r3, [r5, #24]
 8006b66:	68ac      	ldr	r4, [r5, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <_puts_r+0x22>
 8006b6c:	0028      	movs	r0, r5
 8006b6e:	f000 fa1d 	bl	8006fac <__sinit>
 8006b72:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <_puts_r+0xb4>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	d10f      	bne.n	8006b98 <_puts_r+0x48>
 8006b78:	686c      	ldr	r4, [r5, #4]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	071b      	lsls	r3, r3, #28
 8006b7e:	d502      	bpl.n	8006b86 <_puts_r+0x36>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d11f      	bne.n	8006bc6 <_puts_r+0x76>
 8006b86:	0021      	movs	r1, r4
 8006b88:	0028      	movs	r0, r5
 8006b8a:	f000 f8a1 	bl	8006cd0 <__swsetup_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d019      	beq.n	8006bc6 <_puts_r+0x76>
 8006b92:	2001      	movs	r0, #1
 8006b94:	4240      	negs	r0, r0
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <_puts_r+0xb8>)
 8006b9a:	429c      	cmp	r4, r3
 8006b9c:	d101      	bne.n	8006ba2 <_puts_r+0x52>
 8006b9e:	68ac      	ldr	r4, [r5, #8]
 8006ba0:	e7eb      	b.n	8006b7a <_puts_r+0x2a>
 8006ba2:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <_puts_r+0xbc>)
 8006ba4:	429c      	cmp	r4, r3
 8006ba6:	d1e8      	bne.n	8006b7a <_puts_r+0x2a>
 8006ba8:	68ec      	ldr	r4, [r5, #12]
 8006baa:	e7e6      	b.n	8006b7a <_puts_r+0x2a>
 8006bac:	3601      	adds	r6, #1
 8006bae:	60a3      	str	r3, [r4, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da04      	bge.n	8006bbe <_puts_r+0x6e>
 8006bb4:	69a2      	ldr	r2, [r4, #24]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	dc16      	bgt.n	8006be8 <_puts_r+0x98>
 8006bba:	290a      	cmp	r1, #10
 8006bbc:	d014      	beq.n	8006be8 <_puts_r+0x98>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	6022      	str	r2, [r4, #0]
 8006bc4:	7019      	strb	r1, [r3, #0]
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	7831      	ldrb	r1, [r6, #0]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	d1ed      	bne.n	8006bac <_puts_r+0x5c>
 8006bd0:	60a3      	str	r3, [r4, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da0f      	bge.n	8006bf6 <_puts_r+0xa6>
 8006bd6:	0022      	movs	r2, r4
 8006bd8:	310a      	adds	r1, #10
 8006bda:	0028      	movs	r0, r5
 8006bdc:	f000 f822 	bl	8006c24 <__swbuf_r>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d0d6      	beq.n	8006b92 <_puts_r+0x42>
 8006be4:	200a      	movs	r0, #10
 8006be6:	e7d6      	b.n	8006b96 <_puts_r+0x46>
 8006be8:	0022      	movs	r2, r4
 8006bea:	0028      	movs	r0, r5
 8006bec:	f000 f81a 	bl	8006c24 <__swbuf_r>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d1e8      	bne.n	8006bc6 <_puts_r+0x76>
 8006bf4:	e7cd      	b.n	8006b92 <_puts_r+0x42>
 8006bf6:	200a      	movs	r0, #10
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	6022      	str	r2, [r4, #0]
 8006bfe:	7018      	strb	r0, [r3, #0]
 8006c00:	e7c9      	b.n	8006b96 <_puts_r+0x46>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	0800801c 	.word	0x0800801c
 8006c08:	0800803c 	.word	0x0800803c
 8006c0c:	08007ffc 	.word	0x08007ffc

08006c10 <puts>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <puts+0x10>)
 8006c14:	0001      	movs	r1, r0
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	f7ff ff9a 	bl	8006b50 <_puts_r>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	20000118 	.word	0x20000118

08006c24 <__swbuf_r>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	0005      	movs	r5, r0
 8006c28:	000e      	movs	r6, r1
 8006c2a:	0014      	movs	r4, r2
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d004      	beq.n	8006c3a <__swbuf_r+0x16>
 8006c30:	6983      	ldr	r3, [r0, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <__swbuf_r+0x16>
 8006c36:	f000 f9b9 	bl	8006fac <__sinit>
 8006c3a:	4b22      	ldr	r3, [pc, #136]	; (8006cc4 <__swbuf_r+0xa0>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d12d      	bne.n	8006c9c <__swbuf_r+0x78>
 8006c40:	686c      	ldr	r4, [r5, #4]
 8006c42:	69a3      	ldr	r3, [r4, #24]
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	071b      	lsls	r3, r3, #28
 8006c4a:	d531      	bpl.n	8006cb0 <__swbuf_r+0x8c>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d02e      	beq.n	8006cb0 <__swbuf_r+0x8c>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	b2f7      	uxtb	r7, r6
 8006c58:	1a98      	subs	r0, r3, r2
 8006c5a:	6963      	ldr	r3, [r4, #20]
 8006c5c:	b2f6      	uxtb	r6, r6
 8006c5e:	4283      	cmp	r3, r0
 8006c60:	dc05      	bgt.n	8006c6e <__swbuf_r+0x4a>
 8006c62:	0021      	movs	r1, r4
 8006c64:	0028      	movs	r0, r5
 8006c66:	f000 f933 	bl	8006ed0 <_fflush_r>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d126      	bne.n	8006cbc <__swbuf_r+0x98>
 8006c6e:	68a3      	ldr	r3, [r4, #8]
 8006c70:	3001      	adds	r0, #1
 8006c72:	3b01      	subs	r3, #1
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	701f      	strb	r7, [r3, #0]
 8006c7e:	6963      	ldr	r3, [r4, #20]
 8006c80:	4283      	cmp	r3, r0
 8006c82:	d004      	beq.n	8006c8e <__swbuf_r+0x6a>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	07db      	lsls	r3, r3, #31
 8006c88:	d51a      	bpl.n	8006cc0 <__swbuf_r+0x9c>
 8006c8a:	2e0a      	cmp	r6, #10
 8006c8c:	d118      	bne.n	8006cc0 <__swbuf_r+0x9c>
 8006c8e:	0021      	movs	r1, r4
 8006c90:	0028      	movs	r0, r5
 8006c92:	f000 f91d 	bl	8006ed0 <_fflush_r>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d012      	beq.n	8006cc0 <__swbuf_r+0x9c>
 8006c9a:	e00f      	b.n	8006cbc <__swbuf_r+0x98>
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <__swbuf_r+0xa4>)
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d101      	bne.n	8006ca6 <__swbuf_r+0x82>
 8006ca2:	68ac      	ldr	r4, [r5, #8]
 8006ca4:	e7cd      	b.n	8006c42 <__swbuf_r+0x1e>
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <__swbuf_r+0xa8>)
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	d1ca      	bne.n	8006c42 <__swbuf_r+0x1e>
 8006cac:	68ec      	ldr	r4, [r5, #12]
 8006cae:	e7c8      	b.n	8006c42 <__swbuf_r+0x1e>
 8006cb0:	0021      	movs	r1, r4
 8006cb2:	0028      	movs	r0, r5
 8006cb4:	f000 f80c 	bl	8006cd0 <__swsetup_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d0ca      	beq.n	8006c52 <__swbuf_r+0x2e>
 8006cbc:	2601      	movs	r6, #1
 8006cbe:	4276      	negs	r6, r6
 8006cc0:	0030      	movs	r0, r6
 8006cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc4:	0800801c 	.word	0x0800801c
 8006cc8:	0800803c 	.word	0x0800803c
 8006ccc:	08007ffc 	.word	0x08007ffc

08006cd0 <__swsetup_r>:
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <__swsetup_r+0xdc>)
 8006cd2:	b570      	push	{r4, r5, r6, lr}
 8006cd4:	681d      	ldr	r5, [r3, #0]
 8006cd6:	0006      	movs	r6, r0
 8006cd8:	000c      	movs	r4, r1
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	d005      	beq.n	8006cea <__swsetup_r+0x1a>
 8006cde:	69ab      	ldr	r3, [r5, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <__swsetup_r+0x1a>
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	f000 f961 	bl	8006fac <__sinit>
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <__swsetup_r+0xe0>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	d10f      	bne.n	8006d10 <__swsetup_r+0x40>
 8006cf0:	686c      	ldr	r4, [r5, #4]
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	5ee2      	ldrsh	r2, [r4, r3]
 8006cf6:	b293      	uxth	r3, r2
 8006cf8:	0719      	lsls	r1, r3, #28
 8006cfa:	d42d      	bmi.n	8006d58 <__swsetup_r+0x88>
 8006cfc:	06d9      	lsls	r1, r3, #27
 8006cfe:	d411      	bmi.n	8006d24 <__swsetup_r+0x54>
 8006d00:	2309      	movs	r3, #9
 8006d02:	2001      	movs	r0, #1
 8006d04:	6033      	str	r3, [r6, #0]
 8006d06:	3337      	adds	r3, #55	; 0x37
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	4240      	negs	r0, r0
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <__swsetup_r+0xe4>)
 8006d12:	429c      	cmp	r4, r3
 8006d14:	d101      	bne.n	8006d1a <__swsetup_r+0x4a>
 8006d16:	68ac      	ldr	r4, [r5, #8]
 8006d18:	e7eb      	b.n	8006cf2 <__swsetup_r+0x22>
 8006d1a:	4b27      	ldr	r3, [pc, #156]	; (8006db8 <__swsetup_r+0xe8>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d1e8      	bne.n	8006cf2 <__swsetup_r+0x22>
 8006d20:	68ec      	ldr	r4, [r5, #12]
 8006d22:	e7e6      	b.n	8006cf2 <__swsetup_r+0x22>
 8006d24:	075b      	lsls	r3, r3, #29
 8006d26:	d513      	bpl.n	8006d50 <__swsetup_r+0x80>
 8006d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d2a:	2900      	cmp	r1, #0
 8006d2c:	d008      	beq.n	8006d40 <__swsetup_r+0x70>
 8006d2e:	0023      	movs	r3, r4
 8006d30:	3344      	adds	r3, #68	; 0x44
 8006d32:	4299      	cmp	r1, r3
 8006d34:	d002      	beq.n	8006d3c <__swsetup_r+0x6c>
 8006d36:	0030      	movs	r0, r6
 8006d38:	f000 fa38 	bl	80071ac <_free_r>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6363      	str	r3, [r4, #52]	; 0x34
 8006d40:	2224      	movs	r2, #36	; 0x24
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	4393      	bics	r3, r2
 8006d46:	81a3      	strh	r3, [r4, #12]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	2308      	movs	r3, #8
 8006d52:	89a2      	ldrh	r2, [r4, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <__swsetup_r+0xa6>
 8006d5e:	21a0      	movs	r1, #160	; 0xa0
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	0089      	lsls	r1, r1, #2
 8006d66:	0092      	lsls	r2, r2, #2
 8006d68:	400b      	ands	r3, r1
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <__swsetup_r+0xa6>
 8006d6e:	0021      	movs	r1, r4
 8006d70:	0030      	movs	r0, r6
 8006d72:	f000 f9d7 	bl	8007124 <__smakebuf_r>
 8006d76:	2301      	movs	r3, #1
 8006d78:	89a2      	ldrh	r2, [r4, #12]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d011      	beq.n	8006da2 <__swsetup_r+0xd2>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6963      	ldr	r3, [r4, #20]
 8006d84:	425b      	negs	r3, r3
 8006d86:	61a3      	str	r3, [r4, #24]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	d1be      	bne.n	8006d0e <__swsetup_r+0x3e>
 8006d90:	230c      	movs	r3, #12
 8006d92:	5ee2      	ldrsh	r2, [r4, r3]
 8006d94:	0613      	lsls	r3, r2, #24
 8006d96:	d5ba      	bpl.n	8006d0e <__swsetup_r+0x3e>
 8006d98:	2340      	movs	r3, #64	; 0x40
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	3801      	subs	r0, #1
 8006da0:	e7b5      	b.n	8006d0e <__swsetup_r+0x3e>
 8006da2:	0792      	lsls	r2, r2, #30
 8006da4:	d400      	bmi.n	8006da8 <__swsetup_r+0xd8>
 8006da6:	6963      	ldr	r3, [r4, #20]
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	e7ed      	b.n	8006d88 <__swsetup_r+0xb8>
 8006dac:	20000118 	.word	0x20000118
 8006db0:	0800801c 	.word	0x0800801c
 8006db4:	0800803c 	.word	0x0800803c
 8006db8:	08007ffc 	.word	0x08007ffc

08006dbc <__sflush_r>:
 8006dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dbe:	898a      	ldrh	r2, [r1, #12]
 8006dc0:	0005      	movs	r5, r0
 8006dc2:	000c      	movs	r4, r1
 8006dc4:	0713      	lsls	r3, r2, #28
 8006dc6:	d460      	bmi.n	8006e8a <__sflush_r+0xce>
 8006dc8:	684b      	ldr	r3, [r1, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc04      	bgt.n	8006dd8 <__sflush_r+0x1c>
 8006dce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dc01      	bgt.n	8006dd8 <__sflush_r+0x1c>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dd8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006dda:	2f00      	cmp	r7, #0
 8006ddc:	d0fa      	beq.n	8006dd4 <__sflush_r+0x18>
 8006dde:	2300      	movs	r3, #0
 8006de0:	682e      	ldr	r6, [r5, #0]
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	2380      	movs	r3, #128	; 0x80
 8006de6:	015b      	lsls	r3, r3, #5
 8006de8:	6a21      	ldr	r1, [r4, #32]
 8006dea:	401a      	ands	r2, r3
 8006dec:	d034      	beq.n	8006e58 <__sflush_r+0x9c>
 8006dee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	075b      	lsls	r3, r3, #29
 8006df4:	d506      	bpl.n	8006e04 <__sflush_r+0x48>
 8006df6:	6863      	ldr	r3, [r4, #4]
 8006df8:	1ac0      	subs	r0, r0, r3
 8006dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <__sflush_r+0x48>
 8006e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e02:	1ac0      	subs	r0, r0, r3
 8006e04:	0002      	movs	r2, r0
 8006e06:	6a21      	ldr	r1, [r4, #32]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	0028      	movs	r0, r5
 8006e0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006e0e:	47b8      	blx	r7
 8006e10:	89a1      	ldrh	r1, [r4, #12]
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d106      	bne.n	8006e24 <__sflush_r+0x68>
 8006e16:	682b      	ldr	r3, [r5, #0]
 8006e18:	2b1d      	cmp	r3, #29
 8006e1a:	d830      	bhi.n	8006e7e <__sflush_r+0xc2>
 8006e1c:	4a2b      	ldr	r2, [pc, #172]	; (8006ecc <__sflush_r+0x110>)
 8006e1e:	40da      	lsrs	r2, r3
 8006e20:	07d3      	lsls	r3, r2, #31
 8006e22:	d52c      	bpl.n	8006e7e <__sflush_r+0xc2>
 8006e24:	2300      	movs	r3, #0
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	04cb      	lsls	r3, r1, #19
 8006e2e:	d505      	bpl.n	8006e3c <__sflush_r+0x80>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <__sflush_r+0x7e>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d100      	bne.n	8006e3c <__sflush_r+0x80>
 8006e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3e:	602e      	str	r6, [r5, #0]
 8006e40:	2900      	cmp	r1, #0
 8006e42:	d0c7      	beq.n	8006dd4 <__sflush_r+0x18>
 8006e44:	0023      	movs	r3, r4
 8006e46:	3344      	adds	r3, #68	; 0x44
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d002      	beq.n	8006e52 <__sflush_r+0x96>
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	f000 f9ad 	bl	80071ac <_free_r>
 8006e52:	2000      	movs	r0, #0
 8006e54:	6360      	str	r0, [r4, #52]	; 0x34
 8006e56:	e7be      	b.n	8006dd6 <__sflush_r+0x1a>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	0028      	movs	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d1c6      	bne.n	8006df0 <__sflush_r+0x34>
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0c3      	beq.n	8006df0 <__sflush_r+0x34>
 8006e68:	2b1d      	cmp	r3, #29
 8006e6a:	d001      	beq.n	8006e70 <__sflush_r+0xb4>
 8006e6c:	2b16      	cmp	r3, #22
 8006e6e:	d101      	bne.n	8006e74 <__sflush_r+0xb8>
 8006e70:	602e      	str	r6, [r5, #0]
 8006e72:	e7af      	b.n	8006dd4 <__sflush_r+0x18>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	89a2      	ldrh	r2, [r4, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	e7ab      	b.n	8006dd6 <__sflush_r+0x1a>
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	430b      	orrs	r3, r1
 8006e82:	2001      	movs	r0, #1
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	4240      	negs	r0, r0
 8006e88:	e7a5      	b.n	8006dd6 <__sflush_r+0x1a>
 8006e8a:	690f      	ldr	r7, [r1, #16]
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	d0a1      	beq.n	8006dd4 <__sflush_r+0x18>
 8006e90:	680b      	ldr	r3, [r1, #0]
 8006e92:	600f      	str	r7, [r1, #0]
 8006e94:	1bdb      	subs	r3, r3, r7
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	0792      	lsls	r2, r2, #30
 8006e9c:	d100      	bne.n	8006ea0 <__sflush_r+0xe4>
 8006e9e:	694b      	ldr	r3, [r1, #20]
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dc00      	bgt.n	8006eaa <__sflush_r+0xee>
 8006ea8:	e794      	b.n	8006dd4 <__sflush_r+0x18>
 8006eaa:	9b01      	ldr	r3, [sp, #4]
 8006eac:	003a      	movs	r2, r7
 8006eae:	6a21      	ldr	r1, [r4, #32]
 8006eb0:	0028      	movs	r0, r5
 8006eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006eb4:	47b0      	blx	r6
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	dc03      	bgt.n	8006ec2 <__sflush_r+0x106>
 8006eba:	2340      	movs	r3, #64	; 0x40
 8006ebc:	89a2      	ldrh	r2, [r4, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	e7df      	b.n	8006e82 <__sflush_r+0xc6>
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	183f      	adds	r7, r7, r0
 8006ec6:	1a1b      	subs	r3, r3, r0
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	e7ea      	b.n	8006ea2 <__sflush_r+0xe6>
 8006ecc:	20400001 	.word	0x20400001

08006ed0 <_fflush_r>:
 8006ed0:	690b      	ldr	r3, [r1, #16]
 8006ed2:	b570      	push	{r4, r5, r6, lr}
 8006ed4:	0005      	movs	r5, r0
 8006ed6:	000c      	movs	r4, r1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <_fflush_r+0x10>
 8006edc:	2000      	movs	r0, #0
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d004      	beq.n	8006eee <_fflush_r+0x1e>
 8006ee4:	6983      	ldr	r3, [r0, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <_fflush_r+0x1e>
 8006eea:	f000 f85f 	bl	8006fac <__sinit>
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <_fflush_r+0x4c>)
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	d109      	bne.n	8006f08 <_fflush_r+0x38>
 8006ef4:	686c      	ldr	r4, [r5, #4]
 8006ef6:	220c      	movs	r2, #12
 8006ef8:	5ea3      	ldrsh	r3, [r4, r2]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ee      	beq.n	8006edc <_fflush_r+0xc>
 8006efe:	0021      	movs	r1, r4
 8006f00:	0028      	movs	r0, r5
 8006f02:	f7ff ff5b 	bl	8006dbc <__sflush_r>
 8006f06:	e7ea      	b.n	8006ede <_fflush_r+0xe>
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <_fflush_r+0x50>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <_fflush_r+0x42>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7f1      	b.n	8006ef6 <_fflush_r+0x26>
 8006f12:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <_fflush_r+0x54>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	d1ee      	bne.n	8006ef6 <_fflush_r+0x26>
 8006f18:	68ec      	ldr	r4, [r5, #12]
 8006f1a:	e7ec      	b.n	8006ef6 <_fflush_r+0x26>
 8006f1c:	0800801c 	.word	0x0800801c
 8006f20:	0800803c 	.word	0x0800803c
 8006f24:	08007ffc 	.word	0x08007ffc

08006f28 <std>:
 8006f28:	2300      	movs	r3, #0
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	0004      	movs	r4, r0
 8006f2e:	6003      	str	r3, [r0, #0]
 8006f30:	6043      	str	r3, [r0, #4]
 8006f32:	6083      	str	r3, [r0, #8]
 8006f34:	8181      	strh	r1, [r0, #12]
 8006f36:	6643      	str	r3, [r0, #100]	; 0x64
 8006f38:	81c2      	strh	r2, [r0, #14]
 8006f3a:	6103      	str	r3, [r0, #16]
 8006f3c:	6143      	str	r3, [r0, #20]
 8006f3e:	6183      	str	r3, [r0, #24]
 8006f40:	0019      	movs	r1, r3
 8006f42:	2208      	movs	r2, #8
 8006f44:	305c      	adds	r0, #92	; 0x5c
 8006f46:	f7ff fde1 	bl	8006b0c <memset>
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <std+0x38>)
 8006f4c:	6224      	str	r4, [r4, #32]
 8006f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <std+0x3c>)
 8006f52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <std+0x40>)
 8006f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f58:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <std+0x44>)
 8006f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	08007889 	.word	0x08007889
 8006f64:	080078b1 	.word	0x080078b1
 8006f68:	080078e9 	.word	0x080078e9
 8006f6c:	08007915 	.word	0x08007915

08006f70 <_cleanup_r>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	4902      	ldr	r1, [pc, #8]	; (8006f7c <_cleanup_r+0xc>)
 8006f74:	f000 f88c 	bl	8007090 <_fwalk_reent>
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	08006ed1 	.word	0x08006ed1

08006f80 <__sfmoreglue>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	2568      	movs	r5, #104	; 0x68
 8006f84:	1e4a      	subs	r2, r1, #1
 8006f86:	4355      	muls	r5, r2
 8006f88:	000e      	movs	r6, r1
 8006f8a:	0029      	movs	r1, r5
 8006f8c:	3174      	adds	r1, #116	; 0x74
 8006f8e:	f000 f957 	bl	8007240 <_malloc_r>
 8006f92:	1e04      	subs	r4, r0, #0
 8006f94:	d008      	beq.n	8006fa8 <__sfmoreglue+0x28>
 8006f96:	2100      	movs	r1, #0
 8006f98:	002a      	movs	r2, r5
 8006f9a:	6001      	str	r1, [r0, #0]
 8006f9c:	6046      	str	r6, [r0, #4]
 8006f9e:	300c      	adds	r0, #12
 8006fa0:	60a0      	str	r0, [r4, #8]
 8006fa2:	3268      	adds	r2, #104	; 0x68
 8006fa4:	f7ff fdb2 	bl	8006b0c <memset>
 8006fa8:	0020      	movs	r0, r4
 8006faa:	bd70      	pop	{r4, r5, r6, pc}

08006fac <__sinit>:
 8006fac:	6983      	ldr	r3, [r0, #24]
 8006fae:	b513      	push	{r0, r1, r4, lr}
 8006fb0:	0004      	movs	r4, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d128      	bne.n	8007008 <__sinit+0x5c>
 8006fb6:	6483      	str	r3, [r0, #72]	; 0x48
 8006fb8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006fba:	6503      	str	r3, [r0, #80]	; 0x50
 8006fbc:	4b13      	ldr	r3, [pc, #76]	; (800700c <__sinit+0x60>)
 8006fbe:	4a14      	ldr	r2, [pc, #80]	; (8007010 <__sinit+0x64>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6282      	str	r2, [r0, #40]	; 0x28
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	d101      	bne.n	8006fce <__sinit+0x22>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	6183      	str	r3, [r0, #24]
 8006fce:	0020      	movs	r0, r4
 8006fd0:	f000 f820 	bl	8007014 <__sfp>
 8006fd4:	6060      	str	r0, [r4, #4]
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f000 f81c 	bl	8007014 <__sfp>
 8006fdc:	60a0      	str	r0, [r4, #8]
 8006fde:	0020      	movs	r0, r4
 8006fe0:	f000 f818 	bl	8007014 <__sfp>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	60e0      	str	r0, [r4, #12]
 8006fe8:	2104      	movs	r1, #4
 8006fea:	6860      	ldr	r0, [r4, #4]
 8006fec:	f7ff ff9c 	bl	8006f28 <std>
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	2109      	movs	r1, #9
 8006ff4:	68a0      	ldr	r0, [r4, #8]
 8006ff6:	f7ff ff97 	bl	8006f28 <std>
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	2112      	movs	r1, #18
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	f7ff ff92 	bl	8006f28 <std>
 8007004:	2301      	movs	r3, #1
 8007006:	61a3      	str	r3, [r4, #24]
 8007008:	bd13      	pop	{r0, r1, r4, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	08007ff8 	.word	0x08007ff8
 8007010:	08006f71 	.word	0x08006f71

08007014 <__sfp>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <__sfp+0x74>)
 8007018:	0007      	movs	r7, r0
 800701a:	681e      	ldr	r6, [r3, #0]
 800701c:	69b3      	ldr	r3, [r6, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <__sfp+0x14>
 8007022:	0030      	movs	r0, r6
 8007024:	f7ff ffc2 	bl	8006fac <__sinit>
 8007028:	3648      	adds	r6, #72	; 0x48
 800702a:	68b4      	ldr	r4, [r6, #8]
 800702c:	6873      	ldr	r3, [r6, #4]
 800702e:	3b01      	subs	r3, #1
 8007030:	d504      	bpl.n	800703c <__sfp+0x28>
 8007032:	6833      	ldr	r3, [r6, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <__sfp+0x34>
 8007038:	6836      	ldr	r6, [r6, #0]
 800703a:	e7f6      	b.n	800702a <__sfp+0x16>
 800703c:	220c      	movs	r2, #12
 800703e:	5ea5      	ldrsh	r5, [r4, r2]
 8007040:	2d00      	cmp	r5, #0
 8007042:	d00d      	beq.n	8007060 <__sfp+0x4c>
 8007044:	3468      	adds	r4, #104	; 0x68
 8007046:	e7f2      	b.n	800702e <__sfp+0x1a>
 8007048:	2104      	movs	r1, #4
 800704a:	0038      	movs	r0, r7
 800704c:	f7ff ff98 	bl	8006f80 <__sfmoreglue>
 8007050:	6030      	str	r0, [r6, #0]
 8007052:	2800      	cmp	r0, #0
 8007054:	d1f0      	bne.n	8007038 <__sfp+0x24>
 8007056:	230c      	movs	r3, #12
 8007058:	0004      	movs	r4, r0
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	0020      	movs	r0, r4
 800705e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007060:	0020      	movs	r0, r4
 8007062:	4b0a      	ldr	r3, [pc, #40]	; (800708c <__sfp+0x78>)
 8007064:	6665      	str	r5, [r4, #100]	; 0x64
 8007066:	6025      	str	r5, [r4, #0]
 8007068:	6065      	str	r5, [r4, #4]
 800706a:	60a5      	str	r5, [r4, #8]
 800706c:	60e3      	str	r3, [r4, #12]
 800706e:	6125      	str	r5, [r4, #16]
 8007070:	6165      	str	r5, [r4, #20]
 8007072:	61a5      	str	r5, [r4, #24]
 8007074:	2208      	movs	r2, #8
 8007076:	0029      	movs	r1, r5
 8007078:	305c      	adds	r0, #92	; 0x5c
 800707a:	f7ff fd47 	bl	8006b0c <memset>
 800707e:	6365      	str	r5, [r4, #52]	; 0x34
 8007080:	63a5      	str	r5, [r4, #56]	; 0x38
 8007082:	64a5      	str	r5, [r4, #72]	; 0x48
 8007084:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007086:	e7e9      	b.n	800705c <__sfp+0x48>
 8007088:	08007ff8 	.word	0x08007ff8
 800708c:	ffff0001 	.word	0xffff0001

08007090 <_fwalk_reent>:
 8007090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007092:	0004      	movs	r4, r0
 8007094:	0007      	movs	r7, r0
 8007096:	2600      	movs	r6, #0
 8007098:	9101      	str	r1, [sp, #4]
 800709a:	3448      	adds	r4, #72	; 0x48
 800709c:	2c00      	cmp	r4, #0
 800709e:	d101      	bne.n	80070a4 <_fwalk_reent+0x14>
 80070a0:	0030      	movs	r0, r6
 80070a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	68a5      	ldr	r5, [r4, #8]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	d501      	bpl.n	80070b6 <_fwalk_reent+0x26>
 80070b2:	6824      	ldr	r4, [r4, #0]
 80070b4:	e7f2      	b.n	800709c <_fwalk_reent+0xc>
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d908      	bls.n	80070ce <_fwalk_reent+0x3e>
 80070bc:	220e      	movs	r2, #14
 80070be:	5eab      	ldrsh	r3, [r5, r2]
 80070c0:	3301      	adds	r3, #1
 80070c2:	d004      	beq.n	80070ce <_fwalk_reent+0x3e>
 80070c4:	0029      	movs	r1, r5
 80070c6:	0038      	movs	r0, r7
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	4798      	blx	r3
 80070cc:	4306      	orrs	r6, r0
 80070ce:	3568      	adds	r5, #104	; 0x68
 80070d0:	e7eb      	b.n	80070aa <_fwalk_reent+0x1a>
	...

080070d4 <__swhatbuf_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	000e      	movs	r6, r1
 80070d8:	001d      	movs	r5, r3
 80070da:	230e      	movs	r3, #14
 80070dc:	5ec9      	ldrsh	r1, [r1, r3]
 80070de:	b096      	sub	sp, #88	; 0x58
 80070e0:	0014      	movs	r4, r2
 80070e2:	2900      	cmp	r1, #0
 80070e4:	da07      	bge.n	80070f6 <__swhatbuf_r+0x22>
 80070e6:	2300      	movs	r3, #0
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	89b3      	ldrh	r3, [r6, #12]
 80070ec:	061b      	lsls	r3, r3, #24
 80070ee:	d411      	bmi.n	8007114 <__swhatbuf_r+0x40>
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	e00f      	b.n	8007116 <__swhatbuf_r+0x42>
 80070f6:	466a      	mov	r2, sp
 80070f8:	f000 fc38 	bl	800796c <_fstat_r>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	dbf2      	blt.n	80070e6 <__swhatbuf_r+0x12>
 8007100:	22f0      	movs	r2, #240	; 0xf0
 8007102:	9b01      	ldr	r3, [sp, #4]
 8007104:	0212      	lsls	r2, r2, #8
 8007106:	4013      	ands	r3, r2
 8007108:	4a05      	ldr	r2, [pc, #20]	; (8007120 <__swhatbuf_r+0x4c>)
 800710a:	189b      	adds	r3, r3, r2
 800710c:	425a      	negs	r2, r3
 800710e:	4153      	adcs	r3, r2
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	e7ed      	b.n	80070f0 <__swhatbuf_r+0x1c>
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	2000      	movs	r0, #0
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	b016      	add	sp, #88	; 0x58
 800711c:	bd70      	pop	{r4, r5, r6, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	ffffe000 	.word	0xffffe000

08007124 <__smakebuf_r>:
 8007124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007126:	2602      	movs	r6, #2
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	0005      	movs	r5, r0
 800712c:	000c      	movs	r4, r1
 800712e:	4233      	tst	r3, r6
 8007130:	d006      	beq.n	8007140 <__smakebuf_r+0x1c>
 8007132:	0023      	movs	r3, r4
 8007134:	3347      	adds	r3, #71	; 0x47
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	2301      	movs	r3, #1
 800713c:	6163      	str	r3, [r4, #20]
 800713e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007140:	ab01      	add	r3, sp, #4
 8007142:	466a      	mov	r2, sp
 8007144:	f7ff ffc6 	bl	80070d4 <__swhatbuf_r>
 8007148:	9900      	ldr	r1, [sp, #0]
 800714a:	0007      	movs	r7, r0
 800714c:	0028      	movs	r0, r5
 800714e:	f000 f877 	bl	8007240 <_malloc_r>
 8007152:	2800      	cmp	r0, #0
 8007154:	d108      	bne.n	8007168 <__smakebuf_r+0x44>
 8007156:	220c      	movs	r2, #12
 8007158:	5ea3      	ldrsh	r3, [r4, r2]
 800715a:	059a      	lsls	r2, r3, #22
 800715c:	d4ef      	bmi.n	800713e <__smakebuf_r+0x1a>
 800715e:	2203      	movs	r2, #3
 8007160:	4393      	bics	r3, r2
 8007162:	431e      	orrs	r6, r3
 8007164:	81a6      	strh	r6, [r4, #12]
 8007166:	e7e4      	b.n	8007132 <__smakebuf_r+0xe>
 8007168:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <__smakebuf_r+0x84>)
 800716a:	62ab      	str	r3, [r5, #40]	; 0x28
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	89a2      	ldrh	r2, [r4, #12]
 8007170:	6020      	str	r0, [r4, #0]
 8007172:	4313      	orrs	r3, r2
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	9b00      	ldr	r3, [sp, #0]
 8007178:	6120      	str	r0, [r4, #16]
 800717a:	6163      	str	r3, [r4, #20]
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <__smakebuf_r+0x7a>
 8007182:	230e      	movs	r3, #14
 8007184:	5ee1      	ldrsh	r1, [r4, r3]
 8007186:	0028      	movs	r0, r5
 8007188:	f000 fc02 	bl	8007990 <_isatty_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	d006      	beq.n	800719e <__smakebuf_r+0x7a>
 8007190:	2203      	movs	r2, #3
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	4393      	bics	r3, r2
 8007196:	001a      	movs	r2, r3
 8007198:	2301      	movs	r3, #1
 800719a:	4313      	orrs	r3, r2
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	89a0      	ldrh	r0, [r4, #12]
 80071a0:	4338      	orrs	r0, r7
 80071a2:	81a0      	strh	r0, [r4, #12]
 80071a4:	e7cb      	b.n	800713e <__smakebuf_r+0x1a>
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	08006f71 	.word	0x08006f71

080071ac <_free_r>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	0005      	movs	r5, r0
 80071b0:	2900      	cmp	r1, #0
 80071b2:	d010      	beq.n	80071d6 <_free_r+0x2a>
 80071b4:	1f0c      	subs	r4, r1, #4
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da00      	bge.n	80071be <_free_r+0x12>
 80071bc:	18e4      	adds	r4, r4, r3
 80071be:	0028      	movs	r0, r5
 80071c0:	f000 fc17 	bl	80079f2 <__malloc_lock>
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <_free_r+0x90>)
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d105      	bne.n	80071d8 <_free_r+0x2c>
 80071cc:	6063      	str	r3, [r4, #4]
 80071ce:	6014      	str	r4, [r2, #0]
 80071d0:	0028      	movs	r0, r5
 80071d2:	f000 fc0f 	bl	80079f4 <__malloc_unlock>
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d909      	bls.n	80071f0 <_free_r+0x44>
 80071dc:	6821      	ldr	r1, [r4, #0]
 80071de:	1860      	adds	r0, r4, r1
 80071e0:	4283      	cmp	r3, r0
 80071e2:	d1f3      	bne.n	80071cc <_free_r+0x20>
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	1841      	adds	r1, r0, r1
 80071ea:	6021      	str	r1, [r4, #0]
 80071ec:	e7ee      	b.n	80071cc <_free_r+0x20>
 80071ee:	0013      	movs	r3, r2
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d001      	beq.n	80071fa <_free_r+0x4e>
 80071f6:	42a2      	cmp	r2, r4
 80071f8:	d9f9      	bls.n	80071ee <_free_r+0x42>
 80071fa:	6819      	ldr	r1, [r3, #0]
 80071fc:	1858      	adds	r0, r3, r1
 80071fe:	42a0      	cmp	r0, r4
 8007200:	d10b      	bne.n	800721a <_free_r+0x6e>
 8007202:	6820      	ldr	r0, [r4, #0]
 8007204:	1809      	adds	r1, r1, r0
 8007206:	1858      	adds	r0, r3, r1
 8007208:	6019      	str	r1, [r3, #0]
 800720a:	4282      	cmp	r2, r0
 800720c:	d1e0      	bne.n	80071d0 <_free_r+0x24>
 800720e:	6810      	ldr	r0, [r2, #0]
 8007210:	6852      	ldr	r2, [r2, #4]
 8007212:	1841      	adds	r1, r0, r1
 8007214:	6019      	str	r1, [r3, #0]
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	e7da      	b.n	80071d0 <_free_r+0x24>
 800721a:	42a0      	cmp	r0, r4
 800721c:	d902      	bls.n	8007224 <_free_r+0x78>
 800721e:	230c      	movs	r3, #12
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	e7d5      	b.n	80071d0 <_free_r+0x24>
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	1860      	adds	r0, r4, r1
 8007228:	4282      	cmp	r2, r0
 800722a:	d103      	bne.n	8007234 <_free_r+0x88>
 800722c:	6810      	ldr	r0, [r2, #0]
 800722e:	6852      	ldr	r2, [r2, #4]
 8007230:	1841      	adds	r1, r0, r1
 8007232:	6021      	str	r1, [r4, #0]
 8007234:	6062      	str	r2, [r4, #4]
 8007236:	605c      	str	r4, [r3, #4]
 8007238:	e7ca      	b.n	80071d0 <_free_r+0x24>
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	20000670 	.word	0x20000670

08007240 <_malloc_r>:
 8007240:	2303      	movs	r3, #3
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	1ccd      	adds	r5, r1, #3
 8007246:	439d      	bics	r5, r3
 8007248:	3508      	adds	r5, #8
 800724a:	0006      	movs	r6, r0
 800724c:	2d0c      	cmp	r5, #12
 800724e:	d21e      	bcs.n	800728e <_malloc_r+0x4e>
 8007250:	250c      	movs	r5, #12
 8007252:	42a9      	cmp	r1, r5
 8007254:	d81d      	bhi.n	8007292 <_malloc_r+0x52>
 8007256:	0030      	movs	r0, r6
 8007258:	f000 fbcb 	bl	80079f2 <__malloc_lock>
 800725c:	4a25      	ldr	r2, [pc, #148]	; (80072f4 <_malloc_r+0xb4>)
 800725e:	6814      	ldr	r4, [r2, #0]
 8007260:	0021      	movs	r1, r4
 8007262:	2900      	cmp	r1, #0
 8007264:	d119      	bne.n	800729a <_malloc_r+0x5a>
 8007266:	4c24      	ldr	r4, [pc, #144]	; (80072f8 <_malloc_r+0xb8>)
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <_malloc_r+0x36>
 800726e:	0030      	movs	r0, r6
 8007270:	f000 faf8 	bl	8007864 <_sbrk_r>
 8007274:	6020      	str	r0, [r4, #0]
 8007276:	0029      	movs	r1, r5
 8007278:	0030      	movs	r0, r6
 800727a:	f000 faf3 	bl	8007864 <_sbrk_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d12b      	bne.n	80072da <_malloc_r+0x9a>
 8007282:	230c      	movs	r3, #12
 8007284:	0030      	movs	r0, r6
 8007286:	6033      	str	r3, [r6, #0]
 8007288:	f000 fbb4 	bl	80079f4 <__malloc_unlock>
 800728c:	e003      	b.n	8007296 <_malloc_r+0x56>
 800728e:	2d00      	cmp	r5, #0
 8007290:	dadf      	bge.n	8007252 <_malloc_r+0x12>
 8007292:	230c      	movs	r3, #12
 8007294:	6033      	str	r3, [r6, #0]
 8007296:	2000      	movs	r0, #0
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	680b      	ldr	r3, [r1, #0]
 800729c:	1b5b      	subs	r3, r3, r5
 800729e:	d419      	bmi.n	80072d4 <_malloc_r+0x94>
 80072a0:	2b0b      	cmp	r3, #11
 80072a2:	d903      	bls.n	80072ac <_malloc_r+0x6c>
 80072a4:	600b      	str	r3, [r1, #0]
 80072a6:	18cc      	adds	r4, r1, r3
 80072a8:	6025      	str	r5, [r4, #0]
 80072aa:	e003      	b.n	80072b4 <_malloc_r+0x74>
 80072ac:	684b      	ldr	r3, [r1, #4]
 80072ae:	428c      	cmp	r4, r1
 80072b0:	d10d      	bne.n	80072ce <_malloc_r+0x8e>
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	0030      	movs	r0, r6
 80072b6:	f000 fb9d 	bl	80079f4 <__malloc_unlock>
 80072ba:	0020      	movs	r0, r4
 80072bc:	2207      	movs	r2, #7
 80072be:	300b      	adds	r0, #11
 80072c0:	1d23      	adds	r3, r4, #4
 80072c2:	4390      	bics	r0, r2
 80072c4:	1ac3      	subs	r3, r0, r3
 80072c6:	d0e7      	beq.n	8007298 <_malloc_r+0x58>
 80072c8:	425a      	negs	r2, r3
 80072ca:	50e2      	str	r2, [r4, r3]
 80072cc:	e7e4      	b.n	8007298 <_malloc_r+0x58>
 80072ce:	6063      	str	r3, [r4, #4]
 80072d0:	000c      	movs	r4, r1
 80072d2:	e7ef      	b.n	80072b4 <_malloc_r+0x74>
 80072d4:	000c      	movs	r4, r1
 80072d6:	6849      	ldr	r1, [r1, #4]
 80072d8:	e7c3      	b.n	8007262 <_malloc_r+0x22>
 80072da:	2303      	movs	r3, #3
 80072dc:	1cc4      	adds	r4, r0, #3
 80072de:	439c      	bics	r4, r3
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	d0e1      	beq.n	80072a8 <_malloc_r+0x68>
 80072e4:	1a21      	subs	r1, r4, r0
 80072e6:	0030      	movs	r0, r6
 80072e8:	f000 fabc 	bl	8007864 <_sbrk_r>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d1db      	bne.n	80072a8 <_malloc_r+0x68>
 80072f0:	e7c7      	b.n	8007282 <_malloc_r+0x42>
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	20000670 	.word	0x20000670
 80072f8:	20000674 	.word	0x20000674

080072fc <__sfputc_r>:
 80072fc:	6893      	ldr	r3, [r2, #8]
 80072fe:	b510      	push	{r4, lr}
 8007300:	3b01      	subs	r3, #1
 8007302:	6093      	str	r3, [r2, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da04      	bge.n	8007312 <__sfputc_r+0x16>
 8007308:	6994      	ldr	r4, [r2, #24]
 800730a:	42a3      	cmp	r3, r4
 800730c:	db07      	blt.n	800731e <__sfputc_r+0x22>
 800730e:	290a      	cmp	r1, #10
 8007310:	d005      	beq.n	800731e <__sfputc_r+0x22>
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	1c58      	adds	r0, r3, #1
 8007316:	6010      	str	r0, [r2, #0]
 8007318:	7019      	strb	r1, [r3, #0]
 800731a:	0008      	movs	r0, r1
 800731c:	bd10      	pop	{r4, pc}
 800731e:	f7ff fc81 	bl	8006c24 <__swbuf_r>
 8007322:	0001      	movs	r1, r0
 8007324:	e7f9      	b.n	800731a <__sfputc_r+0x1e>

08007326 <__sfputs_r>:
 8007326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007328:	0006      	movs	r6, r0
 800732a:	000f      	movs	r7, r1
 800732c:	0014      	movs	r4, r2
 800732e:	18d5      	adds	r5, r2, r3
 8007330:	42ac      	cmp	r4, r5
 8007332:	d101      	bne.n	8007338 <__sfputs_r+0x12>
 8007334:	2000      	movs	r0, #0
 8007336:	e007      	b.n	8007348 <__sfputs_r+0x22>
 8007338:	7821      	ldrb	r1, [r4, #0]
 800733a:	003a      	movs	r2, r7
 800733c:	0030      	movs	r0, r6
 800733e:	f7ff ffdd 	bl	80072fc <__sfputc_r>
 8007342:	3401      	adds	r4, #1
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d1f3      	bne.n	8007330 <__sfputs_r+0xa>
 8007348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800734c <_vfiprintf_r>:
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b0a1      	sub	sp, #132	; 0x84
 8007350:	9003      	str	r0, [sp, #12]
 8007352:	000f      	movs	r7, r1
 8007354:	0016      	movs	r6, r2
 8007356:	001d      	movs	r5, r3
 8007358:	2800      	cmp	r0, #0
 800735a:	d005      	beq.n	8007368 <_vfiprintf_r+0x1c>
 800735c:	6983      	ldr	r3, [r0, #24]
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <_vfiprintf_r+0x1c>
 8007364:	f7ff fe22 	bl	8006fac <__sinit>
 8007368:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <_vfiprintf_r+0x20c>)
 800736a:	429f      	cmp	r7, r3
 800736c:	d15c      	bne.n	8007428 <_vfiprintf_r+0xdc>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	685f      	ldr	r7, [r3, #4]
 8007372:	89bb      	ldrh	r3, [r7, #12]
 8007374:	071b      	lsls	r3, r3, #28
 8007376:	d563      	bpl.n	8007440 <_vfiprintf_r+0xf4>
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d060      	beq.n	8007440 <_vfiprintf_r+0xf4>
 800737e:	2300      	movs	r3, #0
 8007380:	ac08      	add	r4, sp, #32
 8007382:	6163      	str	r3, [r4, #20]
 8007384:	3320      	adds	r3, #32
 8007386:	7663      	strb	r3, [r4, #25]
 8007388:	3310      	adds	r3, #16
 800738a:	76a3      	strb	r3, [r4, #26]
 800738c:	9507      	str	r5, [sp, #28]
 800738e:	0035      	movs	r5, r6
 8007390:	782b      	ldrb	r3, [r5, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <_vfiprintf_r+0x4e>
 8007396:	2b25      	cmp	r3, #37	; 0x25
 8007398:	d15c      	bne.n	8007454 <_vfiprintf_r+0x108>
 800739a:	1bab      	subs	r3, r5, r6
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	d00c      	beq.n	80073ba <_vfiprintf_r+0x6e>
 80073a0:	0032      	movs	r2, r6
 80073a2:	0039      	movs	r1, r7
 80073a4:	9803      	ldr	r0, [sp, #12]
 80073a6:	f7ff ffbe 	bl	8007326 <__sfputs_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d100      	bne.n	80073b0 <_vfiprintf_r+0x64>
 80073ae:	e0c4      	b.n	800753a <_vfiprintf_r+0x1ee>
 80073b0:	6962      	ldr	r2, [r4, #20]
 80073b2:	9b05      	ldr	r3, [sp, #20]
 80073b4:	4694      	mov	ip, r2
 80073b6:	4463      	add	r3, ip
 80073b8:	6163      	str	r3, [r4, #20]
 80073ba:	782b      	ldrb	r3, [r5, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d100      	bne.n	80073c2 <_vfiprintf_r+0x76>
 80073c0:	e0bb      	b.n	800753a <_vfiprintf_r+0x1ee>
 80073c2:	2201      	movs	r2, #1
 80073c4:	2300      	movs	r3, #0
 80073c6:	4252      	negs	r2, r2
 80073c8:	6062      	str	r2, [r4, #4]
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	3254      	adds	r2, #84	; 0x54
 80073ce:	1852      	adds	r2, r2, r1
 80073d0:	1c6e      	adds	r6, r5, #1
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	60e3      	str	r3, [r4, #12]
 80073d6:	60a3      	str	r3, [r4, #8]
 80073d8:	7013      	strb	r3, [r2, #0]
 80073da:	65a3      	str	r3, [r4, #88]	; 0x58
 80073dc:	7831      	ldrb	r1, [r6, #0]
 80073de:	2205      	movs	r2, #5
 80073e0:	485e      	ldr	r0, [pc, #376]	; (800755c <_vfiprintf_r+0x210>)
 80073e2:	f000 fafb 	bl	80079dc <memchr>
 80073e6:	1c75      	adds	r5, r6, #1
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d135      	bne.n	8007458 <_vfiprintf_r+0x10c>
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	06d3      	lsls	r3, r2, #27
 80073f0:	d504      	bpl.n	80073fc <_vfiprintf_r+0xb0>
 80073f2:	2353      	movs	r3, #83	; 0x53
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	185b      	adds	r3, r3, r1
 80073f8:	2120      	movs	r1, #32
 80073fa:	7019      	strb	r1, [r3, #0]
 80073fc:	0713      	lsls	r3, r2, #28
 80073fe:	d504      	bpl.n	800740a <_vfiprintf_r+0xbe>
 8007400:	2353      	movs	r3, #83	; 0x53
 8007402:	a904      	add	r1, sp, #16
 8007404:	185b      	adds	r3, r3, r1
 8007406:	212b      	movs	r1, #43	; 0x2b
 8007408:	7019      	strb	r1, [r3, #0]
 800740a:	7833      	ldrb	r3, [r6, #0]
 800740c:	2b2a      	cmp	r3, #42	; 0x2a
 800740e:	d02c      	beq.n	800746a <_vfiprintf_r+0x11e>
 8007410:	0035      	movs	r5, r6
 8007412:	2100      	movs	r1, #0
 8007414:	200a      	movs	r0, #10
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	782a      	ldrb	r2, [r5, #0]
 800741a:	1c6e      	adds	r6, r5, #1
 800741c:	3a30      	subs	r2, #48	; 0x30
 800741e:	2a09      	cmp	r2, #9
 8007420:	d964      	bls.n	80074ec <_vfiprintf_r+0x1a0>
 8007422:	2900      	cmp	r1, #0
 8007424:	d02e      	beq.n	8007484 <_vfiprintf_r+0x138>
 8007426:	e026      	b.n	8007476 <_vfiprintf_r+0x12a>
 8007428:	4b4d      	ldr	r3, [pc, #308]	; (8007560 <_vfiprintf_r+0x214>)
 800742a:	429f      	cmp	r7, r3
 800742c:	d102      	bne.n	8007434 <_vfiprintf_r+0xe8>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	689f      	ldr	r7, [r3, #8]
 8007432:	e79e      	b.n	8007372 <_vfiprintf_r+0x26>
 8007434:	4b4b      	ldr	r3, [pc, #300]	; (8007564 <_vfiprintf_r+0x218>)
 8007436:	429f      	cmp	r7, r3
 8007438:	d19b      	bne.n	8007372 <_vfiprintf_r+0x26>
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	68df      	ldr	r7, [r3, #12]
 800743e:	e798      	b.n	8007372 <_vfiprintf_r+0x26>
 8007440:	0039      	movs	r1, r7
 8007442:	9803      	ldr	r0, [sp, #12]
 8007444:	f7ff fc44 	bl	8006cd0 <__swsetup_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	d098      	beq.n	800737e <_vfiprintf_r+0x32>
 800744c:	2001      	movs	r0, #1
 800744e:	4240      	negs	r0, r0
 8007450:	b021      	add	sp, #132	; 0x84
 8007452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007454:	3501      	adds	r5, #1
 8007456:	e79b      	b.n	8007390 <_vfiprintf_r+0x44>
 8007458:	4b40      	ldr	r3, [pc, #256]	; (800755c <_vfiprintf_r+0x210>)
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	1ac0      	subs	r0, r0, r3
 800745e:	2301      	movs	r3, #1
 8007460:	4083      	lsls	r3, r0
 8007462:	4313      	orrs	r3, r2
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	002e      	movs	r6, r5
 8007468:	e7b8      	b.n	80073dc <_vfiprintf_r+0x90>
 800746a:	9b07      	ldr	r3, [sp, #28]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9107      	str	r1, [sp, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	db01      	blt.n	800747a <_vfiprintf_r+0x12e>
 8007476:	930b      	str	r3, [sp, #44]	; 0x2c
 8007478:	e004      	b.n	8007484 <_vfiprintf_r+0x138>
 800747a:	425b      	negs	r3, r3
 800747c:	60e3      	str	r3, [r4, #12]
 800747e:	2302      	movs	r3, #2
 8007480:	4313      	orrs	r3, r2
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	782b      	ldrb	r3, [r5, #0]
 8007486:	2b2e      	cmp	r3, #46	; 0x2e
 8007488:	d10a      	bne.n	80074a0 <_vfiprintf_r+0x154>
 800748a:	786b      	ldrb	r3, [r5, #1]
 800748c:	2b2a      	cmp	r3, #42	; 0x2a
 800748e:	d135      	bne.n	80074fc <_vfiprintf_r+0x1b0>
 8007490:	9b07      	ldr	r3, [sp, #28]
 8007492:	3502      	adds	r5, #2
 8007494:	1d1a      	adds	r2, r3, #4
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	9207      	str	r2, [sp, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	db2b      	blt.n	80074f6 <_vfiprintf_r+0x1aa>
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	4e31      	ldr	r6, [pc, #196]	; (8007568 <_vfiprintf_r+0x21c>)
 80074a2:	7829      	ldrb	r1, [r5, #0]
 80074a4:	2203      	movs	r2, #3
 80074a6:	0030      	movs	r0, r6
 80074a8:	f000 fa98 	bl	80079dc <memchr>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d006      	beq.n	80074be <_vfiprintf_r+0x172>
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	1b80      	subs	r0, r0, r6
 80074b4:	4083      	lsls	r3, r0
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	3501      	adds	r5, #1
 80074ba:	4313      	orrs	r3, r2
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	7829      	ldrb	r1, [r5, #0]
 80074c0:	2206      	movs	r2, #6
 80074c2:	482a      	ldr	r0, [pc, #168]	; (800756c <_vfiprintf_r+0x220>)
 80074c4:	1c6e      	adds	r6, r5, #1
 80074c6:	7621      	strb	r1, [r4, #24]
 80074c8:	f000 fa88 	bl	80079dc <memchr>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d03a      	beq.n	8007546 <_vfiprintf_r+0x1fa>
 80074d0:	4b27      	ldr	r3, [pc, #156]	; (8007570 <_vfiprintf_r+0x224>)
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d125      	bne.n	8007522 <_vfiprintf_r+0x1d6>
 80074d6:	2207      	movs	r2, #7
 80074d8:	9b07      	ldr	r3, [sp, #28]
 80074da:	3307      	adds	r3, #7
 80074dc:	4393      	bics	r3, r2
 80074de:	3308      	adds	r3, #8
 80074e0:	9307      	str	r3, [sp, #28]
 80074e2:	6963      	ldr	r3, [r4, #20]
 80074e4:	9a04      	ldr	r2, [sp, #16]
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	6163      	str	r3, [r4, #20]
 80074ea:	e750      	b.n	800738e <_vfiprintf_r+0x42>
 80074ec:	4343      	muls	r3, r0
 80074ee:	2101      	movs	r1, #1
 80074f0:	189b      	adds	r3, r3, r2
 80074f2:	0035      	movs	r5, r6
 80074f4:	e790      	b.n	8007418 <_vfiprintf_r+0xcc>
 80074f6:	2301      	movs	r3, #1
 80074f8:	425b      	negs	r3, r3
 80074fa:	e7d0      	b.n	800749e <_vfiprintf_r+0x152>
 80074fc:	2300      	movs	r3, #0
 80074fe:	200a      	movs	r0, #10
 8007500:	001a      	movs	r2, r3
 8007502:	3501      	adds	r5, #1
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	7829      	ldrb	r1, [r5, #0]
 8007508:	1c6e      	adds	r6, r5, #1
 800750a:	3930      	subs	r1, #48	; 0x30
 800750c:	2909      	cmp	r1, #9
 800750e:	d903      	bls.n	8007518 <_vfiprintf_r+0x1cc>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0c5      	beq.n	80074a0 <_vfiprintf_r+0x154>
 8007514:	9209      	str	r2, [sp, #36]	; 0x24
 8007516:	e7c3      	b.n	80074a0 <_vfiprintf_r+0x154>
 8007518:	4342      	muls	r2, r0
 800751a:	2301      	movs	r3, #1
 800751c:	1852      	adds	r2, r2, r1
 800751e:	0035      	movs	r5, r6
 8007520:	e7f1      	b.n	8007506 <_vfiprintf_r+0x1ba>
 8007522:	ab07      	add	r3, sp, #28
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	003a      	movs	r2, r7
 8007528:	4b12      	ldr	r3, [pc, #72]	; (8007574 <_vfiprintf_r+0x228>)
 800752a:	0021      	movs	r1, r4
 800752c:	9803      	ldr	r0, [sp, #12]
 800752e:	e000      	b.n	8007532 <_vfiprintf_r+0x1e6>
 8007530:	bf00      	nop
 8007532:	9004      	str	r0, [sp, #16]
 8007534:	9b04      	ldr	r3, [sp, #16]
 8007536:	3301      	adds	r3, #1
 8007538:	d1d3      	bne.n	80074e2 <_vfiprintf_r+0x196>
 800753a:	89bb      	ldrh	r3, [r7, #12]
 800753c:	065b      	lsls	r3, r3, #25
 800753e:	d500      	bpl.n	8007542 <_vfiprintf_r+0x1f6>
 8007540:	e784      	b.n	800744c <_vfiprintf_r+0x100>
 8007542:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007544:	e784      	b.n	8007450 <_vfiprintf_r+0x104>
 8007546:	ab07      	add	r3, sp, #28
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	003a      	movs	r2, r7
 800754c:	4b09      	ldr	r3, [pc, #36]	; (8007574 <_vfiprintf_r+0x228>)
 800754e:	0021      	movs	r1, r4
 8007550:	9803      	ldr	r0, [sp, #12]
 8007552:	f000 f87f 	bl	8007654 <_printf_i>
 8007556:	e7ec      	b.n	8007532 <_vfiprintf_r+0x1e6>
 8007558:	0800801c 	.word	0x0800801c
 800755c:	0800805c 	.word	0x0800805c
 8007560:	0800803c 	.word	0x0800803c
 8007564:	08007ffc 	.word	0x08007ffc
 8007568:	08008062 	.word	0x08008062
 800756c:	08008066 	.word	0x08008066
 8007570:	00000000 	.word	0x00000000
 8007574:	08007327 	.word	0x08007327

08007578 <_printf_common>:
 8007578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800757a:	0015      	movs	r5, r2
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	688a      	ldr	r2, [r1, #8]
 8007580:	690b      	ldr	r3, [r1, #16]
 8007582:	9000      	str	r0, [sp, #0]
 8007584:	000c      	movs	r4, r1
 8007586:	4293      	cmp	r3, r2
 8007588:	da00      	bge.n	800758c <_printf_common+0x14>
 800758a:	0013      	movs	r3, r2
 800758c:	0022      	movs	r2, r4
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	3243      	adds	r2, #67	; 0x43
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	2a00      	cmp	r2, #0
 8007596:	d001      	beq.n	800759c <_printf_common+0x24>
 8007598:	3301      	adds	r3, #1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	069b      	lsls	r3, r3, #26
 80075a0:	d502      	bpl.n	80075a8 <_printf_common+0x30>
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	3302      	adds	r3, #2
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	2706      	movs	r7, #6
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	401f      	ands	r7, r3
 80075ae:	d027      	beq.n	8007600 <_printf_common+0x88>
 80075b0:	0023      	movs	r3, r4
 80075b2:	3343      	adds	r3, #67	; 0x43
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	1e5a      	subs	r2, r3, #1
 80075b8:	4193      	sbcs	r3, r2
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	0692      	lsls	r2, r2, #26
 80075be:	d430      	bmi.n	8007622 <_printf_common+0xaa>
 80075c0:	0022      	movs	r2, r4
 80075c2:	9901      	ldr	r1, [sp, #4]
 80075c4:	3243      	adds	r2, #67	; 0x43
 80075c6:	9800      	ldr	r0, [sp, #0]
 80075c8:	9e08      	ldr	r6, [sp, #32]
 80075ca:	47b0      	blx	r6
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d025      	beq.n	800761c <_printf_common+0xa4>
 80075d0:	2306      	movs	r3, #6
 80075d2:	6820      	ldr	r0, [r4, #0]
 80075d4:	682a      	ldr	r2, [r5, #0]
 80075d6:	68e1      	ldr	r1, [r4, #12]
 80075d8:	4003      	ands	r3, r0
 80075da:	2500      	movs	r5, #0
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d103      	bne.n	80075e8 <_printf_common+0x70>
 80075e0:	1a8d      	subs	r5, r1, r2
 80075e2:	43eb      	mvns	r3, r5
 80075e4:	17db      	asrs	r3, r3, #31
 80075e6:	401d      	ands	r5, r3
 80075e8:	68a3      	ldr	r3, [r4, #8]
 80075ea:	6922      	ldr	r2, [r4, #16]
 80075ec:	4293      	cmp	r3, r2
 80075ee:	dd01      	ble.n	80075f4 <_printf_common+0x7c>
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	18ed      	adds	r5, r5, r3
 80075f4:	2700      	movs	r7, #0
 80075f6:	42bd      	cmp	r5, r7
 80075f8:	d120      	bne.n	800763c <_printf_common+0xc4>
 80075fa:	2000      	movs	r0, #0
 80075fc:	e010      	b.n	8007620 <_printf_common+0xa8>
 80075fe:	3701      	adds	r7, #1
 8007600:	68e3      	ldr	r3, [r4, #12]
 8007602:	682a      	ldr	r2, [r5, #0]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	42bb      	cmp	r3, r7
 8007608:	ddd2      	ble.n	80075b0 <_printf_common+0x38>
 800760a:	0022      	movs	r2, r4
 800760c:	2301      	movs	r3, #1
 800760e:	3219      	adds	r2, #25
 8007610:	9901      	ldr	r1, [sp, #4]
 8007612:	9800      	ldr	r0, [sp, #0]
 8007614:	9e08      	ldr	r6, [sp, #32]
 8007616:	47b0      	blx	r6
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d1f0      	bne.n	80075fe <_printf_common+0x86>
 800761c:	2001      	movs	r0, #1
 800761e:	4240      	negs	r0, r0
 8007620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007622:	2030      	movs	r0, #48	; 0x30
 8007624:	18e1      	adds	r1, r4, r3
 8007626:	3143      	adds	r1, #67	; 0x43
 8007628:	7008      	strb	r0, [r1, #0]
 800762a:	0021      	movs	r1, r4
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	3145      	adds	r1, #69	; 0x45
 8007630:	7809      	ldrb	r1, [r1, #0]
 8007632:	18a2      	adds	r2, r4, r2
 8007634:	3243      	adds	r2, #67	; 0x43
 8007636:	3302      	adds	r3, #2
 8007638:	7011      	strb	r1, [r2, #0]
 800763a:	e7c1      	b.n	80075c0 <_printf_common+0x48>
 800763c:	0022      	movs	r2, r4
 800763e:	2301      	movs	r3, #1
 8007640:	321a      	adds	r2, #26
 8007642:	9901      	ldr	r1, [sp, #4]
 8007644:	9800      	ldr	r0, [sp, #0]
 8007646:	9e08      	ldr	r6, [sp, #32]
 8007648:	47b0      	blx	r6
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d0e6      	beq.n	800761c <_printf_common+0xa4>
 800764e:	3701      	adds	r7, #1
 8007650:	e7d1      	b.n	80075f6 <_printf_common+0x7e>
	...

08007654 <_printf_i>:
 8007654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	9204      	str	r2, [sp, #16]
 800765a:	000a      	movs	r2, r1
 800765c:	3243      	adds	r2, #67	; 0x43
 800765e:	9305      	str	r3, [sp, #20]
 8007660:	9003      	str	r0, [sp, #12]
 8007662:	9202      	str	r2, [sp, #8]
 8007664:	7e0a      	ldrb	r2, [r1, #24]
 8007666:	000c      	movs	r4, r1
 8007668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800766a:	2a6e      	cmp	r2, #110	; 0x6e
 800766c:	d100      	bne.n	8007670 <_printf_i+0x1c>
 800766e:	e086      	b.n	800777e <_printf_i+0x12a>
 8007670:	d81f      	bhi.n	80076b2 <_printf_i+0x5e>
 8007672:	2a63      	cmp	r2, #99	; 0x63
 8007674:	d033      	beq.n	80076de <_printf_i+0x8a>
 8007676:	d808      	bhi.n	800768a <_printf_i+0x36>
 8007678:	2a00      	cmp	r2, #0
 800767a:	d100      	bne.n	800767e <_printf_i+0x2a>
 800767c:	e08c      	b.n	8007798 <_printf_i+0x144>
 800767e:	2a58      	cmp	r2, #88	; 0x58
 8007680:	d04d      	beq.n	800771e <_printf_i+0xca>
 8007682:	0025      	movs	r5, r4
 8007684:	3542      	adds	r5, #66	; 0x42
 8007686:	702a      	strb	r2, [r5, #0]
 8007688:	e030      	b.n	80076ec <_printf_i+0x98>
 800768a:	2a64      	cmp	r2, #100	; 0x64
 800768c:	d001      	beq.n	8007692 <_printf_i+0x3e>
 800768e:	2a69      	cmp	r2, #105	; 0x69
 8007690:	d1f7      	bne.n	8007682 <_printf_i+0x2e>
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	6825      	ldr	r5, [r4, #0]
 8007696:	1d0a      	adds	r2, r1, #4
 8007698:	0628      	lsls	r0, r5, #24
 800769a:	d529      	bpl.n	80076f0 <_printf_i+0x9c>
 800769c:	6808      	ldr	r0, [r1, #0]
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	2800      	cmp	r0, #0
 80076a2:	da03      	bge.n	80076ac <_printf_i+0x58>
 80076a4:	232d      	movs	r3, #45	; 0x2d
 80076a6:	9a02      	ldr	r2, [sp, #8]
 80076a8:	4240      	negs	r0, r0
 80076aa:	7013      	strb	r3, [r2, #0]
 80076ac:	4e6b      	ldr	r6, [pc, #428]	; (800785c <_printf_i+0x208>)
 80076ae:	270a      	movs	r7, #10
 80076b0:	e04f      	b.n	8007752 <_printf_i+0xfe>
 80076b2:	2a73      	cmp	r2, #115	; 0x73
 80076b4:	d074      	beq.n	80077a0 <_printf_i+0x14c>
 80076b6:	d808      	bhi.n	80076ca <_printf_i+0x76>
 80076b8:	2a6f      	cmp	r2, #111	; 0x6f
 80076ba:	d01f      	beq.n	80076fc <_printf_i+0xa8>
 80076bc:	2a70      	cmp	r2, #112	; 0x70
 80076be:	d1e0      	bne.n	8007682 <_printf_i+0x2e>
 80076c0:	2220      	movs	r2, #32
 80076c2:	6809      	ldr	r1, [r1, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	e003      	b.n	80076d2 <_printf_i+0x7e>
 80076ca:	2a75      	cmp	r2, #117	; 0x75
 80076cc:	d016      	beq.n	80076fc <_printf_i+0xa8>
 80076ce:	2a78      	cmp	r2, #120	; 0x78
 80076d0:	d1d7      	bne.n	8007682 <_printf_i+0x2e>
 80076d2:	0022      	movs	r2, r4
 80076d4:	2178      	movs	r1, #120	; 0x78
 80076d6:	3245      	adds	r2, #69	; 0x45
 80076d8:	7011      	strb	r1, [r2, #0]
 80076da:	4e61      	ldr	r6, [pc, #388]	; (8007860 <_printf_i+0x20c>)
 80076dc:	e022      	b.n	8007724 <_printf_i+0xd0>
 80076de:	0025      	movs	r5, r4
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	3542      	adds	r5, #66	; 0x42
 80076e4:	1d11      	adds	r1, r2, #4
 80076e6:	6019      	str	r1, [r3, #0]
 80076e8:	6813      	ldr	r3, [r2, #0]
 80076ea:	702b      	strb	r3, [r5, #0]
 80076ec:	2301      	movs	r3, #1
 80076ee:	e065      	b.n	80077bc <_printf_i+0x168>
 80076f0:	6808      	ldr	r0, [r1, #0]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	0669      	lsls	r1, r5, #25
 80076f6:	d5d3      	bpl.n	80076a0 <_printf_i+0x4c>
 80076f8:	b200      	sxth	r0, r0
 80076fa:	e7d1      	b.n	80076a0 <_printf_i+0x4c>
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	6825      	ldr	r5, [r4, #0]
 8007700:	1d08      	adds	r0, r1, #4
 8007702:	6018      	str	r0, [r3, #0]
 8007704:	6808      	ldr	r0, [r1, #0]
 8007706:	062e      	lsls	r6, r5, #24
 8007708:	d505      	bpl.n	8007716 <_printf_i+0xc2>
 800770a:	4e54      	ldr	r6, [pc, #336]	; (800785c <_printf_i+0x208>)
 800770c:	2708      	movs	r7, #8
 800770e:	2a6f      	cmp	r2, #111	; 0x6f
 8007710:	d01b      	beq.n	800774a <_printf_i+0xf6>
 8007712:	270a      	movs	r7, #10
 8007714:	e019      	b.n	800774a <_printf_i+0xf6>
 8007716:	066d      	lsls	r5, r5, #25
 8007718:	d5f7      	bpl.n	800770a <_printf_i+0xb6>
 800771a:	b280      	uxth	r0, r0
 800771c:	e7f5      	b.n	800770a <_printf_i+0xb6>
 800771e:	3145      	adds	r1, #69	; 0x45
 8007720:	4e4e      	ldr	r6, [pc, #312]	; (800785c <_printf_i+0x208>)
 8007722:	700a      	strb	r2, [r1, #0]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	1d01      	adds	r1, r0, #4
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	0615      	lsls	r5, r2, #24
 8007730:	d521      	bpl.n	8007776 <_printf_i+0x122>
 8007732:	07d3      	lsls	r3, r2, #31
 8007734:	d502      	bpl.n	800773c <_printf_i+0xe8>
 8007736:	2320      	movs	r3, #32
 8007738:	431a      	orrs	r2, r3
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	2710      	movs	r7, #16
 800773e:	2800      	cmp	r0, #0
 8007740:	d103      	bne.n	800774a <_printf_i+0xf6>
 8007742:	2320      	movs	r3, #32
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	439a      	bics	r2, r3
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	0023      	movs	r3, r4
 800774c:	2200      	movs	r2, #0
 800774e:	3343      	adds	r3, #67	; 0x43
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	db58      	blt.n	800780c <_printf_i+0x1b8>
 800775a:	2204      	movs	r2, #4
 800775c:	6821      	ldr	r1, [r4, #0]
 800775e:	4391      	bics	r1, r2
 8007760:	6021      	str	r1, [r4, #0]
 8007762:	2800      	cmp	r0, #0
 8007764:	d154      	bne.n	8007810 <_printf_i+0x1bc>
 8007766:	9d02      	ldr	r5, [sp, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05a      	beq.n	8007822 <_printf_i+0x1ce>
 800776c:	0025      	movs	r5, r4
 800776e:	7833      	ldrb	r3, [r6, #0]
 8007770:	3542      	adds	r5, #66	; 0x42
 8007772:	702b      	strb	r3, [r5, #0]
 8007774:	e055      	b.n	8007822 <_printf_i+0x1ce>
 8007776:	0655      	lsls	r5, r2, #25
 8007778:	d5db      	bpl.n	8007732 <_printf_i+0xde>
 800777a:	b280      	uxth	r0, r0
 800777c:	e7d9      	b.n	8007732 <_printf_i+0xde>
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	680d      	ldr	r5, [r1, #0]
 8007782:	1d10      	adds	r0, r2, #4
 8007784:	6949      	ldr	r1, [r1, #20]
 8007786:	6018      	str	r0, [r3, #0]
 8007788:	6813      	ldr	r3, [r2, #0]
 800778a:	062e      	lsls	r6, r5, #24
 800778c:	d501      	bpl.n	8007792 <_printf_i+0x13e>
 800778e:	6019      	str	r1, [r3, #0]
 8007790:	e002      	b.n	8007798 <_printf_i+0x144>
 8007792:	066d      	lsls	r5, r5, #25
 8007794:	d5fb      	bpl.n	800778e <_printf_i+0x13a>
 8007796:	8019      	strh	r1, [r3, #0]
 8007798:	2300      	movs	r3, #0
 800779a:	9d02      	ldr	r5, [sp, #8]
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	e04f      	b.n	8007840 <_printf_i+0x1ec>
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	1d11      	adds	r1, r2, #4
 80077a4:	6019      	str	r1, [r3, #0]
 80077a6:	6815      	ldr	r5, [r2, #0]
 80077a8:	2100      	movs	r1, #0
 80077aa:	6862      	ldr	r2, [r4, #4]
 80077ac:	0028      	movs	r0, r5
 80077ae:	f000 f915 	bl	80079dc <memchr>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d001      	beq.n	80077ba <_printf_i+0x166>
 80077b6:	1b40      	subs	r0, r0, r5
 80077b8:	6060      	str	r0, [r4, #4]
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	2300      	movs	r3, #0
 80077c0:	9a02      	ldr	r2, [sp, #8]
 80077c2:	7013      	strb	r3, [r2, #0]
 80077c4:	e03c      	b.n	8007840 <_printf_i+0x1ec>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	002a      	movs	r2, r5
 80077ca:	9904      	ldr	r1, [sp, #16]
 80077cc:	9803      	ldr	r0, [sp, #12]
 80077ce:	9d05      	ldr	r5, [sp, #20]
 80077d0:	47a8      	blx	r5
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d03e      	beq.n	8007854 <_printf_i+0x200>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	079b      	lsls	r3, r3, #30
 80077da:	d415      	bmi.n	8007808 <_printf_i+0x1b4>
 80077dc:	9b07      	ldr	r3, [sp, #28]
 80077de:	68e0      	ldr	r0, [r4, #12]
 80077e0:	4298      	cmp	r0, r3
 80077e2:	da39      	bge.n	8007858 <_printf_i+0x204>
 80077e4:	0018      	movs	r0, r3
 80077e6:	e037      	b.n	8007858 <_printf_i+0x204>
 80077e8:	0022      	movs	r2, r4
 80077ea:	2301      	movs	r3, #1
 80077ec:	3219      	adds	r2, #25
 80077ee:	9904      	ldr	r1, [sp, #16]
 80077f0:	9803      	ldr	r0, [sp, #12]
 80077f2:	9e05      	ldr	r6, [sp, #20]
 80077f4:	47b0      	blx	r6
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d02c      	beq.n	8007854 <_printf_i+0x200>
 80077fa:	3501      	adds	r5, #1
 80077fc:	68e3      	ldr	r3, [r4, #12]
 80077fe:	9a07      	ldr	r2, [sp, #28]
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	42ab      	cmp	r3, r5
 8007804:	dcf0      	bgt.n	80077e8 <_printf_i+0x194>
 8007806:	e7e9      	b.n	80077dc <_printf_i+0x188>
 8007808:	2500      	movs	r5, #0
 800780a:	e7f7      	b.n	80077fc <_printf_i+0x1a8>
 800780c:	2800      	cmp	r0, #0
 800780e:	d0ad      	beq.n	800776c <_printf_i+0x118>
 8007810:	9d02      	ldr	r5, [sp, #8]
 8007812:	0039      	movs	r1, r7
 8007814:	f7f8 fd02 	bl	800021c <__aeabi_uidivmod>
 8007818:	5c73      	ldrb	r3, [r6, r1]
 800781a:	3d01      	subs	r5, #1
 800781c:	702b      	strb	r3, [r5, #0]
 800781e:	2800      	cmp	r0, #0
 8007820:	d1f7      	bne.n	8007812 <_printf_i+0x1be>
 8007822:	2f08      	cmp	r7, #8
 8007824:	d109      	bne.n	800783a <_printf_i+0x1e6>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	07db      	lsls	r3, r3, #31
 800782a:	d506      	bpl.n	800783a <_printf_i+0x1e6>
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	6922      	ldr	r2, [r4, #16]
 8007830:	4293      	cmp	r3, r2
 8007832:	dc02      	bgt.n	800783a <_printf_i+0x1e6>
 8007834:	2330      	movs	r3, #48	; 0x30
 8007836:	3d01      	subs	r5, #1
 8007838:	702b      	strb	r3, [r5, #0]
 800783a:	9b02      	ldr	r3, [sp, #8]
 800783c:	1b5b      	subs	r3, r3, r5
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	9b05      	ldr	r3, [sp, #20]
 8007842:	aa07      	add	r2, sp, #28
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	0021      	movs	r1, r4
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	9803      	ldr	r0, [sp, #12]
 800784c:	f7ff fe94 	bl	8007578 <_printf_common>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d1b8      	bne.n	80077c6 <_printf_i+0x172>
 8007854:	2001      	movs	r0, #1
 8007856:	4240      	negs	r0, r0
 8007858:	b009      	add	sp, #36	; 0x24
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	0800806d 	.word	0x0800806d
 8007860:	0800807e 	.word	0x0800807e

08007864 <_sbrk_r>:
 8007864:	2300      	movs	r3, #0
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	4c06      	ldr	r4, [pc, #24]	; (8007884 <_sbrk_r+0x20>)
 800786a:	0005      	movs	r5, r0
 800786c:	0008      	movs	r0, r1
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	f7fb f9c2 	bl	8002bf8 <_sbrk>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d103      	bne.n	8007880 <_sbrk_r+0x1c>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d000      	beq.n	8007880 <_sbrk_r+0x1c>
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	200014e4 	.word	0x200014e4

08007888 <__sread>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	000c      	movs	r4, r1
 800788c:	250e      	movs	r5, #14
 800788e:	5f49      	ldrsh	r1, [r1, r5]
 8007890:	f000 f8b2 	bl	80079f8 <_read_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	db03      	blt.n	80078a0 <__sread+0x18>
 8007898:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800789a:	181b      	adds	r3, r3, r0
 800789c:	6563      	str	r3, [r4, #84]	; 0x54
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	4a02      	ldr	r2, [pc, #8]	; (80078ac <__sread+0x24>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	e7f9      	b.n	800789e <__sread+0x16>
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	ffffefff 	.word	0xffffefff

080078b0 <__swrite>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	001f      	movs	r7, r3
 80078b4:	898b      	ldrh	r3, [r1, #12]
 80078b6:	0005      	movs	r5, r0
 80078b8:	000c      	movs	r4, r1
 80078ba:	0016      	movs	r6, r2
 80078bc:	05db      	lsls	r3, r3, #23
 80078be:	d505      	bpl.n	80078cc <__swrite+0x1c>
 80078c0:	230e      	movs	r3, #14
 80078c2:	5ec9      	ldrsh	r1, [r1, r3]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2302      	movs	r3, #2
 80078c8:	f000 f874 	bl	80079b4 <_lseek_r>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <__swrite+0x34>)
 80078d0:	0028      	movs	r0, r5
 80078d2:	4013      	ands	r3, r2
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	0032      	movs	r2, r6
 80078d8:	230e      	movs	r3, #14
 80078da:	5ee1      	ldrsh	r1, [r4, r3]
 80078dc:	003b      	movs	r3, r7
 80078de:	f000 f81f 	bl	8007920 <_write_r>
 80078e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e4:	ffffefff 	.word	0xffffefff

080078e8 <__sseek>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	000c      	movs	r4, r1
 80078ec:	250e      	movs	r5, #14
 80078ee:	5f49      	ldrsh	r1, [r1, r5]
 80078f0:	f000 f860 	bl	80079b4 <_lseek_r>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	1c42      	adds	r2, r0, #1
 80078f8:	d103      	bne.n	8007902 <__sseek+0x1a>
 80078fa:	4a05      	ldr	r2, [pc, #20]	; (8007910 <__sseek+0x28>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	2280      	movs	r2, #128	; 0x80
 8007904:	0152      	lsls	r2, r2, #5
 8007906:	4313      	orrs	r3, r2
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	6560      	str	r0, [r4, #84]	; 0x54
 800790c:	e7f8      	b.n	8007900 <__sseek+0x18>
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	ffffefff 	.word	0xffffefff

08007914 <__sclose>:
 8007914:	b510      	push	{r4, lr}
 8007916:	230e      	movs	r3, #14
 8007918:	5ec9      	ldrsh	r1, [r1, r3]
 800791a:	f000 f815 	bl	8007948 <_close_r>
 800791e:	bd10      	pop	{r4, pc}

08007920 <_write_r>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	0005      	movs	r5, r0
 8007924:	0008      	movs	r0, r1
 8007926:	0011      	movs	r1, r2
 8007928:	2200      	movs	r2, #0
 800792a:	4c06      	ldr	r4, [pc, #24]	; (8007944 <_write_r+0x24>)
 800792c:	6022      	str	r2, [r4, #0]
 800792e:	001a      	movs	r2, r3
 8007930:	f7fb f919 	bl	8002b66 <_write>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d103      	bne.n	8007940 <_write_r+0x20>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d000      	beq.n	8007940 <_write_r+0x20>
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	200014e4 	.word	0x200014e4

08007948 <_close_r>:
 8007948:	2300      	movs	r3, #0
 800794a:	b570      	push	{r4, r5, r6, lr}
 800794c:	4c06      	ldr	r4, [pc, #24]	; (8007968 <_close_r+0x20>)
 800794e:	0005      	movs	r5, r0
 8007950:	0008      	movs	r0, r1
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	f7fb f923 	bl	8002b9e <_close>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d103      	bne.n	8007964 <_close_r+0x1c>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d000      	beq.n	8007964 <_close_r+0x1c>
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	200014e4 	.word	0x200014e4

0800796c <_fstat_r>:
 800796c:	2300      	movs	r3, #0
 800796e:	b570      	push	{r4, r5, r6, lr}
 8007970:	4c06      	ldr	r4, [pc, #24]	; (800798c <_fstat_r+0x20>)
 8007972:	0005      	movs	r5, r0
 8007974:	0008      	movs	r0, r1
 8007976:	0011      	movs	r1, r2
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	f7fb f91a 	bl	8002bb2 <_fstat>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d103      	bne.n	800798a <_fstat_r+0x1e>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d000      	beq.n	800798a <_fstat_r+0x1e>
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	200014e4 	.word	0x200014e4

08007990 <_isatty_r>:
 8007990:	2300      	movs	r3, #0
 8007992:	b570      	push	{r4, r5, r6, lr}
 8007994:	4c06      	ldr	r4, [pc, #24]	; (80079b0 <_isatty_r+0x20>)
 8007996:	0005      	movs	r5, r0
 8007998:	0008      	movs	r0, r1
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	f7fb f917 	bl	8002bce <_isatty>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d103      	bne.n	80079ac <_isatty_r+0x1c>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d000      	beq.n	80079ac <_isatty_r+0x1c>
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	bd70      	pop	{r4, r5, r6, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	200014e4 	.word	0x200014e4

080079b4 <_lseek_r>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	0005      	movs	r5, r0
 80079b8:	0008      	movs	r0, r1
 80079ba:	0011      	movs	r1, r2
 80079bc:	2200      	movs	r2, #0
 80079be:	4c06      	ldr	r4, [pc, #24]	; (80079d8 <_lseek_r+0x24>)
 80079c0:	6022      	str	r2, [r4, #0]
 80079c2:	001a      	movs	r2, r3
 80079c4:	f7fb f90c 	bl	8002be0 <_lseek>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d103      	bne.n	80079d4 <_lseek_r+0x20>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d000      	beq.n	80079d4 <_lseek_r+0x20>
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	200014e4 	.word	0x200014e4

080079dc <memchr>:
 80079dc:	b2c9      	uxtb	r1, r1
 80079de:	1882      	adds	r2, r0, r2
 80079e0:	4290      	cmp	r0, r2
 80079e2:	d101      	bne.n	80079e8 <memchr+0xc>
 80079e4:	2000      	movs	r0, #0
 80079e6:	4770      	bx	lr
 80079e8:	7803      	ldrb	r3, [r0, #0]
 80079ea:	428b      	cmp	r3, r1
 80079ec:	d0fb      	beq.n	80079e6 <memchr+0xa>
 80079ee:	3001      	adds	r0, #1
 80079f0:	e7f6      	b.n	80079e0 <memchr+0x4>

080079f2 <__malloc_lock>:
 80079f2:	4770      	bx	lr

080079f4 <__malloc_unlock>:
 80079f4:	4770      	bx	lr
	...

080079f8 <_read_r>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	0005      	movs	r5, r0
 80079fc:	0008      	movs	r0, r1
 80079fe:	0011      	movs	r1, r2
 8007a00:	2200      	movs	r2, #0
 8007a02:	4c06      	ldr	r4, [pc, #24]	; (8007a1c <_read_r+0x24>)
 8007a04:	6022      	str	r2, [r4, #0]
 8007a06:	001a      	movs	r2, r3
 8007a08:	f7fb f890 	bl	8002b2c <_read>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d103      	bne.n	8007a18 <_read_r+0x20>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d000      	beq.n	8007a18 <_read_r+0x20>
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	200014e4 	.word	0x200014e4

08007a20 <_init>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr

08007a2c <_fini>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr
