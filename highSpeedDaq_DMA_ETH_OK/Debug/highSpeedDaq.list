
highSpeedDaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a490  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001088  0800a678  0800a678  0001a678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b700  0800b700  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b700  0800b700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b708  0800b708  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ec0  200001e0  0800b8f0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200060a0  0800b8f0  000260a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c92  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006234  00000000  00000000  00048e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b6a2  00000000  00000000  0004f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f10  00000000  00000000  0005a778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014b0  00000000  00000000  0005b688  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002a15a  00000000  00000000  0005cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00019ed5  00000000  00000000  00086c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c8d18  00000000  00000000  000a0b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016987f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cd8  00000000  00000000  001698fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a660 	.word	0x0800a660

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800a660 	.word	0x0800a660

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b974 	b.w	8000f40 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	4604      	mov	r4, r0
 8000c78:	9e08      	ldr	r6, [sp, #32]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d14b      	bne.n	8000d16 <__udivmoddi4+0xa6>
 8000c7e:	428a      	cmp	r2, r1
 8000c80:	4615      	mov	r5, r2
 8000c82:	d967      	bls.n	8000d54 <__udivmoddi4+0xe4>
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	b14a      	cbz	r2, 8000c9e <__udivmoddi4+0x2e>
 8000c8a:	f1c2 0720 	rsb	r7, r2, #32
 8000c8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c92:	fa20 f707 	lsr.w	r7, r0, r7
 8000c96:	4095      	lsls	r5, r2
 8000c98:	ea47 0c03 	orr.w	ip, r7, r3
 8000c9c:	4094      	lsls	r4, r2
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	fbbc f7fe 	udiv	r7, ip, lr
 8000ca6:	fa1f f885 	uxth.w	r8, r5
 8000caa:	fb0e c317 	mls	r3, lr, r7, ip
 8000cae:	fb07 f908 	mul.w	r9, r7, r8
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb8:	4599      	cmp	r9, r3
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x60>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f107 31ff 	add.w	r1, r7, #4294967295
 8000cc2:	f080 811c 	bcs.w	8000efe <__udivmoddi4+0x28e>
 8000cc6:	4599      	cmp	r9, r3
 8000cc8:	f240 8119 	bls.w	8000efe <__udivmoddi4+0x28e>
 8000ccc:	3f02      	subs	r7, #2
 8000cce:	442b      	add	r3, r5
 8000cd0:	eba3 0309 	sub.w	r3, r3, r9
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	fb00 f108 	mul.w	r1, r0, r8
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x8e>
 8000cea:	192c      	adds	r4, r5, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	f080 8107 	bcs.w	8000f02 <__udivmoddi4+0x292>
 8000cf4:	42a1      	cmp	r1, r4
 8000cf6:	f240 8104 	bls.w	8000f02 <__udivmoddi4+0x292>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d02:	2700      	movs	r7, #0
 8000d04:	1a64      	subs	r4, r4, r1
 8000d06:	b11e      	cbz	r6, 8000d10 <__udivmoddi4+0xa0>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	40d4      	lsrs	r4, r2
 8000d0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0xbe>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	f000 80ec 	beq.w	8000ef8 <__udivmoddi4+0x288>
 8000d20:	2700      	movs	r7, #0
 8000d22:	e9c6 0100 	strd	r0, r1, [r6]
 8000d26:	4638      	mov	r0, r7
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f783 	clz	r7, r3
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d148      	bne.n	8000dc8 <__udivmoddi4+0x158>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd0>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80fb 	bhi.w	8000f36 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0303 	sbc.w	r3, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	469c      	mov	ip, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d0e0      	beq.n	8000d10 <__udivmoddi4+0xa0>
 8000d4e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d52:	e7dd      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xe8>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 808f 	bne.w	8000e80 <__udivmoddi4+0x210>
 8000d62:	2701      	movs	r7, #1
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d6a:	fa1f f985 	uxth.w	r9, r5
 8000d6e:	fbb1 fef8 	udiv	lr, r1, r8
 8000d72:	fb08 111e 	mls	r1, r8, lr, r1
 8000d76:	fb09 f00e 	mul.w	r0, r9, lr
 8000d7a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000d7e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x126>
 8000d86:	18eb      	adds	r3, r5, r3
 8000d88:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x124>
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	f200 80cd 	bhi.w	8000f2e <__udivmoddi4+0x2be>
 8000d94:	468e      	mov	lr, r1
 8000d96:	1a1b      	subs	r3, r3, r0
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	fb09 f900 	mul.w	r9, r9, r0
 8000da4:	b2a4      	uxth	r4, r4
 8000da6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x14e>
 8000dae:	192c      	adds	r4, r5, r4
 8000db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x14c>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f200 80b6 	bhi.w	8000f28 <__udivmoddi4+0x2b8>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dc6:	e79e      	b.n	8000d06 <__udivmoddi4+0x96>
 8000dc8:	f1c7 0520 	rsb	r5, r7, #32
 8000dcc:	40bb      	lsls	r3, r7
 8000dce:	fa22 fc05 	lsr.w	ip, r2, r5
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa21 f405 	lsr.w	r4, r1, r5
 8000dda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dde:	fbb4 f9fe 	udiv	r9, r4, lr
 8000de2:	fa1f f88c 	uxth.w	r8, ip
 8000de6:	fb0e 4419 	mls	r4, lr, r9, r4
 8000dea:	fa20 f305 	lsr.w	r3, r0, r5
 8000dee:	40b9      	lsls	r1, r7
 8000df0:	fb09 fa08 	mul.w	sl, r9, r8
 8000df4:	4319      	orrs	r1, r3
 8000df6:	0c0b      	lsrs	r3, r1, #16
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000e02:	fa00 f307 	lsl.w	r3, r0, r7
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b0>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2b4>
 8000e14:	45a2      	cmp	sl, r4
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2b4>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4464      	add	r4, ip
 8000e20:	eba4 040a 	sub.w	r4, r4, sl
 8000e24:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e28:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e2c:	fb00 fa08 	mul.w	sl, r0, r8
 8000e30:	b289      	uxth	r1, r1
 8000e32:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e36:	45a2      	cmp	sl, r4
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x1dc>
 8000e3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e42:	d26b      	bcs.n	8000f1c <__udivmoddi4+0x2ac>
 8000e44:	45a2      	cmp	sl, r4
 8000e46:	d969      	bls.n	8000f1c <__udivmoddi4+0x2ac>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4464      	add	r4, ip
 8000e4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e50:	fba0 8902 	umull	r8, r9, r0, r2
 8000e54:	eba4 040a 	sub.w	r4, r4, sl
 8000e58:	454c      	cmp	r4, r9
 8000e5a:	4641      	mov	r1, r8
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	d354      	bcc.n	8000f0a <__udivmoddi4+0x29a>
 8000e60:	d051      	beq.n	8000f06 <__udivmoddi4+0x296>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d069      	beq.n	8000f3a <__udivmoddi4+0x2ca>
 8000e66:	1a5a      	subs	r2, r3, r1
 8000e68:	eb64 040e 	sbc.w	r4, r4, lr
 8000e6c:	fa04 f505 	lsl.w	r5, r4, r5
 8000e70:	fa22 f307 	lsr.w	r3, r2, r7
 8000e74:	40fc      	lsrs	r4, r7
 8000e76:	431d      	orrs	r5, r3
 8000e78:	e9c6 5400 	strd	r5, r4, [r6]
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	e747      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000e80:	4095      	lsls	r5, r2
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	fa21 f003 	lsr.w	r0, r1, r3
 8000e8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000e8e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000e92:	fa1f f985 	uxth.w	r9, r5
 8000e96:	fb08 0017 	mls	r0, r8, r7, r0
 8000e9a:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	fb07 fc09 	mul.w	ip, r7, r9
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	0c19      	lsrs	r1, r3, #16
 8000ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eac:	458c      	cmp	ip, r1
 8000eae:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x254>
 8000eb4:	1869      	adds	r1, r5, r1
 8000eb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000eba:	d231      	bcs.n	8000f20 <__udivmoddi4+0x2b0>
 8000ebc:	458c      	cmp	ip, r1
 8000ebe:	d92f      	bls.n	8000f20 <__udivmoddi4+0x2b0>
 8000ec0:	3f02      	subs	r7, #2
 8000ec2:	4429      	add	r1, r5
 8000ec4:	eba1 010c 	sub.w	r1, r1, ip
 8000ec8:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ecc:	fb08 1c10 	mls	ip, r8, r0, r1
 8000ed0:	fb00 fe09 	mul.w	lr, r0, r9
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eda:	458e      	cmp	lr, r1
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x27e>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee4:	d218      	bcs.n	8000f18 <__udivmoddi4+0x2a8>
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d916      	bls.n	8000f18 <__udivmoddi4+0x2a8>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	eba1 010e 	sub.w	r1, r1, lr
 8000ef2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ef6:	e73a      	b.n	8000d6e <__udivmoddi4+0xfe>
 8000ef8:	4637      	mov	r7, r6
 8000efa:	4630      	mov	r0, r6
 8000efc:	e708      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000efe:	460f      	mov	r7, r1
 8000f00:	e6e6      	b.n	8000cd0 <__udivmoddi4+0x60>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e6fb      	b.n	8000cfe <__udivmoddi4+0x8e>
 8000f06:	4543      	cmp	r3, r8
 8000f08:	d2ab      	bcs.n	8000e62 <__udivmoddi4+0x1f2>
 8000f0a:	ebb8 0102 	subs.w	r1, r8, r2
 8000f0e:	eb69 020c 	sbc.w	r2, r9, ip
 8000f12:	3801      	subs	r0, #1
 8000f14:	4696      	mov	lr, r2
 8000f16:	e7a4      	b.n	8000e62 <__udivmoddi4+0x1f2>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e7e8      	b.n	8000eee <__udivmoddi4+0x27e>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e795      	b.n	8000e4c <__udivmoddi4+0x1dc>
 8000f20:	4607      	mov	r7, r0
 8000f22:	e7cf      	b.n	8000ec4 <__udivmoddi4+0x254>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	442c      	add	r4, r5
 8000f2c:	e747      	b.n	8000dbe <__udivmoddi4+0x14e>
 8000f2e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f32:	442b      	add	r3, r5
 8000f34:	e72f      	b.n	8000d96 <__udivmoddi4+0x126>
 8000f36:	4638      	mov	r0, r7
 8000f38:	e707      	b.n	8000d4a <__udivmoddi4+0xda>
 8000f3a:	4637      	mov	r7, r6
 8000f3c:	e6e8      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <AD7768_writeReg>:
#include "debug.h"

extern SPI_HandleTypeDef hspi3;

void AD7768_writeReg(uint8_t addr, uint8_t value)
{
 8000f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[2];
	uint8_t read[2];

	buf[0] = (addr & 0x7F);
	buf[1] = value;
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f46:	4c0e      	ldr	r4, [pc, #56]	; (8000f80 <AD7768_writeReg+0x3c>)
	buf[0] = (addr & 0x7F);
 8000f48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f4c:	f88d 0008 	strb.w	r0, [sp, #8]
	buf[1] = value;
 8000f50:	f88d 1009 	strb.w	r1, [sp, #9]
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f54:	4620      	mov	r0, r4
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	f001 fcbb 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	aa03      	add	r2, sp, #12
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	a902      	add	r1, sp, #8
 8000f68:	2302      	movs	r3, #2
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <AD7768_writeReg+0x40>)
 8000f6c:	f002 f8d1 	bl	8003112 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	4620      	mov	r0, r4
 8000f74:	4611      	mov	r1, r2
 8000f76:	f001 fcad 	bl	80028d4 <HAL_GPIO_WritePin>
}
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	40011400 	.word	0x40011400
 8000f84:	20001634 	.word	0x20001634

08000f88 <AD7768_readReg>:


uint8_t AD7768_readReg(uint8_t addr)
{
 8000f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t buf[2];
	uint8_t read[2];
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
	buf[0] = 0x80 | (addr & 0x7F);
	buf[1] = 0x00;
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f8c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 8000f90:	4605      	mov	r5, r0
	buf[1] = 0x00;
 8000f92:	2600      	movs	r6, #0
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f94:	4c1a      	ldr	r4, [pc, #104]	; (8001000 <AD7768_readReg+0x78>)
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f96:	4f1b      	ldr	r7, [pc, #108]	; (8001004 <AD7768_readReg+0x7c>)
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f98:	4620      	mov	r0, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	f001 fc99 	bl	80028d4 <HAL_GPIO_WritePin>
	buf[0] = 0x80 | (addr & 0x7F);
 8000fa2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	aa03      	add	r2, sp, #12
 8000faa:	a902      	add	r1, sp, #8
 8000fac:	f8cd 8000 	str.w	r8, [sp]
 8000fb0:	4638      	mov	r0, r7
	buf[0] = 0x80 | (addr & 0x7F);
 8000fb2:	f88d 5008 	strb.w	r5, [sp, #8]
	buf[1] = 0x00;
 8000fb6:	f88d 6009 	strb.w	r6, [sp, #9]
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fba:	f002 f8aa 	bl	8003112 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	f001 fc86 	bl	80028d4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000fc8:	4632      	mov	r2, r6
 8000fca:	4620      	mov	r0, r4
 8000fcc:	2101      	movs	r1, #1
 8000fce:	f001 fc81 	bl	80028d4 <HAL_GPIO_WritePin>
	buf[0] = 0x80 | (addr & 0x7F);
	buf[1] = 0x00;
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	aa03      	add	r2, sp, #12
 8000fd6:	a902      	add	r1, sp, #8
 8000fd8:	f8cd 8000 	str.w	r8, [sp]
 8000fdc:	4638      	mov	r0, r7
	buf[0] = 0x80 | (addr & 0x7F);
 8000fde:	f88d 5008 	strb.w	r5, [sp, #8]
	buf[1] = 0x00;
 8000fe2:	f88d 6009 	strb.w	r6, [sp, #9]
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fe6:	f002 f894 	bl	8003112 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4611      	mov	r1, r2
 8000ff0:	f001 fc70 	bl	80028d4 <HAL_GPIO_WritePin>

	return read[1];
}
 8000ff4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000ff8:	b004      	add	sp, #16
 8000ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ffe:	bf00      	nop
 8001000:	40011400 	.word	0x40011400
 8001004:	20001634 	.word	0x20001634

08001008 <AD7768_setup>:


void AD7768_setup(uint8_t dClk, uint8_t decRate, uint8_t pwrMode)
{
 8001008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100c:	4606      	mov	r6, r0
	uint8_t readVal = AD7768_readReg(AD7768_REG_REV_ID);
 800100e:	200a      	movs	r0, #10
{
 8001010:	460c      	mov	r4, r1
 8001012:	4615      	mov	r5, r2
	uint8_t readVal = AD7768_readReg(AD7768_REG_REV_ID);
 8001014:	f7ff ffb8 	bl	8000f88 <AD7768_readReg>
 8001018:	4607      	mov	r7, r0

	dbg_printf("readVal : %x  \n", readVal);
 800101a:	4601      	mov	r1, r0
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <AD7768_setup+0x64>)
 800101e:	f005 ffc7 	bl	8006fb0 <iprintf>
	if (readVal != 0x06)
 8001022:	2f06      	cmp	r7, #6
 8001024:	d002      	beq.n	800102c <AD7768_setup+0x24>
	{
		dbg_printf("There is a problem with ADC\n");
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <AD7768_setup+0x68>)
 8001028:	f006 f836 	bl	8007098 <puts>
	}HAL_Delay(100);
 800102c:	2064      	movs	r0, #100	; 0x64
 800102e:	f000 fce3 	bl	80019f8 <HAL_Delay>

	AD7768_writeReg(AD7768_REG_CH_MODE_A, decRate);
 8001032:	4621      	mov	r1, r4
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff ff85 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f000 fcdc 	bl	80019f8 <HAL_Delay>
	AD7768_writeReg(AD7768_REG_PWR_MODE, pwrMode);
 8001040:	4629      	mov	r1, r5
 8001042:	2004      	movs	r0, #4
 8001044:	f7ff ff7e 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f000 fcd5 	bl	80019f8 <HAL_Delay>
	AD7768_writeReg(AD7768_REG_INTERFACE_CFG, dClk);
 800104e:	4631      	mov	r1, r6
 8001050:	2007      	movs	r0, #7
 8001052:	f7ff ff77 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f000 fcce 	bl	80019f8 <HAL_Delay>

	dbg_printf("decRate : %x - pwrMode : %x dClk : %x\n", decRate, pwrMode, dClk);
 800105c:	4633      	mov	r3, r6
 800105e:	462a      	mov	r2, r5
 8001060:	4621      	mov	r1, r4
}
 8001062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dbg_printf("decRate : %x - pwrMode : %x dClk : %x\n", decRate, pwrMode, dClk);
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <AD7768_setup+0x6c>)
 8001068:	f005 bfa2 	b.w	8006fb0 <iprintf>
 800106c:	0800a796 	.word	0x0800a796
 8001070:	0800a7a6 	.word	0x0800a7a6
 8001074:	0800a7c2 	.word	0x0800a7c2

08001078 <debug_init>:

unsigned int dbg_tx_count = 0;


void debug_init()
{
 8001078:	b508      	push	{r3, lr}
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	2100      	movs	r1, #0
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <debug_init+0x18>)
 8001082:	f005 f8a9 	bl	80061d8 <memset>
	dbg_tx_count = 0;
 8001086:	2200      	movs	r2, #0
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <debug_init+0x1c>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	2000122c 	.word	0x2000122c
 8001094:	200001fc 	.word	0x200001fc

08001098 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 8001098:	b538      	push	{r3, r4, r5, lr}
	uint32_t count = 0;

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 800109a:	4c08      	ldr	r4, [pc, #32]	; (80010bc <debug_transmit_buffer+0x24>)
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <debug_transmit_buffer+0x28>)
 800109e:	6825      	ldr	r5, [r4, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	462a      	mov	r2, r5
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <debug_transmit_buffer+0x2c>)
 80010a6:	f005 f88c 	bl	80061c2 <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 80010aa:	b2aa      	uxth	r2, r5
 80010ac:	4601      	mov	r1, r0
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <debug_transmit_buffer+0x30>)
 80010b0:	f002 fb08 	bl	80036c4 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	6023      	str	r3, [r4, #0]
}
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
 80010ba:	bf00      	nop
 80010bc:	200001fc 	.word	0x200001fc
 80010c0:	20000e2c 	.word	0x20000e2c
 80010c4:	2000122c 	.word	0x2000122c
 80010c8:	2000172c 	.word	0x2000172c

080010cc <__io_putchar>:

PUTCHAR_PROTOTYPE
{
	if (ch != '\r')
 80010cc:	280d      	cmp	r0, #13
{
 80010ce:	b510      	push	{r4, lr}
 80010d0:	4604      	mov	r4, r0
	if (ch != '\r')
 80010d2:	d011      	beq.n	80010f8 <__io_putchar+0x2c>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <__io_putchar+0x30>)
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <__io_putchar+0x34>)
 80010d8:	681a      	ldr	r2, [r3, #0]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 80010da:	2c0a      	cmp	r4, #10
		dbg_tx_buffer[dbg_tx_count++] = ch;
 80010dc:	f102 0001 	add.w	r0, r2, #1
 80010e0:	6018      	str	r0, [r3, #0]
 80010e2:	548c      	strb	r4, [r1, r2]
		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 80010e4:	d002      	beq.n	80010ec <__io_putchar+0x20>
 80010e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80010ea:	d305      	bcc.n	80010f8 <__io_putchar+0x2c>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 80010ec:	3202      	adds	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	230d      	movs	r3, #13
 80010f2:	540b      	strb	r3, [r1, r0]
			debug_transmit_buffer();
 80010f4:	f7ff ffd0 	bl	8001098 <debug_transmit_buffer>
		}
	}

	return ch;
}
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	200001fc 	.word	0x200001fc
 8001100:	2000122c 	.word	0x2000122c

08001104 <DWT_Init>:
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
   // if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <DWT_Init+0x1c>)
 8001106:	68d3      	ldr	r3, [r2, #12]
 8001108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110c:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800110e:	2200      	movs	r2, #0
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <DWT_Init+0x20>)
 8001112:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
    //}
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000edf0 	.word	0xe000edf0
 8001124:	e0001000 	.word	0xe0001000

08001128 <HAL_GPIO_EXTI_Callback>:
ip4_addr_t ipaddr_dest;

uint32_t extCnt = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	if (GPIO_Pin == GPIO_PIN_4) {
 8001128:	2810      	cmp	r0, #16
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800112a:	b510      	push	{r4, lr}
	if (GPIO_Pin == GPIO_PIN_4) {
 800112c:	d113      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x2e>
		__HAL_SPI_ENABLE(&hspi1);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_GPIO_EXTI_Callback+0x30>)

		EXTI0_Flag = 1;

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <HAL_GPIO_EXTI_Callback+0x34>)
		__HAL_SPI_ENABLE(&hspi1);
 8001132:	681a      	ldr	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001134:	2140      	movs	r1, #64	; 0x40
		__HAL_SPI_ENABLE(&hspi1);
 8001136:	6813      	ldr	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_GPIO_EXTI_Callback+0x38>)
		__HAL_SPI_ENABLE(&hspi1);
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	6013      	str	r3, [r2, #0]
		EXTI0_Flag = 1;
 8001140:	2201      	movs	r2, #1
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001144:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	f002 0201 	and.w	r2, r2, #1
 800114c:	f001 fbc2 	bl	80028d4 <HAL_GPIO_WritePin>
		extCnt++;
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	6023      	str	r3, [r4, #0]
	}

}
 8001156:	bd10      	pop	{r4, pc}
 8001158:	200016d4 	.word	0x200016d4
 800115c:	20000d08 	.word	0x20000d08
 8001160:	40011400 	.word	0x40011400
 8001164:	20000200 	.word	0x20000200

08001168 <HAL_SPI_RxHalfCpltCallback>:

uint8_t halfSend = 0;
uint8_t errUDP = 0;
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	SPI_RxDMABuffer[0]++;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_SPI_RxHalfCpltCallback+0x18>)
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	3201      	adds	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
	p1->payload = &SPI_RxDMABuffer[0];
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_SPI_RxHalfCpltCallback+0x1c>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	6053      	str	r3, [r2, #4]
	halfSend = 1;
 8001176:	2201      	movs	r2, #1
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_SPI_RxHalfCpltCallback+0x20>)
 800117a:	701a      	strb	r2, [r3, #0]
	if (errUDP)
	{
		dbg_printf("error 1 : %d", errUDP);
	}
*/
}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000201 	.word	0x20000201
 8001184:	2000168c 	.word	0x2000168c
 8001188:	20000d0d 	.word	0x20000d0d

0800118c <HAL_SPI_RxCpltCallback>:

uint8_t fullSend = 0;
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	SPI_RxDMABuffer[SAMPLE_DMA_SIZE * 2 + 4]++;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_SPI_RxCpltCallback+0x20>)
 800118e:	f893 2b04 	ldrb.w	r2, [r3, #2820]	; 0xb04
	p2->payload = &SPI_RxDMABuffer[SAMPLE_DMA_SIZE + 4];
 8001192:	f203 5384 	addw	r3, r3, #1412	; 0x584
	SPI_RxDMABuffer[SAMPLE_DMA_SIZE * 2 + 4]++;
 8001196:	3201      	adds	r2, #1
 8001198:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
	p2->payload = &SPI_RxDMABuffer[SAMPLE_DMA_SIZE + 4];
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_SPI_RxCpltCallback+0x24>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	6053      	str	r3, [r2, #4]
	fullSend = 1;
 80011a2:	2201      	movs	r2, #1
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_SPI_RxCpltCallback+0x28>)
 80011a6:	701a      	strb	r2, [r3, #0]
	if (errUDP)
	{
		dbg_printf("error 2 : %d", errUDP);
	}
*/
}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000201 	.word	0x20000201
 80011b0:	20001630 	.word	0x20001630
 80011b4:	20000d0c 	.word	0x20000d0c

080011b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b530      	push	{r4, r5, lr}
 80011ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011bc:	2210      	movs	r2, #16
 80011be:	2100      	movs	r1, #0
 80011c0:	a80a      	add	r0, sp, #40	; 0x28
 80011c2:	f005 f809 	bl	80061d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	2214      	movs	r2, #20
 80011c8:	2100      	movs	r1, #0
 80011ca:	a801      	add	r0, sp, #4
 80011cc:	f005 f804 	bl	80061d8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	2204      	movs	r2, #4
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80011d8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80011da:	e9cd 3208 	strd	r3, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e6:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80011e8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80011ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011f0:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f6:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80011f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f001 fb7c 	bl	80028f8 <HAL_RCC_OscConfig>
 8001200:	b108      	cbz	r0, 8001206 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001202:	b672      	cpsid	i
 8001204:	e7fe      	b.n	8001204 <SystemClock_Config+0x4c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	e9cd 3004 	strd	r3, r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001216:	4621      	mov	r1, r4
 8001218:	a801      	add	r0, sp, #4
 800121a:	f001 fdd5 	bl	8002dc8 <HAL_RCC_ClockConfig>
 800121e:	b108      	cbz	r0, 8001224 <SystemClock_Config+0x6c>
 8001220:	b672      	cpsid	i
 8001222:	e7fe      	b.n	8001222 <SystemClock_Config+0x6a>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <SystemClock_Config+0x90>)
 8001226:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001230:	62d3      	str	r3, [r2, #44]	; 0x2c
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8001232:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123c:	62d3      	str	r3, [r2, #44]	; 0x2c
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800123e:	4b03      	ldr	r3, [pc, #12]	; (800124c <SystemClock_Config+0x94>)
 8001240:	601d      	str	r5, [r3, #0]
}
 8001242:	b015      	add	sp, #84	; 0x54
 8001244:	bd30      	pop	{r4, r5, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	42420070 	.word	0x42420070

08001250 <main>:
{
 8001250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	4caf      	ldr	r4, [pc, #700]	; (8001514 <main+0x2c4>)
{
 8001256:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001258:	f000 fbaa 	bl	80019b0 <HAL_Init>
  SystemClock_Config();
 800125c:	f7ff ffac 	bl	80011b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	2210      	movs	r2, #16
 8001262:	2100      	movs	r1, #0
 8001264:	a806      	add	r0, sp, #24
 8001266:	f004 ffb7 	bl	80061d8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	61a3      	str	r3, [r4, #24]
 8001274:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 8001276:	f242 0103 	movw	r1, #8195	; 0x2003
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 8001284:	48a4      	ldr	r0, [pc, #656]	; (8001518 <main+0x2c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	61a3      	str	r3, [r4, #24]
 800128c:	69a3      	ldr	r3, [r4, #24]

  /*Configure GPIO pins : ETH_RESET_Pin PD0 ADC_SYNC_START_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	9303      	str	r3, [sp, #12]
 8001296:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001298:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	61a3      	str	r3, [r4, #24]
 80012a2:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	9304      	str	r3, [sp, #16]
 80012ac:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	69a3      	ldr	r3, [r4, #24]
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	61a3      	str	r3, [r4, #24]
 80012b6:	69a3      	ldr	r3, [r4, #24]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	9305      	str	r3, [sp, #20]
 80012be:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 80012c0:	f001 fb08 	bl	80028d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	f242 0303 	movw	r3, #8195	; 0x2003
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c8:	a906      	add	r1, sp, #24
 80012ca:	4893      	ldr	r0, [pc, #588]	; (8001518 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	e9cd 5708 	strd	r5, r7, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f001 fa1e 	bl	8002714 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012d8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012da:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012dc:	4333      	orrs	r3, r6
 80012de:	6163      	str	r3, [r4, #20]
 80012e0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012e2:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e4:	4033      	ands	r3, r6
 80012e6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012e8:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012ec:	f000 fba8 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012f0:	200c      	movs	r0, #12
 80012f2:	f000 fbd9 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80012f6:	462a      	mov	r2, r5
 80012f8:	4629      	mov	r1, r5
 80012fa:	2011      	movs	r0, #17
 80012fc:	f000 fba0 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001300:	2011      	movs	r0, #17
 8001302:	f000 fbd1 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001306:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Instance = SPI3;
 800130a:	4884      	ldr	r0, [pc, #528]	; (800151c <main+0x2cc>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800130c:	4c84      	ldr	r4, [pc, #528]	; (8001520 <main+0x2d0>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800130e:	e9c0 5502 	strd	r5, r5, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001312:	e9c0 4300 	strd	r4, r3, [r0]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001316:	e9c0 5504 	strd	r5, r5, [r0, #16]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800131a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131e:	2408      	movs	r4, #8
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	e9c0 5508 	strd	r5, r5, [r0, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001324:	6285      	str	r5, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001326:	250a      	movs	r5, #10
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001328:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 800132c:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800132e:	f001 fe98 	bl	8003062 <HAL_SPI_Init>
 8001332:	b108      	cbz	r0, 8001338 <main+0xe8>
 8001334:	b672      	cpsid	i
 8001336:	e7fe      	b.n	8001336 <main+0xe6>
  hspi1.Instance = SPI1;
 8001338:	4b7a      	ldr	r3, [pc, #488]	; (8001524 <main+0x2d4>)
 800133a:	4a7b      	ldr	r2, [pc, #492]	; (8001528 <main+0x2d8>)
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133c:	e9c3 7004 	strd	r7, r0, [r3, #16]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001340:	e9c3 2000 	strd	r2, r0, [r3]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001344:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001348:	e9c3 0406 	strd	r0, r4, [r3, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001350:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi1.Init.CRCPolynomial = 10;
 8001354:	e9c3 050a 	strd	r0, r5, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fe82 	bl	8003062 <HAL_SPI_Init>
 800135e:	b108      	cbz	r0, 8001364 <main+0x114>
 8001360:	b672      	cpsid	i
 8001362:	e7fe      	b.n	8001362 <main+0x112>
  huart2.Init.BaudRate = 115200;
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001368:	4b70      	ldr	r3, [pc, #448]	; (800152c <main+0x2dc>)
  huart2.Init.BaudRate = 115200;
 800136a:	4971      	ldr	r1, [pc, #452]	; (8001530 <main+0x2e0>)
  huart2.Init.Mode = UART_MODE_TX;
 800136c:	e9c3 0404 	strd	r0, r4, [r3, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	e9c3 0006 	strd	r0, r0, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001378:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 800137a:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	f002 f973 	bl	8003668 <HAL_UART_Init>
 8001382:	4604      	mov	r4, r0
 8001384:	b108      	cbz	r0, 800138a <main+0x13a>
 8001386:	b672      	cpsid	i
 8001388:	e7fe      	b.n	8001388 <main+0x138>
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, RESET);
 800138a:	4602      	mov	r2, r0
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4861      	ldr	r0, [pc, #388]	; (8001518 <main+0x2c8>)
 8001392:	f001 fa9f 	bl	80028d4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139a:	f000 fb2d 	bl	80019f8 <HAL_Delay>
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, SET);
 800139e:	4632      	mov	r2, r6
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	485c      	ldr	r0, [pc, #368]	; (8001518 <main+0x2c8>)
 80013a6:	f001 fa95 	bl	80028d4 <HAL_GPIO_WritePin>
  MX_LWIP_Init();
 80013aa:	f002 fa0b 	bl	80037c4 <MX_LWIP_Init>
  debug_init();
 80013ae:	f7ff fe63 	bl	8001078 <debug_init>
  DWT_Init();
 80013b2:	f7ff fea7 	bl	8001104 <DWT_Init>
  SystemCoreClockUpdate();
 80013b6:	f000 fa63 	bl	8001880 <SystemCoreClockUpdate>
  dbg_printf("Clock : %d\r\n", SystemCoreClock);
 80013ba:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <main+0x2e4>)
 80013bc:	485e      	ldr	r0, [pc, #376]	; (8001538 <main+0x2e8>)
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	f005 fdf6 	bl	8006fb0 <iprintf>
  AD7768_setup(AD7768_INTERFACE_CFG_DCLK_DIV(AD7768_DCLK_DIV_2),
 80013c4:	4629      	mov	r1, r5
 80013c6:	2233      	movs	r2, #51	; 0x33
 80013c8:	4638      	mov	r0, r7
 80013ca:	f7ff fe1d 	bl	8001008 <AD7768_setup>
  HAL_Delay(100);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f000 fb12 	bl	80019f8 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013d4:	4621      	mov	r1, r4
 80013d6:	2210      	movs	r2, #16
 80013d8:	a806      	add	r0, sp, #24
 80013da:	f004 fefd 	bl	80061d8 <memset>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80013de:	4622      	mov	r2, r4
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	484d      	ldr	r0, [pc, #308]	; (8001518 <main+0x2c8>)
 80013e4:	f001 fa76 	bl	80028d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ee:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	a906      	add	r1, sp, #24
 80013f2:	4849      	ldr	r0, [pc, #292]	; (8001518 <main+0x2c8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f001 f98c 	bl	8002714 <HAL_GPIO_Init>
  test_pcb = udp_new();
 80013fc:	f003 fc3a 	bl	8004c74 <udp_new>
 8001400:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800156c <main+0x31c>
  udp_bind(test_pcb, &ipaddr, 54321);
 8001404:	f24d 4231 	movw	r2, #54321	; 0xd431
 8001408:	494c      	ldr	r1, [pc, #304]	; (800153c <main+0x2ec>)
  test_pcb = udp_new();
 800140a:	f8c8 0000 	str.w	r0, [r8]
  udp_bind(test_pcb, &ipaddr, 54321);
 800140e:	f003 fb3d 	bl	8004a8c <udp_bind>
  p1 = pbuf_alloc(PBUF_TRANSPORT, SAMPLE_DMA_SIZE + 4, PBUF_REF);
 8001412:	463a      	mov	r2, r7
 8001414:	f240 5184 	movw	r1, #1412	; 0x584
 8001418:	4620      	mov	r0, r4
 800141a:	f002 ff4f 	bl	80042bc <pbuf_alloc>
 800141e:	4d48      	ldr	r5, [pc, #288]	; (8001540 <main+0x2f0>)
 8001420:	4681      	mov	r9, r0
 8001422:	6028      	str	r0, [r5, #0]
  p1->payload = (uint8_t *)malloc((SAMPLE_DMA_SIZE + 4) * sizeof(uint8_t));
 8001424:	f240 5084 	movw	r0, #1412	; 0x584
 8001428:	f004 feac 	bl	8006184 <malloc>
  memset(p1->payload, 0, SAMPLE_DMA_SIZE+4);
 800142c:	4621      	mov	r1, r4
  p1->payload = (uint8_t *)malloc((SAMPLE_DMA_SIZE + 4) * sizeof(uint8_t));
 800142e:	f8c9 0004 	str.w	r0, [r9, #4]
  memset(p1->payload, 0, SAMPLE_DMA_SIZE+4);
 8001432:	f240 5284 	movw	r2, #1412	; 0x584
 8001436:	f004 fecf 	bl	80061d8 <memset>
  p2 = pbuf_alloc(PBUF_TRANSPORT, SAMPLE_DMA_SIZE + 2, PBUF_REF);
 800143a:	463a      	mov	r2, r7
 800143c:	f240 5182 	movw	r1, #1410	; 0x582
 8001440:	4620      	mov	r0, r4
 8001442:	f002 ff3b 	bl	80042bc <pbuf_alloc>
 8001446:	4f3f      	ldr	r7, [pc, #252]	; (8001544 <main+0x2f4>)
 8001448:	4681      	mov	r9, r0
 800144a:	6038      	str	r0, [r7, #0]
  p2->payload = (uint8_t *)malloc((SAMPLE_DMA_SIZE + 2) * sizeof(uint8_t));
 800144c:	f240 5082 	movw	r0, #1410	; 0x582
 8001450:	f004 fe98 	bl	8006184 <malloc>
  memset(p2->payload, 0, SAMPLE_DMA_SIZE + 2);
 8001454:	4621      	mov	r1, r4
 8001456:	4644      	mov	r4, r8
	  if (halfSend == 1)
 8001458:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001570 <main+0x320>
  p2->payload = (uint8_t *)malloc((SAMPLE_DMA_SIZE + 2) * sizeof(uint8_t));
 800145c:	f8c9 0004 	str.w	r0, [r9, #4]
 8001460:	46c1      	mov	r9, r8
  memset(p2->payload, 0, SAMPLE_DMA_SIZE + 2);
 8001462:	f240 5282 	movw	r2, #1410	; 0x582
 8001466:	f004 feb7 	bl	80061d8 <memset>
  IP4_ADDR(&ipaddr_dest, IP_ADDRESS_DEST[0], IP_ADDRESS_DEST[1], IP_ADDRESS_DEST[2], IP_ADDRESS_DEST[3]);
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <main+0x2f8>)
 800146c:	4a37      	ldr	r2, [pc, #220]	; (800154c <main+0x2fc>)
  uint8_t initial = 1;
 800146e:	46b3      	mov	fp, r6
 8001470:	4e37      	ldr	r6, [pc, #220]	; (8001550 <main+0x300>)
  IP4_ADDR(&ipaddr_dest, IP_ADDRESS_DEST[0], IP_ADDRESS_DEST[1], IP_ADDRESS_DEST[2], IP_ADDRESS_DEST[3]);
 8001472:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 8001474:	f002 f9fa 	bl	800386c <MX_LWIP_Process>
	  if (halfSend == 1)
 8001478:	f898 3000 	ldrb.w	r3, [r8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d10f      	bne.n	80014a0 <main+0x250>
		  errUDP = udp_sendto(test_pcb, p1, &ipaddr_dest, test_port);
 8001480:	6829      	ldr	r1, [r5, #0]
 8001482:	f64d 1302 	movw	r3, #55554	; 0xd902
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <main+0x2f8>)
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	f003 fbd9 	bl	8004c40 <udp_sendto>
 800148e:	b2c1      	uxtb	r1, r0
 8001490:	7031      	strb	r1, [r6, #0]
		  if (errUDP)
 8001492:	b111      	cbz	r1, 800149a <main+0x24a>
			  dbg_printf("error 1 : %d", errUDP);
 8001494:	482f      	ldr	r0, [pc, #188]	; (8001554 <main+0x304>)
 8001496:	f005 fd8b 	bl	8006fb0 <iprintf>
		  halfSend = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f889 3000 	strb.w	r3, [r9]
	  if (fullSend == 1)
 80014a0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8001574 <main+0x324>
 80014a4:	f89a 3000 	ldrb.w	r3, [sl]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10f      	bne.n	80014cc <main+0x27c>
		  errUDP = udp_sendto(test_pcb, p2, &ipaddr_dest, test_port);
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	f64d 1302 	movw	r3, #55554	; 0xd902
 80014b2:	4a25      	ldr	r2, [pc, #148]	; (8001548 <main+0x2f8>)
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	f003 fbc3 	bl	8004c40 <udp_sendto>
 80014ba:	b2c1      	uxtb	r1, r0
 80014bc:	7031      	strb	r1, [r6, #0]
		  if (errUDP)
 80014be:	b111      	cbz	r1, 80014c6 <main+0x276>
			  dbg_printf("error 2 : %d", errUDP);
 80014c0:	4825      	ldr	r0, [pc, #148]	; (8001558 <main+0x308>)
 80014c2:	f005 fd75 	bl	8006fb0 <iprintf>
		  fullSend = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f88a 3000 	strb.w	r3, [sl]
	  if (halfSend && fullSend)
 80014cc:	f899 3000 	ldrb.w	r3, [r9]
 80014d0:	b12b      	cbz	r3, 80014de <main+0x28e>
 80014d2:	f89a 3000 	ldrb.w	r3, [sl]
 80014d6:	b113      	cbz	r3, 80014de <main+0x28e>
		  dbg_printf("Error\n");
 80014d8:	4820      	ldr	r0, [pc, #128]	; (800155c <main+0x30c>)
 80014da:	f005 fddd 	bl	8007098 <puts>
	  if (errUDP)
 80014de:	7831      	ldrb	r1, [r6, #0]
 80014e0:	b111      	cbz	r1, 80014e8 <main+0x298>
		  dbg_printf("error 3 : %d", errUDP);
 80014e2:	481f      	ldr	r0, [pc, #124]	; (8001560 <main+0x310>)
 80014e4:	f005 fd64 	bl	8006fb0 <iprintf>
	  if (initial == 1)
 80014e8:	f1bb 0f00 	cmp.w	fp, #0
 80014ec:	d0c2      	beq.n	8001474 <main+0x224>
		  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <main+0x314>)
		  HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[4], SAMPLE_DMA_SIZE * 2);
 80014f0:	491d      	ldr	r1, [pc, #116]	; (8001568 <main+0x318>)
		  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 80014f2:	681b      	ldr	r3, [r3, #0]
		  HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[4], SAMPLE_DMA_SIZE * 2);
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <main+0x2d4>)
		  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 80014f6:	681a      	ldr	r2, [r3, #0]
		  initial = 0;
 80014f8:	f04f 0b00 	mov.w	fp, #0
		  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 80014fc:	f042 0204 	orr.w	r2, r2, #4
 8001500:	601a      	str	r2, [r3, #0]
		  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_TC);
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	f042 0202 	orr.w	r2, r2, #2
 8001508:	601a      	str	r2, [r3, #0]
		  HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[4], SAMPLE_DMA_SIZE * 2);
 800150a:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800150e:	f001 ff75 	bl	80033fc <HAL_SPI_Receive_DMA>
 8001512:	e7af      	b.n	8001474 <main+0x224>
 8001514:	40021000 	.word	0x40021000
 8001518:	40011400 	.word	0x40011400
 800151c:	20001634 	.word	0x20001634
 8001520:	40003c00 	.word	0x40003c00
 8001524:	200016d4 	.word	0x200016d4
 8001528:	40013000 	.word	0x40013000
 800152c:	2000172c 	.word	0x2000172c
 8001530:	40004400 	.word	0x40004400
 8001534:	20000000 	.word	0x20000000
 8001538:	0800a7e9 	.word	0x0800a7e9
 800153c:	200017ec 	.word	0x200017ec
 8001540:	2000168c 	.word	0x2000168c
 8001544:	20001630 	.word	0x20001630
 8001548:	2000162c 	.word	0x2000162c
 800154c:	7963a8c0 	.word	0x7963a8c0
 8001550:	20000d07 	.word	0x20000d07
 8001554:	0800a7f6 	.word	0x0800a7f6
 8001558:	0800a803 	.word	0x0800a803
 800155c:	0800a810 	.word	0x0800a810
 8001560:	0800a816 	.word	0x0800a816
 8001564:	2000176c 	.word	0x2000176c
 8001568:	20000205 	.word	0x20000205
 800156c:	20000d10 	.word	0x20000d10
 8001570:	20000d0d 	.word	0x20000d0d
 8001574:	20000d0c 	.word	0x20000d0c

08001578 <Error_Handler>:
 8001578:	b672      	cpsid	i
 800157a:	e7fe      	b.n	800157a <Error_Handler+0x2>

0800157c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_MspInit+0x3c>)
{
 800157e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	699a      	ldr	r2, [r3, #24]
 800158a:	f002 0201 	and.w	r2, r2, #1
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001598:	61da      	str	r2, [r3, #28]
 800159a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015a6:	6853      	ldr	r3, [r2, #4]
 80015a8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	b002      	add	sp, #8
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000

080015c0 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	2210      	movs	r2, #16
{
 80015c2:	b530      	push	{r4, r5, lr}
 80015c4:	4605      	mov	r5, r0
 80015c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	eb0d 0002 	add.w	r0, sp, r2
 80015cc:	2100      	movs	r1, #0
 80015ce:	f004 fe03 	bl	80061d8 <memset>
  if(hspi->Instance==SPI1)
 80015d2:	682b      	ldr	r3, [r5, #0]
 80015d4:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <HAL_SPI_MspInit+0x10c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d147      	bne.n	800166a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_SPI_MspInit+0x110>)
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	483d      	ldr	r0, [pc, #244]	; (80016d4 <HAL_SPI_MspInit+0x114>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015e6:	619a      	str	r2, [r3, #24]
 80015e8:	699a      	ldr	r2, [r3, #24]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80015ea:	4c3b      	ldr	r4, [pc, #236]	; (80016d8 <HAL_SPI_MspInit+0x118>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015f0:	9200      	str	r2, [sp, #0]
 80015f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	f042 0204 	orr.w	r2, r2, #4
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001606:	23b0      	movs	r3, #176	; 0xb0
 8001608:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f001 f883 	bl	8002714 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001612:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001616:	2220      	movs	r2, #32
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001618:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 80016f0 <HAL_SPI_MspInit+0x130>
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800161c:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001622:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001624:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001626:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800162a:	f000 fa61 	bl	8001af0 <HAL_DMA_Init>
 800162e:	b108      	cbz	r0, 8001634 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001630:	f7ff ffa2 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001634:	64ec      	str	r4, [r5, #76]	; 0x4c
 8001636:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001638:	2410      	movs	r4, #16
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_SPI_MspInit+0x11c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2000      	movs	r0, #0
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001642:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	eb0d 0104 	add.w	r1, sp, r4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	4821      	ldr	r0, [pc, #132]	; (80016d4 <HAL_SPI_MspInit+0x114>)
 800164e:	f001 f861 	bl	8002714 <HAL_GPIO_Init>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
    HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 15);
 8001652:	220f      	movs	r2, #15
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_SPI_MspInit+0x120>)
    HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 15);
 8001656:	200a      	movs	r0, #10
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001658:	615c      	str	r4, [r3, #20]
    HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 15);
 800165a:	4611      	mov	r1, r2
 800165c:	f000 f9f0 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001660:	200a      	movs	r0, #10
 8001662:	f000 fa21 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001666:	b009      	add	sp, #36	; 0x24
 8001668:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI3)
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_SPI_MspInit+0x124>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d1fa      	bne.n	8001666 <HAL_SPI_MspInit+0xa6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_SPI_MspInit+0x110>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001674:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <HAL_SPI_MspInit+0x128>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800167c:	61da      	str	r2, [r3, #28]
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001684:	9202      	str	r2, [sp, #8]
 8001686:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	f042 0210 	orr.w	r2, r2, #16
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f001 f834 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <HAL_SPI_MspInit+0x128>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f001 f82a 	bl	8002714 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_SPI_MspInit+0x12c>)
 80016c2:	6853      	ldr	r3, [r2, #4]
 80016c4:	f043 53b8 	orr.w	r3, r3, #385875968	; 0x17000000
 80016c8:	6053      	str	r3, [r2, #4]
}
 80016ca:	e7cc      	b.n	8001666 <HAL_SPI_MspInit+0xa6>
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010800 	.word	0x40010800
 80016d8:	2000176c 	.word	0x2000176c
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40010400 	.word	0x40010400
 80016e4:	40003c00 	.word	0x40003c00
 80016e8:	40011000 	.word	0x40011000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	4002001c 	.word	0x4002001c

080016f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	2710      	movs	r7, #16
{
 80016f8:	4606      	mov	r6, r0
 80016fa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	463a      	mov	r2, r7
 80016fe:	2100      	movs	r1, #0
 8001700:	a802      	add	r0, sp, #8
 8001702:	f004 fd69 	bl	80061d8 <memset>
  if(huart->Instance==USART2)
 8001706:	6832      	ldr	r2, [r6, #0]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_UART_MspInit+0xa0>)
 800170a:	429a      	cmp	r2, r3
 800170c:	d140      	bne.n	8001790 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800170e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001712:	69da      	ldr	r2, [r3, #28]
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800171a:	61da      	str	r2, [r3, #28]
 800171c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	481e      	ldr	r0, [pc, #120]	; (8001798 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001720:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001724:	9200      	str	r2, [sp, #0]
 8001726:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	f042 0220 	orr.w	r2, r2, #32
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2220      	movs	r2, #32
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f000 ffe4 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	4812      	ldr	r0, [pc, #72]	; (8001798 <HAL_UART_MspInit+0xa4>)
 8001750:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f000 ffdc 	bl	8002714 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_UART_MspInit+0xa8>)

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800175e:	4c10      	ldr	r4, [pc, #64]	; (80017a0 <HAL_UART_MspInit+0xac>)
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8001760:	6853      	ldr	r3, [r2, #4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001762:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8001764:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6053      	str	r3, [r2, #4]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_UART_MspInit+0xb0>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	60a5      	str	r5, [r4, #8]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001772:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001778:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001780:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001782:	f000 f9b5 	bl	8001af0 <HAL_DMA_Init>
 8001786:	b108      	cbz	r0, 800178c <HAL_UART_MspInit+0x98>
    {
      Error_Handler();
 8001788:	f7ff fef6 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800178c:	6334      	str	r4, [r6, #48]	; 0x30
 800178e:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001790:	b007      	add	sp, #28
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	40004400 	.word	0x40004400
 8001798:	40011400 	.word	0x40011400
 800179c:	40010000 	.word	0x40010000
 80017a0:	20001690 	.word	0x20001690
 80017a4:	40020080 	.word	0x40020080

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler>

080017b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 b90c 	b.w	80019d4 <HAL_IncTick>

080017bc <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <DMA1_Channel2_IRQHandler+0x8>)
 80017be:	f000 ba15 	b.w	8001bec <HAL_DMA_IRQHandler>
 80017c2:	bf00      	nop
 80017c4:	2000176c 	.word	0x2000176c

080017c8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017c8:	4801      	ldr	r0, [pc, #4]	; (80017d0 <DMA1_Channel7_IRQHandler+0x8>)
 80017ca:	f000 ba0f 	b.w	8001bec <HAL_DMA_IRQHandler>
 80017ce:	bf00      	nop
 80017d0:	20001690 	.word	0x20001690

080017d4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <ETH_IRQHandler+0x8>)
 80017d6:	f000 bd19 	b.w	800220c <HAL_ETH_IRQHandler>
 80017da:	bf00      	nop
 80017dc:	20004860 	.word	0x20004860

080017e0 <ETH_WKUP_IRQHandler>:
 80017e0:	f7ff bff8 	b.w	80017d4 <ETH_IRQHandler>

080017e4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017e4:	2010      	movs	r0, #16
 80017e6:	f001 b87b 	b.w	80028e0 <HAL_GPIO_EXTI_IRQHandler>

080017ea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ea:	b570      	push	{r4, r5, r6, lr}
 80017ec:	460e      	mov	r6, r1
 80017ee:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	460c      	mov	r4, r1
 80017f2:	1ba3      	subs	r3, r4, r6
 80017f4:	429d      	cmp	r5, r3
 80017f6:	dc01      	bgt.n	80017fc <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80017f8:	4628      	mov	r0, r5
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017fc:	f3af 8000 	nop.w
 8001800:	f804 0b01 	strb.w	r0, [r4], #1
 8001804:	e7f5      	b.n	80017f2 <_read+0x8>

08001806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001806:	b570      	push	{r4, r5, r6, lr}
 8001808:	460e      	mov	r6, r1
 800180a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	460c      	mov	r4, r1
 800180e:	1ba3      	subs	r3, r4, r6
 8001810:	429d      	cmp	r5, r3
 8001812:	dc01      	bgt.n	8001818 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001814:	4628      	mov	r0, r5
 8001816:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001818:	f814 0b01 	ldrb.w	r0, [r4], #1
 800181c:	f7ff fc56 	bl	80010cc <__io_putchar>
 8001820:	e7f5      	b.n	800180e <_write+0x8>

08001822 <_close>:

int _close(int file)
{
	return -1;
}
 8001822:	f04f 30ff 	mov.w	r0, #4294967295
 8001826:	4770      	bx	lr

08001828 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800182c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800182e:	604b      	str	r3, [r1, #4]
}
 8001830:	4770      	bx	lr

08001832 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001832:	2001      	movs	r0, #1
 8001834:	4770      	bx	lr

08001836 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001836:	2000      	movs	r0, #0
 8001838:	4770      	bx	lr
	...

0800183c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <_sbrk+0x2c>)
{
 800183e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001840:	6819      	ldr	r1, [r3, #0]
{
 8001842:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001844:	b909      	cbnz	r1, 800184a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001846:	4909      	ldr	r1, [pc, #36]	; (800186c <_sbrk+0x30>)
 8001848:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	4c08      	ldr	r4, [pc, #32]	; (8001870 <_sbrk+0x34>)
 800184e:	4909      	ldr	r1, [pc, #36]	; (8001874 <_sbrk+0x38>)
 8001850:	4402      	add	r2, r0
 8001852:	1b09      	subs	r1, r1, r4
 8001854:	428a      	cmp	r2, r1
  {
    errno = ENOMEM;
 8001856:	bf81      	itttt	hi
 8001858:	220c      	movhi	r2, #12
 800185a:	4b07      	ldrhi	r3, [pc, #28]	; (8001878 <_sbrk+0x3c>)
    return (void *)-1;
 800185c:	f04f 30ff 	movhi.w	r0, #4294967295
    errno = ENOMEM;
 8001860:	601a      	strhi	r2, [r3, #0]
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001862:	bf98      	it	ls
 8001864:	601a      	strls	r2, [r3, #0]

  return (void *)prev_heap_end;
}
 8001866:	bd10      	pop	{r4, pc}
 8001868:	20000d14 	.word	0x20000d14
 800186c:	200060a0 	.word	0x200060a0
 8001870:	00000400 	.word	0x00000400
 8001874:	20010000 	.word	0x20010000
 8001878:	2000609c 	.word	0x2000609c

0800187c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	4770      	bx	lr
	...

08001880 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001880:	4820      	ldr	r0, [pc, #128]	; (8001904 <SystemCoreClockUpdate+0x84>)
{
 8001882:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001884:	6843      	ldr	r3, [r0, #4]
 8001886:	4c20      	ldr	r4, [pc, #128]	; (8001908 <SystemCoreClockUpdate+0x88>)
 8001888:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800188c:	2b04      	cmp	r3, #4
 800188e:	d00c      	beq.n	80018aa <SystemCoreClockUpdate+0x2a>
 8001890:	2b08      	cmp	r3, #8
 8001892:	d00c      	beq.n	80018ae <SystemCoreClockUpdate+0x2e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <SystemCoreClockUpdate+0x8c>)
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8001896:	6023      	str	r3, [r4, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001898:	6843      	ldr	r3, [r0, #4]
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <SystemCoreClockUpdate+0x90>)
 800189c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018a0:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	40d3      	lsrs	r3, r2
 80018a6:	6023      	str	r3, [r4, #0]
}
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
      SystemCoreClock = HSE_VALUE;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <SystemCoreClockUpdate+0x94>)
 80018ac:	e7f3      	b.n	8001896 <SystemCoreClockUpdate+0x16>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80018ae:	6843      	ldr	r3, [r0, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80018b0:	6842      	ldr	r2, [r0, #4]
      pllmull = pllmull >> 18U;
 80018b2:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllmull != 0x0DU)
 80018b6:	2b0d      	cmp	r3, #13
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80018b8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
         pllmull += 2U;
 80018bc:	bf14      	ite	ne
 80018be:	3302      	addne	r3, #2
        pllmull = 13U / 2U; 
 80018c0:	2306      	moveq	r3, #6
      if (pllsource == 0x00U)
 80018c2:	b912      	cbnz	r2, 80018ca <SystemCoreClockUpdate+0x4a>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <SystemCoreClockUpdate+0x98>)
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 80018c6:	4353      	muls	r3, r2
 80018c8:	e7e5      	b.n	8001896 <SystemCoreClockUpdate+0x16>
        prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 80018ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80018cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
        if (prediv1source == 0U)
 80018ce:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80018d2:	f001 010f 	and.w	r1, r1, #15
 80018d6:	f101 0501 	add.w	r5, r1, #1
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <SystemCoreClockUpdate+0x94>)
        if (prediv1source == 0U)
 80018dc:	d103      	bne.n	80018e6 <SystemCoreClockUpdate+0x66>
          SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 80018de:	fbb1 f1f5 	udiv	r1, r1, r5
 80018e2:	434b      	muls	r3, r1
 80018e4:	e7d7      	b.n	8001896 <SystemCoreClockUpdate+0x16>
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 80018e6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 80018e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 80018ea:	f3c6 1603 	ubfx	r6, r6, #4, #4
 80018ee:	3601      	adds	r6, #1
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 80018f0:	fbb1 f1f6 	udiv	r1, r1, r6
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 80018f4:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80018f8:	3202      	adds	r2, #2
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 80018fa:	434a      	muls	r2, r1
 80018fc:	fbb2 f2f5 	udiv	r2, r2, r5
 8001900:	e7e1      	b.n	80018c6 <SystemCoreClockUpdate+0x46>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	20000000 	.word	0x20000000
 800190c:	007a1200 	.word	0x007a1200
 8001910:	0800a823 	.word	0x0800a823
 8001914:	017d7840 	.word	0x017d7840
 8001918:	003d0900 	.word	0x003d0900

0800191c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800191c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800191e:	e003      	b.n	8001928 <LoopCopyDataInit>

08001920 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001922:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001924:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001926:	3104      	adds	r1, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800192c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800192e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001930:	d3f6      	bcc.n	8001920 <CopyDataInit>
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001934:	e002      	b.n	800193c <LoopFillZerobss>

08001936 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001938:	f842 3b04 	str.w	r3, [r2], #4

0800193c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001940:	d3f9      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001942:	f7ff ff9b 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f004 fbf9 	bl	800613c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194a:	f7ff fc81 	bl	8001250 <main>
  bx lr
 800194e:	4770      	bx	lr
  ldr r3, =_sidata
 8001950:	0800b710 	.word	0x0800b710
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001958:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800195c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001960:	200060a0 	.word	0x200060a0

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>
	...

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_InitTick+0x3c>)
{
 800196c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196e:	7818      	ldrb	r0, [r3, #0]
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	fbb3 f3f0 	udiv	r3, r3, r0
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_InitTick+0x40>)
 800197a:	6810      	ldr	r0, [r2, #0]
 800197c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001980:	f000 f8a0 	bl	8001ac4 <HAL_SYSTICK_Config>
 8001984:	4604      	mov	r4, r0
 8001986:	b958      	cbnz	r0, 80019a0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001988:	2d0f      	cmp	r5, #15
 800198a:	d809      	bhi.n	80019a0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	4602      	mov	r2, r0
 800198e:	4629      	mov	r1, r5
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 f854 	bl	8001a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4620      	mov	r0, r4
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_InitTick+0x44>)
 800199c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800199e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019a0:	2001      	movs	r0, #1
 80019a2:	e7fc      	b.n	800199e <HAL_InitTick+0x36>
 80019a4:	20000004 	.word	0x20000004
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x20>)
{
 80019b2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	f000 f82d 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff ffd0 	bl	8001968 <HAL_InitTick>
  HAL_MspInit();
 80019c8:	f7ff fdd8 	bl	800157c <HAL_MspInit>
}
 80019cc:	2000      	movs	r0, #0
 80019ce:	bd08      	pop	{r3, pc}
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_IncTick+0x10>)
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_IncTick+0x14>)
 80019d8:	6811      	ldr	r1, [r2, #0]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	440b      	add	r3, r1
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200017b0 	.word	0x200017b0
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_GetTick+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200017b0 	.word	0x200017b0

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff fff6 	bl	80019ec <HAL_GetTick>
 8001a00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a04:	bf1e      	ittt	ne
 8001a06:	4b04      	ldrne	r3, [pc, #16]	; (8001a18 <HAL_Delay+0x20>)
 8001a08:	781b      	ldrbne	r3, [r3, #0]
 8001a0a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	1b40      	subs	r0, r0, r5
 8001a12:	42a0      	cmp	r0, r4
 8001a14:	d3fa      	bcc.n	8001a0c <HAL_Delay+0x14>
  {
  }
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a1e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001a36:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001a38:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b570      	push	{r4, r5, r6, lr}
 8001a44:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a46:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4e:	f1c4 0507 	rsb	r5, r4, #7
 8001a52:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a54:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	bf28      	it	cs
 8001a5a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	bf98      	it	ls
 8001a60:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a62:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	bf88      	it	hi
 8001a68:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6a:	ea21 0303 	bic.w	r3, r1, r3
 8001a6e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	fa06 f404 	lsl.w	r4, r6, r4
 8001a74:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001a78:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	bfa8      	it	ge
 8001a80:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001a84:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	bfb8      	it	lt
 8001a8a:	4a06      	ldrlt	r2, [pc, #24]	; (8001aa4 <HAL_NVIC_SetPriority+0x64>)
 8001a8c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	bfab      	itete	ge
 8001a90:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	e000ed14 	.word	0xe000ed14

08001aa8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	db08      	blt.n	8001abe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aac:	2301      	movs	r3, #1
 8001aae:	0942      	lsrs	r2, r0, #5
 8001ab0:	f000 001f 	and.w	r0, r0, #31
 8001ab4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <HAL_NVIC_EnableIRQ+0x18>)
 8001aba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	3801      	subs	r0, #1
 8001ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001aca:	d20a      	bcs.n	8001ae2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d032      	beq.n	8001b5c <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af6:	6801      	ldr	r1, [r0, #0]
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_DMA_Init+0x70>)
 8001afa:	2414      	movs	r4, #20
 8001afc:	4299      	cmp	r1, r3
 8001afe:	d825      	bhi.n	8001b4c <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8001b02:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b06:	440a      	add	r2, r1
 8001b08:	fbb2 f2f4 	udiv	r2, r2, r4
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	6402      	str	r2, [r0, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8001b10:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b12:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001b16:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001b1a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1c:	4323      	orrs	r3, r4
 8001b1e:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b20:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b24:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b28:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	4323      	orrs	r3, r4
 8001b2e:	6984      	ldr	r4, [r0, #24]
 8001b30:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	69c4      	ldr	r4, [r0, #28]
 8001b34:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001b36:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b38:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b44:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001b48:	4618      	mov	r0, r3
}
 8001b4a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_DMA_Init+0x78>)
 8001b4e:	440b      	add	r3, r1
 8001b50:	fbb3 f3f4 	udiv	r3, r3, r4
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_DMA_Init+0x7c>)
 8001b5a:	e7d9      	b.n	8001b10 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	e7f4      	b.n	8001b4a <HAL_DMA_Init+0x5a>
 8001b60:	40020407 	.word	0x40020407
 8001b64:	bffdfff8 	.word	0xbffdfff8
 8001b68:	bffdfbf8 	.word	0xbffdfbf8
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b72:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001b76:	2c01      	cmp	r4, #1
 8001b78:	d035      	beq.n	8001be6 <HAL_DMA_Start_IT+0x76>
 8001b7a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b7c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001b80:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b84:	42a5      	cmp	r5, r4
 8001b86:	f04f 0600 	mov.w	r6, #0
 8001b8a:	f04f 0402 	mov.w	r4, #2
 8001b8e:	d128      	bne.n	8001be2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b90:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b94:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001b98:	6826      	ldr	r6, [r4, #0]
 8001b9a:	f026 0601 	bic.w	r6, r6, #1
 8001b9e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ba0:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001ba4:	40bd      	lsls	r5, r7
 8001ba6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001baa:	6843      	ldr	r3, [r0, #4]
 8001bac:	6805      	ldr	r5, [r0, #0]
 8001bae:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001bb0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb2:	bf0b      	itete	eq
 8001bb4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001bb6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001bb8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001bba:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001bbc:	b14b      	cbz	r3, 8001bd2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bc6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	602b      	str	r3, [r5, #0]
}
 8001bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	f043 030a 	orr.w	r3, r3, #10
 8001be0:	e7f0      	b.n	8001bc4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001be2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001be6:	2002      	movs	r0, #2
 8001be8:	e7f2      	b.n	8001bd0 <HAL_DMA_Start_IT+0x60>
	...

08001bec <HAL_DMA_IRQHandler>:
{
 8001bec:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bee:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bf0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bf2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bf4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bf6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bf8:	4095      	lsls	r5, r2
 8001bfa:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001bfc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bfe:	f000 8085 	beq.w	8001d0c <HAL_DMA_IRQHandler+0x120>
 8001c02:	074d      	lsls	r5, r1, #29
 8001c04:	f140 8082 	bpl.w	8001d0c <HAL_DMA_IRQHandler+0x120>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4992      	ldr	r1, [pc, #584]	; (8001e54 <HAL_DMA_IRQHandler+0x268>)
 8001c0c:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c0e:	bf5e      	ittt	pl
 8001c10:	681a      	ldrpl	r2, [r3, #0]
 8001c12:	f022 0204 	bicpl.w	r2, r2, #4
 8001c16:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c18:	4a8f      	ldr	r2, [pc, #572]	; (8001e58 <HAL_DMA_IRQHandler+0x26c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d93e      	bls.n	8001c9c <HAL_DMA_IRQHandler+0xb0>
 8001c1e:	428b      	cmp	r3, r1
 8001c20:	d035      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xa2>
 8001c22:	3114      	adds	r1, #20
 8001c24:	428b      	cmp	r3, r1
 8001c26:	d034      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xa6>
 8001c28:	3114      	adds	r1, #20
 8001c2a:	428b      	cmp	r3, r1
 8001c2c:	d033      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xaa>
 8001c2e:	3114      	adds	r1, #20
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d020      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x8a>
 8001c34:	3114      	adds	r1, #20
 8001c36:	428b      	cmp	r3, r1
 8001c38:	d020      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x90>
 8001c3a:	3114      	adds	r1, #20
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d020      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x96>
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d021      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x9c>
 8001c44:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d020      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xa2>
 8001c4c:	3214      	adds	r2, #20
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xa6>
 8001c52:	3214      	adds	r2, #20
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01e      	beq.n	8001c96 <HAL_DMA_IRQHandler+0xaa>
 8001c58:	3214      	adds	r2, #20
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	bf14      	ite	ne
 8001c5e:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001c62:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001c66:	4a7d      	ldr	r2, [pc, #500]	; (8001e5c <HAL_DMA_IRQHandler+0x270>)
 8001c68:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001c6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ef 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x264>
}
 8001c72:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c74:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7a:	e7f4      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c80:	e7f1      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c86:	e7ee      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c8c:	e7eb      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e7e9      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c92:	2340      	movs	r3, #64	; 0x40
 8001c94:	e7e7      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	e7e4      	b.n	8001c66 <HAL_DMA_IRQHandler+0x7a>
 8001c9c:	428b      	cmp	r3, r1
 8001c9e:	d02e      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x112>
 8001ca0:	496f      	ldr	r1, [pc, #444]	; (8001e60 <HAL_DMA_IRQHandler+0x274>)
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d02d      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x116>
 8001ca6:	3114      	adds	r1, #20
 8001ca8:	428b      	cmp	r3, r1
 8001caa:	d02c      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x11a>
 8001cac:	3114      	adds	r1, #20
 8001cae:	428b      	cmp	r3, r1
 8001cb0:	d019      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0xfa>
 8001cb2:	3114      	adds	r1, #20
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d019      	beq.n	8001cec <HAL_DMA_IRQHandler+0x100>
 8001cb8:	3114      	adds	r1, #20
 8001cba:	428b      	cmp	r3, r1
 8001cbc:	d019      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x106>
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01a      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x10c>
 8001cc2:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <HAL_DMA_IRQHandler+0x278>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d01a      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x112>
 8001cc8:	3214      	adds	r2, #20
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x116>
 8001cce:	3214      	adds	r2, #20
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d018      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x11a>
 8001cd4:	3214      	adds	r2, #20
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	bf14      	ite	ne
 8001cda:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001cde:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001ce2:	4a61      	ldr	r2, [pc, #388]	; (8001e68 <HAL_DMA_IRQHandler+0x27c>)
 8001ce4:	e7c0      	b.n	8001c68 <HAL_DMA_IRQHandler+0x7c>
 8001ce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cea:	e7fa      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
 8001cec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cf0:	e7f7      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
 8001cf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cf6:	e7f4      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
 8001cf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cfc:	e7f1      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e7ef      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	e7ed      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
 8001d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0a:	e7ea      	b.n	8001ce2 <HAL_DMA_IRQHandler+0xf6>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d0c:	2502      	movs	r5, #2
 8001d0e:	4095      	lsls	r5, r2
 8001d10:	4225      	tst	r5, r4
 8001d12:	f000 8087 	beq.w	8001e24 <HAL_DMA_IRQHandler+0x238>
 8001d16:	078d      	lsls	r5, r1, #30
 8001d18:	f140 8084 	bpl.w	8001e24 <HAL_DMA_IRQHandler+0x238>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	0694      	lsls	r4, r2, #26
 8001d20:	d406      	bmi.n	8001d30 <HAL_DMA_IRQHandler+0x144>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f022 020a 	bic.w	r2, r2, #10
 8001d28:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d30:	4a49      	ldr	r2, [pc, #292]	; (8001e58 <HAL_DMA_IRQHandler+0x26c>)
 8001d32:	4948      	ldr	r1, [pc, #288]	; (8001e54 <HAL_DMA_IRQHandler+0x268>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d93d      	bls.n	8001db4 <HAL_DMA_IRQHandler+0x1c8>
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d034      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x1ba>
 8001d3c:	3114      	adds	r1, #20
 8001d3e:	428b      	cmp	r3, r1
 8001d40:	d033      	beq.n	8001daa <HAL_DMA_IRQHandler+0x1be>
 8001d42:	3114      	adds	r1, #20
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d032      	beq.n	8001dae <HAL_DMA_IRQHandler+0x1c2>
 8001d48:	3114      	adds	r1, #20
 8001d4a:	428b      	cmp	r3, r1
 8001d4c:	d01f      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1a2>
 8001d4e:	3114      	adds	r1, #20
 8001d50:	428b      	cmp	r3, r1
 8001d52:	d01f      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x1a8>
 8001d54:	3114      	adds	r1, #20
 8001d56:	428b      	cmp	r3, r1
 8001d58:	d01f      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x1ae>
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d020      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x1b4>
 8001d5e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01f      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x1ba>
 8001d66:	3214      	adds	r2, #20
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d01e      	beq.n	8001daa <HAL_DMA_IRQHandler+0x1be>
 8001d6c:	3214      	adds	r2, #20
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01d      	beq.n	8001dae <HAL_DMA_IRQHandler+0x1c2>
 8001d72:	3214      	adds	r2, #20
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf14      	ite	ne
 8001d78:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001d7c:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001d80:	4a36      	ldr	r2, [pc, #216]	; (8001e5c <HAL_DMA_IRQHandler+0x270>)
 8001d82:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001d84:	2300      	movs	r3, #0
 8001d86:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d8c:	e76e      	b.n	8001c6c <HAL_DMA_IRQHandler+0x80>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d92:	e7f5      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	e7f2      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001d9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d9e:	e7ef      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da4:	e7ec      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e7ea      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001daa:	2320      	movs	r3, #32
 8001dac:	e7e8      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db2:	e7e5      	b.n	8001d80 <HAL_DMA_IRQHandler+0x194>
 8001db4:	428b      	cmp	r3, r1
 8001db6:	d02e      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x22a>
 8001db8:	4929      	ldr	r1, [pc, #164]	; (8001e60 <HAL_DMA_IRQHandler+0x274>)
 8001dba:	428b      	cmp	r3, r1
 8001dbc:	d02d      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x22e>
 8001dbe:	3114      	adds	r1, #20
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x232>
 8001dc4:	3114      	adds	r1, #20
 8001dc6:	428b      	cmp	r3, r1
 8001dc8:	d019      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x212>
 8001dca:	3114      	adds	r1, #20
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d019      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x218>
 8001dd0:	3114      	adds	r1, #20
 8001dd2:	428b      	cmp	r3, r1
 8001dd4:	d019      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x21e>
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01a      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x224>
 8001dda:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <HAL_DMA_IRQHandler+0x278>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01a      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x22a>
 8001de0:	3214      	adds	r2, #20
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x22e>
 8001de6:	3214      	adds	r2, #20
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x232>
 8001dec:	3214      	adds	r2, #20
 8001dee:	4293      	cmp	r3, r2
 8001df0:	bf14      	ite	ne
 8001df2:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001df6:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_DMA_IRQHandler+0x27c>)
 8001dfc:	e7c1      	b.n	8001d82 <HAL_DMA_IRQHandler+0x196>
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	e7fa      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	e7f7      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
 8001e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e0e:	e7f4      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
 8001e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e14:	e7f1      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e7ef      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e7ed      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
 8001e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e22:	e7ea      	b.n	8001dfa <HAL_DMA_IRQHandler+0x20e>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e24:	2508      	movs	r5, #8
 8001e26:	4095      	lsls	r5, r2
 8001e28:	4225      	tst	r5, r4
 8001e2a:	d011      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x264>
 8001e2c:	0709      	lsls	r1, r1, #28
 8001e2e:	d50f      	bpl.n	8001e50 <HAL_DMA_IRQHandler+0x264>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	f021 010e 	bic.w	r1, r1, #14
 8001e36:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e38:	2301      	movs	r3, #1
 8001e3a:	fa03 f202 	lsl.w	r2, r3, r2
 8001e3e:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e40:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001e42:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001e46:	2300      	movs	r3, #0
 8001e48:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001e4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e4e:	e70d      	b.n	8001c6c <HAL_DMA_IRQHandler+0x80>
}
 8001e50:	bc70      	pop	{r4, r5, r6}
 8001e52:	4770      	bx	lr
 8001e54:	40020008 	.word	0x40020008
 8001e58:	40020080 	.word	0x40020080
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	4002001c 	.word	0x4002001c
 8001e64:	40020408 	.word	0x40020408
 8001e68:	40020000 	.word	0x40020000

08001e6c <ETH_Delay.constprop.4>:
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e6c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <ETH_Delay.constprop.4+0x20>)
static void ETH_Delay(uint32_t mdelay)
 8001e72:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e7a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e7c:	bf00      	nop
  }
  while (Delay --);
 8001e7e:	9b01      	ldr	r3, [sp, #4]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	9201      	str	r2, [sp, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f9      	bne.n	8001e7c <ETH_Delay.constprop.4+0x10>
}
 8001e88:	b002      	add	sp, #8
 8001e8a:	4770      	bx	lr
 8001e8c:	20000000 	.word	0x20000000

08001e90 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg1 = 0U;
 8001e90:	2300      	movs	r3, #0
{
 8001e92:	b507      	push	{r0, r1, r2, lr}
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e94:	f241 0118 	movw	r1, #4120	; 0x1018
  __IO uint32_t tmpreg1 = 0U;
 8001e98:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e9a:	6803      	ldr	r3, [r0, #0]
 8001e9c:	585a      	ldr	r2, [r3, r1]
 8001e9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ea2:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ea4:	585b      	ldr	r3, [r3, r1]
 8001ea6:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ea8:	f7ff ffe0 	bl	8001e6c <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001eac:	9a01      	ldr	r2, [sp, #4]
 8001eae:	6803      	ldr	r3, [r0, #0]
 8001eb0:	505a      	str	r2, [r3, r1]
}
 8001eb2:	b003      	add	sp, #12
 8001eb4:	f85d fb04 	ldr.w	pc, [sp], #4

08001eb8 <ETH_MACDMAConfig>:
{
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ebc:	b129      	cbz	r1, 8001eca <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001eca:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001ecc:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf08      	it	eq
 8001ed2:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                        macinit.LoopbackMode |
 8001ed6:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001eda:	bf18      	it	ne
 8001edc:	2100      	movne	r1, #0
  tmpreg1 = (heth->Instance)->MACCR;
 8001ede:	6815      	ldr	r5, [r2, #0]
                        macinit.LoopbackMode |
 8001ee0:	4303      	orrs	r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ee2:	482e      	ldr	r0, [pc, #184]	; (8001f9c <ETH_MACDMAConfig+0xe4>)
 8001ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee8:	4028      	ands	r0, r5
 8001eea:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001eec:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001eee:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef0:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001ef2:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	f7ff fd80 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001ef8:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1;
 8001efa:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efc:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg1;
 8001efe:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f00:	605a      	str	r2, [r3, #4]
  tmpreg1 = (heth->Instance)->MACFFR;
 8001f02:	685d      	ldr	r5, [r3, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f04:	f7ff fd78 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001f08:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = tmpreg1;
 8001f0c:	605d      	str	r5, [r3, #4]
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f0e:	2500      	movs	r5, #0
 8001f10:	609d      	str	r5, [r3, #8]
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f12:	60dd      	str	r5, [r3, #12]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f14:	699a      	ldr	r2, [r3, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f16:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001f1a:	0412      	lsls	r2, r2, #16
 8001f1c:	0c12      	lsrs	r2, r2, #16
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f22:	619a      	str	r2, [r3, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f24:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f26:	f7ff fd67 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f2a:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f2c:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = tmpreg1;
 8001f2e:	619e      	str	r6, [r3, #24]
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001f30:	61dd      	str	r5, [r3, #28]
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f32:	69dd      	ldr	r5, [r3, #28]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f34:	f7ff fd60 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001f38:	6822      	ldr	r2, [r4, #0]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <ETH_MACDMAConfig+0xe8>)
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001f3c:	61d5      	str	r5, [r2, #28]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f3e:	f241 0518 	movw	r5, #4120	; 0x1018
 8001f42:	5951      	ldr	r1, [r2, r5]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f44:	2001      	movs	r0, #1
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f46:	400b      	ands	r3, r1
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001f48:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f50:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f52:	5956      	ldr	r6, [r2, r5]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f54:	f7ff fd50 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f58:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <ETH_MACDMAConfig+0xec>)
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f5c:	515e      	str	r6, [r3, r5]
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	601a      	str	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f64:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f66:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f68:	f7ff fd46 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f6c:	6822      	ldr	r2, [r4, #0]
 8001f6e:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001f72:	601d      	str	r5, [r3, #0]
  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f74:	69a3      	ldr	r3, [r4, #24]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <ETH_MACDMAConfig+0xd2>
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f7a:	f241 011c 	movw	r1, #4124	; 0x101c
 8001f7e:	5853      	ldr	r3, [r2, r1]
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	5053      	str	r3, [r2, r1]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f8a:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f8e:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f90:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f92:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <ETH_MACDMAConfig+0xf4>)
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	bf00      	nop
 8001f9c:	ff20810f 	.word	0xff20810f
 8001fa0:	f8de3f23 	.word	0xf8de3f23
 8001fa4:	02c12000 	.word	0x02c12000
 8001fa8:	40028040 	.word	0x40028040
 8001fac:	40028044 	.word	0x40028044

08001fb0 <HAL_ETH_DMATxDescListInit>:
{
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8001fb4:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001fb8:	2c01      	cmp	r4, #1
 8001fba:	f04f 0402 	mov.w	r4, #2
 8001fbe:	d031      	beq.n	8002024 <HAL_ETH_DMATxDescListInit+0x74>
 8001fc0:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001fc2:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8001fc6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  for (i = 0U; i < TxBuffCount; i++)
 8001fca:	460c      	mov	r4, r1
 8001fcc:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001fce:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001fd2:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  heth->TxDesc = DMATxDescTab;
 8001fd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (i < (TxBuffCount - 1U))
 8001fd8:	f103 3eff 	add.w	lr, r3, #4294967295
  for (i = 0U; i < TxBuffCount; i++)
 8001fdc:	429d      	cmp	r5, r3
 8001fde:	d10c      	bne.n	8001ffa <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001fe0:	f241 0310 	movw	r3, #4112	; 0x1010
 8001fe4:	6802      	ldr	r2, [r0, #0]
 8001fe6:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001ff4:	4618      	mov	r0, r3
}
 8001ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001ffa:	fb0c 2605 	mla	r6, ip, r5, r2
 8001ffe:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002000:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8002002:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002004:	b91e      	cbnz	r6, 800200e <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002006:	6826      	ldr	r6, [r4, #0]
 8002008:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800200c:	6026      	str	r6, [r4, #0]
 800200e:	f104 0610 	add.w	r6, r4, #16
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8002012:	45ae      	cmp	lr, r5
 8002014:	bf94      	ite	ls
 8002016:	4688      	movls	r8, r1
 8002018:	46b0      	movhi	r8, r6
 800201a:	3501      	adds	r5, #1
 800201c:	f8c4 800c 	str.w	r8, [r4, #12]
 8002020:	4634      	mov	r4, r6
 8002022:	e7db      	b.n	8001fdc <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8002024:	4620      	mov	r0, r4
 8002026:	e7e6      	b.n	8001ff6 <HAL_ETH_DMATxDescListInit+0x46>

08002028 <HAL_ETH_DMARxDescListInit>:
{
 8002028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 800202c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002030:	2c01      	cmp	r4, #1
 8002032:	f04f 0402 	mov.w	r4, #2
 8002036:	d02f      	beq.n	8002098 <HAL_ETH_DMARxDescListInit+0x70>
 8002038:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800203a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800203e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  for (i = 0U; i < RxBuffCount; i++)
 8002042:	460c      	mov	r4, r1
 8002044:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002046:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800204a:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800204e:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  heth->RxDesc = DMARxDescTab;
 8002052:	6281      	str	r1, [r0, #40]	; 0x28
    if (i < (RxBuffCount - 1U))
 8002054:	f103 38ff 	add.w	r8, r3, #4294967295
  for (i = 0U; i < RxBuffCount; i++)
 8002058:	42ab      	cmp	r3, r5
 800205a:	d10c      	bne.n	8002076 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800205c:	f241 030c 	movw	r3, #4108	; 0x100c
 8002060:	6802      	ldr	r2, [r0, #0]
 8002062:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8002064:	2301      	movs	r3, #1
 8002066:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800206a:	2300      	movs	r3, #0
 800206c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002070:	4618      	mov	r0, r3
}
 8002072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8002076:	fb0e 2605 	mla	r6, lr, r5, r2
 800207a:	60a6      	str	r6, [r4, #8]
 800207c:	f104 0610 	add.w	r6, r4, #16
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8002080:	45a8      	cmp	r8, r5
 8002082:	bf94      	ite	ls
 8002084:	4689      	movls	r9, r1
 8002086:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002088:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800208a:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800208e:	f8c4 900c 	str.w	r9, [r4, #12]
 8002092:	3501      	adds	r5, #1
 8002094:	4634      	mov	r4, r6
 8002096:	e7df      	b.n	8002058 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8002098:	4620      	mov	r0, r4
 800209a:	e7ea      	b.n	8002072 <HAL_ETH_DMARxDescListInit+0x4a>

0800209c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800209c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f04f 0302 	mov.w	r3, #2
 80020a8:	d069      	beq.n	800217e <HAL_ETH_TransmitFrame+0xe2>
 80020aa:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80020ac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80020b0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0U)
 80020b4:	b929      	cbnz	r1, 80020c2 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80020b6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80020ba:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80020be:	4610      	mov	r0, r2
}
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80020c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80020c4:	681c      	ldr	r4, [r3, #0]
 80020c6:	2c00      	cmp	r4, #0
 80020c8:	da06      	bge.n	80020d8 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80020ca:	2312      	movs	r3, #18
 80020cc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80020d0:	2300      	movs	r3, #0
 80020d2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80020d6:	e7f2      	b.n	80020be <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80020d8:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80020dc:	42a1      	cmp	r1, r4
 80020de:	d92f      	bls.n	8002140 <HAL_ETH_TransmitFrame+0xa4>
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80020e0:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE)
 80020e4:	fb04 1412 	mls	r4, r4, r2, r1
 80020e8:	b344      	cbz	r4, 800213c <HAL_ETH_TransmitFrame+0xa0>
      bufcount++;
 80020ea:	3201      	adds	r2, #1
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80020ec:	4c25      	ldr	r4, [pc, #148]	; (8002184 <HAL_ETH_TransmitFrame+0xe8>)
 80020ee:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80020f2:	fb04 1102 	mla	r1, r4, r2, r1
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80020f6:	f240 57f4 	movw	r7, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80020fa:	2400      	movs	r4, #0
 80020fc:	f3c1 010c 	ubfx	r1, r1, #0, #13
      if (i == (bufcount - 1U))
 8002100:	1e56      	subs	r6, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002102:	681d      	ldr	r5, [r3, #0]
 8002104:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8002108:	601d      	str	r5, [r3, #0]
      if (i == 0U)
 800210a:	b91c      	cbnz	r4, 8002114 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800210c:	681d      	ldr	r5, [r3, #0]
 800210e:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002112:	601d      	str	r5, [r3, #0]
      if (i == (bufcount - 1U))
 8002114:	42a6      	cmp	r6, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002116:	bf08      	it	eq
 8002118:	681d      	ldreq	r5, [r3, #0]
    for (i = 0U; i < bufcount; i++)
 800211a:	f104 0401 	add.w	r4, r4, #1
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800211e:	bf04      	itt	eq
 8002120:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8002124:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002126:	681d      	ldr	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002128:	605f      	str	r7, [r3, #4]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800212a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800212e:	bf08      	it	eq
 8002130:	6059      	streq	r1, [r3, #4]
    for (i = 0U; i < bufcount; i++)
 8002132:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002134:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002136:	68db      	ldr	r3, [r3, #12]
    for (i = 0U; i < bufcount; i++)
 8002138:	d1e3      	bne.n	8002102 <HAL_ETH_TransmitFrame+0x66>
 800213a:	e00d      	b.n	8002158 <HAL_ETH_TransmitFrame+0xbc>
  if (bufcount == 1U)
 800213c:	2a01      	cmp	r2, #1
 800213e:	d1d5      	bne.n	80020ec <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8002140:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002142:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8002146:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800214a:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800214c:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800214e:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002150:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002154:	601a      	str	r2, [r3, #0]
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002156:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002158:	f241 0214 	movw	r2, #4116	; 0x1014
 800215c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800215e:	6803      	ldr	r3, [r0, #0]
 8002160:	5899      	ldr	r1, [r3, r2]
 8002162:	0749      	lsls	r1, r1, #29
 8002164:	d505      	bpl.n	8002172 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002166:	2104      	movs	r1, #4
 8002168:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 800216a:	f241 0204 	movw	r2, #4100	; 0x1004
 800216e:	2100      	movs	r1, #0
 8002170:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8002172:	2301      	movs	r3, #1
 8002174:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002178:	2300      	movs	r3, #0
 800217a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 800217e:	4618      	mov	r0, r3
 8002180:	e79e      	b.n	80020c0 <HAL_ETH_TransmitFrame+0x24>
 8002182:	bf00      	nop
 8002184:	fffffa0c 	.word	0xfffffa0c

08002188 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8002188:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 800218c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 800218e:	2b01      	cmp	r3, #1
 8002190:	f04f 0302 	mov.w	r3, #2
 8002194:	d023      	beq.n	80021de <HAL_ETH_GetReceivedFrame+0x56>
 8002196:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002198:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800219c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 800219e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	db27      	blt.n	80021f8 <HAL_ETH_GetReceivedFrame+0x70>
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80021b0:	d017      	beq.n	80021e2 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 80021b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80021b4:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 80021b6:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 80021b8:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80021ba:	bf08      	it	eq
 80021bc:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80021be:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 80021c0:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80021c2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80021c6:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 80021c8:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80021ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80021cc:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80021ce:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80021d0:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80021d8:	2300      	movs	r3, #0
 80021da:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd30      	pop	{r4, r5, pc}
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80021e2:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80021e4:	6281      	str	r1, [r0, #40]	; 0x28
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80021e6:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 80021e8:	bf55      	itete	pl
 80021ea:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80021ec:	e9c0 320c 	strdmi	r3, r2, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 80021f0:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).SegCount = 1U;
 80021f2:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 80021f4:	bf58      	it	pl
 80021f6:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 80021f8:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80021fa:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 80021fc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002200:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8002204:	e7eb      	b.n	80021de <HAL_ETH_GetReceivedFrame+0x56>

08002206 <HAL_ETH_TxCpltCallback>:
 8002206:	4770      	bx	lr

08002208 <HAL_ETH_RxCpltCallback>:
 8002208:	4770      	bx	lr

0800220a <HAL_ETH_ErrorCallback>:
 800220a:	4770      	bx	lr

0800220c <HAL_ETH_IRQHandler>:
{
 800220c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 800220e:	f241 0614 	movw	r6, #4116	; 0x1014
 8002212:	6802      	ldr	r2, [r0, #0]
{
 8002214:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8002216:	5995      	ldr	r5, [r2, r6]
 8002218:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800221c:	d021      	beq.n	8002262 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 800221e:	f7ff fff3 	bl	8002208 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8002228:	2301      	movs	r3, #1
 800222a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800222e:	2300      	movs	r3, #0
 8002230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002234:	f241 0514 	movw	r5, #4116	; 0x1014
 8002238:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	515a      	str	r2, [r3, r5]
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002240:	595b      	ldr	r3, [r3, r5]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	d50c      	bpl.n	8002260 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff ffdf 	bl	800220a <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800224c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8002254:	2301      	movs	r3, #1
 8002256:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800225a:	2300      	movs	r3, #0
 800225c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002260:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8002262:	5993      	ldr	r3, [r2, r6]
 8002264:	07da      	lsls	r2, r3, #31
 8002266:	d5e5      	bpl.n	8002234 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8002268:	f7ff ffcd 	bl	8002206 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800226c:	2301      	movs	r3, #1
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8002272:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002276:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800227a:	e7db      	b.n	8002234 <HAL_ETH_IRQHandler+0x28>

0800227c <HAL_ETH_ReadPHYRegister>:
{
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 800227e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002282:	4605      	mov	r5, r0
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002284:	2b82      	cmp	r3, #130	; 0x82
{
 8002286:	4616      	mov	r6, r2
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002288:	d030      	beq.n	80022ec <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800228a:	2382      	movs	r3, #130	; 0x82
 800228c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8002290:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002292:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002294:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002296:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800229a:	f044 0401 	orr.w	r4, r4, #1
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800229e:	f000 001c 	and.w	r0, r0, #28
 80022a2:	4320      	orrs	r0, r4
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80022a4:	8a2c      	ldrh	r4, [r5, #16]
 80022a6:	02e4      	lsls	r4, r4, #11
 80022a8:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80022aa:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg1;
 80022ac:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80022ae:	f7ff fb9d 	bl	80019ec <HAL_GetTick>
 80022b2:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022b4:	f014 0001 	ands.w	r0, r4, #1
 80022b8:	d107      	bne.n	80022ca <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80022c8:	e00c      	b.n	80022e4 <HAL_ETH_ReadPHYRegister+0x68>
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80022ca:	f7ff fb8f 	bl	80019ec <HAL_GetTick>
 80022ce:	1bc0      	subs	r0, r0, r7
 80022d0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80022d4:	d307      	bcc.n	80022e6 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State = HAL_ETH_STATE_READY;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80022dc:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80022de:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 80022e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80022e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	691c      	ldr	r4, [r3, #16]
 80022ea:	e7e3      	b.n	80022b4 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80022ec:	2002      	movs	r0, #2
 80022ee:	e7f9      	b.n	80022e4 <HAL_ETH_ReadPHYRegister+0x68>

080022f0 <HAL_ETH_WritePHYRegister>:
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80022f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80022f4:	b570      	push	{r4, r5, r6, lr}
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80022f6:	2b42      	cmp	r3, #66	; 0x42
{
 80022f8:	4605      	mov	r5, r0
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80022fa:	d02e      	beq.n	800235a <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022fc:	2342      	movs	r3, #66	; 0x42
 80022fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8002302:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002304:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002306:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002308:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800230c:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002310:	f000 001c 	and.w	r0, r0, #28
 8002314:	4320      	orrs	r0, r4
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002316:	8a2c      	ldrh	r4, [r5, #16]
 8002318:	b292      	uxth	r2, r2
 800231a:	02e4      	lsls	r4, r4, #11
 800231c:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800231e:	4304      	orrs	r4, r0
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002320:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8002322:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002324:	f7ff fb62 	bl	80019ec <HAL_GetTick>
 8002328:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800232a:	f014 0001 	ands.w	r0, r4, #1
 800232e:	d103      	bne.n	8002338 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8002330:	2301      	movs	r3, #1
 8002332:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8002336:	e00c      	b.n	8002352 <HAL_ETH_WritePHYRegister+0x62>
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002338:	f7ff fb58 	bl	80019ec <HAL_GetTick>
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002342:	d307      	bcc.n	8002354 <HAL_ETH_WritePHYRegister+0x64>
      heth->State = HAL_ETH_STATE_READY;
 8002344:	2301      	movs	r3, #1
 8002346:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800234a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800234c:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 800234e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8002352:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	691c      	ldr	r4, [r3, #16]
 8002358:	e7e7      	b.n	800232a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800235a:	2002      	movs	r0, #2
 800235c:	e7f9      	b.n	8002352 <HAL_ETH_WritePHYRegister+0x62>
	...

08002360 <HAL_ETH_Init>:
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002360:	2300      	movs	r3, #0
{
 8002362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (heth == NULL)
 8002364:	4604      	mov	r4, r0
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002366:	9301      	str	r3, [sp, #4]
  if (heth == NULL)
 8002368:	2800      	cmp	r0, #0
 800236a:	f000 80c3 	beq.w	80024f4 <HAL_ETH_Init+0x194>
  if (heth->State == HAL_ETH_STATE_RESET)
 800236e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002376:	b91b      	cbnz	r3, 8002380 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8002378:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800237c:	f001 fad0 	bl	8003920 <HAL_ETH_MspInit>
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8002380:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_ETH_Init+0x198>)
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002388:	605a      	str	r2, [r3, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	6a21      	ldr	r1, [r4, #32]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80023a0:	f7ff fb24 	bl	80019ec <HAL_GetTick>
 80023a4:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	07d0      	lsls	r0, r2, #31
 80023b0:	d41d      	bmi.n	80023ee <HAL_ETH_Init+0x8e>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80023b2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80023b4:	f000 fda4 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_ETH_Init+0x19c>)
 80023ba:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_ETH_Init+0x1a0>)
 80023bc:	4403      	add	r3, r0
 80023be:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80023c0:	f025 051c 	bic.w	r5, r5, #28
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80023c4:	d822      	bhi.n	800240c <HAL_ETH_Init+0xac>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 80023c6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80023ca:	6823      	ldr	r3, [r4, #0]
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80023cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80023d0:	611d      	str	r5, [r3, #16]
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80023d2:	2100      	movs	r1, #0
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff ff8b 	bl	80022f0 <HAL_ETH_WritePHYRegister>
 80023da:	4605      	mov	r5, r0
 80023dc:	b1f0      	cbz	r0, 800241c <HAL_ETH_Init+0xbc>
      heth->State = HAL_ETH_STATE_READY;
 80023de:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80023e0:	2101      	movs	r1, #1
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff fd68 	bl	8001eb8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80023e8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80023ec:	e00b      	b.n	8002406 <HAL_ETH_Init+0xa6>
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80023ee:	f7ff fafd 	bl	80019ec <HAL_GetTick>
 80023f2:	1b40      	subs	r0, r0, r5
 80023f4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80023f8:	d9d5      	bls.n	80023a6 <HAL_ETH_Init+0x46>
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80023fa:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80023fc:	2300      	movs	r3, #0
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80023fe:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002406:	4628      	mov	r0, r5
 8002408:	b003      	add	sp, #12
 800240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_ETH_Init+0x1a4>)
 800240e:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <HAL_ETH_Init+0x1a8>)
 8002410:	4403      	add	r3, r0
 8002412:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8002414:	bf98      	it	ls
 8002416:	f045 050c 	orrls.w	r5, r5, #12
 800241a:	e7d6      	b.n	80023ca <HAL_ETH_Init+0x6a>
  HAL_Delay(PHY_RESET_DELAY);
 800241c:	20ff      	movs	r0, #255	; 0xff
 800241e:	f7ff faeb 	bl	80019f8 <HAL_Delay>
  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002422:	6863      	ldr	r3, [r4, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d053      	beq.n	80024d0 <HAL_ETH_Init+0x170>
    tickstart = HAL_GetTick();
 8002428:	f7ff fae0 	bl	80019ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800242c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002430:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002432:	aa01      	add	r2, sp, #4
 8002434:	2101      	movs	r1, #1
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff ff20 	bl	800227c <HAL_ETH_ReadPHYRegister>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800243c:	f7ff fad6 	bl	80019ec <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	42b8      	cmp	r0, r7
 8002444:	d90b      	bls.n	800245e <HAL_ETH_Init+0xfe>
        ETH_MACDMAConfig(heth, err);
 8002446:	2101      	movs	r1, #1
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff fd35 	bl	8001eb8 <ETH_MACDMAConfig>
        heth->State = HAL_ETH_STATE_READY;
 800244e:	2301      	movs	r3, #1
 8002450:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8002454:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002456:	2503      	movs	r5, #3
        __HAL_UNLOCK(heth);
 8002458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800245c:	e7d3      	b.n	8002406 <HAL_ETH_Init+0xa6>
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	0759      	lsls	r1, r3, #29
 8002462:	d5e6      	bpl.n	8002432 <HAL_ETH_Init+0xd2>
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002468:	2100      	movs	r1, #0
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff ff40 	bl	80022f0 <HAL_ETH_WritePHYRegister>
 8002470:	2800      	cmp	r0, #0
 8002472:	d1b4      	bne.n	80023de <HAL_ETH_Init+0x7e>
    tickstart = HAL_GetTick();
 8002474:	f7ff faba 	bl	80019ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002478:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800247c:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800247e:	aa01      	add	r2, sp, #4
 8002480:	2101      	movs	r1, #1
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff fefa 	bl	800227c <HAL_ETH_ReadPHYRegister>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002488:	f7ff fab0 	bl	80019ec <HAL_GetTick>
 800248c:	1b80      	subs	r0, r0, r6
 800248e:	42b8      	cmp	r0, r7
 8002490:	d8d9      	bhi.n	8002446 <HAL_ETH_Init+0xe6>
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002492:	9b01      	ldr	r3, [sp, #4]
 8002494:	069a      	lsls	r2, r3, #26
 8002496:	d5f2      	bpl.n	800247e <HAL_ETH_Init+0x11e>
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002498:	aa01      	add	r2, sp, #4
 800249a:	2110      	movs	r1, #16
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff feed 	bl	800227c <HAL_ETH_ReadPHYRegister>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d19b      	bne.n	80023de <HAL_ETH_Init+0x7e>
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80024ac:	bf18      	it	ne
 80024ae:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80024b2:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M;
 80024b4:	bf4c      	ite	mi
 80024b6:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 80024b8:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80024bc:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 80024be:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 80024c0:	2100      	movs	r1, #0
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff fcf8 	bl	8001eb8 <ETH_MACDMAConfig>
  heth->State = HAL_ETH_STATE_READY;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80024ce:	e79a      	b.n	8002406 <HAL_ETH_Init+0xa6>
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80024d0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80024d4:	085b      	lsrs	r3, r3, #1
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80024d6:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80024da:	b292      	uxth	r2, r2
 80024dc:	4629      	mov	r1, r5
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff ff06 	bl	80022f0 <HAL_ETH_WritePHYRegister>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	f47f af7a 	bne.w	80023de <HAL_ETH_Init+0x7e>
    HAL_Delay(PHY_CONFIG_DELAY);
 80024ea:	f640 70ff 	movw	r0, #4095	; 0xfff
 80024ee:	f7ff fa83 	bl	80019f8 <HAL_Delay>
 80024f2:	e7e5      	b.n	80024c0 <HAL_ETH_Init+0x160>
    return HAL_ERROR;
 80024f4:	2501      	movs	r5, #1
 80024f6:	e786      	b.n	8002406 <HAL_ETH_Init+0xa6>
 80024f8:	40010000 	.word	0x40010000
 80024fc:	feced300 	.word	0xfeced300
 8002500:	00e4e1bf 	.word	0x00e4e1bf
 8002504:	fde9f140 	.word	0xfde9f140
 8002508:	017d783f 	.word	0x017d783f

0800250c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800250c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002510:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8002512:	2b01      	cmp	r3, #1
{
 8002514:	4605      	mov	r5, r0
 8002516:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 800251a:	d031      	beq.n	8002580 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 800251c:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 800251e:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002520:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002522:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8002526:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002528:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 800252a:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002538:	f7ff fc98 	bl	8001e6c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 800253c:	9a01      	ldr	r2, [sp, #4]
 800253e:	682b      	ldr	r3, [r5, #0]
 8002540:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8002542:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f042 0204 	orr.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002550:	f7ff fc8c 	bl	8001e6c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	9a00      	ldr	r2, [sp, #0]
  ETH_FlushTransmitFIFO(heth);
 8002558:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg1;
 800255a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 800255c:	f7ff fc98 	bl	8001e90 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002560:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8002564:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002566:	682a      	ldr	r2, [r5, #0]
 8002568:	58d1      	ldr	r1, [r2, r3]
 800256a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800256e:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002570:	58d1      	ldr	r1, [r2, r3]
 8002572:	f041 0102 	orr.w	r1, r1, #2
 8002576:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8002578:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800257c:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8002580:	b002      	add	sp, #8
 8002582:	bd70      	pop	{r4, r5, r6, pc}

08002584 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8002584:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002588:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800258a:	2b01      	cmp	r3, #1
{
 800258c:	4605      	mov	r5, r0
 800258e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8002592:	d031      	beq.n	80025f8 <HAL_ETH_Stop+0x74>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002594:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
 8002598:	2601      	movs	r6, #1
  __IO uint32_t tmpreg1 = 0U;
 800259a:	2400      	movs	r4, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800259c:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800259e:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025a2:	5899      	ldr	r1, [r3, r2]
  __HAL_LOCK(heth);
 80025a4:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025a8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80025ac:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025ae:	5899      	ldr	r1, [r3, r2]
 80025b0:	f021 0102 	bic.w	r1, r1, #2
 80025b4:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg1 = 0U;
 80025b6:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025c4:	f7ff fc52 	bl	8001e6c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	9a01      	ldr	r2, [sp, #4]
  ETH_FlushTransmitFIFO(heth);
 80025cc:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg1;
 80025ce:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80025d0:	f7ff fc5e 	bl	8001e90 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025d4:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t tmpreg1 = 0U;
 80025d6:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f022 0208 	bic.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025e4:	f7ff fc42 	bl	8001e6c <ETH_Delay.constprop.4>
  return HAL_OK;
 80025e8:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg1;
 80025ea:	9a00      	ldr	r2, [sp, #0]
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 80025f0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80025f4:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 80025f8:	b002      	add	sp, #8
 80025fa:	bd70      	pop	{r4, r5, r6, pc}

080025fc <HAL_ETH_ConfigMAC>:
{
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80025fe:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002602:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8002604:	2b01      	cmp	r3, #1
{
 8002606:	460c      	mov	r4, r1
 8002608:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 800260c:	d071      	beq.n	80026f2 <HAL_ETH_ConfigMAC+0xf6>
 800260e:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002610:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8002614:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
 8002618:	682a      	ldr	r2, [r5, #0]
 800261a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (macconf != NULL)
 800261e:	2900      	cmp	r1, #0
 8002620:	d068      	beq.n	80026f4 <HAL_ETH_ConfigMAC+0xf8>
    tmpreg1 = (heth->Instance)->MACCR;
 8002622:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002624:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8002710 <HAL_ETH_ConfigMAC+0x114>
 8002628:	ea0c 0c03 	and.w	ip, ip, r3
                          macconf->BackOffLimit |
 800262c:	e9d1 3100 	ldrd	r3, r1, [r1]
 8002630:	430b      	orrs	r3, r1
 8002632:	68a1      	ldr	r1, [r4, #8]
 8002634:	430b      	orrs	r3, r1
 8002636:	68e1      	ldr	r1, [r4, #12]
 8002638:	430b      	orrs	r3, r1
 800263a:	6921      	ldr	r1, [r4, #16]
 800263c:	430b      	orrs	r3, r1
 800263e:	6961      	ldr	r1, [r4, #20]
 8002640:	430b      	orrs	r3, r1
 8002642:	69a1      	ldr	r1, [r4, #24]
 8002644:	430b      	orrs	r3, r1
 8002646:	69e1      	ldr	r1, [r4, #28]
 8002648:	430b      	orrs	r3, r1
 800264a:	6a21      	ldr	r1, [r4, #32]
 800264c:	430b      	orrs	r3, r1
 800264e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002650:	430b      	orrs	r3, r1
 8002652:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002654:	430b      	orrs	r3, r1
 8002656:	433b      	orrs	r3, r7
 8002658:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800265a:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800265e:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002660:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8002662:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002664:	f7ff f9c8 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002668:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 800266c:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800266e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg1;
 8002670:	682a      	ldr	r2, [r5, #0]
                                          macconf->SourceAddrFilter |
 8002672:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 8002674:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    (heth->Instance)->MACCR = tmpreg1;
 8002676:	6017      	str	r7, [r2, #0]
                                          macconf->PassControlFrames |
 8002678:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception |
 800267a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800267c:	4630      	mov	r0, r6
                                          macconf->BroadcastFramesReception |
 800267e:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8002680:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002682:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 8002684:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002686:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8002688:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800268a:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800268c:	6053      	str	r3, [r2, #4]
    tmpreg1 = (heth->Instance)->MACFFR;
 800268e:	6857      	ldr	r7, [r2, #4]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002690:	f7ff f9b2 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002694:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002696:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    (heth->Instance)->MACFFR = tmpreg1;
 8002698:	6057      	str	r7, [r2, #4]
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800269a:	6093      	str	r3, [r2, #8]
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800269c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800269e:	60d3      	str	r3, [r2, #12]
                          macconf->ReceiveFlowControl |
 80026a0:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 80026a4:	4303      	orrs	r3, r0
 80026a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    tmpreg1 = (heth->Instance)->MACFCR;
 80026a8:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 80026aa:	4303      	orrs	r3, r0
 80026ac:	6e60      	ldr	r0, [r4, #100]	; 0x64
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026ae:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 80026b2:	4303      	orrs	r3, r0
 80026b4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026b6:	0409      	lsls	r1, r1, #16
                          macconf->ReceiveFlowControl |
 80026b8:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026bc:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 80026be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026c2:	430b      	orrs	r3, r1
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026c4:	6193      	str	r3, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c6:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACFCR;
 80026c8:	6997      	ldr	r7, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ca:	f7ff f995 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80026ce:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
    (heth->Instance)->MACFCR = tmpreg1;
 80026d2:	682b      	ldr	r3, [r5, #0]
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80026d4:	430a      	orrs	r2, r1
    (heth->Instance)->MACFCR = tmpreg1;
 80026d6:	619f      	str	r7, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026d8:	4630      	mov	r0, r6
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80026da:	61da      	str	r2, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80026dc:	69dc      	ldr	r4, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026de:	f7ff f98b 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	61dc      	str	r4, [r3, #28]
  heth->State = HAL_ETH_STATE_READY;
 80026e6:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80026e8:	2000      	movs	r0, #0
  heth->State = HAL_ETH_STATE_READY;
 80026ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80026ee:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 80026f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 80026f4:	6811      	ldr	r1, [r2, #0]
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80026f6:	ea47 0300 	orr.w	r3, r7, r0
    tmpreg1 &= ~(0x00004800U);
 80026fa:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80026fe:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002700:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002702:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8002704:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002706:	f7ff f977 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	601c      	str	r4, [r3, #0]
 800270e:	e7ea      	b.n	80026e6 <HAL_ETH_ConfigMAC+0xea>
 8002710:	ff20810f 	.word	0xff20810f

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002718:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800271a:	4626      	mov	r6, r4
 800271c:	4b65      	ldr	r3, [pc, #404]	; (80028b4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80028c4 <HAL_GPIO_Init+0x1b0>
 8002722:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80028c8 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002726:	680a      	ldr	r2, [r1, #0]
 8002728:	fa32 f506 	lsrs.w	r5, r2, r6
 800272c:	d102      	bne.n	8002734 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800272e:	b003      	add	sp, #12
 8002730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002734:	f04f 0801 	mov.w	r8, #1
 8002738:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002740:	4590      	cmp	r8, r2
 8002742:	d17e      	bne.n	8002842 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8002744:	684d      	ldr	r5, [r1, #4]
 8002746:	2d12      	cmp	r5, #18
 8002748:	f000 80a9 	beq.w	800289e <HAL_GPIO_Init+0x18a>
 800274c:	f200 8082 	bhi.w	8002854 <HAL_GPIO_Init+0x140>
 8002750:	2d02      	cmp	r5, #2
 8002752:	f000 80a1 	beq.w	8002898 <HAL_GPIO_Init+0x184>
 8002756:	d876      	bhi.n	8002846 <HAL_GPIO_Init+0x132>
 8002758:	2d00      	cmp	r5, #0
 800275a:	f000 8088 	beq.w	800286e <HAL_GPIO_Init+0x15a>
 800275e:	2d01      	cmp	r5, #1
 8002760:	f000 8098 	beq.w	8002894 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002764:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002768:	2aff      	cmp	r2, #255	; 0xff
 800276a:	bf93      	iteet	ls
 800276c:	4682      	movls	sl, r0
 800276e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002772:	3d08      	subhi	r5, #8
 8002774:	f8d0 b000 	ldrls.w	fp, [r0]
 8002778:	bf92      	itee	ls
 800277a:	00b5      	lslls	r5, r6, #2
 800277c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002780:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002782:	fa09 f805 	lsl.w	r8, r9, r5
 8002786:	ea2b 0808 	bic.w	r8, fp, r8
 800278a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800278e:	bf88      	it	hi
 8002790:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002794:	ea48 0505 	orr.w	r5, r8, r5
 8002798:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80027a0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80027a4:	d04d      	beq.n	8002842 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a6:	4f44      	ldr	r7, [pc, #272]	; (80028b8 <HAL_GPIO_Init+0x1a4>)
 80027a8:	f026 0803 	bic.w	r8, r6, #3
 80027ac:	69bd      	ldr	r5, [r7, #24]
 80027ae:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80027b2:	f045 0501 	orr.w	r5, r5, #1
 80027b6:	61bd      	str	r5, [r7, #24]
 80027b8:	69bd      	ldr	r5, [r7, #24]
 80027ba:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80027be:	f005 0501 	and.w	r5, r5, #1
 80027c2:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80027ce:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027d2:	fa09 f90b 	lsl.w	r9, r9, fp
 80027d6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027da:	4d38      	ldr	r5, [pc, #224]	; (80028bc <HAL_GPIO_Init+0x1a8>)
 80027dc:	42a8      	cmp	r0, r5
 80027de:	d063      	beq.n	80028a8 <HAL_GPIO_Init+0x194>
 80027e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027e4:	42a8      	cmp	r0, r5
 80027e6:	d061      	beq.n	80028ac <HAL_GPIO_Init+0x198>
 80027e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027ec:	42a8      	cmp	r0, r5
 80027ee:	d05f      	beq.n	80028b0 <HAL_GPIO_Init+0x19c>
 80027f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027f4:	42a8      	cmp	r0, r5
 80027f6:	bf0c      	ite	eq
 80027f8:	2503      	moveq	r5, #3
 80027fa:	2504      	movne	r5, #4
 80027fc:	fa05 f50b 	lsl.w	r5, r5, fp
 8002800:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002804:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002808:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800280e:	bf14      	ite	ne
 8002810:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002812:	4395      	biceq	r5, r2
 8002814:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002816:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800281c:	bf14      	ite	ne
 800281e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002820:	4395      	biceq	r5, r2
 8002822:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002824:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002826:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800282a:	bf14      	ite	ne
 800282c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800282e:	4395      	biceq	r5, r2
 8002830:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002832:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002834:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002838:	bf14      	ite	ne
 800283a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800283c:	ea25 0202 	biceq.w	r2, r5, r2
 8002840:	60da      	str	r2, [r3, #12]
	position++;
 8002842:	3601      	adds	r6, #1
 8002844:	e76f      	b.n	8002726 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002846:	2d03      	cmp	r5, #3
 8002848:	d022      	beq.n	8002890 <HAL_GPIO_Init+0x17c>
 800284a:	2d11      	cmp	r5, #17
 800284c:	d18a      	bne.n	8002764 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800284e:	68cc      	ldr	r4, [r1, #12]
 8002850:	3404      	adds	r4, #4
          break;
 8002852:	e787      	b.n	8002764 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002854:	4f1a      	ldr	r7, [pc, #104]	; (80028c0 <HAL_GPIO_Init+0x1ac>)
 8002856:	42bd      	cmp	r5, r7
 8002858:	d009      	beq.n	800286e <HAL_GPIO_Init+0x15a>
 800285a:	d812      	bhi.n	8002882 <HAL_GPIO_Init+0x16e>
 800285c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80028cc <HAL_GPIO_Init+0x1b8>
 8002860:	454d      	cmp	r5, r9
 8002862:	d004      	beq.n	800286e <HAL_GPIO_Init+0x15a>
 8002864:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002868:	454d      	cmp	r5, r9
 800286a:	f47f af7b 	bne.w	8002764 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800286e:	688c      	ldr	r4, [r1, #8]
 8002870:	b1c4      	cbz	r4, 80028a4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002872:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002874:	bf0c      	ite	eq
 8002876:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800287a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800287e:	2408      	movs	r4, #8
 8002880:	e770      	b.n	8002764 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002882:	4565      	cmp	r5, ip
 8002884:	d0f3      	beq.n	800286e <HAL_GPIO_Init+0x15a>
 8002886:	4575      	cmp	r5, lr
 8002888:	d0f1      	beq.n	800286e <HAL_GPIO_Init+0x15a>
 800288a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80028d0 <HAL_GPIO_Init+0x1bc>
 800288e:	e7eb      	b.n	8002868 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002890:	2400      	movs	r4, #0
 8002892:	e767      	b.n	8002764 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002894:	68cc      	ldr	r4, [r1, #12]
          break;
 8002896:	e765      	b.n	8002764 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002898:	68cc      	ldr	r4, [r1, #12]
 800289a:	3408      	adds	r4, #8
          break;
 800289c:	e762      	b.n	8002764 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800289e:	68cc      	ldr	r4, [r1, #12]
 80028a0:	340c      	adds	r4, #12
          break;
 80028a2:	e75f      	b.n	8002764 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028a4:	2404      	movs	r4, #4
 80028a6:	e75d      	b.n	8002764 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a8:	2500      	movs	r5, #0
 80028aa:	e7a7      	b.n	80027fc <HAL_GPIO_Init+0xe8>
 80028ac:	2501      	movs	r5, #1
 80028ae:	e7a5      	b.n	80027fc <HAL_GPIO_Init+0xe8>
 80028b0:	2502      	movs	r5, #2
 80028b2:	e7a3      	b.n	80027fc <HAL_GPIO_Init+0xe8>
 80028b4:	40010400 	.word	0x40010400
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010800 	.word	0x40010800
 80028c0:	10210000 	.word	0x10210000
 80028c4:	10310000 	.word	0x10310000
 80028c8:	10320000 	.word	0x10320000
 80028cc:	10110000 	.word	0x10110000
 80028d0:	10220000 	.word	0x10220000

080028d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d4:	b10a      	cbz	r2, 80028da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028d6:	6101      	str	r1, [r0, #16]
  }
}
 80028d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028da:	0409      	lsls	r1, r1, #16
 80028dc:	e7fb      	b.n	80028d6 <HAL_GPIO_WritePin+0x2>
	...

080028e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80028e4:	6959      	ldr	r1, [r3, #20]
 80028e6:	4201      	tst	r1, r0
 80028e8:	d002      	beq.n	80028f0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ec:	f7fe fc1c 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f0:	bd08      	pop	{r3, pc}
 80028f2:	bf00      	nop
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028fc:	4604      	mov	r4, r0
 80028fe:	b918      	cbnz	r0, 8002908 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8002902:	b002      	add	sp, #8
 8002904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	07db      	lsls	r3, r3, #31
 800290c:	d414      	bmi.n	8002938 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	079f      	lsls	r7, r3, #30
 8002912:	d45f      	bmi.n	80029d4 <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	0719      	lsls	r1, r3, #28
 8002918:	f100 8096 	bmi.w	8002a48 <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	075a      	lsls	r2, r3, #29
 8002920:	f100 80c0 	bmi.w	8002aa4 <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002924:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002926:	2a00      	cmp	r2, #0
 8002928:	f040 812e 	bne.w	8002b88 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292c:	6a22      	ldr	r2, [r4, #32]
 800292e:	2a00      	cmp	r2, #0
 8002930:	f040 8181 	bne.w	8002c36 <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
 8002936:	e7e4      	b.n	8002902 <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	4d8e      	ldr	r5, [pc, #568]	; (8002b74 <HAL_RCC_OscConfig+0x27c>)
 800293a:	686b      	ldr	r3, [r5, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	d007      	beq.n	8002954 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002944:	686b      	ldr	r3, [r5, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d109      	bne.n	8002962 <HAL_RCC_OscConfig+0x6a>
 800294e:	686b      	ldr	r3, [r5, #4]
 8002950:	03de      	lsls	r6, r3, #15
 8002952:	d506      	bpl.n	8002962 <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	039d      	lsls	r5, r3, #14
 8002958:	d5d9      	bpl.n	800290e <HAL_RCC_OscConfig+0x16>
 800295a:	68a3      	ldr	r3, [r4, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1d6      	bne.n	800290e <HAL_RCC_OscConfig+0x16>
 8002960:	e7ce      	b.n	8002900 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002962:	68a3      	ldr	r3, [r4, #8]
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d110      	bne.n	800298c <HAL_RCC_OscConfig+0x94>
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002972:	f7ff f83b 	bl	80019ec <HAL_GetTick>
 8002976:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	0398      	lsls	r0, r3, #14
 800297c:	d4c7      	bmi.n	800290e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297e:	f7ff f835 	bl	80019ec <HAL_GetTick>
 8002982:	1b80      	subs	r0, r0, r6
 8002984:	2864      	cmp	r0, #100	; 0x64
 8002986:	d9f7      	bls.n	8002978 <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 8002988:	2003      	movs	r0, #3
 800298a:	e7ba      	b.n	8002902 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298c:	b99b      	cbnz	r3, 80029b6 <HAL_RCC_OscConfig+0xbe>
 800298e:	682b      	ldr	r3, [r5, #0]
 8002990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002994:	602b      	str	r3, [r5, #0]
 8002996:	682b      	ldr	r3, [r5, #0]
 8002998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800299e:	f7ff f825 	bl	80019ec <HAL_GetTick>
 80029a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	0399      	lsls	r1, r3, #14
 80029a8:	d5b1      	bpl.n	800290e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029aa:	f7ff f81f 	bl	80019ec <HAL_GetTick>
 80029ae:	1b80      	subs	r0, r0, r6
 80029b0:	2864      	cmp	r0, #100	; 0x64
 80029b2:	d9f7      	bls.n	80029a4 <HAL_RCC_OscConfig+0xac>
 80029b4:	e7e8      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ba:	682b      	ldr	r3, [r5, #0]
 80029bc:	d103      	bne.n	80029c6 <HAL_RCC_OscConfig+0xce>
 80029be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c2:	602b      	str	r3, [r5, #0]
 80029c4:	e7d1      	b.n	800296a <HAL_RCC_OscConfig+0x72>
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	e7cd      	b.n	8002970 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d4:	4d67      	ldr	r5, [pc, #412]	; (8002b74 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	686b      	ldr	r3, [r5, #4]
 80029d8:	f013 0f0c 	tst.w	r3, #12
 80029dc:	d007      	beq.n	80029ee <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029de:	686b      	ldr	r3, [r5, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d110      	bne.n	8002a0a <HAL_RCC_OscConfig+0x112>
 80029e8:	686b      	ldr	r3, [r5, #4]
 80029ea:	03da      	lsls	r2, r3, #15
 80029ec:	d40d      	bmi.n	8002a0a <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	682b      	ldr	r3, [r5, #0]
 80029f0:	079b      	lsls	r3, r3, #30
 80029f2:	d502      	bpl.n	80029fa <HAL_RCC_OscConfig+0x102>
 80029f4:	6963      	ldr	r3, [r4, #20]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d182      	bne.n	8002900 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	682b      	ldr	r3, [r5, #0]
 80029fc:	69a2      	ldr	r2, [r4, #24]
 80029fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a06:	602b      	str	r3, [r5, #0]
 8002a08:	e784      	b.n	8002914 <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0a:	6962      	ldr	r2, [r4, #20]
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	b16a      	cbz	r2, 8002a2c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a14:	f7fe ffea 	bl	80019ec <HAL_GetTick>
 8002a18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	079f      	lsls	r7, r3, #30
 8002a1e:	d4ec      	bmi.n	80029fa <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe ffe4 	bl	80019ec <HAL_GetTick>
 8002a24:	1b80      	subs	r0, r0, r6
 8002a26:	2802      	cmp	r0, #2
 8002a28:	d9f7      	bls.n	8002a1a <HAL_RCC_OscConfig+0x122>
 8002a2a:	e7ad      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 8002a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a2e:	f7fe ffdd 	bl	80019ec <HAL_GetTick>
 8002a32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	0798      	lsls	r0, r3, #30
 8002a38:	f57f af6c 	bpl.w	8002914 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe ffd6 	bl	80019ec <HAL_GetTick>
 8002a40:	1b80      	subs	r0, r0, r6
 8002a42:	2802      	cmp	r0, #2
 8002a44:	d9f6      	bls.n	8002a34 <HAL_RCC_OscConfig+0x13c>
 8002a46:	e79f      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a48:	69e2      	ldr	r2, [r4, #28]
 8002a4a:	4d4a      	ldr	r5, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x27c>)
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x284>)
 8002a4e:	b1da      	cbz	r2, 8002a88 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a54:	f7fe ffca 	bl	80019ec <HAL_GetTick>
 8002a58:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002a5c:	079b      	lsls	r3, r3, #30
 8002a5e:	d50d      	bpl.n	8002a7c <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a60:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_RCC_OscConfig+0x288>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a6c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002a6e:	bf00      	nop
  }
  while (Delay --);
 8002a70:	9b01      	ldr	r3, [sp, #4]
 8002a72:	1e5a      	subs	r2, r3, #1
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_RCC_OscConfig+0x176>
 8002a7a:	e74f      	b.n	800291c <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe ffb6 	bl	80019ec <HAL_GetTick>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	2802      	cmp	r0, #2
 8002a84:	d9e9      	bls.n	8002a5a <HAL_RCC_OscConfig+0x162>
 8002a86:	e77f      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 8002a88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a8a:	f7fe ffaf 	bl	80019ec <HAL_GetTick>
 8002a8e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002a92:	079f      	lsls	r7, r3, #30
 8002a94:	f57f af42 	bpl.w	800291c <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe ffa8 	bl	80019ec <HAL_GetTick>
 8002a9c:	1b80      	subs	r0, r0, r6
 8002a9e:	2802      	cmp	r0, #2
 8002aa0:	d9f6      	bls.n	8002a90 <HAL_RCC_OscConfig+0x198>
 8002aa2:	e771      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa4:	4d33      	ldr	r5, [pc, #204]	; (8002b74 <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	69eb      	ldr	r3, [r5, #28]
 8002aa8:	00de      	lsls	r6, r3, #3
 8002aaa:	d424      	bmi.n	8002af6 <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 8002aac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	69eb      	ldr	r3, [r5, #28]
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61eb      	str	r3, [r5, #28]
 8002ab6:	69eb      	ldr	r3, [r5, #28]
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4e30      	ldr	r6, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x28c>)
 8002ac2:	6833      	ldr	r3, [r6, #0]
 8002ac4:	05d8      	lsls	r0, r3, #23
 8002ac6:	d518      	bpl.n	8002afa <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	6923      	ldr	r3, [r4, #16]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d126      	bne.n	8002b1c <HAL_RCC_OscConfig+0x224>
 8002ace:	6a2b      	ldr	r3, [r5, #32]
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002ad6:	f7fe ff89 	bl	80019ec <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ade:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	6a2b      	ldr	r3, [r5, #32]
 8002ae2:	079a      	lsls	r2, r3, #30
 8002ae4:	d53f      	bpl.n	8002b66 <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	f43f af1c 	beq.w	8002924 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	69eb      	ldr	r3, [r5, #28]
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	61eb      	str	r3, [r5, #28]
 8002af4:	e716      	b.n	8002924 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2700      	movs	r7, #0
 8002af8:	e7e2      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	6833      	ldr	r3, [r6, #0]
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b02:	f7fe ff73 	bl	80019ec <HAL_GetTick>
 8002b06:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	6833      	ldr	r3, [r6, #0]
 8002b0a:	05d9      	lsls	r1, r3, #23
 8002b0c:	d4dc      	bmi.n	8002ac8 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe ff6d 	bl	80019ec <HAL_GetTick>
 8002b12:	eba0 0008 	sub.w	r0, r0, r8
 8002b16:	2864      	cmp	r0, #100	; 0x64
 8002b18:	d9f6      	bls.n	8002b08 <HAL_RCC_OscConfig+0x210>
 8002b1a:	e735      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	b9ab      	cbnz	r3, 8002b4a <HAL_RCC_OscConfig+0x252>
 8002b1e:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	622b      	str	r3, [r5, #32]
 8002b2a:	6a2b      	ldr	r3, [r5, #32]
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002b32:	f7fe ff5b 	bl	80019ec <HAL_GetTick>
 8002b36:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	6a2b      	ldr	r3, [r5, #32]
 8002b3a:	079b      	lsls	r3, r3, #30
 8002b3c:	d5d3      	bpl.n	8002ae6 <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe ff55 	bl	80019ec <HAL_GetTick>
 8002b42:	1b80      	subs	r0, r0, r6
 8002b44:	4540      	cmp	r0, r8
 8002b46:	d9f7      	bls.n	8002b38 <HAL_RCC_OscConfig+0x240>
 8002b48:	e71e      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	6a2b      	ldr	r3, [r5, #32]
 8002b4e:	d103      	bne.n	8002b58 <HAL_RCC_OscConfig+0x260>
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	622b      	str	r3, [r5, #32]
 8002b56:	e7ba      	b.n	8002ace <HAL_RCC_OscConfig+0x1d6>
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	622b      	str	r3, [r5, #32]
 8002b5e:	6a2b      	ldr	r3, [r5, #32]
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	e7b6      	b.n	8002ad4 <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe ff41 	bl	80019ec <HAL_GetTick>
 8002b6a:	eba0 0008 	sub.w	r0, r0, r8
 8002b6e:	42b0      	cmp	r0, r6
 8002b70:	d9b6      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1e8>
 8002b72:	e709      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	42420000 	.word	0x42420000
 8002b7c:	42420480 	.word	0x42420480
 8002b80:	20000000 	.word	0x20000000
 8002b84:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002b88:	4d58      	ldr	r5, [pc, #352]	; (8002cec <HAL_RCC_OscConfig+0x3f4>)
 8002b8a:	686b      	ldr	r3, [r5, #4]
 8002b8c:	03d8      	lsls	r0, r3, #15
 8002b8e:	d508      	bpl.n	8002ba2 <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002b90:	686b      	ldr	r3, [r5, #4]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d103      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002b9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002b9c:	03d9      	lsls	r1, r3, #15
 8002b9e:	f53f aeaf 	bmi.w	8002900 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002ba2:	2a02      	cmp	r2, #2
 8002ba4:	d133      	bne.n	8002c0e <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002ba6:	682b      	ldr	r3, [r5, #0]
 8002ba8:	00da      	lsls	r2, r3, #3
 8002baa:	d506      	bpl.n	8002bba <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002bac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002bae:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	f47f aea3 	bne.w	8002900 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4e4c      	ldr	r6, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x3f8>)
 8002bbe:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff14 	bl	80019ec <HAL_GetTick>
 8002bc4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002bc6:	682b      	ldr	r3, [r5, #0]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	d41a      	bmi.n	8002c02 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002bcc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002bce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002bd8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002bda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be0:	4313      	orrs	r3, r2
 8002be2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8002be4:	2301      	movs	r3, #1
 8002be6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002be8:	f7fe ff00 	bl	80019ec <HAL_GetTick>
 8002bec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	011f      	lsls	r7, r3, #4
 8002bf2:	f53f ae9b 	bmi.w	800292c <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002bf6:	f7fe fef9 	bl	80019ec <HAL_GetTick>
 8002bfa:	1b80      	subs	r0, r0, r6
 8002bfc:	2864      	cmp	r0, #100	; 0x64
 8002bfe:	d9f6      	bls.n	8002bee <HAL_RCC_OscConfig+0x2f6>
 8002c00:	e6c2      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002c02:	f7fe fef3 	bl	80019ec <HAL_GetTick>
 8002c06:	1bc0      	subs	r0, r0, r7
 8002c08:	2864      	cmp	r0, #100	; 0x64
 8002c0a:	d9dc      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x2ce>
 8002c0c:	e6bc      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 8002c0e:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002c10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_RCC_OscConfig+0x3f8>)
 8002c1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fee6 	bl	80019ec <HAL_GetTick>
 8002c20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	0118      	lsls	r0, r3, #4
 8002c26:	f57f ae81 	bpl.w	800292c <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002c2a:	f7fe fedf 	bl	80019ec <HAL_GetTick>
 8002c2e:	1b80      	subs	r0, r0, r6
 8002c30:	2864      	cmp	r0, #100	; 0x64
 8002c32:	d9f6      	bls.n	8002c22 <HAL_RCC_OscConfig+0x32a>
 8002c34:	e6a8      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_OscConfig+0x3f4>)
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	f001 010c 	and.w	r1, r1, #12
 8002c40:	2908      	cmp	r1, #8
 8002c42:	d041      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x3d0>
 8002c44:	2300      	movs	r3, #0
 8002c46:	4e2b      	ldr	r6, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c48:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4c:	d12f      	bne.n	8002cae <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fecd 	bl	80019ec <HAL_GetTick>
 8002c52:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	0199      	lsls	r1, r3, #6
 8002c58:	d423      	bmi.n	8002ca2 <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002c62:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002c64:	6861      	ldr	r1, [r4, #4]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002c6c:	68e1      	ldr	r1, [r4, #12]
 8002c6e:	f022 020f 	bic.w	r2, r2, #15
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c78:	686a      	ldr	r2, [r5, #4]
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002c80:	4313      	orrs	r3, r2
 8002c82:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c84:	2301      	movs	r3, #1
 8002c86:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c88:	f7fe feb0 	bl	80019ec <HAL_GetTick>
 8002c8c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8e:	682b      	ldr	r3, [r5, #0]
 8002c90:	019a      	lsls	r2, r3, #6
 8002c92:	f53f ae4f 	bmi.w	8002934 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe fea9 	bl	80019ec <HAL_GetTick>
 8002c9a:	1b00      	subs	r0, r0, r4
 8002c9c:	2802      	cmp	r0, #2
 8002c9e:	d9f6      	bls.n	8002c8e <HAL_RCC_OscConfig+0x396>
 8002ca0:	e672      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fea3 	bl	80019ec <HAL_GetTick>
 8002ca6:	1bc0      	subs	r0, r0, r7
 8002ca8:	2802      	cmp	r0, #2
 8002caa:	d9d3      	bls.n	8002c54 <HAL_RCC_OscConfig+0x35c>
 8002cac:	e66c      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 8002cae:	f7fe fe9d 	bl	80019ec <HAL_GetTick>
 8002cb2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	019b      	lsls	r3, r3, #6
 8002cb8:	f57f ae3c 	bpl.w	8002934 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fe96 	bl	80019ec <HAL_GetTick>
 8002cc0:	1b00      	subs	r0, r0, r4
 8002cc2:	2802      	cmp	r0, #2
 8002cc4:	d9f6      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x3bc>
 8002cc6:	e65f      	b.n	8002988 <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc8:	2a01      	cmp	r2, #1
 8002cca:	f43f ae19 	beq.w	8002900 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 8002cce:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cd2:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	f47f ae12 	bne.w	8002900 <HAL_RCC_OscConfig+0x8>
 8002cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cde:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002ce2:	1ac0      	subs	r0, r0, r3
 8002ce4:	bf18      	it	ne
 8002ce6:	2001      	movne	r0, #1
 8002ce8:	e60b      	b.n	8002902 <HAL_RCC_OscConfig+0xa>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	42420068 	.word	0x42420068
 8002cf4:	42420060 	.word	0x42420060

08002cf8 <HAL_RCC_GetSysClockFreq>:
{
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002cfc:	466a      	mov	r2, sp
 8002cfe:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d00:	f103 0508 	add.w	r5, r3, #8
 8002d04:	4614      	mov	r4, r2
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	c403      	stmia	r4!, {r0, r1}
 8002d0e:	42ab      	cmp	r3, r5
 8002d10:	4622      	mov	r2, r4
 8002d12:	d1f7      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0xc>
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	889b      	ldrh	r3, [r3, #4]
 8002d18:	6020      	str	r0, [r4, #0]
 8002d1a:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d1e:	ac04      	add	r4, sp, #16
 8002d20:	f103 0510 	add.w	r5, r3, #16
 8002d24:	4622      	mov	r2, r4
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	c203      	stmia	r2!, {r0, r1}
 8002d2e:	42ab      	cmp	r3, r5
 8002d30:	4614      	mov	r4, r2
 8002d32:	d1f7      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8002d34:	4920      	ldr	r1, [pc, #128]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d36:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d38:	f003 020c 	and.w	r2, r3, #12
 8002d3c:	2a04      	cmp	r2, #4
 8002d3e:	d035      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0xb4>
 8002d40:	2a08      	cmp	r2, #8
 8002d42:	d002      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSI_VALUE;
 8002d44:	481d      	ldr	r0, [pc, #116]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xc4>)
}
 8002d46:	b009      	add	sp, #36	; 0x24
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d4a:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002d4e:	a808      	add	r0, sp, #32
 8002d50:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d52:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d54:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d58:	d525      	bpl.n	8002da6 <HAL_RCC_GetSysClockFreq+0xae>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002d5a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	4403      	add	r3, r0
 8002d62:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002d66:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002d68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0xa4>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002d70:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002d72:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002d74:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8002d78:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002d7a:	fba4 4506 	umull	r4, r5, r4, r6
 8002d7e:	fba4 0103 	umull	r0, r1, r4, r3
 8002d82:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002d86:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8002d8a:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d90:	f7fd ff56 	bl	8000c40 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002d94:	2e0d      	cmp	r6, #13
 8002d96:	d1d6      	bne.n	8002d46 <HAL_RCC_GetSysClockFreq+0x4e>
          pllclk = pllclk / 2;
 8002d98:	0840      	lsrs	r0, r0, #1
 8002d9a:	e7d4      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x4e>
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002d9c:	fb03 f006 	mul.w	r0, r3, r6
 8002da0:	fbb0 f0f2 	udiv	r0, r0, r2
 8002da4:	e7f6      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x9c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da6:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002da8:	4370      	muls	r0, r6
 8002daa:	e7cc      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
 8002dac:	4804      	ldr	r0, [pc, #16]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc8>)
  return sysclockfreq;
 8002dae:	e7ca      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x4e>
 8002db0:	0800a678 	.word	0x0800a678
 8002db4:	0800a686 	.word	0x0800a686
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	017d7840 	.word	0x017d7840
 8002dc4:	003d0900 	.word	0x003d0900

08002dc8 <HAL_RCC_ClockConfig>:
{
 8002dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dcc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002dce:	4604      	mov	r4, r0
 8002dd0:	b910      	cbnz	r0, 8002dd8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002dd2:	2001      	movs	r0, #1
}
 8002dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4a44      	ldr	r2, [pc, #272]	; (8002eec <HAL_RCC_ClockConfig+0x124>)
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d328      	bcc.n	8002e36 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	6821      	ldr	r1, [r4, #0]
 8002de6:	078e      	lsls	r6, r1, #30
 8002de8:	d430      	bmi.n	8002e4c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dea:	07ca      	lsls	r2, r1, #31
 8002dec:	d443      	bmi.n	8002e76 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <HAL_RCC_ClockConfig+0x124>)
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	42ab      	cmp	r3, r5
 8002df8:	d865      	bhi.n	8002ec6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfa:	6822      	ldr	r2, [r4, #0]
 8002dfc:	4d3c      	ldr	r5, [pc, #240]	; (8002ef0 <HAL_RCC_ClockConfig+0x128>)
 8002dfe:	f012 0f04 	tst.w	r2, #4
 8002e02:	d16c      	bne.n	8002ede <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	0713      	lsls	r3, r2, #28
 8002e06:	d506      	bpl.n	8002e16 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e08:	686b      	ldr	r3, [r5, #4]
 8002e0a:	6922      	ldr	r2, [r4, #16]
 8002e0c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e10:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e14:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e16:	f7ff ff6f 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002e1a:	686b      	ldr	r3, [r5, #4]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_RCC_ClockConfig+0x12c>)
 8002e1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	40d8      	lsrs	r0, r3
 8002e26:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <HAL_RCC_ClockConfig+0x130>)
 8002e28:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_ClockConfig+0x134>)
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	f7fe fd9b 	bl	8001968 <HAL_InitTick>
  return HAL_OK;
 8002e32:	2000      	movs	r0, #0
 8002e34:	e7ce      	b.n	8002dd4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	f023 0307 	bic.w	r3, r3, #7
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	428b      	cmp	r3, r1
 8002e48:	d1c3      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xa>
 8002e4a:	e7cb      	b.n	8002de4 <HAL_RCC_ClockConfig+0x1c>
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e52:	bf1e      	ittt	ne
 8002e54:	685a      	ldrne	r2, [r3, #4]
 8002e56:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002e5a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e5e:	bf42      	ittt	mi
 8002e60:	685a      	ldrmi	r2, [r3, #4]
 8002e62:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002e66:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68a0      	ldr	r0, [r4, #8]
 8002e6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e70:	4302      	orrs	r2, r0
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	e7b9      	b.n	8002dea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	4e1d      	ldr	r6, [pc, #116]	; (8002ef0 <HAL_RCC_ClockConfig+0x128>)
 8002e7a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	d0a5      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e88:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8c:	f023 0303 	bic.w	r3, r3, #3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002e94:	f7fe fdaa 	bl	80019ec <HAL_GetTick>
 8002e98:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	6873      	ldr	r3, [r6, #4]
 8002e9c:	6862      	ldr	r2, [r4, #4]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ea6:	d0a2      	beq.n	8002dee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fe fda0 	bl	80019ec <HAL_GetTick>
 8002eac:	1bc0      	subs	r0, r0, r7
 8002eae:	4540      	cmp	r0, r8
 8002eb0:	d9f3      	bls.n	8002e9a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	e78e      	b.n	8002dd4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb6:	2a02      	cmp	r2, #2
 8002eb8:	d102      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ebe:	e7e1      	b.n	8002e84 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	f013 0f02 	tst.w	r3, #2
 8002ec4:	e7de      	b.n	8002e84 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	f023 0307 	bic.w	r3, r3, #7
 8002ecc:	432b      	orrs	r3, r5
 8002ece:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed0:	6813      	ldr	r3, [r2, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	42ab      	cmp	r3, r5
 8002ed8:	f47f af7b 	bne.w	8002dd2 <HAL_RCC_ClockConfig+0xa>
 8002edc:	e78d      	b.n	8002dfa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ede:	686b      	ldr	r3, [r5, #4]
 8002ee0:	68e1      	ldr	r1, [r4, #12]
 8002ee2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	606b      	str	r3, [r5, #4]
 8002eea:	e78b      	b.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	0800a823 	.word	0x0800a823
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000008 	.word	0x20000008

08002f00 <HAL_RCC_GetHCLKFreq>:
}
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <HAL_RCC_GetHCLKFreq+0x8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000000 	.word	0x20000000

08002f0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f1a:	6810      	ldr	r0, [r2, #0]
}
 8002f1c:	40d8      	lsrs	r0, r3
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000
 8002f24:	0800a833 	.word	0x0800a833
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002f3a:	6810      	ldr	r0, [r2, #0]
}
 8002f3c:	40d8      	lsrs	r0, r3
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000
 8002f44:	0800a833 	.word	0x0800a833
 8002f48:	20000000 	.word	0x20000000

08002f4c <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002f4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f50:	461c      	mov	r4, r3
 8002f52:	4616      	mov	r6, r2
 8002f54:	460f      	mov	r7, r1
 8002f56:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f58:	f7fe fd48 	bl	80019ec <HAL_GetTick>
 8002f5c:	4434      	add	r4, r6
 8002f5e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002f60:	f7fe fd44 	bl	80019ec <HAL_GetTick>
 8002f64:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002f6e:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f70:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002f72:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f74:	6893      	ldr	r3, [r2, #8]
 8002f76:	ea37 0303 	bics.w	r3, r7, r3
 8002f7a:	d001      	beq.n	8002f80 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	e02e      	b.n	8002fde <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	1c73      	adds	r3, r6, #1
 8002f82:	d0f7      	beq.n	8002f74 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f84:	f7fe fd32 	bl	80019ec <HAL_GetTick>
 8002f88:	eba0 0008 	sub.w	r0, r0, r8
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	d329      	bcc.n	8002fe4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f98:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9a:	686a      	ldr	r2, [r5, #4]
 8002f9c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002fa0:	d10a      	bne.n	8002fb8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 8002fa2:	68aa      	ldr	r2, [r5, #8]
 8002fa4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002fa8:	d002      	beq.n	8002fb0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002faa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002fae:	d103      	bne.n	8002fb8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002fba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002fbe:	d107      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fce:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002fde:	b002      	add	sp, #8
 8002fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002fe4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002fe6:	2b00      	cmp	r3, #0
      count--;
 8002fe8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002fea:	bf08      	it	eq
 8002fec:	2400      	moveq	r4, #0
      count--;
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	e7be      	b.n	8002f70 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ffc:	6842      	ldr	r2, [r0, #4]
{
 8002ffe:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003000:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003004:	d116      	bne.n	8003034 <SPI_EndRxTransaction+0x3c>
 8003006:	6880      	ldr	r0, [r0, #8]
 8003008:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800300c:	d002      	beq.n	8003014 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003012:	d10f      	bne.n	8003034 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003014:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003016:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800301a:	6815      	ldr	r5, [r2, #0]
 800301c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8003020:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003022:	d107      	bne.n	8003034 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	460a      	mov	r2, r1
 8003026:	2101      	movs	r1, #1
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff ff8f 	bl	8002f4c <SPI_WaitFlagStateUntilTimeout.constprop.6>
 800302e:	b920      	cbnz	r0, 800303a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003030:	2000      	movs	r0, #0
}
 8003032:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	460a      	mov	r2, r1
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	e7f6      	b.n	8003028 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800303c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303e:	f043 0320 	orr.w	r3, r3, #32
 8003042:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003044:	e7f5      	b.n	8003032 <SPI_EndRxTransaction+0x3a>

08003046 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003046:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003048:	4613      	mov	r3, r2
 800304a:	460a      	mov	r2, r1
 800304c:	2180      	movs	r1, #128	; 0x80
{
 800304e:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	f7ff ff7c 	bl	8002f4c <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8003054:	b120      	cbz	r0, 8003060 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003058:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800305a:	f043 0320 	orr.w	r3, r3, #32
 800305e:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8003060:	bd10      	pop	{r4, pc}

08003062 <HAL_SPI_Init>:
{
 8003062:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003064:	4604      	mov	r4, r0
 8003066:	2800      	cmp	r0, #0
 8003068:	d051      	beq.n	800310e <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800306a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d14a      	bne.n	8003106 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003070:	6842      	ldr	r2, [r0, #4]
 8003072:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003076:	d000      	beq.n	800307a <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003078:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800307e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003082:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003086:	b923      	cbnz	r3, 8003092 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8003088:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800308c:	4620      	mov	r0, r4
 800308e:	f7fe fa97 	bl	80015c0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003092:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003094:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003096:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800309a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800309c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80030aa:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80030ae:	4303      	orrs	r3, r0
 80030b0:	68e0      	ldr	r0, [r4, #12]
 80030b2:	69a1      	ldr	r1, [r4, #24]
 80030b4:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80030b8:	4303      	orrs	r3, r0
 80030ba:	6920      	ldr	r0, [r4, #16]
 80030bc:	f000 0002 	and.w	r0, r0, #2
 80030c0:	4303      	orrs	r3, r0
 80030c2:	6960      	ldr	r0, [r4, #20]
 80030c4:	f000 0001 	and.w	r0, r0, #1
 80030c8:	4303      	orrs	r3, r0
 80030ca:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80030ce:	4303      	orrs	r3, r0
 80030d0:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030d2:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d4:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80030d8:	4303      	orrs	r3, r0
 80030da:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030dc:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030e0:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80030e4:	4303      	orrs	r3, r0
 80030e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80030e8:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80030ec:	4303      	orrs	r3, r0
 80030ee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030f0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030f2:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030f4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030fa:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80030fc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003100:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003104:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003106:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003108:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800310c:	e7b5      	b.n	800307a <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800310e:	2001      	movs	r0, #1
 8003110:	e7f8      	b.n	8003104 <HAL_SPI_Init+0xa2>

08003112 <HAL_SPI_TransmitReceive>:
{
 8003112:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003116:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003118:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800311c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800311e:	2b01      	cmp	r3, #1
{
 8003120:	460d      	mov	r5, r1
 8003122:	4691      	mov	r9, r2
 8003124:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003126:	f000 80e2 	beq.w	80032ee <HAL_SPI_TransmitReceive+0x1dc>
 800312a:	2301      	movs	r3, #1
 800312c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003130:	f7fe fc5c 	bl	80019ec <HAL_GetTick>
  tmp_state           = hspi->State;
 8003134:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003138:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800313a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800313c:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800313e:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003140:	d00a      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x46>
 8003142:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003146:	f040 80d0 	bne.w	80032ea <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800314a:	68a0      	ldr	r0, [r4, #8]
 800314c:	2800      	cmp	r0, #0
 800314e:	f040 80cc 	bne.w	80032ea <HAL_SPI_TransmitReceive+0x1d8>
 8003152:	2b04      	cmp	r3, #4
 8003154:	f040 80c9 	bne.w	80032ea <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003158:	2d00      	cmp	r5, #0
 800315a:	f000 80c4 	beq.w	80032e6 <HAL_SPI_TransmitReceive+0x1d4>
 800315e:	f1b9 0f00 	cmp.w	r9, #0
 8003162:	f000 80c0 	beq.w	80032e6 <HAL_SPI_TransmitReceive+0x1d4>
 8003166:	2e00      	cmp	r6, #0
 8003168:	f000 80bd 	beq.w	80032e6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800316c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003170:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003174:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003176:	bf1c      	itt	ne
 8003178:	2305      	movne	r3, #5
 800317a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003182:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003186:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003188:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800318a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800318e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003190:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003192:	bf58      	it	pl
 8003194:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003196:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8003198:	bf58      	it	pl
 800319a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800319e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80031a0:	bf58      	it	pl
 80031a2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a4:	68e2      	ldr	r2, [r4, #12]
 80031a6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80031aa:	d158      	bne.n	800325e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ac:	b109      	cbz	r1, 80031b2 <HAL_SPI_TransmitReceive+0xa0>
 80031ae:	2e01      	cmp	r6, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80031b6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80031b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ba:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80031c2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	b9ab      	cbnz	r3, 80031f6 <HAL_SPI_TransmitReceive+0xe4>
 80031ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	b993      	cbnz	r3, 80031f6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d0:	4642      	mov	r2, r8
 80031d2:	4639      	mov	r1, r7
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ff36 	bl	8003046 <SPI_EndRxTxTransaction>
 80031da:	2800      	cmp	r0, #0
 80031dc:	f040 8081 	bne.w	80032e2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e0:	68a3      	ldr	r3, [r4, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d132      	bne.n	800324c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	9001      	str	r0, [sp, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	9201      	str	r2, [sp, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	e02a      	b.n	800324c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	6893      	ldr	r3, [r2, #8]
 80031fa:	0799      	lsls	r1, r3, #30
 80031fc:	d50d      	bpl.n	800321a <HAL_SPI_TransmitReceive+0x108>
 80031fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003200:	b29b      	uxth	r3, r3
 8003202:	b153      	cbz	r3, 800321a <HAL_SPI_TransmitReceive+0x108>
 8003204:	b14d      	cbz	r5, 800321a <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8003206:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003208:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800320a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800320e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003210:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003212:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003214:	3b01      	subs	r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800321a:	6893      	ldr	r3, [r2, #8]
 800321c:	07db      	lsls	r3, r3, #31
 800321e:	d50c      	bpl.n	800323a <HAL_SPI_TransmitReceive+0x128>
 8003220:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003222:	b29b      	uxth	r3, r3
 8003224:	b14b      	cbz	r3, 800323a <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8003226:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800322c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003230:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003232:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003234:	3b01      	subs	r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800323a:	f7fe fbd7 	bl	80019ec <HAL_GetTick>
 800323e:	eba0 0008 	sub.w	r0, r0, r8
 8003242:	4287      	cmp	r7, r0
 8003244:	d8be      	bhi.n	80031c4 <HAL_SPI_TransmitReceive+0xb2>
 8003246:	1c7e      	adds	r6, r7, #1
 8003248:	d0bc      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800324a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800324c:	2301      	movs	r3, #1
 800324e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003252:	2300      	movs	r3, #0
 8003254:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003258:	b003      	add	sp, #12
 800325a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325e:	b109      	cbz	r1, 8003264 <HAL_SPI_TransmitReceive+0x152>
 8003260:	2e01      	cmp	r6, #1
 8003262:	d108      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003264:	782a      	ldrb	r2, [r5, #0]
 8003266:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003268:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800326a:	3301      	adds	r3, #1
 800326c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800326e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003270:	3b01      	subs	r3, #1
 8003272:	b29b      	uxth	r3, r3
 8003274:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003276:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003278:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800327a:	b29b      	uxth	r3, r3
 800327c:	b91b      	cbnz	r3, 8003286 <HAL_SPI_TransmitReceive+0x174>
 800327e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0a4      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6893      	ldr	r3, [r2, #8]
 800328a:	0798      	lsls	r0, r3, #30
 800328c:	d50e      	bpl.n	80032ac <HAL_SPI_TransmitReceive+0x19a>
 800328e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	b15b      	cbz	r3, 80032ac <HAL_SPI_TransmitReceive+0x19a>
 8003294:	b155      	cbz	r5, 80032ac <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8003296:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003298:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800329e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032a0:	3301      	adds	r3, #1
 80032a2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80032a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ac:	6822      	ldr	r2, [r4, #0]
 80032ae:	6893      	ldr	r3, [r2, #8]
 80032b0:	07d9      	lsls	r1, r3, #31
 80032b2:	d50d      	bpl.n	80032d0 <HAL_SPI_TransmitReceive+0x1be>
 80032b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	b153      	cbz	r3, 80032d0 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80032ba:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032c4:	3301      	adds	r3, #1
 80032c6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80032c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032d0:	f7fe fb8c 	bl	80019ec <HAL_GetTick>
 80032d4:	eba0 0008 	sub.w	r0, r0, r8
 80032d8:	4287      	cmp	r7, r0
 80032da:	d8cd      	bhi.n	8003278 <HAL_SPI_TransmitReceive+0x166>
 80032dc:	1c7b      	adds	r3, r7, #1
 80032de:	d0cb      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x166>
 80032e0:	e7b3      	b.n	800324a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e2:	2320      	movs	r3, #32
 80032e4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80032e6:	2001      	movs	r0, #1
 80032e8:	e7b0      	b.n	800324c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80032ea:	2002      	movs	r0, #2
 80032ec:	e7ae      	b.n	800324c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80032ee:	2002      	movs	r0, #2
 80032f0:	e7b2      	b.n	8003258 <HAL_SPI_TransmitReceive+0x146>
	...

080032f4 <HAL_SPI_TransmitReceive_DMA>:
{
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80032f8:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80032fc:	2801      	cmp	r0, #1
 80032fe:	d071      	beq.n	80033e4 <HAL_SPI_TransmitReceive_DMA+0xf0>
 8003300:	2001      	movs	r0, #1
 8003302:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8003306:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800330a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800330c:	2801      	cmp	r0, #1
 800330e:	d008      	beq.n	8003322 <HAL_SPI_TransmitReceive_DMA+0x2e>
 8003310:	6865      	ldr	r5, [r4, #4]
 8003312:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8003316:	d161      	bne.n	80033dc <HAL_SPI_TransmitReceive_DMA+0xe8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003318:	68a5      	ldr	r5, [r4, #8]
 800331a:	2d00      	cmp	r5, #0
 800331c:	d15e      	bne.n	80033dc <HAL_SPI_TransmitReceive_DMA+0xe8>
 800331e:	2804      	cmp	r0, #4
 8003320:	d15c      	bne.n	80033dc <HAL_SPI_TransmitReceive_DMA+0xe8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003322:	2900      	cmp	r1, #0
 8003324:	d05c      	beq.n	80033e0 <HAL_SPI_TransmitReceive_DMA+0xec>
 8003326:	2a00      	cmp	r2, #0
 8003328:	d05a      	beq.n	80033e0 <HAL_SPI_TransmitReceive_DMA+0xec>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d058      	beq.n	80033e0 <HAL_SPI_TransmitReceive_DMA+0xec>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800332e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 8003332:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003334:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003336:	bf1c      	itt	ne
 8003338:	2005      	movne	r0, #5
 800333a:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333e:	2000      	movs	r0, #0
 8003340:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 8003342:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 8003344:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003346:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003348:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 800334c:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003350:	2b04      	cmp	r3, #4
 8003352:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003354:	bf0c      	ite	eq
 8003356:	4b24      	ldreq	r3, [pc, #144]	; (80033e8 <HAL_SPI_TransmitReceive_DMA+0xf4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003358:	4b24      	ldrne	r3, [pc, #144]	; (80033ec <HAL_SPI_TransmitReceive_DMA+0xf8>)
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800335a:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800335c:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800335e:	bf0b      	itete	eq
 8003360:	62c3      	streq	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003362:	62c3      	strne	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003364:	4b22      	ldreq	r3, [pc, #136]	; (80033f0 <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003366:	4b23      	ldrne	r3, [pc, #140]	; (80033f4 <HAL_SPI_TransmitReceive_DMA+0x100>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003368:	6821      	ldr	r1, [r4, #0]
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800336a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_SPI_TransmitReceive_DMA+0x104>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800336e:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003370:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->RxXferCount))
 8003376:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003378:	f7fe fbfa 	bl	8001b70 <HAL_DMA_Start_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	b150      	cbz	r0, 8003396 <HAL_SPI_TransmitReceive_DMA+0xa2>
    hspi->State = HAL_SPI_STATE_READY;
 8003380:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003382:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003384:	f043 0310 	orr.w	r3, r3, #16
 8003388:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800338a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800338e:	2300      	movs	r3, #0
 8003390:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003394:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003396:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003398:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800339a:	6851      	ldr	r1, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800339c:	320c      	adds	r2, #12
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800339e:	f041 0101 	orr.w	r1, r1, #1
 80033a2:	f842 1c08 	str.w	r1, [r2, #-8]
  hspi->hdmatx->XferCpltCallback     = NULL;
 80033a6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferAbortCallback    = NULL;
 80033aa:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80033ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 80033b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80033b2:	f7fe fbdd 	bl	8001b70 <HAL_DMA_Start_IT>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d1e2      	bne.n	8003380 <HAL_SPI_TransmitReceive_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80033c0:	bf5e      	ittt	pl
 80033c2:	681a      	ldrpl	r2, [r3, #0]
 80033c4:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80033c8:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	f042 0220 	orr.w	r2, r2, #32
 80033d0:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	f042 0202 	orr.w	r2, r2, #2
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	e7d8      	b.n	800338e <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_BUSY;
 80033dc:	2002      	movs	r0, #2
 80033de:	e7d6      	b.n	800338e <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_ERROR;
 80033e0:	2001      	movs	r0, #1
 80033e2:	e7d4      	b.n	800338e <HAL_SPI_TransmitReceive_DMA+0x9a>
  __HAL_LOCK(hspi);
 80033e4:	2002      	movs	r0, #2
 80033e6:	e7d5      	b.n	8003394 <HAL_SPI_TransmitReceive_DMA+0xa0>
 80033e8:	080034df 	.word	0x080034df
 80033ec:	080034eb 	.word	0x080034eb
 80033f0:	08003519 	.word	0x08003519
 80033f4:	0800357f 	.word	0x0800357f
 80033f8:	080034f7 	.word	0x080034f7

080033fc <HAL_SPI_Receive_DMA>:
{
 80033fc:	4613      	mov	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80033fe:	6882      	ldr	r2, [r0, #8]
{
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4604      	mov	r4, r0
 8003404:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003406:	b95a      	cbnz	r2, 8003420 <HAL_SPI_Receive_DMA+0x24>
 8003408:	6846      	ldr	r6, [r0, #4]
 800340a:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 800340e:	d107      	bne.n	8003420 <HAL_SPI_Receive_DMA+0x24>
}
 8003410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003414:	2204      	movs	r2, #4
 8003416:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800341a:	460a      	mov	r2, r1
 800341c:	f7ff bf6a 	b.w	80032f4 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 8003420:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8003424:	2901      	cmp	r1, #1
 8003426:	d050      	beq.n	80034ca <HAL_SPI_Receive_DMA+0xce>
 8003428:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800342a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 800342e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8003432:	b2c0      	uxtb	r0, r0
 8003434:	4288      	cmp	r0, r1
 8003436:	d146      	bne.n	80034c6 <HAL_SPI_Receive_DMA+0xca>
  if ((pData == NULL) || (Size == 0U))
 8003438:	2d00      	cmp	r5, #0
 800343a:	d02f      	beq.n	800349c <HAL_SPI_Receive_DMA+0xa0>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02d      	beq.n	800349c <HAL_SPI_Receive_DMA+0xa0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003440:	2104      	movs	r1, #4
 8003442:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003446:	2100      	movs	r1, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003448:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344c:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800344e:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003452:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8003454:	86a1      	strh	r1, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003456:	86e1      	strh	r1, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003458:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800345a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800345c:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345e:	d107      	bne.n	8003470 <HAL_SPI_Receive_DMA+0x74>
    __HAL_SPI_DISABLE(hspi);
 8003460:	680b      	ldr	r3, [r1, #0]
 8003462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003466:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 8003468:	680b      	ldr	r3, [r1, #0]
 800346a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346e:	600b      	str	r3, [r1, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003470:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_SPI_Receive_DMA+0xd4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003474:	462a      	mov	r2, r5
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003476:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <HAL_SPI_Receive_DMA+0xd8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800347a:	310c      	adds	r1, #12
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800347c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_SPI_Receive_DMA+0xdc>)
 8003480:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->RxXferCount))
 8003486:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003488:	f7fe fb72 	bl	8001b70 <HAL_DMA_Start_IT>
 800348c:	b150      	cbz	r0, 80034a4 <HAL_SPI_Receive_DMA+0xa8>
    hspi->State = HAL_SPI_STATE_READY;
 800348e:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003492:	f043 0310 	orr.w	r3, r3, #16
 8003496:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003498:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800349c:	2300      	movs	r3, #0
 800349e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80034aa:	bf5e      	ittt	pl
 80034ac:	681a      	ldrpl	r2, [r3, #0]
 80034ae:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80034b2:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	f042 0220 	orr.w	r2, r2, #32
 80034ba:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	e7ea      	b.n	800349c <HAL_SPI_Receive_DMA+0xa0>
    errorcode = HAL_BUSY;
 80034c6:	2002      	movs	r0, #2
 80034c8:	e7e8      	b.n	800349c <HAL_SPI_Receive_DMA+0xa0>
  __HAL_LOCK(hspi);
 80034ca:	2002      	movs	r0, #2
 80034cc:	e7e9      	b.n	80034a2 <HAL_SPI_Receive_DMA+0xa6>
 80034ce:	bf00      	nop
 80034d0:	080034df 	.word	0x080034df
 80034d4:	08003519 	.word	0x08003519
 80034d8:	080034f7 	.word	0x080034f7

080034dc <HAL_SPI_TxRxCpltCallback>:
 80034dc:	4770      	bx	lr

080034de <SPI_DMAHalfReceiveCplt>:
{
 80034de:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80034e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80034e2:	f7fd fe41 	bl	8001168 <HAL_SPI_RxHalfCpltCallback>
}
 80034e6:	bd08      	pop	{r3, pc}

080034e8 <HAL_SPI_TxRxHalfCpltCallback>:
 80034e8:	4770      	bx	lr

080034ea <SPI_DMAHalfTransmitReceiveCplt>:
{
 80034ea:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80034ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80034ee:	f7ff fffb 	bl	80034e8 <HAL_SPI_TxRxHalfCpltCallback>
}
 80034f2:	bd08      	pop	{r3, pc}

080034f4 <HAL_SPI_ErrorCallback>:
 80034f4:	4770      	bx	lr

080034f6 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80034f8:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80034fa:	6802      	ldr	r2, [r0, #0]
 80034fc:	6853      	ldr	r3, [r2, #4]
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003504:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003506:	f043 0310 	orr.w	r3, r3, #16
 800350a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800350c:	2301      	movs	r3, #1
 800350e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8003512:	f7ff ffef 	bl	80034f4 <HAL_SPI_ErrorCallback>
}
 8003516:	bd08      	pop	{r3, pc}

08003518 <SPI_DMAReceiveCplt>:
{
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800351c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 800351e:	f7fe fa65 	bl	80019ec <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003522:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003524:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	d424      	bmi.n	8003576 <SPI_DMAReceiveCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	f021 0120 	bic.w	r1, r1, #32
 8003534:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003536:	68a1      	ldr	r1, [r4, #8]
 8003538:	b9c9      	cbnz	r1, 800356e <SPI_DMAReceiveCplt+0x56>
 800353a:	6861      	ldr	r1, [r4, #4]
 800353c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003540:	d115      	bne.n	800356e <SPI_DMAReceiveCplt+0x56>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	f021 0103 	bic.w	r1, r1, #3
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003548:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800354a:	4620      	mov	r0, r4
 800354c:	2164      	movs	r1, #100	; 0x64
 800354e:	f7ff fd53 	bl	8002ff8 <SPI_EndRxTransaction>
 8003552:	b108      	cbz	r0, 8003558 <SPI_DMAReceiveCplt+0x40>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003554:	2320      	movs	r3, #32
 8003556:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800355c:	2301      	movs	r3, #1
 800355e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003562:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003564:	b13b      	cbz	r3, 8003576 <SPI_DMAReceiveCplt+0x5e>
      HAL_SPI_ErrorCallback(hspi);
 8003566:	4620      	mov	r0, r4
 8003568:	f7ff ffc4 	bl	80034f4 <HAL_SPI_ErrorCallback>
}
 800356c:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	f021 0101 	bic.w	r1, r1, #1
 8003574:	e7e8      	b.n	8003548 <SPI_DMAReceiveCplt+0x30>
  HAL_SPI_RxCpltCallback(hspi);
 8003576:	4620      	mov	r0, r4
 8003578:	f7fd fe08 	bl	800118c <HAL_SPI_RxCpltCallback>
 800357c:	e7f6      	b.n	800356c <SPI_DMAReceiveCplt+0x54>

0800357e <SPI_DMATransmitReceiveCplt>:
{
 800357e:	b538      	push	{r3, r4, r5, lr}
 8003580:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003582:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8003584:	f7fe fa32 	bl	80019ec <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003588:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800358a:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	069b      	lsls	r3, r3, #26
 8003590:	d41e      	bmi.n	80035d0 <SPI_DMATransmitReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003592:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003594:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003596:	684b      	ldr	r3, [r1, #4]
 8003598:	f023 0320 	bic.w	r3, r3, #32
 800359c:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800359e:	2164      	movs	r1, #100	; 0x64
 80035a0:	f7ff fd51 	bl	8003046 <SPI_EndRxTxTransaction>
 80035a4:	b118      	cbz	r0, 80035ae <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035a8:	f043 0320 	orr.w	r3, r3, #32
 80035ac:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	6853      	ldr	r3, [r2, #4]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80035bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80035be:	2301      	movs	r3, #1
 80035c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035c6:	b11b      	cbz	r3, 80035d0 <SPI_DMATransmitReceiveCplt+0x52>
      HAL_SPI_ErrorCallback(hspi);
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff ff93 	bl	80034f4 <HAL_SPI_ErrorCallback>
}
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff ff83 	bl	80034dc <HAL_SPI_TxRxCpltCallback>
 80035d6:	e7fa      	b.n	80035ce <SPI_DMATransmitReceiveCplt+0x50>

080035d8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035e0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ea:	2320      	movs	r3, #32
 80035ec:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80035f0:	4770      	bx	lr
	...

080035f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f8:	6803      	ldr	r3, [r0, #0]
 80035fa:	68c1      	ldr	r1, [r0, #12]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003606:	6882      	ldr	r2, [r0, #8]
 8003608:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800360a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800360c:	4302      	orrs	r2, r0
 800360e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003610:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003614:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003618:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800361a:	430a      	orrs	r2, r1
 800361c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	69a1      	ldr	r1, [r4, #24]
 8003622:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003626:	430a      	orrs	r2, r1
 8003628:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <UART_SetConfig+0x70>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d115      	bne.n	800365c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7ff fc7c 	bl	8002f2c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003634:	2319      	movs	r3, #25
 8003636:	4358      	muls	r0, r3
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	2264      	movs	r2, #100	; 0x64
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003642:	fbb0 f1f2 	udiv	r1, r0, r2
 8003646:	fb02 0311 	mls	r3, r2, r1, r0
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003652:	6824      	ldr	r4, [r4, #0]
 8003654:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003658:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 800365a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7ff fc56 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8003660:	e7e8      	b.n	8003634 <UART_SetConfig+0x40>
 8003662:	bf00      	nop
 8003664:	40013800 	.word	0x40013800

08003668 <HAL_UART_Init>:
{
 8003668:	b510      	push	{r4, lr}
  if (huart == NULL)
 800366a:	4604      	mov	r4, r0
 800366c:	b340      	cbz	r0, 80036c0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003676:	b91b      	cbnz	r3, 8003680 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003678:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800367c:	f7fe f83a 	bl	80016f4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003682:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003688:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800368a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800368c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003690:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003692:	f7ff ffaf 	bl	80035f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80036b2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80036be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
 80036c2:	e7fc      	b.n	80036be <HAL_UART_Init+0x56>

080036c4 <HAL_UART_Transmit_DMA>:
{
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80036ca:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80036ce:	2a20      	cmp	r2, #32
 80036d0:	d12a      	bne.n	8003728 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 80036d2:	b339      	cbz	r1, 8003724 <HAL_UART_Transmit_DMA+0x60>
 80036d4:	b333      	cbz	r3, 8003724 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80036d6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80036da:	2a01      	cmp	r2, #1
 80036dc:	d024      	beq.n	8003728 <HAL_UART_Transmit_DMA+0x64>
 80036de:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80036e2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e6:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 80036e8:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ee:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 80036f4:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 80036f6:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036f8:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_UART_Transmit_DMA+0x6c>)
 80036fc:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036fe:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003700:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	3204      	adds	r2, #4
 8003708:	f7fe fa32 	bl	8001b70 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800370c:	f06f 0240 	mvn.w	r2, #64	; 0x40
    return HAL_OK;
 8003710:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003716:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003718:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800371c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003720:	615a      	str	r2, [r3, #20]
}
 8003722:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003724:	2001      	movs	r0, #1
 8003726:	e7fc      	b.n	8003722 <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8003728:	2002      	movs	r0, #2
 800372a:	e7fa      	b.n	8003722 <HAL_UART_Transmit_DMA+0x5e>
 800372c:	0800373b 	.word	0x0800373b
 8003730:	08003769 	.word	0x08003769
 8003734:	08003775 	.word	0x08003775

08003738 <HAL_UART_TxCpltCallback>:
 8003738:	4770      	bx	lr

0800373a <UART_DMATransmitCplt>:
{
 800373a:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f013 0320 	ands.w	r3, r3, #32
 8003746:	d10a      	bne.n	800375e <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8003748:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003752:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800375e:	4610      	mov	r0, r2
 8003760:	f7ff ffea 	bl	8003738 <HAL_UART_TxCpltCallback>
}
 8003764:	e7fa      	b.n	800375c <UART_DMATransmitCplt+0x22>

08003766 <HAL_UART_TxHalfCpltCallback>:
 8003766:	4770      	bx	lr

08003768 <UART_DMATxHalfCplt>:
{
 8003768:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800376a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800376c:	f7ff fffb 	bl	8003766 <HAL_UART_TxHalfCpltCallback>
}
 8003770:	bd08      	pop	{r3, pc}

08003772 <HAL_UART_ErrorCallback>:
 8003772:	4770      	bx	lr

08003774 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003774:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8003776:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003778:	680b      	ldr	r3, [r1, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800377c:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8003780:	2821      	cmp	r0, #33	; 0x21
 8003782:	d10a      	bne.n	800379a <UART_DMAError+0x26>
 8003784:	0612      	lsls	r2, r2, #24
 8003786:	d508      	bpl.n	800379a <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8003788:	2200      	movs	r2, #0
 800378a:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003792:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003794:	2220      	movs	r2, #32
 8003796:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800379c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80037a0:	2a22      	cmp	r2, #34	; 0x22
 80037a2:	d106      	bne.n	80037b2 <UART_DMAError+0x3e>
 80037a4:	065b      	lsls	r3, r3, #25
 80037a6:	d504      	bpl.n	80037b2 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 80037a8:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80037aa:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 80037ac:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037ae:	f7ff ff13 	bl	80035d8 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80037b4:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037b6:	f043 0310 	orr.w	r3, r3, #16
 80037ba:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80037bc:	f7ff ffd9 	bl	8003772 <HAL_UART_ErrorCallback>
}
 80037c0:	bd08      	pop	{r3, pc}
	...

080037c4 <MX_LWIP_Init>:
{
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 99;
  IP_ADDRESS[3] = 102;
 80037c4:	2366      	movs	r3, #102	; 0x66
{
 80037c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 80037c8:	4e1e      	ldr	r6, [pc, #120]	; (8003844 <MX_LWIP_Init+0x80>)
  NETMASK_ADDRESS[0] = 255;
 80037ca:	4d1f      	ldr	r5, [pc, #124]	; (8003848 <MX_LWIP_Init+0x84>)
  IP_ADDRESS[3] = 102;
 80037cc:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 80037ce:	23ff      	movs	r3, #255	; 0xff
  IP_ADDRESS[0] = 192;
 80037d0:	20c0      	movs	r0, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 80037d2:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 99;
 80037d4:	2263      	movs	r2, #99	; 0x63
  NETMASK_ADDRESS[0] = 255;
 80037d6:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 80037d8:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 80037da:	70ab      	strb	r3, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 80037dc:	2700      	movs	r7, #0
  GATEWAY_ADDRESS[0] = 192;
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 99;
  GATEWAY_ADDRESS[3] = 1;
 80037de:	2301      	movs	r3, #1
  GATEWAY_ADDRESS[0] = 192;
 80037e0:	4c1a      	ldr	r4, [pc, #104]	; (800384c <MX_LWIP_Init+0x88>)
{
 80037e2:	b085      	sub	sp, #20
  GATEWAY_ADDRESS[0] = 192;
 80037e4:	7020      	strb	r0, [r4, #0]
  GATEWAY_ADDRESS[1] = 168;
 80037e6:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 99;
 80037e8:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 80037ea:	70e3      	strb	r3, [r4, #3]
  IP_ADDRESS[0] = 192;
 80037ec:	7030      	strb	r0, [r6, #0]
  IP_ADDRESS[1] = 168;
 80037ee:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 99;
 80037f0:	70b2      	strb	r2, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 80037f2:	70ef      	strb	r7, [r5, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80037f4:	f000 faa1 	bl	8003d3a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037f8:	4915      	ldr	r1, [pc, #84]	; (8003850 <MX_LWIP_Init+0x8c>)
 80037fa:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <MX_LWIP_Init+0x90>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037fe:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003800:	682b      	ldr	r3, [r5, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003802:	6820      	ldr	r0, [r4, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003804:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003808:	4c14      	ldr	r4, [pc, #80]	; (800385c <MX_LWIP_Init+0x98>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800380a:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800380c:	4814      	ldr	r0, [pc, #80]	; (8003860 <MX_LWIP_Init+0x9c>)
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	4814      	ldr	r0, [pc, #80]	; (8003864 <MX_LWIP_Init+0xa0>)
 8003812:	e9cd 7000 	strd	r7, r0, [sp]
 8003816:	4620      	mov	r0, r4
 8003818:	f000 fbfe 	bl	8004018 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800381c:	4620      	mov	r0, r4
 800381e:	f000 fc39 	bl	8004094 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003822:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003826:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8003828:	075b      	lsls	r3, r3, #29
 800382a:	d508      	bpl.n	800383e <MX_LWIP_Init+0x7a>
    netif_set_up(&gnetif);
 800382c:	f000 fc38 	bl	80040a0 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003830:	490d      	ldr	r1, [pc, #52]	; (8003868 <MX_LWIP_Init+0xa4>)
 8003832:	480a      	ldr	r0, [pc, #40]	; (800385c <MX_LWIP_Init+0x98>)
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003834:	b005      	add	sp, #20
 8003836:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800383a:	f000 bc4d 	b.w	80040d8 <netif_set_link_callback>
    netif_set_down(&gnetif);
 800383e:	f000 fc3e 	bl	80040be <netif_set_down>
 8003842:	e7f5      	b.n	8003830 <MX_LWIP_Init+0x6c>
 8003844:	200017f4 	.word	0x200017f4
 8003848:	200017f0 	.word	0x200017f0
 800384c:	200017b4 	.word	0x200017b4
 8003850:	200017ec 	.word	0x200017ec
 8003854:	200017f8 	.word	0x200017f8
 8003858:	200017fc 	.word	0x200017fc
 800385c:	200017b8 	.word	0x200017b8
 8003860:	08006035 	.word	0x08006035
 8003864:	08003b59 	.word	0x08003b59
 8003868:	08003c8d 	.word	0x08003c8d

0800386c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800386c:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800386e:	4803      	ldr	r0, [pc, #12]	; (800387c <MX_LWIP_Process+0x10>)
 8003870:	f000 f906 	bl	8003a80 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 8003878:	f001 b848 	b.w	800490c <sys_check_timeouts>
 800387c:	200017b8 	.word	0x200017b8

08003880 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8003884:	f04f 0800 	mov.w	r8, #0
{
 8003888:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800388a:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800388c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003890:	4a22      	ldr	r2, [pc, #136]	; (800391c <low_level_output+0x9c>)
 8003892:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8003894:	9200      	str	r2, [sp, #0]
 8003896:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8003898:	b92c      	cbnz	r4, 80038a6 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800389a:	4639      	mov	r1, r7
 800389c:	481f      	ldr	r0, [pc, #124]	; (800391c <low_level_output+0x9c>)
 800389e:	f7fe fbfd 	bl	800209c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80038a2:	4620      	mov	r0, r4
 80038a4:	e004      	b.n	80038b0 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80038a6:	6832      	ldr	r2, [r6, #0]
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	da11      	bge.n	80038d0 <low_level_output+0x50>
        errval = ERR_USE;
 80038ac:	f06f 0007 	mvn.w	r0, #7

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80038b0:	f241 0214 	movw	r2, #4116	; 0x1014
 80038b4:	9b00      	ldr	r3, [sp, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	5899      	ldr	r1, [r3, r2]
 80038ba:	0689      	lsls	r1, r1, #26
 80038bc:	d505      	bpl.n	80038ca <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80038be:	2120      	movs	r1, #32
 80038c0:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80038c2:	f241 0204 	movw	r2, #4100	; 0x1004
 80038c6:	2100      	movs	r1, #0
 80038c8:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 80038ca:	b003      	add	sp, #12
 80038cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80038d0:	4645      	mov	r5, r8
      payloadoffset = 0;
 80038d2:	f04f 0a00 	mov.w	sl, #0
      byteslefttocopy = q->len;
 80038d6:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80038da:	eb05 0809 	add.w	r8, r5, r9
 80038de:	6861      	ldr	r1, [r4, #4]
 80038e0:	45d8      	cmp	r8, fp
 80038e2:	eb03 0005 	add.w	r0, r3, r5
 80038e6:	4451      	add	r1, sl
 80038e8:	d807      	bhi.n	80038fa <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80038ea:	464a      	mov	r2, r9
 80038ec:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80038ee:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80038f0:	f002 fc67 	bl	80061c2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80038f4:	6824      	ldr	r4, [r4, #0]
 80038f6:	9b01      	ldr	r3, [sp, #4]
 80038f8:	e7ce      	b.n	8003898 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80038fa:	ebab 0505 	sub.w	r5, fp, r5
 80038fe:	462a      	mov	r2, r5
 8003900:	f002 fc5f 	bl	80061c2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003904:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003906:	6833      	ldr	r3, [r6, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	dbcf      	blt.n	80038ac <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800390c:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800390e:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003910:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003912:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8003916:	2500      	movs	r5, #0
 8003918:	e7df      	b.n	80038da <low_level_output+0x5a>
 800391a:	bf00      	nop
 800391c:	20004860 	.word	0x20004860

08003920 <HAL_ETH_MspInit>:
{
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4604      	mov	r4, r0
 8003924:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003926:	2210      	movs	r2, #16
 8003928:	2100      	movs	r1, #0
 800392a:	a808      	add	r0, sp, #32
 800392c:	f002 fc54 	bl	80061d8 <memset>
  if(ethHandle->Instance==ETH)
 8003930:	6822      	ldr	r2, [r4, #0]
 8003932:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <HAL_ETH_MspInit+0x148>)
 8003934:	429a      	cmp	r2, r3
 8003936:	f040 8094 	bne.w	8003a62 <HAL_ETH_MspInit+0x142>
    __HAL_RCC_ETH_CLK_ENABLE();
 800393a:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 800393e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2602      	movs	r6, #2
    __HAL_RCC_ETH_CLK_ENABLE();
 8003942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003946:	615a      	str	r2, [r3, #20]
 8003948:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800394a:	2503      	movs	r5, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800394c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003950:	9201      	str	r2, [sp, #4]
 8003952:	9a01      	ldr	r2, [sp, #4]
 8003954:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003956:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH_CLK_ENABLE();
 8003958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800395c:	615a      	str	r2, [r3, #20]
 800395e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003960:	4842      	ldr	r0, [pc, #264]	; (8003a6c <HAL_ETH_MspInit+0x14c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8003962:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	9a02      	ldr	r2, [sp, #8]
 800396a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800396c:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800396e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003972:	615a      	str	r2, [r3, #20]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	f042 0210 	orr.w	r2, r2, #16
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	f002 0210 	and.w	r2, r2, #16
 800398c:	9204      	str	r2, [sp, #16]
 800398e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	f042 0204 	orr.w	r2, r2, #4
 8003996:	619a      	str	r2, [r3, #24]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	f002 0204 	and.w	r2, r2, #4
 800399e:	9205      	str	r2, [sp, #20]
 80039a0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	f042 0208 	orr.w	r2, r2, #8
 80039a8:	619a      	str	r2, [r3, #24]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	f002 0208 	and.w	r2, r2, #8
 80039b0:	9206      	str	r2, [sp, #24]
 80039b2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	f042 0220 	orr.w	r2, r2, #32
 80039ba:	619a      	str	r2, [r3, #24]
 80039bc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039be:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	9307      	str	r3, [sp, #28]
 80039c6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	2306      	movs	r3, #6
 80039ca:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ce:	f7fe fea1 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d2:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d4:	a908      	add	r1, sp, #32
 80039d6:	4825      	ldr	r0, [pc, #148]	; (8003a6c <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039de:	f7fe fe99 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80039e2:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	a908      	add	r1, sp, #32
 80039e6:	4822      	ldr	r0, [pc, #136]	; (8003a70 <HAL_ETH_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039e8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ee:	f7fe fe91 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039f2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	a908      	add	r1, sp, #32
 80039f6:	481e      	ldr	r0, [pc, #120]	; (8003a70 <HAL_ETH_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039fc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fe:	f7fe fe89 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a06:	a908      	add	r1, sp, #32
 8003a08:	481a      	ldr	r0, [pc, #104]	; (8003a74 <HAL_ETH_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0a:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a10:	f7fe fe80 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
 8003a14:	f44f 5364 	mov.w	r3, #14592	; 0x3900
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a18:	a908      	add	r1, sp, #32
 8003a1a:	4816      	ldr	r0, [pc, #88]	; (8003a74 <HAL_ETH_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a20:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	f7fe fe77 	bl	8002714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a26:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a2a:	a908      	add	r1, sp, #32
 8003a2c:	4812      	ldr	r0, [pc, #72]	; (8003a78 <HAL_ETH_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a2e:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a34:	f7fe fe6e 	bl	8002714 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_ETH_ENABLE();
 8003a38:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <HAL_ETH_MspInit+0x15c>)
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003a3a:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_ETH_ENABLE();
 8003a3c:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003a3e:	203d      	movs	r0, #61	; 0x3d
    __HAL_AFIO_REMAP_ETH_ENABLE();
 8003a40:	f043 63e4 	orr.w	r3, r3, #119537664	; 0x7200000
 8003a44:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003a46:	4622      	mov	r2, r4
 8003a48:	f7fd fffa 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003a4c:	203d      	movs	r0, #61	; 0x3d
 8003a4e:	f7fe f82b 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8003a52:	203e      	movs	r0, #62	; 0x3e
 8003a54:	4622      	mov	r2, r4
 8003a56:	4621      	mov	r1, r4
 8003a58:	f7fd fff2 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8003a5c:	203e      	movs	r0, #62	; 0x3e
 8003a5e:	f7fe f823 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
}
 8003a62:	b00c      	add	sp, #48	; 0x30
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	bf00      	nop
 8003a68:	40028000 	.word	0x40028000
 8003a6c:	40011000 	.word	0x40011000
 8003a70:	40010800 	.word	0x40010800
 8003a74:	40010c00 	.word	0x40010c00
 8003a78:	40011400 	.word	0x40011400
 8003a7c:	40010000 	.word	0x40010000

08003a80 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003a84:	4c33      	ldr	r4, [pc, #204]	; (8003b54 <ethernetif_input+0xd4>)
{
 8003a86:	4682      	mov	sl, r0
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7fe fb7d 	bl	8002188 <HAL_ETH_GetReceivedFrame>
 8003a8e:	4605      	mov	r5, r0
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d15c      	bne.n	8003b4e <ethernetif_input+0xce>
  len = heth.RxFrameInfos.length;
 8003a94:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 8003a96:	2900      	cmp	r1, #0
 8003a98:	d050      	beq.n	8003b3c <ethernetif_input+0xbc>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003a9e:	6c26      	ldr	r6, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003aa0:	f000 fc0c 	bl	80042bc <pbuf_alloc>
  if (p != NULL)
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d048      	beq.n	8003b3c <ethernetif_input+0xbc>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003aaa:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003aac:	f240 5bf4 	movw	fp, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ab0:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003ab4:	9600      	str	r6, [sp, #0]
      byteslefttocopy = q->len;
 8003ab6:	462e      	mov	r6, r5
      payloadoffset = 0;
 8003ab8:	2300      	movs	r3, #0
      byteslefttocopy = q->len;
 8003aba:	f8b8 200a 	ldrh.w	r2, [r8, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003abe:	18b5      	adds	r5, r6, r2
 8003ac0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003ac4:	9900      	ldr	r1, [sp, #0]
 8003ac6:	455d      	cmp	r5, fp
 8003ac8:	4418      	add	r0, r3
 8003aca:	4431      	add	r1, r6
 8003acc:	d825      	bhi.n	8003b1a <ethernetif_input+0x9a>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003ace:	f002 fb78 	bl	80061c2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8003ad2:	f8d8 8000 	ldr.w	r8, [r8]
 8003ad6:	f1b8 0f00 	cmp.w	r8, #0
 8003ada:	d1ec      	bne.n	8003ab6 <ethernetif_input+0x36>
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003adc:	2200      	movs	r2, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003ae0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ae2:	4282      	cmp	r2, r0
 8003ae4:	d12c      	bne.n	8003b40 <ethernetif_input+0xc0>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003ae6:	f241 0114 	movw	r1, #4116	; 0x1014
 8003aea:	6823      	ldr	r3, [r4, #0]
    heth.RxFrameInfos.SegCount =0;
 8003aec:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003aee:	5858      	ldr	r0, [r3, r1]
    heth.RxFrameInfos.SegCount =0;
 8003af0:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003af2:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003af4:	bf41      	itttt	mi
 8003af6:	2080      	movmi	r0, #128	; 0x80
 8003af8:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8003afa:	f241 0108 	movwmi	r1, #4104	; 0x1008
 8003afe:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003b00:	b32f      	cbz	r7, 8003b4e <ethernetif_input+0xce>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003b02:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003b06:	4651      	mov	r1, sl
 8003b08:	4638      	mov	r0, r7
 8003b0a:	4798      	blx	r3

  if (err != ERR_OK)
 8003b0c:	b1f8      	cbz	r0, 8003b4e <ethernetif_input+0xce>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003b0e:	4638      	mov	r0, r7
    p = NULL;
  }
}
 8003b10:	b003      	add	sp, #12
 8003b12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8003b16:	f000 bb6f 	b.w	80041f8 <pbuf_free>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003b1a:	ebab 0606 	sub.w	r6, fp, r6
 8003b1e:	4632      	mov	r2, r6
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	f002 fb4e 	bl	80061c2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b26:	f8d9 900c 	ldr.w	r9, [r9, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003b2a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003b2e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003b32:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003b34:	9b01      	ldr	r3, [sp, #4]
 8003b36:	4433      	add	r3, r6
        bufferoffset = 0;
 8003b38:	2600      	movs	r6, #0
 8003b3a:	e7c0      	b.n	8003abe <ethernetif_input+0x3e>
  struct pbuf *p = NULL;
 8003b3c:	2700      	movs	r7, #0
 8003b3e:	e7cd      	b.n	8003adc <ethernetif_input+0x5c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003b40:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003b42:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003b44:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003b48:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	e7c9      	b.n	8003ae2 <ethernetif_input+0x62>
}
 8003b4e:	b003      	add	sp, #12
 8003b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b54:	20004860 	.word	0x20004860

08003b58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003b58:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b5a:	4604      	mov	r4, r0
{
 8003b5c:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b5e:	b930      	cbnz	r0, 8003b6e <ethernetif_init+0x16>
 8003b60:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <ethernetif_init+0xfc>)
 8003b62:	f240 223e 	movw	r2, #574	; 0x23e
 8003b66:	493c      	ldr	r1, [pc, #240]	; (8003c58 <ethernetif_init+0x100>)
 8003b68:	483c      	ldr	r0, [pc, #240]	; (8003c5c <ethernetif_init+0x104>)
 8003b6a:	f003 fa21 	bl	8006fb0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003b6e:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003b72:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 8003b74:	8623      	strh	r3, [r4, #48]	; 0x30
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b76:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <ethernetif_init+0x108>)
  heth.Instance = ETH;
 8003b78:	4d3a      	ldr	r5, [pc, #232]	; (8003c64 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003b7a:	493b      	ldr	r1, [pc, #236]	; (8003c68 <ethernetif_init+0x110>)
  netif->output = etharp_output;
 8003b7c:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <ethernetif_init+0x114>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003b80:	e9c5 1200 	strd	r1, r2, [r5]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
  netif->linkoutput = low_level_output;
 8003b8c:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 8003b8e:	2300      	movs	r3, #0
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8003b90:	822a      	strh	r2, [r5, #16]
  MACAddr[0] = 0x00;
 8003b92:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <ethernetif_init+0x118>)
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b94:	e9c5 0102 	strd	r0, r1, [r5, #8]
  MACAddr[0] = 0x00;
 8003b98:	9202      	str	r2, [sp, #8]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b9a:	4628      	mov	r0, r5
  heth.Init.MACAddr = &MACAddr[0];
 8003b9c:	aa02      	add	r2, sp, #8
  uint32_t regvalue = 0;
 8003b9e:	9301      	str	r3, [sp, #4]
  MACAddr[3] = 0x00;
 8003ba0:	f8ad 300c 	strh.w	r3, [sp, #12]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003ba4:	e9c5 2305 	strd	r2, r3, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8003ba8:	e9c5 3307 	strd	r3, r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003bac:	f7fe fbd8 	bl	8002360 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8003bb0:	b928      	cbnz	r0, 8003bbe <ethernetif_init+0x66>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003bb2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <ethernetif_init+0x11c>)
 8003bc2:	492d      	ldr	r1, [pc, #180]	; (8003c78 <ethernetif_init+0x120>)
 8003bc4:	4827      	ldr	r0, [pc, #156]	; (8003c64 <ethernetif_init+0x10c>)
 8003bc6:	f7fe f9f3 	bl	8001fb0 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003bca:	492c      	ldr	r1, [pc, #176]	; (8003c7c <ethernetif_init+0x124>)
 8003bcc:	2308      	movs	r3, #8
 8003bce:	4a2c      	ldr	r2, [pc, #176]	; (8003c80 <ethernetif_init+0x128>)
 8003bd0:	4824      	ldr	r0, [pc, #144]	; (8003c64 <ethernetif_init+0x10c>)
 8003bd2:	f7fe fa29 	bl	8002028 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003bd6:	2306      	movs	r3, #6
 8003bd8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003bdc:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 8003bde:	4821      	ldr	r0, [pc, #132]	; (8003c64 <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003be6:	785a      	ldrb	r2, [r3, #1]
 8003be8:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003bec:	789a      	ldrb	r2, [r3, #2]
 8003bee:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003bf2:	78da      	ldrb	r2, [r3, #3]
 8003bf4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003bf8:	791a      	ldrb	r2, [r3, #4]
 8003bfa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003bfe:	795b      	ldrb	r3, [r3, #5]
 8003c00:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 8003c04:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003c08:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c0a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003c0e:	f043 030a 	orr.w	r3, r3, #10
 8003c12:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_Start(&heth);
 8003c16:	f7fe fc79 	bl	800250c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8003c1a:	aa01      	add	r2, sp, #4
 8003c1c:	2111      	movs	r1, #17
 8003c1e:	4811      	ldr	r0, [pc, #68]	; (8003c64 <ethernetif_init+0x10c>)
 8003c20:	f7fe fb2c 	bl	800227c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003c24:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003c26:	2111      	movs	r1, #17
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003c28:	f042 0203 	orr.w	r2, r2, #3
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003c2c:	480d      	ldr	r0, [pc, #52]	; (8003c64 <ethernetif_init+0x10c>)
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003c2e:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003c30:	f7fe fb5e 	bl	80022f0 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8003c34:	aa01      	add	r2, sp, #4
 8003c36:	2112      	movs	r1, #18
 8003c38:	480a      	ldr	r0, [pc, #40]	; (8003c64 <ethernetif_init+0x10c>)
 8003c3a:	f7fe fb1f 	bl	800227c <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003c3e:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003c40:	2112      	movs	r1, #18
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003c42:	f042 0220 	orr.w	r2, r2, #32
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003c46:	4807      	ldr	r0, [pc, #28]	; (8003c64 <ethernetif_init+0x10c>)
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003c48:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003c4a:	f7fe fb51 	bl	80022f0 <HAL_ETH_WritePHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8003c4e:	2000      	movs	r0, #0
 8003c50:	b005      	add	sp, #20
 8003c52:	bd30      	pop	{r4, r5, pc}
 8003c54:	0800a83b 	.word	0x0800a83b
 8003c58:	0800a857 	.word	0x0800a857
 8003c5c:	0800a865 	.word	0x0800a865
 8003c60:	080052c1 	.word	0x080052c1
 8003c64:	20004860 	.word	0x20004860
 8003c68:	40028000 	.word	0x40028000
 8003c6c:	08003881 	.word	0x08003881
 8003c70:	00e18000 	.word	0x00e18000
 8003c74:	200048a8 	.word	0x200048a8
 8003c78:	20001800 	.word	0x20001800
 8003c7c:	200047e0 	.word	0x200047e0
 8003c80:	20001840 	.word	0x20001840

08003c84 <sys_now>:
 8003c84:	f7fd beb2 	b.w	80019ec <HAL_GetTick>

08003c88 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003c88:	4770      	bx	lr
	...

08003c8c <ethernetif_update_config>:
{
 8003c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
 8003c8e:	2100      	movs	r1, #0
  if(netif_is_link_up(netif))
 8003c90:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8003c94:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8003c96:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8003c98:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8003c9a:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8003c9c:	d544      	bpl.n	8003d28 <ethernetif_update_config+0x9c>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c9e:	4c24      	ldr	r4, [pc, #144]	; (8003d30 <ethernetif_update_config+0xa4>)
 8003ca0:	6863      	ldr	r3, [r4, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d035      	beq.n	8003d12 <ethernetif_update_config+0x86>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003caa:	4620      	mov	r0, r4
 8003cac:	f7fe fb20 	bl	80022f0 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fe9c 	bl	80019ec <HAL_GetTick>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003cb4:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8003cb6:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003cb8:	aa01      	add	r2, sp, #4
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f7fe fadd 	bl	800227c <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8003cc2:	f7fd fe93 	bl	80019ec <HAL_GetTick>
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	1ac0      	subs	r0, r0, r3
 8003cca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003cce:	d820      	bhi.n	8003d12 <ethernetif_update_config+0x86>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003cd0:	9b01      	ldr	r3, [sp, #4]
 8003cd2:	069a      	lsls	r2, r3, #26
 8003cd4:	d5f0      	bpl.n	8003cb8 <ethernetif_update_config+0x2c>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003cd6:	aa01      	add	r2, sp, #4
 8003cd8:	2110      	movs	r1, #16
 8003cda:	4815      	ldr	r0, [pc, #84]	; (8003d30 <ethernetif_update_config+0xa4>)
 8003cdc:	f7fe face 	bl	800227c <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003ce0:	9b01      	ldr	r3, [sp, #4]
 8003ce2:	f013 0204 	ands.w	r2, r3, #4
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003ce6:	bf18      	it	ne
 8003ce8:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8003cec:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8003cee:	bf4c      	ite	mi
 8003cf0:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8003cf2:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003cf6:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 8003cf8:	60a3      	str	r3, [r4, #8]
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	480c      	ldr	r0, [pc, #48]	; (8003d30 <ethernetif_update_config+0xa4>)
 8003cfe:	f7fe fc7d 	bl	80025fc <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8003d02:	480b      	ldr	r0, [pc, #44]	; (8003d30 <ethernetif_update_config+0xa4>)
 8003d04:	f7fe fc02 	bl	800250c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f7ff ffbd 	bl	8003c88 <ethernetif_notify_conn_changed>
}
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003d12:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003d16:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003d18:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4803      	ldr	r0, [pc, #12]	; (8003d30 <ethernetif_update_config+0xa4>)
 8003d22:	f7fe fae5 	bl	80022f0 <HAL_ETH_WritePHYRegister>
 8003d26:	e7e8      	b.n	8003cfa <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&heth);
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <ethernetif_update_config+0xa4>)
 8003d2a:	f7fe fc2b 	bl	8002584 <HAL_ETH_Stop>
 8003d2e:	e7eb      	b.n	8003d08 <ethernetif_update_config+0x7c>
 8003d30:	20004860 	.word	0x20004860

08003d34 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8003d34:	ba40      	rev16	r0, r0
}
 8003d36:	b280      	uxth	r0, r0
 8003d38:	4770      	bx	lr

08003d3a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003d3a:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003d3c:	f000 f80a 	bl	8003d54 <mem_init>
  memp_init();
 8003d40:	f000 f8ea 	bl	8003f18 <memp_init>
  pbuf_init();
  netif_init();
 8003d44:	f000 f927 	bl	8003f96 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003d48:	f000 fe06 	bl	8004958 <udp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8003d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8003d50:	f000 bdb2 	b.w	80048b8 <sys_timeouts_init>

08003d54 <mem_init>:
 * C library malloc().
 */
void
mem_init(void)
{
}
 8003d54:	4770      	bx	lr

08003d56 <mem_trim>:
void*
mem_trim(void *mem, mem_size_t size)
{
  LWIP_UNUSED_ARG(size);
  return mem;
}
 8003d56:	4770      	bx	lr

08003d58 <mem_malloc>:
 *
 * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003d58:	b510      	push	{r4, lr}
  void* ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
 8003d5a:	f002 fa13 	bl	8006184 <malloc>
  if (ret == NULL) {
 8003d5e:	4604      	mov	r4, r0
 8003d60:	b150      	cbz	r0, 8003d78 <mem_malloc+0x20>
    MEM_STATS_INC(err);
  } else {
    LWIP_ASSERT("malloc() must return aligned memory", LWIP_MEM_ALIGN(ret) == ret);
 8003d62:	1cc3      	adds	r3, r0, #3
 8003d64:	f023 0303 	bic.w	r3, r3, #3
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	d005      	beq.n	8003d78 <mem_malloc+0x20>
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <mem_malloc+0x24>)
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <mem_malloc+0x28>)
 8003d72:	4804      	ldr	r0, [pc, #16]	; (8003d84 <mem_malloc+0x2c>)
 8003d74:	f003 f91c 	bl	8006fb0 <iprintf>
    ret = (u8_t*)ret + MEM_LIBC_STATSHELPER_SIZE;
    MEM_STATS_INC_USED(used, size);
#endif
  }
  return ret;
}
 8003d78:	4620      	mov	r0, r4
 8003d7a:	bd10      	pop	{r4, pc}
 8003d7c:	0800a8b2 	.word	0x0800a8b2
 8003d80:	0800a8e1 	.word	0x0800a8e1
 8003d84:	0800a865 	.word	0x0800a865

08003d88 <mem_free>:
 *
 * @param rmem is the pointer as returned by a previous call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003d88:	b510      	push	{r4, lr}
  LWIP_ASSERT("rmem != NULL", (rmem != NULL));
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	b928      	cbnz	r0, 8003d9a <mem_free+0x12>
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <mem_free+0x34>)
 8003d90:	2291      	movs	r2, #145	; 0x91
 8003d92:	490b      	ldr	r1, [pc, #44]	; (8003dc0 <mem_free+0x38>)
 8003d94:	480b      	ldr	r0, [pc, #44]	; (8003dc4 <mem_free+0x3c>)
 8003d96:	f003 f90b 	bl	8006fb0 <iprintf>
  LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
 8003d9a:	1ce3      	adds	r3, r4, #3
 8003d9c:	f023 0303 	bic.w	r3, r3, #3
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d005      	beq.n	8003db0 <mem_free+0x28>
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <mem_free+0x34>)
 8003da6:	2292      	movs	r2, #146	; 0x92
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <mem_free+0x40>)
 8003daa:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <mem_free+0x3c>)
 8003dac:	f003 f900 	bl	8006fb0 <iprintf>
#if LWIP_STATS && MEM_STATS
  rmem = (u8_t*)rmem - MEM_LIBC_STATSHELPER_SIZE;
  MEM_STATS_DEC_USED(used, *(mem_size_t*)rmem);
#endif
  mem_clib_free(rmem);
 8003db0:	4620      	mov	r0, r4
}
 8003db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mem_clib_free(rmem);
 8003db6:	f002 b9ed 	b.w	8006194 <free>
 8003dba:	bf00      	nop
 8003dbc:	0800a8b2 	.word	0x0800a8b2
 8003dc0:	0800a88d 	.word	0x0800a88d
 8003dc4:	0800a865 	.word	0x0800a865
 8003dc8:	0800a89a 	.word	0x0800a89a

08003dcc <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	4605      	mov	r5, r0
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8003dd0:	8880      	ldrh	r0, [r0, #4]
{
 8003dd2:	460f      	mov	r7, r1
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8003dd4:	3003      	adds	r0, #3
 8003dd6:	f020 0003 	bic.w	r0, r0, #3
 8003dda:	302c      	adds	r0, #44	; 0x2c
{
 8003ddc:	4616      	mov	r6, r2
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8003dde:	f7ff ffbb 	bl	8003d58 <mem_malloc>
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003de2:	4604      	mov	r4, r0
 8003de4:	b1c0      	cbz	r0, 8003e18 <do_memp_malloc_pool_fn+0x4c>
    memp->next = NULL;
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 8003de6:	e9c0 7601 	strd	r7, r6, [r0, #4]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 8003dea:	2210      	movs	r2, #16
 8003dec:	21cd      	movs	r1, #205	; 0xcd
 8003dee:	300c      	adds	r0, #12
 8003df0:	f002 f9f2 	bl	80061d8 <memset>
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 8003df4:	88a8      	ldrh	r0, [r5, #4]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 8003df6:	2210      	movs	r2, #16
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 8003df8:	301c      	adds	r0, #28
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 8003dfa:	21cd      	movs	r1, #205	; 0xcd
 8003dfc:	4420      	add	r0, r4
 8003dfe:	f002 f9eb 	bl	80061d8 <memset>
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003e02:	07a3      	lsls	r3, r4, #30
 8003e04:	d006      	beq.n	8003e14 <do_memp_malloc_pool_fn+0x48>
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <do_memp_malloc_pool_fn+0x50>)
 8003e08:	f240 1249 	movw	r2, #329	; 0x149
 8003e0c:	4904      	ldr	r1, [pc, #16]	; (8003e20 <do_memp_malloc_pool_fn+0x54>)
 8003e0e:	4805      	ldr	r0, [pc, #20]	; (8003e24 <do_memp_malloc_pool_fn+0x58>)
 8003e10:	f003 f8ce 	bl	8006fb0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003e14:	f104 001c 	add.w	r0, r4, #28
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	0800a925 	.word	0x0800a925
 8003e20:	0800a955 	.word	0x0800a955
 8003e24:	0800a865 	.word	0x0800a865

08003e28 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003e2c:	078b      	lsls	r3, r1, #30
{
 8003e2e:	b0a1      	sub	sp, #132	; 0x84
 8003e30:	4606      	mov	r6, r0
 8003e32:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8003e34:	d006      	beq.n	8003e44 <do_memp_free_pool+0x1c>
 8003e36:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <do_memp_free_pool+0xdc>)
 8003e38:	f240 129d 	movw	r2, #413	; 0x19d
 8003e3c:	4932      	ldr	r1, [pc, #200]	; (8003f08 <do_memp_free_pool+0xe0>)
 8003e3e:	4833      	ldr	r0, [pc, #204]	; (8003f0c <do_memp_free_pool+0xe4>)
 8003e40:	f003 f8b6 	bl	8006fb0 <iprintf>
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 8003e44:	2500      	movs	r5, #0
 8003e46:	88b7      	ldrh	r7, [r6, #4]
      LWIP_ASSERT(errstr, 0);
 8003e48:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003f04 <do_memp_free_pool+0xdc>
 8003e4c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8003f0c <do_memp_free_pool+0xe4>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8003e50:	f1a4 091c 	sub.w	r9, r4, #28
    if (m[k] != 0xcd) {
 8003e54:	4427      	add	r7, r4
 8003e56:	5d7b      	ldrb	r3, [r7, r5]
 8003e58:	2bcd      	cmp	r3, #205	; 0xcd
 8003e5a:	d01c      	beq.n	8003e96 <do_memp_free_pool+0x6e>
      char errstr[128] = "detected memp overflow in pool ";
 8003e5c:	466a      	mov	r2, sp
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <do_memp_free_pool+0xe8>)
 8003e62:	f103 0e20 	add.w	lr, r3, #32
 8003e66:	4694      	mov	ip, r2
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003e72:	4573      	cmp	r3, lr
 8003e74:	4662      	mov	r2, ip
 8003e76:	d1f6      	bne.n	8003e66 <do_memp_free_pool+0x3e>
 8003e78:	2260      	movs	r2, #96	; 0x60
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	a808      	add	r0, sp, #32
 8003e7e:	f002 f9ab 	bl	80061d8 <memset>
      strcat(errstr, desc->desc);
 8003e82:	6831      	ldr	r1, [r6, #0]
 8003e84:	4640      	mov	r0, r8
 8003e86:	f003 f943 	bl	8007110 <strcat>
      LWIP_ASSERT(errstr, 0);
 8003e8a:	4653      	mov	r3, sl
 8003e8c:	228a      	movs	r2, #138	; 0x8a
 8003e8e:	4641      	mov	r1, r8
 8003e90:	4658      	mov	r0, fp
 8003e92:	f003 f88d 	bl	8006fb0 <iprintf>
 8003e96:	3501      	adds	r5, #1
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
 8003e98:	2d10      	cmp	r5, #16
 8003e9a:	d1dc      	bne.n	8003e56 <do_memp_free_pool+0x2e>
      LWIP_ASSERT(errstr, 0);
 8003e9c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003f04 <do_memp_free_pool+0xdc>
 8003ea0:	f8df a068 	ldr.w	sl, [pc, #104]	; 8003f0c <do_memp_free_pool+0xe4>
 8003ea4:	f1a4 0511 	sub.w	r5, r4, #17
 8003ea8:	3c01      	subs	r4, #1
    if (m[k] != 0xcd) {
 8003eaa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003eae:	2bcd      	cmp	r3, #205	; 0xcd
 8003eb0:	d020      	beq.n	8003ef4 <do_memp_free_pool+0xcc>
      char errstr[128] = "detected memp underflow in pool ";
 8003eb2:	466a      	mov	r2, sp
 8003eb4:	4617      	mov	r7, r2
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <do_memp_free_pool+0xec>)
 8003eb8:	f103 0e20 	add.w	lr, r3, #32
 8003ebc:	4694      	mov	ip, r2
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003ec8:	4573      	cmp	r3, lr
 8003eca:	4662      	mov	r2, ip
 8003ecc:	d1f6      	bne.n	8003ebc <do_memp_free_pool+0x94>
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	225f      	movs	r2, #95	; 0x5f
 8003ed2:	f88c 3000 	strb.w	r3, [ip]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8003edc:	f002 f97c 	bl	80061d8 <memset>
      strcat(errstr, desc->desc);
 8003ee0:	6831      	ldr	r1, [r6, #0]
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f003 f914 	bl	8007110 <strcat>
      LWIP_ASSERT(errstr, 0);
 8003ee8:	4643      	mov	r3, r8
 8003eea:	22a5      	movs	r2, #165	; 0xa5
 8003eec:	4639      	mov	r1, r7
 8003eee:	4650      	mov	r0, sl
 8003ef0:	f003 f85e 	bl	8006fb0 <iprintf>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8003ef4:	42ac      	cmp	r4, r5
 8003ef6:	d1d8      	bne.n	8003eaa <do_memp_free_pool+0x82>
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
 8003ef8:	4648      	mov	r0, r9
 8003efa:	f7ff ff45 	bl	8003d88 <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003efe:	b021      	add	sp, #132	; 0x84
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	0800a925 	.word	0x0800a925
 8003f08:	0800a905 	.word	0x0800a905
 8003f0c:	0800a865 	.word	0x0800a865
 8003f10:	0800a696 	.word	0x0800a696
 8003f14:	0800a716 	.word	0x0800a716

08003f18 <memp_init>:
}
 8003f18:	4770      	bx	lr
	...

08003f1c <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003f1c:	2806      	cmp	r0, #6
{
 8003f1e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003f20:	d806      	bhi.n	8003f30 <memp_malloc_fn+0x14>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <memp_malloc_fn+0x28>)
 8003f24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8003f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8003f2c:	f7ff bf4e 	b.w	8003dcc <do_memp_malloc_pool_fn>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <memp_malloc_fn+0x2c>)
 8003f32:	f240 1287 	movw	r2, #391	; 0x187
 8003f36:	4905      	ldr	r1, [pc, #20]	; (8003f4c <memp_malloc_fn+0x30>)
 8003f38:	4805      	ldr	r0, [pc, #20]	; (8003f50 <memp_malloc_fn+0x34>)
 8003f3a:	f003 f839 	bl	8006fb0 <iprintf>
}
 8003f3e:	2000      	movs	r0, #0
 8003f40:	bd08      	pop	{r3, pc}
 8003f42:	bf00      	nop
 8003f44:	0800a9e8 	.word	0x0800a9e8
 8003f48:	0800a925 	.word	0x0800a925
 8003f4c:	0800a9cb 	.word	0x0800a9cb
 8003f50:	0800a865 	.word	0x0800a865

08003f54 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003f54:	2806      	cmp	r0, #6
 8003f56:	d906      	bls.n	8003f66 <memp_free+0x12>
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <memp_free+0x20>)
 8003f5a:	f240 12db 	movw	r2, #475	; 0x1db
 8003f5e:	4906      	ldr	r1, [pc, #24]	; (8003f78 <memp_free+0x24>)
 8003f60:	4806      	ldr	r0, [pc, #24]	; (8003f7c <memp_free+0x28>)
 8003f62:	f003 b825 	b.w	8006fb0 <iprintf>

  if (mem == NULL) {
 8003f66:	b121      	cbz	r1, 8003f72 <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <memp_free+0x2c>)
 8003f6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003f6e:	f7ff bf5b 	b.w	8003e28 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003f72:	4770      	bx	lr
 8003f74:	0800a925 	.word	0x0800a925
 8003f78:	0800a9b0 	.word	0x0800a9b0
 8003f7c:	0800a865 	.word	0x0800a865
 8003f80:	0800a9e8 	.word	0x0800a9e8

08003f84 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003f84:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 8003f88:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003f8a:	071b      	lsls	r3, r3, #28
 8003f8c:	d502      	bpl.n	8003f94 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8003f8e:	3104      	adds	r1, #4
 8003f90:	f001 b85a 	b.w	8005048 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003f94:	4770      	bx	lr

08003f96 <netif_init>:
}
 8003f96:	4770      	bx	lr

08003f98 <netif_set_ipaddr>:
{
 8003f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f9a:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	b191      	cbz	r1, 8003fc6 <netif_set_ipaddr+0x2e>
 8003fa0:	680b      	ldr	r3, [r1, #0]
 8003fa2:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003fa4:	9a01      	ldr	r2, [sp, #4]
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d00a      	beq.n	8003fc2 <netif_set_ipaddr+0x2a>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003fac:	1d26      	adds	r6, r4, #4
 8003fae:	a901      	add	r1, sp, #4
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f000 fe73 	bl	8004c9c <udp_netif_ip_addr_changed>
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003fb6:	a901      	add	r1, sp, #4
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 fc15 	bl	80047e8 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003fbe:	b92d      	cbnz	r5, 8003fcc <netif_set_ipaddr+0x34>
 8003fc0:	6065      	str	r5, [r4, #4]
}
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <netif_set_ipaddr+0x44>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	e7ea      	b.n	8003fa2 <netif_set_ipaddr+0xa>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f6      	beq.n	8003fc2 <netif_set_ipaddr+0x2a>
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7ff ffd5 	bl	8003f84 <netif_issue_reports.part.0>
}
 8003fda:	e7f2      	b.n	8003fc2 <netif_set_ipaddr+0x2a>
 8003fdc:	0800b1dc 	.word	0x0800b1dc

08003fe0 <netif_set_addr>:
{
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	4615      	mov	r5, r2
 8003fe6:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8003fe8:	b109      	cbz	r1, 8003fee <netif_set_addr+0xe>
 8003fea:	680b      	ldr	r3, [r1, #0]
 8003fec:	b94b      	cbnz	r3, 8004002 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7ff ffd2 	bl	8003f98 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003ff4:	b105      	cbz	r5, 8003ff8 <netif_set_addr+0x18>
 8003ff6:	682d      	ldr	r5, [r5, #0]
 8003ff8:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003ffa:	b104      	cbz	r4, 8003ffe <netif_set_addr+0x1e>
 8003ffc:	6824      	ldr	r4, [r4, #0]
 8003ffe:	60f4      	str	r4, [r6, #12]
}
 8004000:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004002:	b102      	cbz	r2, 8004006 <netif_set_addr+0x26>
 8004004:	6815      	ldr	r5, [r2, #0]
 8004006:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004008:	b104      	cbz	r4, 800400c <netif_set_addr+0x2c>
 800400a:	6824      	ldr	r4, [r4, #0]
 800400c:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800400e:	4630      	mov	r0, r6
}
 8004010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8004014:	f7ff bfc0 	b.w	8003f98 <netif_set_ipaddr>

08004018 <netif_add>:
{
 8004018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800401c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800401e:	4604      	mov	r4, r0
 8004020:	460f      	mov	r7, r1
 8004022:	4690      	mov	r8, r2
 8004024:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8004026:	b92e      	cbnz	r6, 8004034 <netif_add+0x1c>
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <netif_add+0x68>)
 800402a:	22fb      	movs	r2, #251	; 0xfb
 800402c:	4915      	ldr	r1, [pc, #84]	; (8004084 <netif_add+0x6c>)
 800402e:	4816      	ldr	r0, [pc, #88]	; (8004088 <netif_add+0x70>)
 8004030:	f002 ffbe 	bl	8006fb0 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004034:	2303      	movs	r3, #3
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004036:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800403a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 800403e:	9b08      	ldr	r3, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004040:	4620      	mov	r0, r4
  netif->state = state;
 8004042:	6223      	str	r3, [r4, #32]
  netif->num = netif_num++;
 8004044:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004046:	e9c4 5501 	strd	r5, r5, [r4, #4]
  netif->num = netif_num++;
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 8004050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8004052:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8004054:	6123      	str	r3, [r4, #16]
  ip_addr_set_zero_ip4(&netif->gw);
 8004056:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8004058:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  netif->link_callback = NULL;
 800405c:	61e5      	str	r5, [r4, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800405e:	464b      	mov	r3, r9
 8004060:	4642      	mov	r2, r8
 8004062:	4639      	mov	r1, r7
 8004064:	f7ff ffbc 	bl	8003fe0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8004068:	4620      	mov	r0, r4
 800406a:	47b0      	blx	r6
 800406c:	b930      	cbnz	r0, 800407c <netif_add+0x64>
  netif->next = netif_list;
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <netif_add+0x78>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8004074:	601c      	str	r4, [r3, #0]
}
 8004076:	4620      	mov	r0, r4
 8004078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800407c:	462c      	mov	r4, r5
 800407e:	e7fa      	b.n	8004076 <netif_add+0x5e>
 8004080:	0800aa4b 	.word	0x0800aa4b
 8004084:	0800aa7c 	.word	0x0800aa7c
 8004088:	0800a865 	.word	0x0800a865
 800408c:	20000d18 	.word	0x20000d18
 8004090:	20006090 	.word	0x20006090

08004094 <netif_set_default>:
  netif_default = netif;
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <netif_set_default+0x8>)
 8004096:	6018      	str	r0, [r3, #0]
}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20006094 	.word	0x20006094

080040a0 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80040a0:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 80040a4:	07d1      	lsls	r1, r2, #31
 80040a6:	d409      	bmi.n	80040bc <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 80040a8:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80040ac:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 80040ae:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80040b2:	d503      	bpl.n	80040bc <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80040b4:	6843      	ldr	r3, [r0, #4]
 80040b6:	b10b      	cbz	r3, 80040bc <netif_set_up+0x1c>
 80040b8:	f7ff bf64 	b.w	8003f84 <netif_issue_reports.part.0>
}
 80040bc:	4770      	bx	lr

080040be <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 80040be:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80040c2:	07d9      	lsls	r1, r3, #31
 80040c4:	d507      	bpl.n	80040d6 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 80040c6:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80040ca:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 80040cc:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80040d0:	d501      	bpl.n	80040d6 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 80040d2:	f000 bf0d 	b.w	8004ef0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80040d6:	4770      	bx	lr

080040d8 <netif_set_link_callback>:
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 80040d8:	b100      	cbz	r0, 80040dc <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80040da:	61c1      	str	r1, [r0, #28]
  }
}
 80040dc:	4770      	bx	lr
	...

080040e0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80040e0:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80040e2:	4604      	mov	r4, r0
 80040e4:	bb70      	cbnz	r0, 8004144 <pbuf_header_impl+0x64>
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <pbuf_header_impl+0x88>)
 80040e8:	f240 223f 	movw	r2, #575	; 0x23f
 80040ec:	491f      	ldr	r1, [pc, #124]	; (800416c <pbuf_header_impl+0x8c>)
 80040ee:	4820      	ldr	r0, [pc, #128]	; (8004170 <pbuf_header_impl+0x90>)
 80040f0:	f002 ff5e 	bl	8006fb0 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80040f4:	2000      	movs	r0, #0
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 80040f8:	461d      	mov	r5, r3
  type = p->type;
 80040fa:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 80040fc:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80040fe:	b10e      	cbz	r6, 8004104 <pbuf_header_impl+0x24>
 8004100:	2e03      	cmp	r6, #3
 8004102:	d106      	bne.n	8004112 <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004104:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004106:	f104 0210 	add.w	r2, r4, #16
 800410a:	4290      	cmp	r0, r2
 800410c:	d20a      	bcs.n	8004124 <pbuf_header_impl+0x44>
      return 1;
 800410e:	2001      	movs	r0, #1
 8004110:	e7f1      	b.n	80040f6 <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004112:	3e01      	subs	r6, #1
 8004114:	2e01      	cmp	r6, #1
 8004116:	d810      	bhi.n	800413a <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004118:	2900      	cmp	r1, #0
 800411a:	da0b      	bge.n	8004134 <pbuf_header_impl+0x54>
 800411c:	8962      	ldrh	r2, [r4, #10]
 800411e:	42aa      	cmp	r2, r5
 8004120:	d3f5      	bcc.n	800410e <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004122:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 8004124:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004126:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 8004128:	441a      	add	r2, r3
 800412a:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 800412c:	8922      	ldrh	r2, [r4, #8]
 800412e:	4413      	add	r3, r2
 8004130:	8123      	strh	r3, [r4, #8]
 8004132:	e7df      	b.n	80040f4 <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 8004134:	2a00      	cmp	r2, #0
 8004136:	d1f4      	bne.n	8004122 <pbuf_header_impl+0x42>
 8004138:	e7e9      	b.n	800410e <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <pbuf_header_impl+0x88>)
 800413c:	f240 2277 	movw	r2, #631	; 0x277
 8004140:	490c      	ldr	r1, [pc, #48]	; (8004174 <pbuf_header_impl+0x94>)
 8004142:	e00c      	b.n	800415e <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004144:	2900      	cmp	r1, #0
 8004146:	d0d5      	beq.n	80040f4 <pbuf_header_impl+0x14>
 8004148:	b28b      	uxth	r3, r1
  if (header_size_increment < 0) {
 800414a:	dad5      	bge.n	80040f8 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 800414c:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800414e:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8004150:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004152:	42a8      	cmp	r0, r5
 8004154:	d2d1      	bcs.n	80040fa <pbuf_header_impl+0x1a>
 8004156:	f240 2247 	movw	r2, #583	; 0x247
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <pbuf_header_impl+0x88>)
 800415c:	4906      	ldr	r1, [pc, #24]	; (8004178 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 800415e:	4804      	ldr	r0, [pc, #16]	; (8004170 <pbuf_header_impl+0x90>)
 8004160:	f002 ff26 	bl	8006fb0 <iprintf>
 8004164:	e7d3      	b.n	800410e <pbuf_header_impl+0x2e>
 8004166:	bf00      	nop
 8004168:	0800acb6 	.word	0x0800acb6
 800416c:	0800ad20 	.word	0x0800ad20
 8004170:	0800a865 	.word	0x0800a865
 8004174:	0800ad04 	.word	0x0800ad04
 8004178:	0800ace6 	.word	0x0800ace6

0800417c <pbuf_alloced_custom>:
{
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8004180:	2804      	cmp	r0, #4
 8004182:	d81e      	bhi.n	80041c2 <pbuf_alloced_custom+0x46>
 8004184:	e8df f000 	tbb	[pc, r0]
 8004188:	1b280326 	.word	0x1b280326
 800418c:	1b          	.byte	0x1b
 800418d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800418e:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004190:	3003      	adds	r0, #3
 8004192:	f020 0403 	bic.w	r4, r0, #3
 8004196:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800419a:	190e      	adds	r6, r1, r4
 800419c:	4286      	cmp	r6, r0
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	d816      	bhi.n	80041d2 <pbuf_alloced_custom+0x56>
  p->pbuf.next = NULL;
 80041a4:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 80041a6:	b1cd      	cbz	r5, 80041dc <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80041a8:	442c      	add	r4, r5
 80041aa:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80041ac:	2002      	movs	r0, #2
  p->pbuf.type = type;
 80041ae:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80041b0:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80041b2:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80041b4:	8119      	strh	r1, [r3, #8]
 80041b6:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 80041b8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80041ba:	4618      	mov	r0, r3
 80041bc:	e009      	b.n	80041d2 <pbuf_alloced_custom+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80041be:	2000      	movs	r0, #0
    break;
 80041c0:	e7e6      	b.n	8004190 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <pbuf_alloced_custom+0x64>)
 80041c4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80041c8:	4906      	ldr	r1, [pc, #24]	; (80041e4 <pbuf_alloced_custom+0x68>)
 80041ca:	4807      	ldr	r0, [pc, #28]	; (80041e8 <pbuf_alloced_custom+0x6c>)
 80041cc:	f002 fef0 	bl	8006fb0 <iprintf>
    return NULL;
 80041d0:	2000      	movs	r0, #0
}
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80041d4:	2036      	movs	r0, #54	; 0x36
 80041d6:	e7db      	b.n	8004190 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80041d8:	200e      	movs	r0, #14
 80041da:	e7d9      	b.n	8004190 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80041dc:	605d      	str	r5, [r3, #4]
 80041de:	e7e5      	b.n	80041ac <pbuf_alloced_custom+0x30>
 80041e0:	0800acb6 	.word	0x0800acb6
 80041e4:	0800ab3b 	.word	0x0800ab3b
 80041e8:	0800a865 	.word	0x0800a865

080041ec <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	f7ff bf77 	b.w	80040e0 <pbuf_header_impl>

080041f2 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 80041f2:	2201      	movs	r2, #1
 80041f4:	f7ff bf74 	b.w	80040e0 <pbuf_header_impl>

080041f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80041f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80041fc:	4604      	mov	r4, r0
 80041fe:	b950      	cbnz	r0, 8004216 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <pbuf_free+0xac>)
 8004202:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004206:	4928      	ldr	r1, [pc, #160]	; (80042a8 <pbuf_free+0xb0>)
 8004208:	4828      	ldr	r0, [pc, #160]	; (80042ac <pbuf_free+0xb4>)
 800420a:	f002 fed1 	bl	8006fb0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800420e:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8004210:	4628      	mov	r0, r5
 8004212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8004216:	7b03      	ldrb	r3, [r0, #12]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d906      	bls.n	800422a <pbuf_free+0x32>
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <pbuf_free+0xac>)
 800421e:	f240 22de 	movw	r2, #734	; 0x2de
 8004222:	4923      	ldr	r1, [pc, #140]	; (80042b0 <pbuf_free+0xb8>)
 8004224:	4821      	ldr	r0, [pc, #132]	; (80042ac <pbuf_free+0xb4>)
 8004226:	f002 fec3 	bl	8006fb0 <iprintf>
{
 800422a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800422c:	4e1d      	ldr	r6, [pc, #116]	; (80042a4 <pbuf_free+0xac>)
 800422e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80042b8 <pbuf_free+0xc0>
 8004232:	4f1e      	ldr	r7, [pc, #120]	; (80042ac <pbuf_free+0xb4>)
 8004234:	89e3      	ldrh	r3, [r4, #14]
 8004236:	b933      	cbnz	r3, 8004246 <pbuf_free+0x4e>
 8004238:	4633      	mov	r3, r6
 800423a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800423e:	4641      	mov	r1, r8
 8004240:	4638      	mov	r0, r7
 8004242:	f002 feb5 	bl	8006fb0 <iprintf>
    ref = --(p->ref);
 8004246:	89e3      	ldrh	r3, [r4, #14]
 8004248:	3b01      	subs	r3, #1
 800424a:	b29b      	uxth	r3, r3
 800424c:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1de      	bne.n	8004210 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004252:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8004254:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004258:	079b      	lsls	r3, r3, #30
 800425a:	d511      	bpl.n	8004280 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800425c:	6923      	ldr	r3, [r4, #16]
 800425e:	b933      	cbnz	r3, 800426e <pbuf_free+0x76>
 8004260:	4633      	mov	r3, r6
 8004262:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004266:	4913      	ldr	r1, [pc, #76]	; (80042b4 <pbuf_free+0xbc>)
 8004268:	4638      	mov	r0, r7
 800426a:	f002 fea1 	bl	8006fb0 <iprintf>
        pc->custom_free_function(p);
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	4620      	mov	r0, r4
 8004272:	4798      	blx	r3
  while (p != NULL) {
 8004274:	464c      	mov	r4, r9
      count++;
 8004276:	3501      	adds	r5, #1
 8004278:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800427a:	2c00      	cmp	r4, #0
 800427c:	d1da      	bne.n	8004234 <pbuf_free+0x3c>
 800427e:	e7c7      	b.n	8004210 <pbuf_free+0x18>
      type = p->type;
 8004280:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8004282:	2b03      	cmp	r3, #3
 8004284:	d104      	bne.n	8004290 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8004286:	4621      	mov	r1, r4
 8004288:	2006      	movs	r0, #6
          memp_free(MEMP_PBUF, p);
 800428a:	f7ff fe63 	bl	8003f54 <memp_free>
 800428e:	e7f1      	b.n	8004274 <pbuf_free+0x7c>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004290:	3b01      	subs	r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d802      	bhi.n	800429c <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8004296:	4621      	mov	r1, r4
 8004298:	2005      	movs	r0, #5
 800429a:	e7f6      	b.n	800428a <pbuf_free+0x92>
          mem_free(p);
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff fd73 	bl	8003d88 <mem_free>
 80042a2:	e7e7      	b.n	8004274 <pbuf_free+0x7c>
 80042a4:	0800acb6 	.word	0x0800acb6
 80042a8:	0800ad20 	.word	0x0800ad20
 80042ac:	0800a865 	.word	0x0800a865
 80042b0:	0800ac6a 	.word	0x0800ac6a
 80042b4:	0800ac95 	.word	0x0800ac95
 80042b8:	0800ac7f 	.word	0x0800ac7f

080042bc <pbuf_alloc>:
{
 80042bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c0:	460e      	mov	r6, r1
 80042c2:	4617      	mov	r7, r2
 80042c4:	f04f 0800 	mov.w	r8, #0
  switch (layer) {
 80042c8:	2804      	cmp	r0, #4
 80042ca:	d80e      	bhi.n	80042ea <pbuf_alloc+0x2e>
 80042cc:	e8df f000 	tbb	[pc, r0]
 80042d0:	0b170315 	.word	0x0b170315
 80042d4:	0b          	.byte	0x0b
 80042d5:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80042d6:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 80042d8:	2f03      	cmp	r7, #3
 80042da:	f200 80be 	bhi.w	800445a <pbuf_alloc+0x19e>
 80042de:	e8df f007 	tbb	[pc, r7]
 80042e2:	ab91      	.short	0xab91
 80042e4:	10ab      	.short	0x10ab
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80042e6:	2500      	movs	r5, #0
    break;
 80042e8:	e7f6      	b.n	80042d8 <pbuf_alloc+0x1c>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80042ea:	f44f 728b 	mov.w	r2, #278	; 0x116
 80042ee:	4b5d      	ldr	r3, [pc, #372]	; (8004464 <pbuf_alloc+0x1a8>)
 80042f0:	495d      	ldr	r1, [pc, #372]	; (8004468 <pbuf_alloc+0x1ac>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80042f2:	485e      	ldr	r0, [pc, #376]	; (800446c <pbuf_alloc+0x1b0>)
 80042f4:	f002 fe5c 	bl	8006fb0 <iprintf>
 80042f8:	e00b      	b.n	8004312 <pbuf_alloc+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80042fa:	2536      	movs	r5, #54	; 0x36
 80042fc:	e7ec      	b.n	80042d8 <pbuf_alloc+0x1c>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80042fe:	250e      	movs	r5, #14
 8004300:	e7ea      	b.n	80042d8 <pbuf_alloc+0x1c>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004302:	f240 121d 	movw	r2, #285	; 0x11d
 8004306:	4957      	ldr	r1, [pc, #348]	; (8004464 <pbuf_alloc+0x1a8>)
 8004308:	2006      	movs	r0, #6
 800430a:	f7ff fe07 	bl	8003f1c <memp_malloc_fn>
    if (p == NULL) {
 800430e:	4604      	mov	r4, r0
 8004310:	b918      	cbnz	r0, 800431a <pbuf_alloc+0x5e>
    return NULL;
 8004312:	2400      	movs	r4, #0
}
 8004314:	4620      	mov	r0, r4
 8004316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 800431a:	2303      	movs	r3, #3
 800431c:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004322:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004324:	3503      	adds	r5, #3
 8004326:	f025 0503 	bic.w	r5, r5, #3
 800432a:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 800432e:	42b5      	cmp	r5, r6
 8004330:	bf28      	it	cs
 8004332:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004334:	3313      	adds	r3, #19
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800433c:	f500 7718 	add.w	r7, r0, #608	; 0x260
 8004340:	442b      	add	r3, r5
 8004342:	429f      	cmp	r7, r3
    p->tot_len = length;
 8004344:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004346:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004348:	d206      	bcs.n	8004358 <pbuf_alloc+0x9c>
 800434a:	4b46      	ldr	r3, [pc, #280]	; (8004464 <pbuf_alloc+0x1a8>)
 800434c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8004350:	4947      	ldr	r1, [pc, #284]	; (8004470 <pbuf_alloc+0x1b4>)
 8004352:	4846      	ldr	r0, [pc, #280]	; (800446c <pbuf_alloc+0x1b0>)
 8004354:	f002 fe2c 	bl	8006fb0 <iprintf>
    p->ref = 1;
 8004358:	2301      	movs	r3, #1
    while (rem_len > 0) {
 800435a:	46a3      	mov	fp, r4
    p->ref = 1;
 800435c:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 800435e:	8963      	ldrh	r3, [r4, #10]
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004360:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004464 <pbuf_alloc+0x1a8>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004364:	f8df a114 	ldr.w	sl, [pc, #276]	; 800447c <pbuf_alloc+0x1c0>
 8004368:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800446c <pbuf_alloc+0x1b0>
    rem_len = length - p->len;
 800436c:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 800436e:	2e00      	cmp	r6, #0
 8004370:	dc04      	bgt.n	800437c <pbuf_alloc+0xc0>
  p->ref = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	7363      	strb	r3, [r4, #13]
  return p;
 800437a:	e7cb      	b.n	8004314 <pbuf_alloc+0x58>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800437c:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8004380:	4641      	mov	r1, r8
 8004382:	2006      	movs	r0, #6
 8004384:	f7ff fdca 	bl	8003f1c <memp_malloc_fn>
 8004388:	2300      	movs	r3, #0
      if (q == NULL) {
 800438a:	4605      	mov	r5, r0
 800438c:	b918      	cbnz	r0, 8004396 <pbuf_alloc+0xda>
        pbuf_free(p);
 800438e:	4620      	mov	r0, r4
 8004390:	f7ff ff32 	bl	80041f8 <pbuf_free>
 8004394:	e7bd      	b.n	8004312 <pbuf_alloc+0x56>
      q->flags = 0;
 8004396:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8004398:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800439a:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 800439e:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80043a0:	429e      	cmp	r6, r3
      q->type = type;
 80043a2:	7302      	strb	r2, [r0, #12]
      r->next = q;
 80043a4:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80043a8:	d106      	bne.n	80043b8 <pbuf_alloc+0xfc>
 80043aa:	4643      	mov	r3, r8
 80043ac:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80043b0:	4651      	mov	r1, sl
 80043b2:	4648      	mov	r0, r9
 80043b4:	f002 fdfc 	bl	8006fb0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80043b8:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80043ba:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 80043be:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80043c0:	bf28      	it	cs
 80043c2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80043c6:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80043c8:	f105 0310 	add.w	r3, r5, #16
 80043cc:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80043ce:	079b      	lsls	r3, r3, #30
 80043d0:	d006      	beq.n	80043e0 <pbuf_alloc+0x124>
 80043d2:	4643      	mov	r3, r8
 80043d4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80043d8:	4926      	ldr	r1, [pc, #152]	; (8004474 <pbuf_alloc+0x1b8>)
 80043da:	4648      	mov	r0, r9
 80043dc:	f002 fde8 	bl	8006fb0 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80043e0:	8962      	ldrh	r2, [r4, #10]
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	429f      	cmp	r7, r3
 80043e8:	d206      	bcs.n	80043f8 <pbuf_alloc+0x13c>
 80043ea:	4643      	mov	r3, r8
 80043ec:	f240 1255 	movw	r2, #341	; 0x155
 80043f0:	491f      	ldr	r1, [pc, #124]	; (8004470 <pbuf_alloc+0x1b4>)
 80043f2:	4648      	mov	r0, r9
 80043f4:	f002 fddc 	bl	8006fb0 <iprintf>
      q->ref = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 80043fc:	896b      	ldrh	r3, [r5, #10]
 80043fe:	46ab      	mov	fp, r5
 8004400:	1af6      	subs	r6, r6, r3
 8004402:	e7b4      	b.n	800436e <pbuf_alloc+0xb2>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004404:	f105 0013 	add.w	r0, r5, #19
 8004408:	1cf3      	adds	r3, r6, #3
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	f020 0003 	bic.w	r0, r0, #3
      p = (struct pbuf*)mem_malloc(alloc_len);
 8004412:	4418      	add	r0, r3
 8004414:	f7ff fca0 	bl	8003d58 <mem_malloc>
    if (p == NULL) {
 8004418:	4604      	mov	r4, r0
 800441a:	2800      	cmp	r0, #0
 800441c:	f43f af79 	beq.w	8004312 <pbuf_alloc+0x56>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004420:	4405      	add	r5, r0
 8004422:	3513      	adds	r5, #19
 8004424:	f025 0503 	bic.w	r5, r5, #3
 8004428:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 800442a:	8106      	strh	r6, [r0, #8]
 800442c:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800442e:	f8c0 8000 	str.w	r8, [r0]
    p->type = type;
 8004432:	f880 800c 	strb.w	r8, [r0, #12]
 8004436:	e79c      	b.n	8004372 <pbuf_alloc+0xb6>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004438:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800443c:	4909      	ldr	r1, [pc, #36]	; (8004464 <pbuf_alloc+0x1a8>)
 800443e:	2005      	movs	r0, #5
 8004440:	f7ff fd6c 	bl	8003f1c <memp_malloc_fn>
    if (p == NULL) {
 8004444:	4604      	mov	r4, r0
 8004446:	2800      	cmp	r0, #0
 8004448:	f43f af63 	beq.w	8004312 <pbuf_alloc+0x56>
    p->payload = NULL;
 800444c:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800444e:	8106      	strh	r6, [r0, #8]
    p->payload = NULL;
 8004450:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8004452:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8004454:	6003      	str	r3, [r0, #0]
    p->type = type;
 8004456:	7307      	strb	r7, [r0, #12]
    break;
 8004458:	e78b      	b.n	8004372 <pbuf_alloc+0xb6>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800445a:	4b02      	ldr	r3, [pc, #8]	; (8004464 <pbuf_alloc+0x1a8>)
 800445c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004460:	4905      	ldr	r1, [pc, #20]	; (8004478 <pbuf_alloc+0x1bc>)
 8004462:	e746      	b.n	80042f2 <pbuf_alloc+0x36>
 8004464:	0800acb6 	.word	0x0800acb6
 8004468:	0800aa93 	.word	0x0800aa93
 800446c:	0800a865 	.word	0x0800a865
 8004470:	0800aaae 	.word	0x0800aaae
 8004474:	0800aaf3 	.word	0x0800aaf3
 8004478:	0800ab20 	.word	0x0800ab20
 800447c:	0800aadf 	.word	0x0800aadf

08004480 <pbuf_realloc>:
{
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004484:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004486:	4604      	mov	r4, r0
 8004488:	b930      	cbnz	r0, 8004498 <pbuf_realloc+0x18>
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <pbuf_realloc+0xc4>)
 800448c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004490:	492d      	ldr	r1, [pc, #180]	; (8004548 <pbuf_realloc+0xc8>)
 8004492:	482e      	ldr	r0, [pc, #184]	; (800454c <pbuf_realloc+0xcc>)
 8004494:	f002 fd8c 	bl	8006fb0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004498:	7b23      	ldrb	r3, [r4, #12]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d906      	bls.n	80044ac <pbuf_realloc+0x2c>
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <pbuf_realloc+0xc4>)
 80044a0:	f240 12f7 	movw	r2, #503	; 0x1f7
 80044a4:	492a      	ldr	r1, [pc, #168]	; (8004550 <pbuf_realloc+0xd0>)
 80044a6:	4829      	ldr	r0, [pc, #164]	; (800454c <pbuf_realloc+0xcc>)
 80044a8:	f002 fd82 	bl	8006fb0 <iprintf>
  if (new_len >= p->tot_len) {
 80044ac:	8926      	ldrh	r6, [r4, #8]
 80044ae:	42ae      	cmp	r6, r5
 80044b0:	d945      	bls.n	800453e <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80044b2:	4f24      	ldr	r7, [pc, #144]	; (8004544 <pbuf_realloc+0xc4>)
 80044b4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800455c <pbuf_realloc+0xdc>
 80044b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800454c <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 80044bc:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 80044be:	8963      	ldrh	r3, [r4, #10]
 80044c0:	42ab      	cmp	r3, r5
 80044c2:	d319      	bcc.n	80044f8 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80044c4:	7b22      	ldrb	r2, [r4, #12]
 80044c6:	2a00      	cmp	r2, #0
 80044c8:	d131      	bne.n	800452e <pbuf_realloc+0xae>
 80044ca:	42ab      	cmp	r3, r5
 80044cc:	d02f      	beq.n	800452e <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80044ce:	7b63      	ldrb	r3, [r4, #13]
 80044d0:	079b      	lsls	r3, r3, #30
 80044d2:	d42c      	bmi.n	800452e <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4620      	mov	r0, r4
 80044d8:	1b09      	subs	r1, r1, r4
 80044da:	b289      	uxth	r1, r1
 80044dc:	4429      	add	r1, r5
 80044de:	f7ff fc3a 	bl	8003d56 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80044e2:	4604      	mov	r4, r0
 80044e4:	bb18      	cbnz	r0, 800452e <pbuf_realloc+0xae>
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <pbuf_realloc+0xc4>)
 80044e8:	f240 221d 	movw	r2, #541	; 0x21d
 80044ec:	4919      	ldr	r1, [pc, #100]	; (8004554 <pbuf_realloc+0xd4>)
 80044ee:	4817      	ldr	r0, [pc, #92]	; (800454c <pbuf_realloc+0xcc>)
 80044f0:	f002 fd5e 	bl	8006fb0 <iprintf>
  q->len = rem_len;
 80044f4:	8164      	strh	r4, [r4, #10]
 80044f6:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 80044f8:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80044fa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80044fe:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8004500:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004502:	dd06      	ble.n	8004512 <pbuf_realloc+0x92>
 8004504:	463b      	mov	r3, r7
 8004506:	f240 220b 	movw	r2, #523	; 0x20b
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	f002 fd4f 	bl	8006fb0 <iprintf>
    q->tot_len += (u16_t)grow;
 8004512:	8923      	ldrh	r3, [r4, #8]
 8004514:	4433      	add	r3, r6
 8004516:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8004518:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800451a:	2c00      	cmp	r4, #0
 800451c:	d1cf      	bne.n	80044be <pbuf_realloc+0x3e>
 800451e:	463b      	mov	r3, r7
 8004520:	f240 220f 	movw	r2, #527	; 0x20f
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <pbuf_realloc+0xd8>)
 8004526:	4640      	mov	r0, r8
 8004528:	f002 fd42 	bl	8006fb0 <iprintf>
 800452c:	e7c7      	b.n	80044be <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800452e:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8004530:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8004532:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8004534:	b108      	cbz	r0, 800453a <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8004536:	f7ff fe5f 	bl	80041f8 <pbuf_free>
  q->next = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	6023      	str	r3, [r4, #0]
}
 800453e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004542:	bf00      	nop
 8004544:	0800acb6 	.word	0x0800acb6
 8004548:	0800ad12 	.word	0x0800ad12
 800454c:	0800a865 	.word	0x0800a865
 8004550:	0800ad2a 	.word	0x0800ad2a
 8004554:	0800ad6e 	.word	0x0800ad6e
 8004558:	0800ad56 	.word	0x0800ad56
 800455c:	0800ad45 	.word	0x0800ad45

08004560 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004560:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8004562:	2200      	movs	r2, #0
 8004564:	b290      	uxth	r0, r2
 8004566:	3201      	adds	r2, #1
 8004568:	b903      	cbnz	r3, 800456c <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800456a:	4770      	bx	lr
    p = p->next;
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	e7f9      	b.n	8004564 <pbuf_clen+0x4>

08004570 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8004570:	b158      	cbz	r0, 800458a <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 8004572:	89c3      	ldrh	r3, [r0, #14]
 8004574:	3301      	adds	r3, #1
 8004576:	b29b      	uxth	r3, r3
 8004578:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800457a:	b933      	cbnz	r3, 800458a <pbuf_ref+0x1a>
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <pbuf_ref+0x1c>)
 800457e:	f240 3239 	movw	r2, #825	; 0x339
 8004582:	4903      	ldr	r1, [pc, #12]	; (8004590 <pbuf_ref+0x20>)
 8004584:	4803      	ldr	r0, [pc, #12]	; (8004594 <pbuf_ref+0x24>)
 8004586:	f002 bd13 	b.w	8006fb0 <iprintf>
  }
}
 800458a:	4770      	bx	lr
 800458c:	0800acb6 	.word	0x0800acb6
 8004590:	0800ad8a 	.word	0x0800ad8a
 8004594:	0800a865 	.word	0x0800a865

08004598 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800459c:	4604      	mov	r4, r0
 800459e:	b100      	cbz	r0, 80045a2 <pbuf_cat+0xa>
 80045a0:	b961      	cbnz	r1, 80045bc <pbuf_cat+0x24>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80045a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <pbuf_cat+0x60>)
 80045a8:	f240 324d 	movw	r2, #845	; 0x34d
 80045ac:	4913      	ldr	r1, [pc, #76]	; (80045fc <pbuf_cat+0x64>)
 80045ae:	4814      	ldr	r0, [pc, #80]	; (8004600 <pbuf_cat+0x68>)
 80045b0:	f002 bcfe 	b.w	8006fb0 <iprintf>
    p->tot_len += t->tot_len;
 80045b4:	8929      	ldrh	r1, [r5, #8]
 80045b6:	440b      	add	r3, r1
 80045b8:	8123      	strh	r3, [r4, #8]
 80045ba:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	8923      	ldrh	r3, [r4, #8]
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	d1f7      	bne.n	80045b4 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80045c4:	8962      	ldrh	r2, [r4, #10]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d006      	beq.n	80045d8 <pbuf_cat+0x40>
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <pbuf_cat+0x60>)
 80045cc:	f240 3255 	movw	r2, #853	; 0x355
 80045d0:	490c      	ldr	r1, [pc, #48]	; (8004604 <pbuf_cat+0x6c>)
 80045d2:	480b      	ldr	r0, [pc, #44]	; (8004600 <pbuf_cat+0x68>)
 80045d4:	f002 fcec 	bl	8006fb0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	b133      	cbz	r3, 80045ea <pbuf_cat+0x52>
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <pbuf_cat+0x60>)
 80045de:	f240 3256 	movw	r2, #854	; 0x356
 80045e2:	4909      	ldr	r1, [pc, #36]	; (8004608 <pbuf_cat+0x70>)
 80045e4:	4806      	ldr	r0, [pc, #24]	; (8004600 <pbuf_cat+0x68>)
 80045e6:	f002 fce3 	bl	8006fb0 <iprintf>
  p->tot_len += t->tot_len;
 80045ea:	892a      	ldrh	r2, [r5, #8]
 80045ec:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80045ee:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80045f0:	4413      	add	r3, r2
 80045f2:	8123      	strh	r3, [r4, #8]
}
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	bf00      	nop
 80045f8:	0800acb6 	.word	0x0800acb6
 80045fc:	0800ab5f 	.word	0x0800ab5f
 8004600:	0800a865 	.word	0x0800a865
 8004604:	0800ab94 	.word	0x0800ab94
 8004608:	0800abc1 	.word	0x0800abc1

0800460c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800460c:	b510      	push	{r4, lr}
 800460e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8004610:	f7ff ffc2 	bl	8004598 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004614:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800461a:	f7ff bfa9 	b.w	8004570 <pbuf_ref>
	...

08004620 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004624:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004626:	4605      	mov	r5, r0
 8004628:	b120      	cbz	r0, 8004634 <pbuf_copy+0x14>
 800462a:	b119      	cbz	r1, 8004634 <pbuf_copy+0x14>
 800462c:	8902      	ldrh	r2, [r0, #8]
 800462e:	890b      	ldrh	r3, [r1, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d20a      	bcs.n	800464a <pbuf_copy+0x2a>
 8004634:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004638:	4b35      	ldr	r3, [pc, #212]	; (8004710 <pbuf_copy+0xf0>)
 800463a:	4936      	ldr	r1, [pc, #216]	; (8004714 <pbuf_copy+0xf4>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800463c:	4836      	ldr	r0, [pc, #216]	; (8004718 <pbuf_copy+0xf8>)
 800463e:	f002 fcb7 	bl	8006fb0 <iprintf>
 8004642:	f06f 000f 	mvn.w	r0, #15
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8004646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 800464a:	f04f 0b00 	mov.w	fp, #0
 800464e:	465f      	mov	r7, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004650:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004710 <pbuf_copy+0xf0>
 8004654:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004728 <pbuf_copy+0x108>
 8004658:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8004718 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800465c:	896e      	ldrh	r6, [r5, #10]
 800465e:	8963      	ldrh	r3, [r4, #10]
 8004660:	1bf6      	subs	r6, r6, r7
 8004662:	eba3 030b 	sub.w	r3, r3, fp
 8004666:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004668:	6868      	ldr	r0, [r5, #4]
 800466a:	6861      	ldr	r1, [r4, #4]
      len = p_from->len - offset_from;
 800466c:	bfac      	ite	ge
 800466e:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8004670:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004672:	4632      	mov	r2, r6
 8004674:	4459      	add	r1, fp
 8004676:	4438      	add	r0, r7
 8004678:	f001 fda3 	bl	80061c2 <memcpy>
    offset_to += len;
 800467c:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800467e:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8004680:	b2bf      	uxth	r7, r7
    offset_from += len;
 8004682:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004684:	42bb      	cmp	r3, r7
    offset_from += len;
 8004686:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800468a:	d206      	bcs.n	800469a <pbuf_copy+0x7a>
 800468c:	4643      	mov	r3, r8
 800468e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8004692:	4651      	mov	r1, sl
 8004694:	4648      	mov	r0, r9
 8004696:	f002 fc8b 	bl	8006fb0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800469a:	8963      	ldrh	r3, [r4, #10]
 800469c:	455b      	cmp	r3, fp
 800469e:	d206      	bcs.n	80046ae <pbuf_copy+0x8e>
 80046a0:	4643      	mov	r3, r8
 80046a2:	f240 32ce 	movw	r2, #974	; 0x3ce
 80046a6:	491d      	ldr	r1, [pc, #116]	; (800471c <pbuf_copy+0xfc>)
 80046a8:	4648      	mov	r0, r9
 80046aa:	f002 fc81 	bl	8006fb0 <iprintf>
    if (offset_from >= p_from->len) {
 80046ae:	8963      	ldrh	r3, [r4, #10]
 80046b0:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 80046b2:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80046b4:	bf9c      	itt	ls
 80046b6:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80046b8:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 80046bc:	42bb      	cmp	r3, r7
 80046be:	d108      	bne.n	80046d2 <pbuf_copy+0xb2>
      p_to = p_to->next;
 80046c0:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80046c2:	b92d      	cbnz	r5, 80046d0 <pbuf_copy+0xb0>
 80046c4:	b314      	cbz	r4, 800470c <pbuf_copy+0xec>
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <pbuf_copy+0xf0>)
 80046c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80046cc:	4914      	ldr	r1, [pc, #80]	; (8004720 <pbuf_copy+0x100>)
 80046ce:	e7b5      	b.n	800463c <pbuf_copy+0x1c>
      offset_to = 0;
 80046d0:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80046d2:	b17c      	cbz	r4, 80046f4 <pbuf_copy+0xd4>
 80046d4:	8962      	ldrh	r2, [r4, #10]
 80046d6:	8923      	ldrh	r3, [r4, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d10b      	bne.n	80046f4 <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	b14b      	cbz	r3, 80046f4 <pbuf_copy+0xd4>
 80046e0:	f240 32de 	movw	r2, #990	; 0x3de
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <pbuf_copy+0xf0>)
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80046e6:	490f      	ldr	r1, [pc, #60]	; (8004724 <pbuf_copy+0x104>)
 80046e8:	480b      	ldr	r0, [pc, #44]	; (8004718 <pbuf_copy+0xf8>)
 80046ea:	f002 fc61 	bl	8006fb0 <iprintf>
 80046ee:	f06f 0005 	mvn.w	r0, #5
 80046f2:	e7a8      	b.n	8004646 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80046f4:	896a      	ldrh	r2, [r5, #10]
 80046f6:	892b      	ldrh	r3, [r5, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d105      	bne.n	8004708 <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b11b      	cbz	r3, 8004708 <pbuf_copy+0xe8>
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <pbuf_copy+0xf0>)
 8004702:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004706:	e7ee      	b.n	80046e6 <pbuf_copy+0xc6>
  } while (p_from);
 8004708:	2c00      	cmp	r4, #0
 800470a:	d1a7      	bne.n	800465c <pbuf_copy+0x3c>
  return ERR_OK;
 800470c:	4620      	mov	r0, r4
 800470e:	e79a      	b.n	8004646 <pbuf_copy+0x26>
 8004710:	0800acb6 	.word	0x0800acb6
 8004714:	0800abd1 	.word	0x0800abd1
 8004718:	0800a865 	.word	0x0800a865
 800471c:	0800ac18 	.word	0x0800ac18
 8004720:	0800ac33 	.word	0x0800ac33
 8004724:	0800ac40 	.word	0x0800ac40
 8004728:	0800ac01 	.word	0x0800ac01

0800472c <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 800472c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	4606      	mov	r6, r0
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004732:	4f27      	ldr	r7, [pc, #156]	; (80047d0 <raw_input+0xa4>)
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 8004734:	f04f 0900 	mov.w	r9, #0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f001 f8bb 	bl	80058b6 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8004740:	6873      	ldr	r3, [r6, #4]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004742:	4682      	mov	sl, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8004744:	f893 b009 	ldrb.w	fp, [r3, #9]
  pcb = raw_pcbs;
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <raw_input+0xa8>)
 800474a:	4698      	mov	r8, r3
 800474c:	681d      	ldr	r5, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 800474e:	b925      	cbnz	r5, 800475a <raw_input+0x2e>
 8004750:	462c      	mov	r4, r5
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
}
 8004752:	4620      	mov	r0, r4
 8004754:	b003      	add	sp, #12
 8004756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
 800475a:	7c2b      	ldrb	r3, [r5, #16]
 800475c:	455b      	cmp	r3, fp
 800475e:	d104      	bne.n	800476a <raw_input+0x3e>
 8004760:	682b      	ldr	r3, [r5, #0]
    if (broadcast != 0) {
 8004762:	f1ba 0f00 	cmp.w	sl, #0
 8004766:	d002      	beq.n	800476e <raw_input+0x42>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8004768:	b12b      	cbz	r3, 8004776 <raw_input+0x4a>
 800476a:	2400      	movs	r4, #0
 800476c:	e01b      	b.n	80047a6 <raw_input+0x7a>
    if (ip_addr_isany(&pcb->local_ip) ||
 800476e:	b113      	cbz	r3, 8004776 <raw_input+0x4a>
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4293      	cmp	r3, r2
 8004774:	d1f9      	bne.n	800476a <raw_input+0x3e>
      if (pcb->recv != NULL) {
 8004776:	696c      	ldr	r4, [r5, #20]
 8004778:	b1ac      	cbz	r4, 80047a6 <raw_input+0x7a>
        void* old_payload = p->payload;
 800477a:	6873      	ldr	r3, [r6, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 800477c:	4632      	mov	r2, r6
        void* old_payload = p->payload;
 800477e:	9301      	str	r3, [sp, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8004780:	4629      	mov	r1, r5
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <raw_input+0xac>)
 8004784:	69a8      	ldr	r0, [r5, #24]
 8004786:	47a0      	blx	r4
        if (eaten != 0) {
 8004788:	4604      	mov	r4, r0
 800478a:	b190      	cbz	r0, 80047b2 <raw_input+0x86>
          if (prev != NULL) {
 800478c:	f1b9 0f00 	cmp.w	r9, #0
 8004790:	d01a      	beq.n	80047c8 <raw_input+0x9c>
          eaten = 1;
 8004792:	2401      	movs	r4, #1
          p = NULL;
 8004794:	2600      	movs	r6, #0
 8004796:	68eb      	ldr	r3, [r5, #12]
            prev->next = pcb->next;
 8004798:	f8c9 300c 	str.w	r3, [r9, #12]
            pcb->next = raw_pcbs;
 800479c:	f8d8 3000 	ldr.w	r3, [r8]
            raw_pcbs = pcb;
 80047a0:	f8c8 5000 	str.w	r5, [r8]
            pcb->next = raw_pcbs;
 80047a4:	60eb      	str	r3, [r5, #12]
    pcb = pcb->next;
 80047a6:	68eb      	ldr	r3, [r5, #12]
 80047a8:	46a9      	mov	r9, r5
  while ((eaten == 0) && (pcb != NULL)) {
 80047aa:	2c00      	cmp	r4, #0
 80047ac:	d1d1      	bne.n	8004752 <raw_input+0x26>
    pcb = pcb->next;
 80047ae:	461d      	mov	r5, r3
 80047b0:	e7cd      	b.n	800474e <raw_input+0x22>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 80047b2:	6873      	ldr	r3, [r6, #4]
 80047b4:	9a01      	ldr	r2, [sp, #4]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d0f5      	beq.n	80047a6 <raw_input+0x7a>
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <raw_input+0xb0>)
 80047bc:	22b6      	movs	r2, #182	; 0xb6
 80047be:	4908      	ldr	r1, [pc, #32]	; (80047e0 <raw_input+0xb4>)
 80047c0:	4808      	ldr	r0, [pc, #32]	; (80047e4 <raw_input+0xb8>)
 80047c2:	f002 fbf5 	bl	8006fb0 <iprintf>
 80047c6:	e7ee      	b.n	80047a6 <raw_input+0x7a>
          eaten = 1;
 80047c8:	2401      	movs	r4, #1
          p = NULL;
 80047ca:	464e      	mov	r6, r9
 80047cc:	e7eb      	b.n	80047a6 <raw_input+0x7a>
 80047ce:	bf00      	nop
 80047d0:	20006078 	.word	0x20006078
 80047d4:	20000d1c 	.word	0x20000d1c
 80047d8:	20006088 	.word	0x20006088
 80047dc:	0800ad9c 	.word	0x0800ad9c
 80047e0:	0800adcb 	.word	0x0800adcb
 80047e4:	0800a865 	.word	0x0800a865

080047e8 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80047e8:	b510      	push	{r4, lr}
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80047ea:	b138      	cbz	r0, 80047fc <raw_netif_ip_addr_changed+0x14>
 80047ec:	6803      	ldr	r3, [r0, #0]
 80047ee:	b12b      	cbz	r3, 80047fc <raw_netif_ip_addr_changed+0x14>
 80047f0:	b121      	cbz	r1, 80047fc <raw_netif_ip_addr_changed+0x14>
 80047f2:	680b      	ldr	r3, [r1, #0]
 80047f4:	b113      	cbz	r3, 80047fc <raw_netif_ip_addr_changed+0x14>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <raw_netif_ip_addr_changed+0x28>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b903      	cbnz	r3, 80047fe <raw_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
      }
    }
  }
}
 80047fc:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80047fe:	681c      	ldr	r4, [r3, #0]
 8004800:	6802      	ldr	r2, [r0, #0]
 8004802:	4294      	cmp	r4, r2
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8004804:	bf04      	itt	eq
 8004806:	680a      	ldreq	r2, [r1, #0]
 8004808:	601a      	streq	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	e7f5      	b.n	80047fa <raw_netif_ip_addr_changed+0x12>
 800480e:	bf00      	nop
 8004810:	20000d1c 	.word	0x20000d1c

08004814 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8004814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004818:	4605      	mov	r5, r0
 800481a:	460f      	mov	r7, r1
 800481c:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800481e:	4921      	ldr	r1, [pc, #132]	; (80048a4 <sys_timeout+0x90>)
 8004820:	22d2      	movs	r2, #210	; 0xd2
 8004822:	2004      	movs	r0, #4
 8004824:	f7ff fb7a 	bl	8003f1c <memp_malloc_fn>
  if (timeout == NULL) {
 8004828:	4604      	mov	r4, r0
 800482a:	b938      	cbnz	r0, 800483c <sys_timeout+0x28>
        t->next = timeout;
        break;
      }
    }
  }
}
 800482c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8004830:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <sys_timeout+0x90>)
 8004832:	22d4      	movs	r2, #212	; 0xd4
 8004834:	491c      	ldr	r1, [pc, #112]	; (80048a8 <sys_timeout+0x94>)
 8004836:	481d      	ldr	r0, [pc, #116]	; (80048ac <sys_timeout+0x98>)
 8004838:	f002 bbba 	b.w	8006fb0 <iprintf>
  now = sys_now();
 800483c:	f7ff fa22 	bl	8003c84 <sys_now>
  if (next_timeout == NULL) {
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <sys_timeout+0x9c>)
 8004842:	491c      	ldr	r1, [pc, #112]	; (80048b4 <sys_timeout+0xa0>)
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	b95b      	cbnz	r3, 8004860 <sys_timeout+0x4c>
    timeouts_last_time = now;
 8004848:	6008      	str	r0, [r1, #0]
    diff = 0;
 800484a:	4618      	mov	r0, r3
  timeout->next = NULL;
 800484c:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800484e:	4428      	add	r0, r5
  timeout->next = NULL;
 8004850:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8004852:	e9c4 7602 	strd	r7, r6, [r4, #8]
  timeout->time = msecs + diff;
 8004856:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8004858:	b92b      	cbnz	r3, 8004866 <sys_timeout+0x52>
    next_timeout = timeout;
 800485a:	6014      	str	r4, [r2, #0]
}
 800485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8004860:	6809      	ldr	r1, [r1, #0]
 8004862:	1a40      	subs	r0, r0, r1
 8004864:	e7f2      	b.n	800484c <sys_timeout+0x38>
  if (next_timeout->time > msecs) {
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	42a9      	cmp	r1, r5
 800486a:	d903      	bls.n	8004874 <sys_timeout+0x60>
    next_timeout->time -= msecs;
 800486c:	1b4d      	subs	r5, r1, r5
 800486e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	e7f2      	b.n	800485a <sys_timeout+0x46>
 8004874:	4618      	mov	r0, r3
      timeout->time -= t->time;
 8004876:	6841      	ldr	r1, [r0, #4]
 8004878:	6862      	ldr	r2, [r4, #4]
 800487a:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800487c:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800487e:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8004880:	b139      	cbz	r1, 8004892 <sys_timeout+0x7e>
 8004882:	684e      	ldr	r6, [r1, #4]
 8004884:	42b2      	cmp	r2, r6
 8004886:	d301      	bcc.n	800488c <sys_timeout+0x78>
 8004888:	4608      	mov	r0, r1
 800488a:	e7f4      	b.n	8004876 <sys_timeout+0x62>
          t->next->time -= timeout->time;
 800488c:	1ab2      	subs	r2, r6, r2
 800488e:	604a      	str	r2, [r1, #4]
 8004890:	e004      	b.n	800489c <sys_timeout+0x88>
        } else if (timeout->time > msecs) {
 8004892:	42aa      	cmp	r2, r5
 8004894:	d902      	bls.n	800489c <sys_timeout+0x88>
          timeout->time = msecs + next_timeout->time;
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	441d      	add	r5, r3
 800489a:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800489c:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800489e:	6004      	str	r4, [r0, #0]
        break;
 80048a0:	e7dc      	b.n	800485c <sys_timeout+0x48>
 80048a2:	bf00      	nop
 80048a4:	0800ae24 	.word	0x0800ae24
 80048a8:	0800ae58 	.word	0x0800ae58
 80048ac:	0800a865 	.word	0x0800a865
 80048b0:	20000d20 	.word	0x20000d20
 80048b4:	20000d24 	.word	0x20000d24

080048b8 <sys_timeouts_init>:
{
 80048b8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80048ba:	4d0a      	ldr	r5, [pc, #40]	; (80048e4 <sys_timeouts_init+0x2c>)
 80048bc:	4c0a      	ldr	r4, [pc, #40]	; (80048e8 <sys_timeouts_init+0x30>)
 80048be:	462a      	mov	r2, r5
 80048c0:	4621      	mov	r1, r4
 80048c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048c6:	f7ff ffa5 	bl	8004814 <sys_timeout>
 80048ca:	f105 0208 	add.w	r2, r5, #8
 80048ce:	4621      	mov	r1, r4
 80048d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d4:	f7ff ff9e 	bl	8004814 <sys_timeout>
  timeouts_last_time = sys_now();
 80048d8:	f7ff f9d4 	bl	8003c84 <sys_now>
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <sys_timeouts_init+0x34>)
 80048de:	6018      	str	r0, [r3, #0]
}
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	0800ae14 	.word	0x0800ae14
 80048e8:	080048f1 	.word	0x080048f1
 80048ec:	20000d24 	.word	0x20000d24

080048f0 <cyclic_timer>:
{
 80048f0:	b510      	push	{r4, lr}
 80048f2:	4604      	mov	r4, r0
  cyclic->handler();
 80048f4:	6843      	ldr	r3, [r0, #4]
 80048f6:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80048f8:	4622      	mov	r2, r4
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	4902      	ldr	r1, [pc, #8]	; (8004908 <cyclic_timer+0x18>)
}
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8004902:	f7ff bf87 	b.w	8004814 <sys_timeout>
 8004906:	bf00      	nop
 8004908:	080048f1 	.word	0x080048f1

0800490c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (next_timeout) {
 8004910:	4d0f      	ldr	r5, [pc, #60]	; (8004950 <sys_check_timeouts+0x44>)
 8004912:	682b      	ldr	r3, [r5, #0]
 8004914:	b1cb      	cbz	r3, 800494a <sys_check_timeouts+0x3e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8004916:	f7ff f9b5 	bl	8003c84 <sys_now>
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800491a:	4e0e      	ldr	r6, [pc, #56]	; (8004954 <sys_check_timeouts+0x48>)
 800491c:	6834      	ldr	r4, [r6, #0]
 800491e:	1b04      	subs	r4, r0, r4
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
      tmptimeout = next_timeout;
 8004920:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8004922:	b191      	cbz	r1, 800494a <sys_check_timeouts+0x3e>
 8004924:	684b      	ldr	r3, [r1, #4]
 8004926:	42a3      	cmp	r3, r4
 8004928:	d80f      	bhi.n	800494a <sys_check_timeouts+0x3e>
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
        arg = tmptimeout->arg;
 800492a:	e9d1 7802 	ldrd	r7, r8, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 800492e:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
 8004930:	1ae4      	subs	r4, r4, r3
        timeouts_last_time += tmptimeout->time;
 8004932:	441a      	add	r2, r3
        next_timeout = tmptimeout->next;
 8004934:	680b      	ldr	r3, [r1, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8004936:	2004      	movs	r0, #4
        timeouts_last_time += tmptimeout->time;
 8004938:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 800493a:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800493c:	f7ff fb0a 	bl	8003f54 <memp_free>
        if (handler != NULL) {
 8004940:	2f00      	cmp	r7, #0
 8004942:	d0ed      	beq.n	8004920 <sys_check_timeouts+0x14>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8004944:	4640      	mov	r0, r8
 8004946:	47b8      	blx	r7
 8004948:	e7ea      	b.n	8004920 <sys_check_timeouts+0x14>
  }
  else
  {
	  uint8_t error = 1;
  }
}
 800494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494e:	bf00      	nop
 8004950:	20000d20 	.word	0x20000d20
 8004954:	20000d24 	.word	0x20000d24

08004958 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8004958:	4770      	bx	lr
	...

0800495c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8004960:	8943      	ldrh	r3, [r0, #10]
{
 8004962:	b085      	sub	sp, #20
  if (p->len < UDP_HLEN) {
 8004964:	2b07      	cmp	r3, #7
{
 8004966:	4605      	mov	r5, r0
 8004968:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800496a:	d805      	bhi.n	8004978 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800496c:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800496e:	b005      	add	sp, #20
 8004970:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8004974:	f7ff bc40 	b.w	80041f8 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004978:	4e3e      	ldr	r6, [pc, #248]	; (8004a74 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800497a:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800497c:	6831      	ldr	r1, [r6, #0]
 800497e:	6970      	ldr	r0, [r6, #20]
 8004980:	f000 ff99 	bl	80058b6 <ip4_addr_isbroadcast_u32>
 8004984:	4680      	mov	r8, r0
  src = lwip_ntohs(udphdr->src);
 8004986:	8820      	ldrh	r0, [r4, #0]
 8004988:	f7ff f9d4 	bl	8003d34 <lwip_htons>
 800498c:	4607      	mov	r7, r0
  dest = lwip_ntohs(udphdr->dest);
 800498e:	8860      	ldrh	r0, [r4, #2]
 8004990:	f7ff f9d0 	bl	8003d34 <lwip_htons>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8004994:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
  uncon_pcb = NULL;
 8004998:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800499a:	4a37      	ldr	r2, [pc, #220]	; (8004a78 <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 800499c:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800499e:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 80049a0:	46a6      	mov	lr, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80049a2:	4603      	mov	r3, r0
 80049a4:	4693      	mov	fp, r2
 80049a6:	9603      	str	r6, [sp, #12]
 80049a8:	b99b      	cbnz	r3, 80049d2 <udp_input+0x76>
  if (pcb != NULL) {
 80049aa:	b91c      	cbnz	r4, 80049b4 <udp_input+0x58>
  if (for_us) {
 80049ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80049b0:	428b      	cmp	r3, r1
 80049b2:	d1db      	bne.n	800496c <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 80049b4:	f06f 0107 	mvn.w	r1, #7
 80049b8:	4628      	mov	r0, r5
 80049ba:	f7ff fc17 	bl	80041ec <pbuf_header>
 80049be:	2800      	cmp	r0, #0
 80049c0:	d036      	beq.n	8004a30 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <udp_input+0x120>)
 80049c4:	f240 1255 	movw	r2, #341	; 0x155
 80049c8:	492d      	ldr	r1, [pc, #180]	; (8004a80 <udp_input+0x124>)
 80049ca:	482e      	ldr	r0, [pc, #184]	; (8004a84 <udp_input+0x128>)
 80049cc:	f002 faf0 	bl	8006fb0 <iprintf>
 80049d0:	e7cc      	b.n	800496c <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 80049d2:	8a5a      	ldrh	r2, [r3, #18]
 80049d4:	4552      	cmp	r2, sl
 80049d6:	d128      	bne.n	8004a2a <udp_input+0xce>
 80049d8:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 80049da:	f1b8 0f00 	cmp.w	r8, #0
 80049de:	d020      	beq.n	8004a22 <udp_input+0xc6>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80049e0:	b13a      	cbz	r2, 80049f2 <udp_input+0x96>
 80049e2:	1c4e      	adds	r6, r1, #1
 80049e4:	d005      	beq.n	80049f2 <udp_input+0x96>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80049e6:	404a      	eors	r2, r1
 80049e8:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80049ea:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80049ee:	4216      	tst	r6, r2
 80049f0:	d11b      	bne.n	8004a2a <udp_input+0xce>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80049f2:	7c1a      	ldrb	r2, [r3, #16]
 80049f4:	0752      	lsls	r2, r2, #29
 80049f6:	d402      	bmi.n	80049fe <udp_input+0xa2>
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	bf08      	it	eq
 80049fc:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 80049fe:	8a9a      	ldrh	r2, [r3, #20]
 8004a00:	42ba      	cmp	r2, r7
 8004a02:	d112      	bne.n	8004a2a <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8004a04:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8004a06:	b10a      	cbz	r2, 8004a0c <udp_input+0xb0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8004a08:	4562      	cmp	r2, ip
 8004a0a:	d10e      	bne.n	8004a2a <udp_input+0xce>
        if (prev != NULL) {
 8004a0c:	f1be 0f00 	cmp.w	lr, #0
 8004a10:	d005      	beq.n	8004a1e <udp_input+0xc2>
          prev->next = pcb->next;
 8004a12:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8004a14:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 8004a18:	f8ce 200c 	str.w	r2, [lr, #12]
          pcb->next = udp_pcbs;
 8004a1c:	60d8      	str	r0, [r3, #12]
 8004a1e:	461c      	mov	r4, r3
 8004a20:	e7c8      	b.n	80049b4 <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d0e5      	beq.n	80049f2 <udp_input+0x96>
 8004a26:	428a      	cmp	r2, r1
 8004a28:	d0e3      	beq.n	80049f2 <udp_input+0x96>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004a2a:	469e      	mov	lr, r3
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	e7bb      	b.n	80049a8 <udp_input+0x4c>
    if (pcb != NULL) {
 8004a30:	b15c      	cbz	r4, 8004a4a <udp_input+0xee>
      if (pcb->recv != NULL) {
 8004a32:	69a6      	ldr	r6, [r4, #24]
 8004a34:	2e00      	cmp	r6, #0
 8004a36:	d099      	beq.n	800496c <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8004a38:	9700      	str	r7, [sp, #0]
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <udp_input+0x12c>)
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4621      	mov	r1, r4
 8004a40:	69e0      	ldr	r0, [r4, #28]
 8004a42:	47b0      	blx	r6
}
 8004a44:	b005      	add	sp, #20
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8004a4a:	f1b8 0f00 	cmp.w	r8, #0
 8004a4e:	d18d      	bne.n	800496c <udp_input+0x10>
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a58:	2be0      	cmp	r3, #224	; 0xe0
 8004a5a:	d087      	beq.n	800496c <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	8999      	ldrh	r1, [r3, #12]
 8004a62:	3108      	adds	r1, #8
 8004a64:	b209      	sxth	r1, r1
 8004a66:	f7ff fbc4 	bl	80041f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8004a6a:	2103      	movs	r1, #3
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 fd9b 	bl	80055a8 <icmp_dest_unreach>
 8004a72:	e77b      	b.n	800496c <udp_input+0x10>
 8004a74:	20006078 	.word	0x20006078
 8004a78:	20006098 	.word	0x20006098
 8004a7c:	0800ae95 	.word	0x0800ae95
 8004a80:	0800aec4 	.word	0x0800aec4
 8004a84:	0800a865 	.word	0x0800a865
 8004a88:	20006088 	.word	0x20006088

08004a8c <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <udp_bind+0xa4>)
{
 8004a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8004a92:	2900      	cmp	r1, #0
 8004a94:	bf08      	it	eq
 8004a96:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d046      	beq.n	8004b2a <udp_bind+0x9e>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004a9c:	4f25      	ldr	r7, [pc, #148]	; (8004b34 <udp_bind+0xa8>)
 8004a9e:	f8d7 c000 	ldr.w	ip, [r7]
 8004aa2:	4663      	mov	r3, ip
 8004aa4:	b9e3      	cbnz	r3, 8004ae0 <udp_bind+0x54>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d13d      	bne.n	8004b26 <udp_bind+0x9a>
 8004aaa:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8004aae:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8004ab2:	4d21      	ldr	r5, [pc, #132]	; (8004b38 <udp_bind+0xac>)
 8004ab4:	882c      	ldrh	r4, [r5, #0]
 8004ab6:	4544      	cmp	r4, r8
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8004ab8:	bf08      	it	eq
 8004aba:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004abe:	46e6      	mov	lr, ip
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8004ac0:	bf1c      	itt	ne
 8004ac2:	1c62      	addne	r2, r4, #1
 8004ac4:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004ac6:	f1be 0f00 	cmp.w	lr, #0
 8004aca:	d10f      	bne.n	8004aec <udp_bind+0x60>
 8004acc:	802a      	strh	r2, [r5, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8004ace:	6809      	ldr	r1, [r1, #0]

  pcb->local_port = port;
 8004ad0:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8004ad2:	6001      	str	r1, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8004ad4:	b913      	cbnz	r3, 8004adc <udp_bind+0x50>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8004ad6:	f8c0 c00c 	str.w	ip, [r0, #12]
    udp_pcbs = pcb;
 8004ada:	6038      	str	r0, [r7, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8004adc:	2000      	movs	r0, #0
 8004ade:	e010      	b.n	8004b02 <udp_bind+0x76>
    if (pcb == ipcb) {
 8004ae0:	4283      	cmp	r3, r0
 8004ae2:	d001      	beq.n	8004ae8 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	e7dd      	b.n	8004aa4 <udp_bind+0x18>
      rebind = 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e7dc      	b.n	8004aa6 <udp_bind+0x1a>
    if (pcb->local_port == udp_port) {
 8004aec:	f8be 4012 	ldrh.w	r4, [lr, #18]
 8004af0:	4294      	cmp	r4, r2
 8004af2:	d108      	bne.n	8004b06 <udp_bind+0x7a>
 8004af4:	3e01      	subs	r6, #1
 8004af6:	b2b6      	uxth	r6, r6
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	d1dc      	bne.n	8004ab6 <udp_bind+0x2a>
 8004afc:	802a      	strh	r2, [r5, #0]
      return ERR_USE;
 8004afe:	f06f 0007 	mvn.w	r0, #7
}
 8004b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b06:	f8de e00c 	ldr.w	lr, [lr, #12]
 8004b0a:	e7dc      	b.n	8004ac6 <udp_bind+0x3a>
      if (pcb != ipcb) {
 8004b0c:	4284      	cmp	r4, r0
 8004b0e:	d006      	beq.n	8004b1e <udp_bind+0x92>
          if ((ipcb->local_port == port) &&
 8004b10:	8a65      	ldrh	r5, [r4, #18]
 8004b12:	4295      	cmp	r5, r2
 8004b14:	d103      	bne.n	8004b1e <udp_bind+0x92>
 8004b16:	6826      	ldr	r6, [r4, #0]
 8004b18:	680d      	ldr	r5, [r1, #0]
 8004b1a:	42ae      	cmp	r6, r5
 8004b1c:	d0ef      	beq.n	8004afe <udp_bind+0x72>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004b1e:	68e4      	ldr	r4, [r4, #12]
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d1f3      	bne.n	8004b0c <udp_bind+0x80>
 8004b24:	e7d3      	b.n	8004ace <udp_bind+0x42>
 8004b26:	4664      	mov	r4, ip
 8004b28:	e7fa      	b.n	8004b20 <udp_bind+0x94>
    return ERR_VAL;
 8004b2a:	f06f 0005 	mvn.w	r0, #5
 8004b2e:	e7e8      	b.n	8004b02 <udp_bind+0x76>
 8004b30:	0800b1dc 	.word	0x0800b1dc
 8004b34:	20006098 	.word	0x20006098
 8004b38:	2000000c 	.word	0x2000000c

08004b3c <udp_sendto_if_src>:
{
 8004b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b40:	460e      	mov	r6, r1
 8004b42:	b085      	sub	sp, #20
 8004b44:	4690      	mov	r8, r2
 8004b46:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8004b48:	4607      	mov	r7, r0
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d050      	beq.n	8004bf0 <udp_sendto_if_src+0xb4>
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	d04e      	beq.n	8004bf0 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 8004b52:	8a42      	ldrh	r2, [r0, #18]
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	d033      	beq.n	8004bc0 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 8004b58:	2108      	movs	r1, #8
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7ff fb46 	bl	80041ec <pbuf_header>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d137      	bne.n	8004bd4 <udp_sendto_if_src+0x98>
 8004b64:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8004b66:	8963      	ldrh	r3, [r4, #10]
 8004b68:	2b07      	cmp	r3, #7
 8004b6a:	d806      	bhi.n	8004b7a <udp_sendto_if_src+0x3e>
 8004b6c:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <udp_sendto_if_src+0xc0>)
 8004b6e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004b72:	4923      	ldr	r1, [pc, #140]	; (8004c00 <udp_sendto_if_src+0xc4>)
 8004b74:	4823      	ldr	r0, [pc, #140]	; (8004c04 <udp_sendto_if_src+0xc8>)
 8004b76:	f002 fa1b 	bl	8006fb0 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 8004b7a:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 8004b7c:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8004b7e:	f7ff f8d9 	bl	8003d34 <lwip_htons>
 8004b82:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 8004b84:	4648      	mov	r0, r9
 8004b86:	f7ff f8d5 	bl	8003d34 <lwip_htons>
  udphdr->chksum = 0x0000;
 8004b8a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8004b8c:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 8004b8e:	71ab      	strb	r3, [r5, #6]
 8004b90:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8004b92:	8920      	ldrh	r0, [r4, #8]
 8004b94:	f7ff f8ce 	bl	8003d34 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8004b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8004b9a:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8004b9c:	7abb      	ldrb	r3, [r7, #10]
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	2211      	movs	r2, #17
 8004ba2:	9201      	str	r2, [sp, #4]
 8004ba4:	7a7a      	ldrb	r2, [r7, #9]
 8004ba6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ba8:	9200      	str	r2, [sp, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	4642      	mov	r2, r8
 8004bae:	f000 fdf9 	bl	80057a4 <ip4_output_if_src>
  if (q != p) {
 8004bb2:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8004bb4:	4605      	mov	r5, r0
  if (q != p) {
 8004bb6:	d009      	beq.n	8004bcc <udp_sendto_if_src+0x90>
    pbuf_free(q);
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff fb1d 	bl	80041f8 <pbuf_free>
 8004bbe:	e005      	b.n	8004bcc <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	f7ff ff63 	bl	8004a8c <udp_bind>
    if (err != ERR_OK) {
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d0c5      	beq.n	8004b58 <udp_sendto_if_src+0x1c>
}
 8004bcc:	4628      	mov	r0, r5
 8004bce:	b005      	add	sp, #20
 8004bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2108      	movs	r1, #8
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f7ff fb6f 	bl	80042bc <pbuf_alloc>
    if (q == NULL) {
 8004bde:	4604      	mov	r4, r0
 8004be0:	b148      	cbz	r0, 8004bf6 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 8004be2:	8933      	ldrh	r3, [r6, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0be      	beq.n	8004b66 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 8004be8:	4631      	mov	r1, r6
 8004bea:	f7ff fd0f 	bl	800460c <pbuf_chain>
 8004bee:	e7ba      	b.n	8004b66 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 8004bf0:	f06f 0505 	mvn.w	r5, #5
 8004bf4:	e7ea      	b.n	8004bcc <udp_sendto_if_src+0x90>
      return ERR_MEM;
 8004bf6:	f04f 35ff 	mov.w	r5, #4294967295
 8004bfa:	e7e7      	b.n	8004bcc <udp_sendto_if_src+0x90>
 8004bfc:	0800ae95 	.word	0x0800ae95
 8004c00:	0800aed8 	.word	0x0800aed8
 8004c04:	0800a865 	.word	0x0800a865

08004c08 <udp_sendto_if>:
{
 8004c08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c0a:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8004c0c:	b190      	cbz	r0, 8004c34 <udp_sendto_if+0x2c>
 8004c0e:	b18a      	cbz	r2, 8004c34 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004c10:	6805      	ldr	r5, [r0, #0]
 8004c12:	b11d      	cbz	r5, 8004c1c <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8004c14:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004c18:	2ee0      	cmp	r6, #224	; 0xe0
 8004c1a:	d106      	bne.n	8004c2a <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 8004c1c:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8004c1e:	e9cd 4500 	strd	r4, r5, [sp]
 8004c22:	f7ff ff8b 	bl	8004b3c <udp_sendto_if_src>
}
 8004c26:	b002      	add	sp, #8
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8004c2a:	6866      	ldr	r6, [r4, #4]
 8004c2c:	42b5      	cmp	r5, r6
 8004c2e:	d104      	bne.n	8004c3a <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004c30:	4605      	mov	r5, r0
 8004c32:	e7f4      	b.n	8004c1e <udp_sendto_if+0x16>
    return ERR_VAL;
 8004c34:	f06f 0005 	mvn.w	r0, #5
 8004c38:	e7f5      	b.n	8004c26 <udp_sendto_if+0x1e>
      return ERR_RTE;
 8004c3a:	f06f 0003 	mvn.w	r0, #3
 8004c3e:	e7f2      	b.n	8004c26 <udp_sendto_if+0x1e>

08004c40 <udp_sendto>:
{
 8004c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c42:	460e      	mov	r6, r1
 8004c44:	4614      	mov	r4, r2
 8004c46:	461f      	mov	r7, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b168      	cbz	r0, 8004c68 <udp_sendto+0x28>
 8004c4c:	b162      	cbz	r2, 8004c68 <udp_sendto+0x28>
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 fcb4 	bl	80055bc <ip4_route>
  if (netif == NULL) {
 8004c54:	b158      	cbz	r0, 8004c6e <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8004c56:	9000      	str	r0, [sp, #0]
 8004c58:	463b      	mov	r3, r7
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f7ff ffd2 	bl	8004c08 <udp_sendto_if>
}
 8004c64:	b003      	add	sp, #12
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8004c68:	f06f 0005 	mvn.w	r0, #5
 8004c6c:	e7fa      	b.n	8004c64 <udp_sendto+0x24>
    return ERR_RTE;
 8004c6e:	f06f 0003 	mvn.w	r0, #3
 8004c72:	e7f7      	b.n	8004c64 <udp_sendto+0x24>

08004c74 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8004c74:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8004c76:	f240 4252 	movw	r2, #1106	; 0x452
 8004c7a:	4907      	ldr	r1, [pc, #28]	; (8004c98 <udp_new+0x24>)
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7ff f94d 	bl	8003f1c <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8004c82:	4604      	mov	r4, r0
 8004c84:	b128      	cbz	r0, 8004c92 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8004c86:	2220      	movs	r2, #32
 8004c88:	2100      	movs	r1, #0
 8004c8a:	f001 faa5 	bl	80061d8 <memset>
    pcb->ttl = UDP_TTL;
 8004c8e:	23ff      	movs	r3, #255	; 0xff
 8004c90:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8004c92:	4620      	mov	r0, r4
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	bf00      	nop
 8004c98:	0800ae95 	.word	0x0800ae95

08004c9c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8004c9c:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8004c9e:	b138      	cbz	r0, 8004cb0 <udp_netif_ip_addr_changed+0x14>
 8004ca0:	6803      	ldr	r3, [r0, #0]
 8004ca2:	b12b      	cbz	r3, 8004cb0 <udp_netif_ip_addr_changed+0x14>
 8004ca4:	b121      	cbz	r1, 8004cb0 <udp_netif_ip_addr_changed+0x14>
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	b113      	cbz	r3, 8004cb0 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <udp_netif_ip_addr_changed+0x28>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b903      	cbnz	r3, 8004cb2 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8004cb0:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8004cb2:	681c      	ldr	r4, [r3, #0]
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8004cb8:	bf04      	itt	eq
 8004cba:	680a      	ldreq	r2, [r1, #0]
 8004cbc:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	e7f5      	b.n	8004cae <udp_netif_ip_addr_changed+0x12>
 8004cc2:	bf00      	nop
 8004cc4:	20006098 	.word	0x20006098

08004cc8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004cca:	2618      	movs	r6, #24
 8004ccc:	4346      	muls	r6, r0
 8004cce:	4d0b      	ldr	r5, [pc, #44]	; (8004cfc <etharp_free_entry+0x34>)
{
 8004cd0:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8004cd2:	59a8      	ldr	r0, [r5, r6]
 8004cd4:	b118      	cbz	r0, 8004cde <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004cd6:	f7ff fa8f 	bl	80041f8 <pbuf_free>
    arp_table[i].q = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004cde:	2318      	movs	r3, #24
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	fb03 5304 	mla	r3, r3, r4, r5
 8004ce6:	751a      	strb	r2, [r3, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8004ce8:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8004cea:	e9c3 2201 	strd	r2, r2, [r3, #4]
  arp_table[i].ethaddr = ethzero;
 8004cee:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <etharp_free_entry+0x38>)
 8004cf0:	6810      	ldr	r0, [r2, #0]
 8004cf2:	8892      	ldrh	r2, [r2, #4]
 8004cf4:	60d8      	str	r0, [r3, #12]
 8004cf6:	821a      	strh	r2, [r3, #16]
#endif /* LWIP_DEBUG */
}
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000d28 	.word	0x20000d28
 8004d00:	0800b3e5 	.word	0x0800b3e5

08004d04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8004d04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004d0a:	4689      	mov	r9, r1
 8004d0c:	4692      	mov	sl, r2
 8004d0e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004d10:	4607      	mov	r7, r0
 8004d12:	b930      	cbnz	r0, 8004d22 <etharp_raw+0x1e>
 8004d14:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <etharp_raw+0xc4>)
 8004d16:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8004d1a:	492c      	ldr	r1, [pc, #176]	; (8004dcc <etharp_raw+0xc8>)
 8004d1c:	482c      	ldr	r0, [pc, #176]	; (8004dd0 <etharp_raw+0xcc>)
 8004d1e:	f002 f947 	bl	8006fb0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004d22:	2200      	movs	r2, #0
 8004d24:	211c      	movs	r1, #28
 8004d26:	2002      	movs	r0, #2
 8004d28:	f7ff fac8 	bl	80042bc <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d047      	beq.n	8004dc2 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8004d32:	8943      	ldrh	r3, [r0, #10]
 8004d34:	2b1b      	cmp	r3, #27
 8004d36:	d806      	bhi.n	8004d46 <etharp_raw+0x42>
 8004d38:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <etharp_raw+0xc4>)
 8004d3a:	f240 4264 	movw	r2, #1124	; 0x464
 8004d3e:	4925      	ldr	r1, [pc, #148]	; (8004dd4 <etharp_raw+0xd0>)
 8004d40:	4823      	ldr	r0, [pc, #140]	; (8004dd0 <etharp_raw+0xcc>)
 8004d42:	f002 f935 	bl	8006fb0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8004d46:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8004d4a:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8004d4c:	f7fe fff2 	bl	8003d34 <lwip_htons>
 8004d50:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8004d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d006      	beq.n	8004d68 <etharp_raw+0x64>
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <etharp_raw+0xc4>)
 8004d5c:	f240 426b 	movw	r2, #1131	; 0x46b
 8004d60:	491d      	ldr	r1, [pc, #116]	; (8004dd8 <etharp_raw+0xd4>)
 8004d62:	481b      	ldr	r0, [pc, #108]	; (8004dd0 <etharp_raw+0xcc>)
 8004d64:	f002 f924 	bl	8006fb0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8004d68:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004d6c:	464a      	mov	r2, r9
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8004d6e:	60a3      	str	r3, [r4, #8]
 8004d70:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004d74:	4631      	mov	r1, r6
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8004d76:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004d78:	682b      	ldr	r3, [r5, #0]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004d7a:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004d7c:	f8c4 3012 	str.w	r3, [r4, #18]
 8004d80:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004d82:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004d84:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8004d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8004d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d90:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004d92:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8004d94:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004d96:	2301      	movs	r3, #1
 8004d98:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8004d9e:	2306      	movs	r3, #6
 8004da0:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8004da2:	2304      	movs	r3, #4
 8004da4:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004da6:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004daa:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	4653      	mov	r3, sl
 8004db0:	f001 f98c 	bl	80060cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8004db4:	4630      	mov	r0, r6
 8004db6:	f7ff fa1f 	bl	80041f8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8004dba:	4628      	mov	r0, r5
}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8004dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc6:	e7f9      	b.n	8004dbc <etharp_raw+0xb8>
 8004dc8:	0800affb 	.word	0x0800affb
 8004dcc:	0800a857 	.word	0x0800a857
 8004dd0:	0800a865 	.word	0x0800a865
 8004dd4:	0800b032 	.word	0x0800b032
 8004dd8:	0800b063 	.word	0x0800b063

08004ddc <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8004ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t old_queue = ARP_TABLE_SIZE;
 8004de0:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8004de2:	4604      	mov	r4, r0
 8004de4:	2000      	movs	r0, #0
 8004de6:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <etharp_find_entry.isra.0+0x100>)
 8004de8:	9101      	str	r1, [sp, #4]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004dea:	4696      	mov	lr, r2
 8004dec:	4611      	mov	r1, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004dee:	4682      	mov	sl, r0
 8004df0:	4681      	mov	r9, r0
 8004df2:	4680      	mov	r8, r0
  s8_t empty = ARP_TABLE_SIZE;
 8004df4:	4694      	mov	ip, r2
 8004df6:	461d      	mov	r5, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004df8:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 8004dfc:	f893 b014 	ldrb.w	fp, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004e00:	d12a      	bne.n	8004e58 <etharp_find_entry.isra.0+0x7c>
 8004e02:	f1bb 0f00 	cmp.w	fp, #0
 8004e06:	d12a      	bne.n	8004e5e <etharp_find_entry.isra.0+0x82>
      empty = i;
 8004e08:	fa4f fc80 	sxtb.w	ip, r0
 8004e0c:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e0e:	280a      	cmp	r0, #10
 8004e10:	f103 0318 	add.w	r3, r3, #24
 8004e14:	d1f0      	bne.n	8004df8 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d15b      	bne.n	8004ed4 <etharp_find_entry.isra.0+0xf8>
 8004e1c:	f1bc 0f0a 	cmp.w	ip, #10
 8004e20:	d03c      	beq.n	8004e9c <etharp_find_entry.isra.0+0xc0>
    i = empty;
 8004e22:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8004e26:	2318      	movs	r3, #24
 8004e28:	fb03 5306 	mla	r3, r3, r6, r5
 8004e2c:	7d1b      	ldrb	r3, [r3, #20]
 8004e2e:	b133      	cbz	r3, 8004e3e <etharp_find_entry.isra.0+0x62>
 8004e30:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <etharp_find_entry.isra.0+0x104>)
 8004e32:	f240 1287 	movw	r2, #391	; 0x187
 8004e36:	492b      	ldr	r1, [pc, #172]	; (8004ee4 <etharp_find_entry.isra.0+0x108>)
 8004e38:	482b      	ldr	r0, [pc, #172]	; (8004ee8 <etharp_find_entry.isra.0+0x10c>)
 8004e3a:	f002 f8b9 	bl	8006fb0 <iprintf>
  if (ipaddr != NULL) {
 8004e3e:	b124      	cbz	r4, 8004e4a <etharp_find_entry.isra.0+0x6e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004e40:	2318      	movs	r3, #24
 8004e42:	fb03 5306 	mla	r3, r3, r6, r5
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8004e4a:	2318      	movs	r3, #24
 8004e4c:	fb03 5506 	mla	r5, r3, r6, r5
 8004e50:	2300      	movs	r3, #0
  return (err_t)i;
 8004e52:	b270      	sxtb	r0, r6
  arp_table[i].ctime = 0;
 8004e54:	826b      	strh	r3, [r5, #18]
 8004e56:	e008      	b.n	8004e6a <etharp_find_entry.isra.0+0x8e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004e58:	f1bb 0f00 	cmp.w	fp, #0
 8004e5c:	d0d6      	beq.n	8004e0c <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004e5e:	b13c      	cbz	r4, 8004e70 <etharp_find_entry.isra.0+0x94>
 8004e60:	6827      	ldr	r7, [r4, #0]
 8004e62:	685e      	ldr	r6, [r3, #4]
 8004e64:	42b7      	cmp	r7, r6
 8004e66:	d103      	bne.n	8004e70 <etharp_find_entry.isra.0+0x94>
        return i;
 8004e68:	b240      	sxtb	r0, r0
}
 8004e6a:	b003      	add	sp, #12
 8004e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 8004e70:	f1bb 0f01 	cmp.w	fp, #1
 8004e74:	8a5f      	ldrh	r7, [r3, #18]
 8004e76:	d10c      	bne.n	8004e92 <etharp_find_entry.isra.0+0xb6>
        if (arp_table[i].q != NULL) {
 8004e78:	681e      	ldr	r6, [r3, #0]
 8004e7a:	b126      	cbz	r6, 8004e86 <etharp_find_entry.isra.0+0xaa>
          if (arp_table[i].ctime >= age_queue) {
 8004e7c:	4547      	cmp	r7, r8
 8004e7e:	d3c5      	bcc.n	8004e0c <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 8004e80:	b242      	sxtb	r2, r0
 8004e82:	46b8      	mov	r8, r7
 8004e84:	e7c2      	b.n	8004e0c <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 8004e86:	454f      	cmp	r7, r9
 8004e88:	d3c0      	bcc.n	8004e0c <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 8004e8a:	fa4f fe80 	sxtb.w	lr, r0
 8004e8e:	46b9      	mov	r9, r7
 8004e90:	e7bc      	b.n	8004e0c <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 8004e92:	4557      	cmp	r7, sl
            old_stable = i;
 8004e94:	bf24      	itt	cs
 8004e96:	b241      	sxtbcs	r1, r0
 8004e98:	46ba      	movcs	sl, r7
 8004e9a:	e7b7      	b.n	8004e0c <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 8004e9c:	290a      	cmp	r1, #10
 8004e9e:	d00f      	beq.n	8004ec0 <etharp_find_entry.isra.0+0xe4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004ea0:	2318      	movs	r3, #24
      i = old_stable;
 8004ea2:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004ea4:	4359      	muls	r1, r3
 8004ea6:	586b      	ldr	r3, [r5, r1]
 8004ea8:	b133      	cbz	r3, 8004eb8 <etharp_find_entry.isra.0+0xdc>
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <etharp_find_entry.isra.0+0x104>)
 8004eac:	f240 126f 	movw	r2, #367	; 0x16f
 8004eb0:	490e      	ldr	r1, [pc, #56]	; (8004eec <etharp_find_entry.isra.0+0x110>)
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <etharp_find_entry.isra.0+0x10c>)
 8004eb4:	f002 f87c 	bl	8006fb0 <iprintf>
    etharp_free_entry(i);
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f7ff ff05 	bl	8004cc8 <etharp_free_entry>
 8004ebe:	e7b2      	b.n	8004e26 <etharp_find_entry.isra.0+0x4a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004ec0:	f1be 0f0a 	cmp.w	lr, #10
 8004ec4:	d002      	beq.n	8004ecc <etharp_find_entry.isra.0+0xf0>
      i = old_pending;
 8004ec6:	fa5f f68e 	uxtb.w	r6, lr
 8004eca:	e7f5      	b.n	8004eb8 <etharp_find_entry.isra.0+0xdc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004ecc:	2a0a      	cmp	r2, #10
 8004ece:	d001      	beq.n	8004ed4 <etharp_find_entry.isra.0+0xf8>
      i = old_queue;
 8004ed0:	b2d6      	uxtb	r6, r2
 8004ed2:	e7f1      	b.n	8004eb8 <etharp_find_entry.isra.0+0xdc>
    return (s8_t)ERR_MEM;
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	e7c7      	b.n	8004e6a <etharp_find_entry.isra.0+0x8e>
 8004eda:	bf00      	nop
 8004edc:	20000d28 	.word	0x20000d28
 8004ee0:	0800affb 	.word	0x0800affb
 8004ee4:	0800af1d 	.word	0x0800af1d
 8004ee8:	0800a865 	.word	0x0800a865
 8004eec:	0800af06 	.word	0x0800af06

08004ef0 <etharp_cleanup_netif>:
{
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	2718      	movs	r7, #24
 8004ef8:	4e07      	ldr	r6, [pc, #28]	; (8004f18 <etharp_cleanup_netif+0x28>)
 8004efa:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004efe:	7d1a      	ldrb	r2, [r3, #20]
 8004f00:	b12a      	cbz	r2, 8004f0e <etharp_cleanup_netif+0x1e>
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	d102      	bne.n	8004f0e <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f7ff fedd 	bl	8004cc8 <etharp_free_entry>
 8004f0e:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004f10:	2c0a      	cmp	r4, #10
 8004f12:	d1f2      	bne.n	8004efa <etharp_cleanup_netif+0xa>
}
 8004f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000d28 	.word	0x20000d28

08004f1c <etharp_input>:
{
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	4680      	mov	r8, r0
 8004f22:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004f24:	460c      	mov	r4, r1
 8004f26:	b949      	cbnz	r1, 8004f3c <etharp_input+0x20>
 8004f28:	4b42      	ldr	r3, [pc, #264]	; (8005034 <etharp_input+0x118>)
 8004f2a:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004f2e:	4942      	ldr	r1, [pc, #264]	; (8005038 <etharp_input+0x11c>)
 8004f30:	4842      	ldr	r0, [pc, #264]	; (800503c <etharp_input+0x120>)
 8004f32:	f002 f83d 	bl	8006fb0 <iprintf>
}
 8004f36:	b006      	add	sp, #24
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8004f3c:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8004f3e:	8833      	ldrh	r3, [r6, #0]
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d108      	bne.n	8004f58 <etharp_input+0x3c>
 8004f46:	7933      	ldrb	r3, [r6, #4]
 8004f48:	2b06      	cmp	r3, #6
 8004f4a:	d105      	bne.n	8004f58 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004f4c:	7973      	ldrb	r3, [r6, #5]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d102      	bne.n	8004f58 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004f52:	8873      	ldrh	r3, [r6, #2]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d003      	beq.n	8004f60 <etharp_input+0x44>
  pbuf_free(p);
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f7ff f94d 	bl	80041f8 <pbuf_free>
 8004f5e:	e7ea      	b.n	8004f36 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004f60:	f8d6 300e 	ldr.w	r3, [r6, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004f64:	684d      	ldr	r5, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004f66:	9305      	str	r3, [sp, #20]
 8004f68:	f106 0708 	add.w	r7, r6, #8
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8004f6c:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004f6e:	b115      	cbz	r5, 8004f76 <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004f70:	429d      	cmp	r5, r3
 8004f72:	d05b      	beq.n	800502c <etharp_input+0x110>
    for_us = 0;
 8004f74:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004f76:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004f7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d006      	beq.n	8004f90 <etharp_input+0x74>
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <etharp_input+0x118>)
 8004f84:	f240 12ab 	movw	r2, #427	; 0x1ab
 8004f88:	492d      	ldr	r1, [pc, #180]	; (8005040 <etharp_input+0x124>)
 8004f8a:	482c      	ldr	r0, [pc, #176]	; (800503c <etharp_input+0x120>)
 8004f8c:	f002 f810 	bl	8006fb0 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8004f90:	9805      	ldr	r0, [sp, #20]
 8004f92:	b3b0      	cbz	r0, 8005002 <etharp_input+0xe6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004f94:	4621      	mov	r1, r4
 8004f96:	f000 fc8e 	bl	80058b6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8004f9a:	4682      	mov	sl, r0
 8004f9c:	bb88      	cbnz	r0, 8005002 <etharp_input+0xe6>
      ip4_addr_ismulticast(ipaddr)) {
 8004f9e:	9b05      	ldr	r3, [sp, #20]
 8004fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004fa4:	2be0      	cmp	r3, #224	; 0xe0
 8004fa6:	d02c      	beq.n	8005002 <etharp_input+0xe6>
  i = etharp_find_entry(ipaddr, flags, netif);
 8004fa8:	4649      	mov	r1, r9
 8004faa:	a805      	add	r0, sp, #20
 8004fac:	f7ff ff16 	bl	8004ddc <etharp_find_entry.isra.0>
  if (i < 0) {
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	db26      	blt.n	8005002 <etharp_input+0xe6>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004fb4:	2318      	movs	r3, #24
 8004fb6:	4343      	muls	r3, r0
 8004fb8:	2002      	movs	r0, #2
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <etharp_input+0x128>)
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8004fbc:	f103 0c0c 	add.w	ip, r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004fc0:	18d1      	adds	r1, r2, r3
 8004fc2:	7508      	strb	r0, [r1, #20]
  arp_table[i].netif = netif;
 8004fc4:	608c      	str	r4, [r1, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	eb02 0e0c 	add.w	lr, r2, ip
 8004fcc:	f842 000c 	str.w	r0, [r2, ip]
 8004fd0:	88b8      	ldrh	r0, [r7, #4]
 8004fd2:	f8ae 0004 	strh.w	r0, [lr, #4]
  if (arp_table[i].q != NULL) {
 8004fd6:	f852 9003 	ldr.w	r9, [r2, r3]
  arp_table[i].ctime = 0;
 8004fda:	f8a1 a012 	strh.w	sl, [r1, #18]
  if (arp_table[i].q != NULL) {
 8004fde:	f1b9 0f00 	cmp.w	r9, #0
 8004fe2:	d00e      	beq.n	8005002 <etharp_input+0xe6>
    arp_table[i].q = NULL;
 8004fe4:	f842 a003 	str.w	sl, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fec:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f001 f868 	bl	80060cc <ethernet_output>
    pbuf_free(p);
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	f7ff f8fb 	bl	80041f8 <pbuf_free>
  switch (hdr->opcode) {
 8005002:	88f3      	ldrh	r3, [r6, #6]
 8005004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005008:	d1a6      	bne.n	8004f58 <etharp_input+0x3c>
    if (for_us) {
 800500a:	2d00      	cmp	r5, #0
 800500c:	d0a4      	beq.n	8004f58 <etharp_input+0x3c>
      etharp_raw(netif,
 800500e:	2202      	movs	r2, #2
 8005010:	9203      	str	r2, [sp, #12]
 8005012:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005014:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 8005018:	e9cd 7201 	strd	r7, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800501c:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800501e:	9200      	str	r2, [sp, #0]
 8005020:	4619      	mov	r1, r3
 8005022:	463a      	mov	r2, r7
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff fe6d 	bl	8004d04 <etharp_raw>
 800502a:	e795      	b.n	8004f58 <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800502c:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800502e:	46a9      	mov	r9, r5
 8005030:	e7a3      	b.n	8004f7a <etharp_input+0x5e>
 8005032:	bf00      	nop
 8005034:	0800affb 	.word	0x0800affb
 8005038:	0800a857 	.word	0x0800a857
 800503c:	0800a865 	.word	0x0800a865
 8005040:	0800af65 	.word	0x0800af65
 8005044:	20000d28 	.word	0x20000d28

08005048 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800504a:	2401      	movs	r4, #1
{
 800504c:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800504e:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8005052:	4906      	ldr	r1, [pc, #24]	; (800506c <etharp_request+0x24>)
 8005054:	f100 0329 	add.w	r3, r0, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005058:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800505a:	9101      	str	r1, [sp, #4]
 800505c:	9200      	str	r2, [sp, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	4a03      	ldr	r2, [pc, #12]	; (8005070 <etharp_request+0x28>)
 8005062:	f7ff fe4f 	bl	8004d04 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8005066:	b004      	add	sp, #16
 8005068:	bd10      	pop	{r4, pc}
 800506a:	bf00      	nop
 800506c:	0800b3e5 	.word	0x0800b3e5
 8005070:	0800b379 	.word	0x0800b379

08005074 <etharp_tmr>:
{
 8005074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005078:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800507a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800507c:	2704      	movs	r7, #4
 800507e:	4c14      	ldr	r4, [pc, #80]	; (80050d0 <etharp_tmr+0x5c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005080:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 8005084:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 8005086:	b16a      	cbz	r2, 80050a4 <etharp_tmr+0x30>
      arp_table[i].ctime++;
 8005088:	8963      	ldrh	r3, [r4, #10]
 800508a:	3301      	adds	r3, #1
 800508c:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800508e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005092:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005094:	d203      	bcs.n	800509e <etharp_tmr+0x2a>
 8005096:	2a01      	cmp	r2, #1
 8005098:	d10b      	bne.n	80050b2 <etharp_tmr+0x3e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800509a:	2b04      	cmp	r3, #4
 800509c:	d90d      	bls.n	80050ba <etharp_tmr+0x46>
        etharp_free_entry(i);
 800509e:	4628      	mov	r0, r5
 80050a0:	f7ff fe12 	bl	8004cc8 <etharp_free_entry>
 80050a4:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80050a6:	2d0a      	cmp	r5, #10
 80050a8:	f104 0418 	add.w	r4, r4, #24
 80050ac:	d1ea      	bne.n	8005084 <etharp_tmr+0x10>
}
 80050ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80050b2:	2a03      	cmp	r2, #3
 80050b4:	d108      	bne.n	80050c8 <etharp_tmr+0x54>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80050b6:	7327      	strb	r7, [r4, #12]
 80050b8:	e7f4      	b.n	80050a4 <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80050ba:	2118      	movs	r1, #24
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	fb01 8105 	mla	r1, r1, r5, r8
 80050c2:	f7ff ffc1 	bl	8005048 <etharp_request>
 80050c6:	e7ed      	b.n	80050a4 <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80050c8:	2a04      	cmp	r2, #4
 80050ca:	d1eb      	bne.n	80050a4 <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80050cc:	7326      	strb	r6, [r4, #12]
 80050ce:	e7e9      	b.n	80050a4 <etharp_tmr+0x30>
 80050d0:	20000d30 	.word	0x20000d30

080050d4 <etharp_output_to_arp_index>:
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80050d4:	2318      	movs	r3, #24
{
 80050d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80050da:	4c23      	ldr	r4, [pc, #140]	; (8005168 <etharp_output_to_arp_index+0x94>)
{
 80050dc:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80050de:	fb03 4302 	mla	r3, r3, r2, r4
 80050e2:	7d1b      	ldrb	r3, [r3, #20]
{
 80050e4:	4605      	mov	r5, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80050e6:	2b01      	cmp	r3, #1
{
 80050e8:	4689      	mov	r9, r1
 80050ea:	4616      	mov	r6, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80050ec:	d806      	bhi.n	80050fc <etharp_output_to_arp_index+0x28>
 80050ee:	4b1f      	ldr	r3, [pc, #124]	; (800516c <etharp_output_to_arp_index+0x98>)
 80050f0:	f240 22ed 	movw	r2, #749	; 0x2ed
 80050f4:	491e      	ldr	r1, [pc, #120]	; (8005170 <etharp_output_to_arp_index+0x9c>)
 80050f6:	481f      	ldr	r0, [pc, #124]	; (8005174 <etharp_output_to_arp_index+0xa0>)
 80050f8:	f001 ff5a 	bl	8006fb0 <iprintf>
 80050fc:	2118      	movs	r1, #24
 80050fe:	4371      	muls	r1, r6
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005100:	1867      	adds	r7, r4, r1
 8005102:	7d3b      	ldrb	r3, [r7, #20]
 8005104:	f101 060c 	add.w	r6, r1, #12
 8005108:	2b02      	cmp	r3, #2
 800510a:	4426      	add	r6, r4
 800510c:	f105 0829 	add.w	r8, r5, #41	; 0x29
 8005110:	d10b      	bne.n	800512a <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005112:	8a7b      	ldrh	r3, [r7, #18]
 8005114:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005118:	d913      	bls.n	8005142 <etharp_output_to_arp_index+0x6e>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800511a:	3104      	adds	r1, #4
 800511c:	4421      	add	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f7ff ff92 	bl	8005048 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005124:	b908      	cbnz	r0, 800512a <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005126:	2303      	movs	r3, #3
 8005128:	753b      	strb	r3, [r7, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800512a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800512e:	4642      	mov	r2, r8
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4649      	mov	r1, r9
 8005134:	4633      	mov	r3, r6
 8005136:	4628      	mov	r0, r5
 8005138:	f000 ffc8 	bl	80060cc <ethernet_output>
}
 800513c:	b005      	add	sp, #20
 800513e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005142:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005146:	d3f0      	bcc.n	800512a <etharp_output_to_arp_index+0x56>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005148:	2301      	movs	r3, #1
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <etharp_output_to_arp_index+0xa4>)
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800514e:	3104      	adds	r1, #4
 8005150:	4421      	add	r1, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005152:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005154:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005156:	9102      	str	r1, [sp, #8]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4632      	mov	r2, r6
 800515c:	4643      	mov	r3, r8
 800515e:	4641      	mov	r1, r8
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff fdcf 	bl	8004d04 <etharp_raw>
 8005166:	e7dd      	b.n	8005124 <etharp_output_to_arp_index+0x50>
 8005168:	20000d28 	.word	0x20000d28
 800516c:	0800affb 	.word	0x0800affb
 8005170:	0800af89 	.word	0x0800af89
 8005174:	0800a865 	.word	0x0800a865
 8005178:	0800b3e5 	.word	0x0800b3e5

0800517c <etharp_query>:
{
 800517c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	4689      	mov	r9, r1
 8005182:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005184:	4601      	mov	r1, r0
 8005186:	f8d9 0000 	ldr.w	r0, [r9]
{
 800518a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800518c:	f000 fb93 	bl	80058b6 <ip4_addr_isbroadcast_u32>
 8005190:	4605      	mov	r5, r0
 8005192:	2800      	cmp	r0, #0
 8005194:	d15a      	bne.n	800524c <etharp_query+0xd0>
      ip4_addr_ismulticast(ipaddr) ||
 8005196:	f8d9 3000 	ldr.w	r3, [r9]
 800519a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800519e:	2ae0      	cmp	r2, #224	; 0xe0
 80051a0:	d054      	beq.n	800524c <etharp_query+0xd0>
      ip4_addr_isany(ipaddr)) {
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d052      	beq.n	800524c <etharp_query+0xd0>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80051a6:	2101      	movs	r1, #1
 80051a8:	4648      	mov	r0, r9
 80051aa:	f7ff fe17 	bl	8004ddc <etharp_find_entry.isra.0>
  if (i < 0) {
 80051ae:	1e06      	subs	r6, r0, #0
 80051b0:	db4f      	blt.n	8005252 <etharp_query+0xd6>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80051b2:	2318      	movs	r3, #24
 80051b4:	4c3c      	ldr	r4, [pc, #240]	; (80052a8 <etharp_query+0x12c>)
 80051b6:	fb03 4306 	mla	r3, r3, r6, r4
 80051ba:	7d1a      	ldrb	r2, [r3, #20]
 80051bc:	b91a      	cbnz	r2, 80051c6 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80051be:	2501      	movs	r5, #1
    arp_table[i].netif = netif;
 80051c0:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80051c4:	751d      	strb	r5, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80051c6:	2318      	movs	r3, #24
 80051c8:	fb03 4306 	mla	r3, r3, r6, r4
 80051cc:	7d1b      	ldrb	r3, [r3, #20]
 80051ce:	b933      	cbnz	r3, 80051de <etharp_query+0x62>
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <etharp_query+0x130>)
 80051d2:	f240 32c9 	movw	r2, #969	; 0x3c9
 80051d6:	4936      	ldr	r1, [pc, #216]	; (80052b0 <etharp_query+0x134>)
 80051d8:	4836      	ldr	r0, [pc, #216]	; (80052b4 <etharp_query+0x138>)
 80051da:	f001 fee9 	bl	8006fb0 <iprintf>
  if (is_new_entry || (q == NULL)) {
 80051de:	b90d      	cbnz	r5, 80051e4 <etharp_query+0x68>
 80051e0:	2f00      	cmp	r7, #0
 80051e2:	d138      	bne.n	8005256 <etharp_query+0xda>
    result = etharp_request(netif, ipaddr);
 80051e4:	4649      	mov	r1, r9
 80051e6:	4640      	mov	r0, r8
 80051e8:	f7ff ff2e 	bl	8005048 <etharp_request>
    if (q == NULL) {
 80051ec:	bbaf      	cbnz	r7, 800525a <etharp_query+0xde>
}
 80051ee:	b002      	add	sp, #8
 80051f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80051f4:	d1fb      	bne.n	80051ee <etharp_query+0x72>
 80051f6:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80051f8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80052ac <etharp_query+0x130>
 80051fc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80052bc <etharp_query+0x140>
 8005200:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80052b4 <etharp_query+0x138>
 8005204:	896a      	ldrh	r2, [r5, #10]
 8005206:	892b      	ldrh	r3, [r5, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d108      	bne.n	800521e <etharp_query+0xa2>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b133      	cbz	r3, 800521e <etharp_query+0xa2>
 8005210:	4643      	mov	r3, r8
 8005212:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8005216:	4649      	mov	r1, r9
 8005218:	4650      	mov	r0, sl
 800521a:	f001 fec9 	bl	8006fb0 <iprintf>
      if (p->type != PBUF_ROM) {
 800521e:	7b2b      	ldrb	r3, [r5, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d12e      	bne.n	8005282 <etharp_query+0x106>
      p = p->next;
 8005224:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8005226:	2d00      	cmp	r5, #0
 8005228:	d1ec      	bne.n	8005204 <etharp_query+0x88>
      pbuf_ref(p);
 800522a:	4638      	mov	r0, r7
 800522c:	f7ff f9a0 	bl	8004570 <pbuf_ref>
 8005230:	46b8      	mov	r8, r7
      if (arp_table[i].q != NULL) {
 8005232:	2318      	movs	r3, #24
 8005234:	fb03 f206 	mul.w	r2, r3, r6
 8005238:	58a0      	ldr	r0, [r4, r2]
 800523a:	461d      	mov	r5, r3
 800523c:	b108      	cbz	r0, 8005242 <etharp_query+0xc6>
        pbuf_free(arp_table[i].q);
 800523e:	f7fe ffdb 	bl	80041f8 <pbuf_free>
      arp_table[i].q = p;
 8005242:	436e      	muls	r6, r5
      result = ERR_OK;
 8005244:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8005246:	f844 8006 	str.w	r8, [r4, r6]
 800524a:	e7d0      	b.n	80051ee <etharp_query+0x72>
    return ERR_ARG;
 800524c:	f06f 000f 	mvn.w	r0, #15
 8005250:	e7cd      	b.n	80051ee <etharp_query+0x72>
 8005252:	4630      	mov	r0, r6
 8005254:	e7cb      	b.n	80051ee <etharp_query+0x72>
  err_t result = ERR_MEM;
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800525a:	2318      	movs	r3, #24
 800525c:	4373      	muls	r3, r6
 800525e:	18e2      	adds	r2, r4, r3
 8005260:	7d12      	ldrb	r2, [r2, #20]
 8005262:	2a01      	cmp	r2, #1
 8005264:	d9c6      	bls.n	80051f4 <etharp_query+0x78>
    ETHARP_SET_HINT(netif, i);
 8005266:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <etharp_query+0x13c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005268:	330c      	adds	r3, #12
    ETHARP_SET_HINT(netif, i);
 800526a:	7016      	strb	r6, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800526c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005270:	4423      	add	r3, r4
 8005272:	9200      	str	r2, [sp, #0]
 8005274:	4639      	mov	r1, r7
 8005276:	f108 0229 	add.w	r2, r8, #41	; 0x29
 800527a:	4640      	mov	r0, r8
 800527c:	f000 ff26 	bl	80060cc <ethernet_output>
 8005280:	e7b5      	b.n	80051ee <etharp_query+0x72>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005282:	2200      	movs	r2, #0
 8005284:	8929      	ldrh	r1, [r5, #8]
 8005286:	2002      	movs	r0, #2
 8005288:	f7ff f818 	bl	80042bc <pbuf_alloc>
      if (p != NULL) {
 800528c:	4680      	mov	r8, r0
 800528e:	b138      	cbz	r0, 80052a0 <etharp_query+0x124>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005290:	4639      	mov	r1, r7
 8005292:	f7ff f9c5 	bl	8004620 <pbuf_copy>
 8005296:	2800      	cmp	r0, #0
 8005298:	d0cb      	beq.n	8005232 <etharp_query+0xb6>
          pbuf_free(p);
 800529a:	4640      	mov	r0, r8
 800529c:	f7fe ffac 	bl	80041f8 <pbuf_free>
      result = ERR_MEM;
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e7a3      	b.n	80051ee <etharp_query+0x72>
 80052a6:	bf00      	nop
 80052a8:	20000d28 	.word	0x20000d28
 80052ac:	0800affb 	.word	0x0800affb
 80052b0:	0800afb9 	.word	0x0800afb9
 80052b4:	0800a865 	.word	0x0800a865
 80052b8:	20000e18 	.word	0x20000e18
 80052bc:	0800afe1 	.word	0x0800afe1

080052c0 <etharp_output>:
{
 80052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c2:	460e      	mov	r6, r1
 80052c4:	b085      	sub	sp, #20
 80052c6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80052c8:	4604      	mov	r4, r0
 80052ca:	b930      	cbnz	r0, 80052da <etharp_output+0x1a>
 80052cc:	4b3d      	ldr	r3, [pc, #244]	; (80053c4 <etharp_output+0x104>)
 80052ce:	f240 321b 	movw	r2, #795	; 0x31b
 80052d2:	493d      	ldr	r1, [pc, #244]	; (80053c8 <etharp_output+0x108>)
 80052d4:	483d      	ldr	r0, [pc, #244]	; (80053cc <etharp_output+0x10c>)
 80052d6:	f001 fe6b 	bl	8006fb0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80052da:	b936      	cbnz	r6, 80052ea <etharp_output+0x2a>
 80052dc:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <etharp_output+0x104>)
 80052de:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80052e2:	493b      	ldr	r1, [pc, #236]	; (80053d0 <etharp_output+0x110>)
 80052e4:	4839      	ldr	r0, [pc, #228]	; (80053cc <etharp_output+0x10c>)
 80052e6:	f001 fe63 	bl	8006fb0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80052ea:	b935      	cbnz	r5, 80052fa <etharp_output+0x3a>
 80052ec:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <etharp_output+0x104>)
 80052ee:	f240 321d 	movw	r2, #797	; 0x31d
 80052f2:	4938      	ldr	r1, [pc, #224]	; (80053d4 <etharp_output+0x114>)
 80052f4:	4835      	ldr	r0, [pc, #212]	; (80053cc <etharp_output+0x10c>)
 80052f6:	f001 fe5b 	bl	8006fb0 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80052fa:	4621      	mov	r1, r4
 80052fc:	6828      	ldr	r0, [r5, #0]
 80052fe:	f000 fada 	bl	80058b6 <ip4_addr_isbroadcast_u32>
 8005302:	2800      	cmp	r0, #0
 8005304:	d159      	bne.n	80053ba <etharp_output+0xfa>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800530c:	2ae0      	cmp	r2, #224	; 0xe0
 800530e:	d11b      	bne.n	8005348 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005310:	2301      	movs	r3, #1
 8005312:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005316:	235e      	movs	r3, #94	; 0x5e
 8005318:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800531c:	786b      	ldrb	r3, [r5, #1]
 800531e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005322:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005326:	78ab      	ldrb	r3, [r5, #2]
 8005328:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800532c:	78eb      	ldrb	r3, [r5, #3]
 800532e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8005332:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8005334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005338:	4631      	mov	r1, r6
 800533a:	9200      	str	r2, [sp, #0]
 800533c:	4620      	mov	r0, r4
 800533e:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8005342:	f000 fec3 	bl	80060cc <ethernet_output>
 8005346:	e01f      	b.n	8005388 <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005348:	6862      	ldr	r2, [r4, #4]
 800534a:	68a1      	ldr	r1, [r4, #8]
 800534c:	405a      	eors	r2, r3
 800534e:	420a      	tst	r2, r1
 8005350:	d008      	beq.n	8005364 <etharp_output+0xa4>
 8005352:	f64f 62a9 	movw	r2, #65193	; 0xfea9
        !ip4_addr_islinklocal(ipaddr)) {
 8005356:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800535c:	68e3      	ldr	r3, [r4, #12]
 800535e:	b373      	cbz	r3, 80053be <etharp_output+0xfe>
            dst_addr = netif_ip4_gw(netif);
 8005360:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005364:	2018      	movs	r0, #24
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <etharp_output+0x118>)
 8005368:	491c      	ldr	r1, [pc, #112]	; (80053dc <etharp_output+0x11c>)
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	fb00 1002 	mla	r0, r0, r2, r1
 8005370:	7d01      	ldrb	r1, [r0, #20]
 8005372:	2901      	cmp	r1, #1
 8005374:	4619      	mov	r1, r3
 8005376:	d909      	bls.n	800538c <etharp_output+0xcc>
 8005378:	682f      	ldr	r7, [r5, #0]
 800537a:	6843      	ldr	r3, [r0, #4]
 800537c:	429f      	cmp	r7, r3
 800537e:	d105      	bne.n	800538c <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 8005380:	4631      	mov	r1, r6
 8005382:	4620      	mov	r0, r4
 8005384:	f7ff fea6 	bl	80050d4 <etharp_output_to_arp_index>
}
 8005388:	b005      	add	sp, #20
 800538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
 800538c:	2200      	movs	r2, #0
 800538e:	4b13      	ldr	r3, [pc, #76]	; (80053dc <etharp_output+0x11c>)
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005390:	7d18      	ldrb	r0, [r3, #20]
 8005392:	2801      	cmp	r0, #1
 8005394:	d906      	bls.n	80053a4 <etharp_output+0xe4>
 8005396:	682f      	ldr	r7, [r5, #0]
 8005398:	6858      	ldr	r0, [r3, #4]
 800539a:	4287      	cmp	r7, r0
 800539c:	d102      	bne.n	80053a4 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	700a      	strb	r2, [r1, #0]
 80053a2:	e7ed      	b.n	8005380 <etharp_output+0xc0>
 80053a4:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80053a6:	2a0a      	cmp	r2, #10
 80053a8:	f103 0318 	add.w	r3, r3, #24
 80053ac:	d1f0      	bne.n	8005390 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 80053ae:	4632      	mov	r2, r6
 80053b0:	4629      	mov	r1, r5
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7ff fee2 	bl	800517c <etharp_query>
 80053b8:	e7e6      	b.n	8005388 <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <etharp_output+0x120>)
 80053bc:	e7ba      	b.n	8005334 <etharp_output+0x74>
            return ERR_RTE;
 80053be:	f06f 0003 	mvn.w	r0, #3
 80053c2:	e7e1      	b.n	8005388 <etharp_output+0xc8>
 80053c4:	0800affb 	.word	0x0800affb
 80053c8:	0800a857 	.word	0x0800a857
 80053cc:	0800a865 	.word	0x0800a865
 80053d0:	0800ad64 	.word	0x0800ad64
 80053d4:	0800af46 	.word	0x0800af46
 80053d8:	20000e18 	.word	0x20000e18
 80053dc:	20000d28 	.word	0x20000d28
 80053e0:	0800b379 	.word	0x0800b379

080053e4 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e6:	4604      	mov	r4, r0
 80053e8:	b087      	sub	sp, #28
 80053ea:	460f      	mov	r7, r1
 80053ec:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80053ee:	2124      	movs	r1, #36	; 0x24
 80053f0:	2200      	movs	r2, #0
 80053f2:	2001      	movs	r0, #1
 80053f4:	f7fe ff62 	bl	80042bc <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80053f8:	4605      	mov	r5, r0
 80053fa:	b3a0      	cbz	r0, 8005466 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80053fc:	8943      	ldrh	r3, [r0, #10]
 80053fe:	2b23      	cmp	r3, #35	; 0x23
 8005400:	d806      	bhi.n	8005410 <icmp_send_response.isra.0+0x2c>
 8005402:	4b1a      	ldr	r3, [pc, #104]	; (800546c <icmp_send_response.isra.0+0x88>)
 8005404:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005408:	4919      	ldr	r1, [pc, #100]	; (8005470 <icmp_send_response.isra.0+0x8c>)
 800540a:	481a      	ldr	r0, [pc, #104]	; (8005474 <icmp_send_response.isra.0+0x90>)
 800540c:	f001 fdd0 	bl	8006fb0 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8005410:	2300      	movs	r3, #0
  iphdr = (struct ip_hdr *)p->payload;
 8005412:	6822      	ldr	r2, [r4, #0]
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005414:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005416:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 800541a:	7123      	strb	r3, [r4, #4]
 800541c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800541e:	71a3      	strb	r3, [r4, #6]
 8005420:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005422:	4613      	mov	r3, r2
  icmphdr->type = type;
 8005424:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8005426:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005428:	f104 0108 	add.w	r1, r4, #8
 800542c:	f853 6b04 	ldr.w	r6, [r3], #4
 8005430:	4283      	cmp	r3, r0
 8005432:	f841 6b04 	str.w	r6, [r1], #4
 8005436:	d1f9      	bne.n	800542c <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005438:	68d3      	ldr	r3, [r2, #12]
 800543a:	ae06      	add	r6, sp, #24
 800543c:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f8bb 	bl	80055bc <ip4_route>
#endif
  if (netif != NULL) {
 8005446:	b158      	cbz	r0, 8005460 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005448:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800544a:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800544c:	70a1      	strb	r1, [r4, #2]
 800544e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005450:	4632      	mov	r2, r6
 8005452:	9002      	str	r0, [sp, #8]
 8005454:	e9cd 1300 	strd	r1, r3, [sp]
 8005458:	4628      	mov	r0, r5
 800545a:	23ff      	movs	r3, #255	; 0xff
 800545c:	f000 fa1a 	bl	8005894 <ip4_output_if>
  }
  pbuf_free(q);
 8005460:	4628      	mov	r0, r5
 8005462:	f7fe fec9 	bl	80041f8 <pbuf_free>
}
 8005466:	b007      	add	sp, #28
 8005468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546a:	bf00      	nop
 800546c:	0800b10b 	.word	0x0800b10b
 8005470:	0800b140 	.word	0x0800b140
 8005474:	0800a865 	.word	0x0800a865

08005478 <icmp_input>:
{
 8005478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800547c:	4b44      	ldr	r3, [pc, #272]	; (8005590 <icmp_input+0x118>)
{
 800547e:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 8005480:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8005484:	4604      	mov	r4, r0
  hlen = IPH_HL(iphdr_in) * 4;
 8005486:	f899 5000 	ldrb.w	r5, [r9]
{
 800548a:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 800548c:	f005 050f 	and.w	r5, r5, #15
 8005490:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8005492:	2d13      	cmp	r5, #19
 8005494:	461f      	mov	r7, r3
 8005496:	d92a      	bls.n	80054ee <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8005498:	8942      	ldrh	r2, [r0, #10]
 800549a:	2a03      	cmp	r2, #3
 800549c:	d927      	bls.n	80054ee <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800549e:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	2a08      	cmp	r2, #8
 80054a4:	d123      	bne.n	80054ee <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80054a6:	6958      	ldr	r0, [r3, #20]
 80054a8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80054ac:	2ae0      	cmp	r2, #224	; 0xe0
 80054ae:	d01e      	beq.n	80054ee <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	f000 fa00 	bl	80058b6 <ip4_addr_isbroadcast_u32>
 80054b6:	4606      	mov	r6, r0
 80054b8:	b9c8      	cbnz	r0, 80054ee <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80054ba:	8923      	ldrh	r3, [r4, #8]
 80054bc:	2b07      	cmp	r3, #7
 80054be:	d916      	bls.n	80054ee <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80054c0:	f105 010e 	add.w	r1, r5, #14
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7fe fe91 	bl	80041ec <pbuf_header>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d04f      	beq.n	800556e <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80054ce:	8921      	ldrh	r1, [r4, #8]
 80054d0:	4632      	mov	r2, r6
 80054d2:	4429      	add	r1, r5
 80054d4:	b289      	uxth	r1, r1
 80054d6:	2002      	movs	r0, #2
 80054d8:	f7fe fef0 	bl	80042bc <pbuf_alloc>
      if (r == NULL) {
 80054dc:	4606      	mov	r6, r0
 80054de:	b130      	cbz	r0, 80054ee <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80054e0:	8942      	ldrh	r2, [r0, #10]
 80054e2:	f105 0308 	add.w	r3, r5, #8
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d207      	bcs.n	80054fa <icmp_input+0x82>
        pbuf_free(r);
 80054ea:	f7fe fe85 	bl	80041f8 <pbuf_free>
  pbuf_free(p);
 80054ee:	4620      	mov	r0, r4
}
 80054f0:	b005      	add	sp, #20
 80054f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80054f6:	f7fe be7f 	b.w	80041f8 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 80054fa:	4649      	mov	r1, r9
 80054fc:	462a      	mov	r2, r5
 80054fe:	6840      	ldr	r0, [r0, #4]
 8005500:	f000 fe5f 	bl	80061c2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8005504:	4269      	negs	r1, r5
 8005506:	4630      	mov	r0, r6
 8005508:	f7fe fe70 	bl	80041ec <pbuf_header>
 800550c:	b138      	cbz	r0, 800551e <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <icmp_input+0x11c>)
 8005510:	22af      	movs	r2, #175	; 0xaf
 8005512:	4921      	ldr	r1, [pc, #132]	; (8005598 <icmp_input+0x120>)
 8005514:	4821      	ldr	r0, [pc, #132]	; (800559c <icmp_input+0x124>)
 8005516:	f001 fd4b 	bl	8006fb0 <iprintf>
        pbuf_free(r);
 800551a:	4630      	mov	r0, r6
 800551c:	e7e5      	b.n	80054ea <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800551e:	4621      	mov	r1, r4
 8005520:	4630      	mov	r0, r6
 8005522:	f7ff f87d 	bl	8004620 <pbuf_copy>
 8005526:	2800      	cmp	r0, #0
 8005528:	d1f7      	bne.n	800551a <icmp_input+0xa2>
      pbuf_free(p);
 800552a:	4620      	mov	r0, r4
 800552c:	f7fe fe64 	bl	80041f8 <pbuf_free>
 8005530:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 8005532:	4629      	mov	r1, r5
 8005534:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8005536:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005538:	f7fe fe58 	bl	80041ec <pbuf_header>
 800553c:	4602      	mov	r2, r0
 800553e:	2800      	cmp	r0, #0
 8005540:	d1d5      	bne.n	80054ee <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8005542:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800554c:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800554e:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8005550:	70b0      	strb	r0, [r6, #2]
 8005552:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005554:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8005556:	7288      	strb	r0, [r1, #10]
 8005558:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800555a:	2101      	movs	r1, #1
 800555c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005560:	e9cd 0100 	strd	r0, r1, [sp]
 8005564:	490e      	ldr	r1, [pc, #56]	; (80055a0 <icmp_input+0x128>)
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f994 	bl	8005894 <ip4_output_if>
 800556c:	e7bf      	b.n	80054ee <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800556e:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8005572:	31f2      	adds	r1, #242	; 0xf2
 8005574:	b209      	sxth	r1, r1
 8005576:	4620      	mov	r0, r4
 8005578:	f7fe fe38 	bl	80041ec <pbuf_header>
 800557c:	2800      	cmp	r0, #0
 800557e:	d0d8      	beq.n	8005532 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <icmp_input+0x11c>)
 8005582:	22c0      	movs	r2, #192	; 0xc0
 8005584:	4907      	ldr	r1, [pc, #28]	; (80055a4 <icmp_input+0x12c>)
 8005586:	4805      	ldr	r0, [pc, #20]	; (800559c <icmp_input+0x124>)
 8005588:	f001 fd12 	bl	8006fb0 <iprintf>
        goto icmperr;
 800558c:	e7af      	b.n	80054ee <icmp_input+0x76>
 800558e:	bf00      	nop
 8005590:	20006078 	.word	0x20006078
 8005594:	0800b10b 	.word	0x0800b10b
 8005598:	0800b0a4 	.word	0x0800b0a4
 800559c:	0800a865 	.word	0x0800a865
 80055a0:	2000608c 	.word	0x2000608c
 80055a4:	0800b0d9 	.word	0x0800b0d9

080055a8 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80055a8:	460a      	mov	r2, r1
 80055aa:	3004      	adds	r0, #4
 80055ac:	2103      	movs	r1, #3
 80055ae:	f7ff bf19 	b.w	80053e4 <icmp_send_response.isra.0>

080055b2 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 80055b2:	460a      	mov	r2, r1
 80055b4:	3004      	adds	r0, #4
 80055b6:	210b      	movs	r1, #11
 80055b8:	f7ff bf14 	b.w	80053e4 <icmp_send_response.isra.0>

080055bc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80055bc:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <ip4_route+0x50>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	b96b      	cbnz	r3, 80055e0 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80055c4:	4a12      	ldr	r2, [pc, #72]	; (8005610 <ip4_route+0x54>)
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	b1ea      	cbz	r2, 8005606 <ip4_route+0x4a>
 80055ca:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 80055ce:	f001 0105 	and.w	r1, r1, #5
 80055d2:	2905      	cmp	r1, #5
 80055d4:	d117      	bne.n	8005606 <ip4_route+0x4a>
 80055d6:	6851      	ldr	r1, [r2, #4]
 80055d8:	2900      	cmp	r1, #0
 80055da:	bf18      	it	ne
 80055dc:	4613      	movne	r3, r2
 80055de:	e012      	b.n	8005606 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80055e0:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80055e4:	07cd      	lsls	r5, r1, #31
 80055e6:	d5eb      	bpl.n	80055c0 <ip4_route+0x4>
 80055e8:	074c      	lsls	r4, r1, #29
 80055ea:	d5e9      	bpl.n	80055c0 <ip4_route+0x4>
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d0e6      	beq.n	80055c0 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80055f2:	6804      	ldr	r4, [r0, #0]
 80055f4:	689d      	ldr	r5, [r3, #8]
 80055f6:	4062      	eors	r2, r4
 80055f8:	422a      	tst	r2, r5
 80055fa:	d004      	beq.n	8005606 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80055fc:	078a      	lsls	r2, r1, #30
 80055fe:	d4df      	bmi.n	80055c0 <ip4_route+0x4>
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	4294      	cmp	r4, r2
 8005604:	d1dc      	bne.n	80055c0 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005606:	4618      	mov	r0, r3
 8005608:	bd30      	pop	{r4, r5, pc}
 800560a:	bf00      	nop
 800560c:	20006090 	.word	0x20006090
 8005610:	20006094 	.word	0x20006094

08005614 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005618:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800561c:	4605      	mov	r5, r0
  if (IPH_V(iphdr) != 4) {
 800561e:	f898 9000 	ldrb.w	r9, [r8]
{
 8005622:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8005624:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d005      	beq.n	8005638 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800562c:	4628      	mov	r0, r5
 800562e:	f7fe fde3 	bl	80041f8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005632:	2000      	movs	r0, #0
 8005634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005638:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800563c:	f7fe fb7a 	bl	8003d34 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005640:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8005642:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8005646:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8005648:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800564c:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800564e:	d903      	bls.n	8005658 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8005650:	4601      	mov	r1, r0
 8005652:	4628      	mov	r0, r5
 8005654:	f7fe ff14 	bl	8004480 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005658:	896b      	ldrh	r3, [r5, #10]
 800565a:	454b      	cmp	r3, r9
 800565c:	d3e6      	bcc.n	800562c <ip4_input+0x18>
 800565e:	892b      	ldrh	r3, [r5, #8]
 8005660:	42a3      	cmp	r3, r4
 8005662:	d3e3      	bcc.n	800562c <ip4_input+0x18>
 8005664:	f1b9 0f13 	cmp.w	r9, #19
 8005668:	d9e0      	bls.n	800562c <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800566a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800566e:	4c4b      	ldr	r4, [pc, #300]	; (800579c <ip4_input+0x188>)
 8005670:	6163      	str	r3, [r4, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005672:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567a:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800567c:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800567e:	d147      	bne.n	8005710 <ip4_input+0xfc>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005684:	07da      	lsls	r2, r3, #31
 8005686:	d502      	bpl.n	800568e <ip4_input+0x7a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d167      	bne.n	800575e <ip4_input+0x14a>
      netif = NULL;
 800568e:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005690:	4639      	mov	r1, r7
 8005692:	6920      	ldr	r0, [r4, #16]
 8005694:	f000 f90f 	bl	80058b6 <ip4_addr_isbroadcast_u32>
 8005698:	2800      	cmp	r0, #0
 800569a:	d1c7      	bne.n	800562c <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80056a2:	2be0      	cmp	r3, #224	; 0xe0
 80056a4:	d0c2      	beq.n	800562c <ip4_input+0x18>
  if (netif == NULL) {
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d0c0      	beq.n	800562c <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80056aa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80056ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056b2:	b13b      	cbz	r3, 80056c4 <ip4_input+0xb0>
    p = ip4_reass(p);
 80056b4:	4628      	mov	r0, r5
 80056b6:	f000 fa2f 	bl	8005b18 <ip4_reass>
    if (p == NULL) {
 80056ba:	4605      	mov	r5, r0
 80056bc:	2800      	cmp	r0, #0
 80056be:	d0b8      	beq.n	8005632 <ip4_input+0x1e>
    iphdr = (struct ip_hdr *)p->payload;
 80056c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_input_netif = inp;
 80056c4:	e9c4 6700 	strd	r6, r7, [r4]
  ip_data.current_ip4_header = iphdr;
 80056c8:	f8c4 8008 	str.w	r8, [r4, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80056cc:	f898 3000 	ldrb.w	r3, [r8]
  if (raw_input(p, inp) == 0)
 80056d0:	4639      	mov	r1, r7
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	009b      	lsls	r3, r3, #2
  if (raw_input(p, inp) == 0)
 80056d8:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80056da:	81a3      	strh	r3, [r4, #12]
  if (raw_input(p, inp) == 0)
 80056dc:	f7ff f826 	bl	800472c <raw_input>
 80056e0:	b970      	cbnz	r0, 8005700 <ip4_input+0xec>
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80056e2:	f1c9 0100 	rsb	r1, r9, #0
 80056e6:	4628      	mov	r0, r5
 80056e8:	f7fe fd80 	bl	80041ec <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 80056ec:	f898 3009 	ldrb.w	r3, [r8, #9]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d036      	beq.n	8005762 <ip4_input+0x14e>
 80056f4:	2b11      	cmp	r3, #17
 80056f6:	d139      	bne.n	800576c <ip4_input+0x158>
      udp_input(p, inp);
 80056f8:	4639      	mov	r1, r7
 80056fa:	4628      	mov	r0, r5
 80056fc:	f7ff f92e 	bl	800495c <udp_input>
  ip_data.current_netif = NULL;
 8005700:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8005702:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 8005706:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005708:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800570a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 800570e:	e790      	b.n	8005632 <ip4_input+0x1e>
 8005710:	463e      	mov	r6, r7
    int first = 1;
 8005712:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8005716:	f8df b088 	ldr.w	fp, [pc, #136]	; 80057a0 <ip4_input+0x18c>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800571a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800571e:	07db      	lsls	r3, r3, #31
 8005720:	d404      	bmi.n	800572c <ip4_input+0x118>
      if (first) {
 8005722:	f1ba 0f00 	cmp.w	sl, #0
 8005726:	d10d      	bne.n	8005744 <ip4_input+0x130>
        netif = netif->next;
 8005728:	6836      	ldr	r6, [r6, #0]
 800572a:	e010      	b.n	800574e <ip4_input+0x13a>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800572c:	6873      	ldr	r3, [r6, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f7      	beq.n	8005722 <ip4_input+0x10e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005732:	6960      	ldr	r0, [r4, #20]
 8005734:	4283      	cmp	r3, r0
 8005736:	d0ab      	beq.n	8005690 <ip4_input+0x7c>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005738:	4631      	mov	r1, r6
 800573a:	f000 f8bc 	bl	80058b6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800573e:	2800      	cmp	r0, #0
 8005740:	d0ef      	beq.n	8005722 <ip4_input+0x10e>
 8005742:	e7a5      	b.n	8005690 <ip4_input+0x7c>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8005744:	7d23      	ldrb	r3, [r4, #20]
 8005746:	2b7f      	cmp	r3, #127	; 0x7f
 8005748:	d0a1      	beq.n	800568e <ip4_input+0x7a>
        netif = netif_list;
 800574a:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800574e:	42b7      	cmp	r7, r6
        netif = netif->next;
 8005750:	bf08      	it	eq
 8005752:	683e      	ldreq	r6, [r7, #0]
 8005754:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8005758:	2e00      	cmp	r6, #0
 800575a:	d1de      	bne.n	800571a <ip4_input+0x106>
 800575c:	e797      	b.n	800568e <ip4_input+0x7a>
 800575e:	463e      	mov	r6, r7
 8005760:	e796      	b.n	8005690 <ip4_input+0x7c>
      icmp_input(p, inp);
 8005762:	4639      	mov	r1, r7
 8005764:	4628      	mov	r0, r5
 8005766:	f7ff fe87 	bl	8005478 <icmp_input>
      break;
 800576a:	e7c9      	b.n	8005700 <ip4_input+0xec>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800576c:	4631      	mov	r1, r6
 800576e:	6960      	ldr	r0, [r4, #20]
 8005770:	f000 f8a1 	bl	80058b6 <ip4_addr_isbroadcast_u32>
 8005774:	b970      	cbnz	r0, 8005794 <ip4_input+0x180>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005776:	6963      	ldr	r3, [r4, #20]
 8005778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800577c:	2be0      	cmp	r3, #224	; 0xe0
 800577e:	d009      	beq.n	8005794 <ip4_input+0x180>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005780:	4649      	mov	r1, r9
 8005782:	4628      	mov	r0, r5
 8005784:	f7fe fd35 	bl	80041f2 <pbuf_header_force>
        p->payload = iphdr;
 8005788:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800578c:	2102      	movs	r1, #2
 800578e:	4628      	mov	r0, r5
 8005790:	f7ff ff0a 	bl	80055a8 <icmp_dest_unreach>
      pbuf_free(p);
 8005794:	4628      	mov	r0, r5
 8005796:	f7fe fd2f 	bl	80041f8 <pbuf_free>
 800579a:	e7b1      	b.n	8005700 <ip4_input+0xec>
 800579c:	20006078 	.word	0x20006078
 80057a0:	20006090 	.word	0x20006090

080057a4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80057a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80057aa:	89c3      	ldrh	r3, [r0, #14]
{
 80057ac:	4605      	mov	r5, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80057ae:	2b01      	cmp	r3, #1
{
 80057b0:	468a      	mov	sl, r1
 80057b2:	4616      	mov	r6, r2
 80057b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80057b8:	d006      	beq.n	80057c8 <ip4_output_if_src+0x24>
 80057ba:	4b30      	ldr	r3, [pc, #192]	; (800587c <ip4_output_if_src+0xd8>)
 80057bc:	f240 3233 	movw	r2, #819	; 0x333
 80057c0:	492f      	ldr	r1, [pc, #188]	; (8005880 <ip4_output_if_src+0xdc>)
 80057c2:	4830      	ldr	r0, [pc, #192]	; (8005884 <ip4_output_if_src+0xe0>)
 80057c4:	f001 fbf4 	bl	8006fb0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	d047      	beq.n	800585c <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80057cc:	2114      	movs	r1, #20
 80057ce:	4628      	mov	r0, r5
 80057d0:	f7fe fd0c 	bl	80041ec <pbuf_header>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d14e      	bne.n	8005876 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80057d8:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80057da:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80057dc:	2b13      	cmp	r3, #19
 80057de:	d806      	bhi.n	80057ee <ip4_output_if_src+0x4a>
 80057e0:	4b26      	ldr	r3, [pc, #152]	; (800587c <ip4_output_if_src+0xd8>)
 80057e2:	f240 3261 	movw	r2, #865	; 0x361
 80057e6:	4928      	ldr	r1, [pc, #160]	; (8005888 <ip4_output_if_src+0xe4>)
 80057e8:	4826      	ldr	r0, [pc, #152]	; (8005884 <ip4_output_if_src+0xe0>)
 80057ea:	f001 fbe1 	bl	8006fb0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 80057ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80057f2:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 80057f4:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80057f6:	6833      	ldr	r3, [r6, #0]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80057f8:	2700      	movs	r7, #0
    ip4_addr_copy(iphdr->dest, *dest);
 80057fa:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80057fc:	2345      	movs	r3, #69	; 0x45
 80057fe:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8005800:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005804:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005890 <ip4_output_if_src+0xec>
    IPH_TOS_SET(iphdr, tos);
 8005808:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800580a:	8928      	ldrh	r0, [r5, #8]
 800580c:	f7fe fa92 	bl	8003d34 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8005810:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005812:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8005814:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005816:	f8b9 0000 	ldrh.w	r0, [r9]
 800581a:	f7fe fa8b 	bl	8003d34 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800581e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005822:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8005824:	3301      	adds	r3, #1
 8005826:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800582a:	f1ba 0f00 	cmp.w	sl, #0
 800582e:	d112      	bne.n	8005856 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <ip4_output_if_src+0xe8>)
 8005832:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8005834:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8005836:	72a7      	strb	r7, [r4, #10]
 8005838:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800583a:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 800583e:	b19b      	cbz	r3, 8005868 <ip4_output_if_src+0xc4>
 8005840:	892a      	ldrh	r2, [r5, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	d910      	bls.n	8005868 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8005846:	4632      	mov	r2, r6
 8005848:	4641      	mov	r1, r8
 800584a:	4628      	mov	r0, r5
 800584c:	f000 fb14 	bl	8005e78 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8005850:	b002      	add	sp, #8
 8005852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8005856:	f8da 3000 	ldr.w	r3, [sl]
 800585a:	e7eb      	b.n	8005834 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800585c:	686b      	ldr	r3, [r5, #4]
 800585e:	ae02      	add	r6, sp, #8
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f846 3d04 	str.w	r3, [r6, #-4]!
 8005866:	e7e8      	b.n	800583a <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8005868:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800586c:	4632      	mov	r2, r6
 800586e:	4629      	mov	r1, r5
 8005870:	4640      	mov	r0, r8
 8005872:	4798      	blx	r3
 8005874:	e7ec      	b.n	8005850 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8005876:	f06f 0001 	mvn.w	r0, #1
 800587a:	e7e9      	b.n	8005850 <ip4_output_if_src+0xac>
 800587c:	0800b16c 	.word	0x0800b16c
 8005880:	0800b1a0 	.word	0x0800b1a0
 8005884:	0800a865 	.word	0x0800a865
 8005888:	0800b1ac 	.word	0x0800b1ac
 800588c:	0800b1dc 	.word	0x0800b1dc
 8005890:	20000e1a 	.word	0x20000e1a

08005894 <ip4_output_if>:
{
 8005894:	b4f0      	push	{r4, r5, r6, r7}
 8005896:	9c06      	ldr	r4, [sp, #24]
 8005898:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800589c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80058a0:	b11a      	cbz	r2, 80058aa <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80058a2:	b109      	cbz	r1, 80058a8 <ip4_output_if+0x14>
 80058a4:	680f      	ldr	r7, [r1, #0]
 80058a6:	b907      	cbnz	r7, 80058aa <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80058a8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80058aa:	e9cd 6405 	strd	r6, r4, [sp, #20]
 80058ae:	9504      	str	r5, [sp, #16]
}
 80058b0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80058b2:	f7ff bf77 	b.w	80057a4 <ip4_output_if_src>

080058b6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80058b6:	1e43      	subs	r3, r0, #1
 80058b8:	3303      	adds	r3, #3
 80058ba:	d811      	bhi.n	80058e0 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80058bc:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 80058c0:	f013 0302 	ands.w	r3, r3, #2
 80058c4:	d00e      	beq.n	80058e4 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80058c6:	684a      	ldr	r2, [r1, #4]
 80058c8:	4282      	cmp	r2, r0
 80058ca:	d00b      	beq.n	80058e4 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80058cc:	688b      	ldr	r3, [r1, #8]
 80058ce:	4042      	eors	r2, r0
 80058d0:	421a      	tst	r2, r3
 80058d2:	d107      	bne.n	80058e4 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80058d4:	43db      	mvns	r3, r3
 80058d6:	4383      	bics	r3, r0
    return 1;
 80058d8:	bf0c      	ite	eq
 80058da:	2001      	moveq	r0, #1
 80058dc:	2000      	movne	r0, #0
 80058de:	4770      	bx	lr
 80058e0:	2001      	movs	r0, #1
 80058e2:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80058e4:	2000      	movs	r0, #0
  }
}
 80058e6:	4770      	bx	lr

080058e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80058e8:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <ip_reass_dequeue_datagram+0x34>)
{
 80058ec:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 80058ee:	681a      	ldr	r2, [r3, #0]
{
 80058f0:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80058f2:	4282      	cmp	r2, r0
 80058f4:	d107      	bne.n	8005906 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80058f6:	6802      	ldr	r2, [r0, #0]
 80058f8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80058fa:	4621      	mov	r1, r4
}
 80058fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8005900:	2002      	movs	r0, #2
 8005902:	f7fe bb27 	b.w	8003f54 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8005906:	b931      	cbnz	r1, 8005916 <ip_reass_dequeue_datagram+0x2e>
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <ip_reass_dequeue_datagram+0x38>)
 800590a:	f240 1245 	movw	r2, #325	; 0x145
 800590e:	4905      	ldr	r1, [pc, #20]	; (8005924 <ip_reass_dequeue_datagram+0x3c>)
 8005910:	4805      	ldr	r0, [pc, #20]	; (8005928 <ip_reass_dequeue_datagram+0x40>)
 8005912:	f001 fb4d 	bl	8006fb0 <iprintf>
    prev->next = ipr->next;
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	e7ee      	b.n	80058fa <ip_reass_dequeue_datagram+0x12>
 800591c:	20000e20 	.word	0x20000e20
 8005920:	0800b2c5 	.word	0x0800b2c5
 8005924:	0800b2fe 	.word	0x0800b2fe
 8005928:	0800a865 	.word	0x0800a865

0800592c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800592c:	4281      	cmp	r1, r0
{
 800592e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005932:	4605      	mov	r5, r0
 8005934:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005936:	d105      	bne.n	8005944 <ip_reass_free_complete_datagram+0x18>
 8005938:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <ip_reass_free_complete_datagram+0xcc>)
 800593a:	22ab      	movs	r2, #171	; 0xab
 800593c:	492f      	ldr	r1, [pc, #188]	; (80059fc <ip_reass_free_complete_datagram+0xd0>)
 800593e:	4830      	ldr	r0, [pc, #192]	; (8005a00 <ip_reass_free_complete_datagram+0xd4>)
 8005940:	f001 fb36 	bl	8006fb0 <iprintf>
  if (prev != NULL) {
 8005944:	b147      	cbz	r7, 8005958 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	42ab      	cmp	r3, r5
 800594a:	d005      	beq.n	8005958 <ip_reass_free_complete_datagram+0x2c>
 800594c:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <ip_reass_free_complete_datagram+0xcc>)
 800594e:	22ad      	movs	r2, #173	; 0xad
 8005950:	492c      	ldr	r1, [pc, #176]	; (8005a04 <ip_reass_free_complete_datagram+0xd8>)
 8005952:	482b      	ldr	r0, [pc, #172]	; (8005a00 <ip_reass_free_complete_datagram+0xd4>)
 8005954:	f001 fb2c 	bl	8006fb0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8005958:	686e      	ldr	r6, [r5, #4]
 800595a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800595c:	889a      	ldrh	r2, [r3, #4]
 800595e:	bb92      	cbnz	r2, 80059c6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005960:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005962:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8005966:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005968:	f105 0208 	add.w	r2, r5, #8
 800596c:	f852 0b04 	ldr.w	r0, [r2], #4
 8005970:	428a      	cmp	r2, r1
 8005972:	f843 0b04 	str.w	r0, [r3], #4
 8005976:	d1f9      	bne.n	800596c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8005978:	2101      	movs	r1, #1
 800597a:	4630      	mov	r0, r6
 800597c:	f7ff fe19 	bl	80055b2 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005980:	4630      	mov	r0, r6
 8005982:	f7fe fded 	bl	8004560 <pbuf_clen>
 8005986:	4604      	mov	r4, r0
    pbuf_free(p);
 8005988:	4630      	mov	r0, r6
 800598a:	f7fe fc35 	bl	80041f8 <pbuf_free>
  p = ipr->p;
 800598e:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005990:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80059f8 <ip_reass_free_complete_datagram+0xcc>
 8005994:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005a10 <ip_reass_free_complete_datagram+0xe4>
 8005998:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005a00 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800599c:	b9ae      	cbnz	r6, 80059ca <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800599e:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80059a0:	4d19      	ldr	r5, [pc, #100]	; (8005a08 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7ff ffa0 	bl	80058e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80059a8:	882b      	ldrh	r3, [r5, #0]
 80059aa:	42a3      	cmp	r3, r4
 80059ac:	d205      	bcs.n	80059ba <ip_reass_free_complete_datagram+0x8e>
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <ip_reass_free_complete_datagram+0xcc>)
 80059b0:	22d2      	movs	r2, #210	; 0xd2
 80059b2:	4916      	ldr	r1, [pc, #88]	; (8005a0c <ip_reass_free_complete_datagram+0xe0>)
 80059b4:	4812      	ldr	r0, [pc, #72]	; (8005a00 <ip_reass_free_complete_datagram+0xd4>)
 80059b6:	f001 fafb 	bl	8006fb0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80059ba:	882b      	ldrh	r3, [r5, #0]
}
 80059bc:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 80059be:	1b1b      	subs	r3, r3, r4
 80059c0:	802b      	strh	r3, [r5, #0]
}
 80059c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80059c6:	2400      	movs	r4, #0
 80059c8:	e7e1      	b.n	800598e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80059ca:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 80059cc:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 80059ce:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80059d2:	f7fe fdc5 	bl	8004560 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80059d6:	4404      	add	r4, r0
 80059d8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80059dc:	db05      	blt.n	80059ea <ip_reass_free_complete_datagram+0xbe>
 80059de:	4643      	mov	r3, r8
 80059e0:	22cc      	movs	r2, #204	; 0xcc
 80059e2:	4649      	mov	r1, r9
 80059e4:	4650      	mov	r0, sl
 80059e6:	f001 fae3 	bl	8006fb0 <iprintf>
    pbuf_free(pcur);
 80059ea:	4630      	mov	r0, r6
    pbufs_freed += clen;
 80059ec:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80059ee:	f7fe fc03 	bl	80041f8 <pbuf_free>
    p = iprh->next_pbuf;
 80059f2:	465e      	mov	r6, fp
 80059f4:	e7d2      	b.n	800599c <ip_reass_free_complete_datagram+0x70>
 80059f6:	bf00      	nop
 80059f8:	0800b2c5 	.word	0x0800b2c5
 80059fc:	0800b317 	.word	0x0800b317
 8005a00:	0800a865 	.word	0x0800a865
 8005a04:	0800b323 	.word	0x0800b323
 8005a08:	20000e1c 	.word	0x20000e1c
 8005a0c:	0800b352 	.word	0x0800b352
 8005a10:	0800b335 	.word	0x0800b335

08005a14 <ip_reass_remove_oldest_datagram>:
{
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8005a1c:	2500      	movs	r5, #0
    r = reassdatagrams;
 8005a1e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005a88 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8005a22:	2400      	movs	r4, #0
    oldest_prev = NULL;
 8005a24:	4621      	mov	r1, r4
    prev = NULL;
 8005a26:	46a4      	mov	ip, r4
    oldest = NULL;
 8005a28:	4620      	mov	r0, r4
    r = reassdatagrams;
 8005a2a:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8005a2e:	b953      	cbnz	r3, 8005a46 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8005a30:	b110      	cbz	r0, 8005a38 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8005a32:	f7ff ff7b 	bl	800592c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8005a36:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005a38:	42bd      	cmp	r5, r7
 8005a3a:	da01      	bge.n	8005a40 <ip_reass_remove_oldest_datagram+0x2c>
 8005a3c:	2c01      	cmp	r4, #1
 8005a3e:	dcf0      	bgt.n	8005a22 <ip_reass_remove_oldest_datagram+0xe>
}
 8005a40:	4628      	mov	r0, r5
 8005a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8005a46:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	4572      	cmp	r2, lr
 8005a4e:	d109      	bne.n	8005a64 <ip_reass_remove_oldest_datagram+0x50>
 8005a50:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	4572      	cmp	r2, lr
 8005a58:	d104      	bne.n	8005a64 <ip_reass_remove_oldest_datagram+0x50>
 8005a5a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8005a5e:	88b2      	ldrh	r2, [r6, #4]
 8005a60:	4596      	cmp	lr, r2
 8005a62:	d008      	beq.n	8005a76 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8005a64:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8005a66:	b160      	cbz	r0, 8005a82 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8005a68:	7fc2      	ldrb	r2, [r0, #31]
 8005a6a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8005a6e:	4596      	cmp	lr, r2
 8005a70:	bf9c      	itt	ls
 8005a72:	4661      	movls	r1, ip
 8005a74:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	bf18      	it	ne
 8005a7c:	469c      	movne	ip, r3
 8005a7e:	4613      	mov	r3, r2
 8005a80:	e7d5      	b.n	8005a2e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8005a82:	4661      	mov	r1, ip
 8005a84:	4618      	mov	r0, r3
 8005a86:	e7f6      	b.n	8005a76 <ip_reass_remove_oldest_datagram+0x62>
 8005a88:	20000e20 	.word	0x20000e20

08005a8c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8005a8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005a8e:	4604      	mov	r4, r0
 8005a90:	b930      	cbnz	r0, 8005aa0 <ip_frag_free_pbuf_custom_ref+0x14>
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <ip_frag_free_pbuf_custom_ref+0x20>)
 8005a94:	f240 22ae 	movw	r2, #686	; 0x2ae
 8005a98:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <ip_frag_free_pbuf_custom_ref+0x24>)
 8005a9a:	4806      	ldr	r0, [pc, #24]	; (8005ab4 <ip_frag_free_pbuf_custom_ref+0x28>)
 8005a9c:	f001 fa88 	bl	8006fb0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8005aa0:	4621      	mov	r1, r4
}
 8005aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8005aa6:	2003      	movs	r0, #3
 8005aa8:	f7fe ba54 	b.w	8003f54 <memp_free>
 8005aac:	0800b2c5 	.word	0x0800b2c5
 8005ab0:	0800ad20 	.word	0x0800ad20
 8005ab4:	0800a865 	.word	0x0800a865

08005ab8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8005ab8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8005aba:	4604      	mov	r4, r0
 8005abc:	b930      	cbnz	r0, 8005acc <ipfrag_free_pbuf_custom+0x14>
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <ipfrag_free_pbuf_custom+0x28>)
 8005ac0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8005ac4:	4907      	ldr	r1, [pc, #28]	; (8005ae4 <ipfrag_free_pbuf_custom+0x2c>)
 8005ac6:	4808      	ldr	r0, [pc, #32]	; (8005ae8 <ipfrag_free_pbuf_custom+0x30>)
 8005ac8:	f001 fa72 	bl	8006fb0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8005acc:	6960      	ldr	r0, [r4, #20]
 8005ace:	b108      	cbz	r0, 8005ad4 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8005ad0:	f7fe fb92 	bl	80041f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8005ad4:	4620      	mov	r0, r4
}
 8005ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8005ada:	f7ff bfd7 	b.w	8005a8c <ip_frag_free_pbuf_custom_ref>
 8005ade:	bf00      	nop
 8005ae0:	0800b2c5 	.word	0x0800b2c5
 8005ae4:	0800b36d 	.word	0x0800b36d
 8005ae8:	0800a865 	.word	0x0800a865

08005aec <ip_reass_tmr>:
{
 8005aec:	b538      	push	{r3, r4, r5, lr}
  struct ip_reassdata *r, *prev = NULL;
 8005aee:	2400      	movs	r4, #0
  r = reassdatagrams;
 8005af0:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <ip_reass_tmr+0x28>)
 8005af2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8005af4:	b900      	cbnz	r0, 8005af8 <ip_reass_tmr+0xc>
}
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8005af8:	7fc3      	ldrb	r3, [r0, #31]
 8005afa:	6805      	ldr	r5, [r0, #0]
 8005afc:	b123      	cbz	r3, 8005b08 <ip_reass_tmr+0x1c>
      r->timer--;
 8005afe:	3b01      	subs	r3, #1
 8005b00:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8005b02:	4604      	mov	r4, r0
 8005b04:	4628      	mov	r0, r5
 8005b06:	e7f5      	b.n	8005af4 <ip_reass_tmr+0x8>
 8005b08:	4621      	mov	r1, r4
 8005b0a:	f7ff ff0f 	bl	800592c <ip_reass_free_complete_datagram>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	e7f7      	b.n	8005b02 <ip_reass_tmr+0x16>
 8005b12:	bf00      	nop
 8005b14:	20000e20 	.word	0x20000e20

08005b18 <ip4_reass>:
{
 8005b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8005b1c:	6845      	ldr	r5, [r0, #4]
{
 8005b1e:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8005b20:	782b      	ldrb	r3, [r5, #0]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	f040 8092 	bne.w	8005c50 <ip4_reass+0x138>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005b2c:	88e8      	ldrh	r0, [r5, #6]
 8005b2e:	f7fe f901 	bl	8003d34 <lwip_htons>
 8005b32:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8005b36:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005b3a:	8868      	ldrh	r0, [r5, #2]
 8005b3c:	f7fe f8fa 	bl	8003d34 <lwip_htons>
 8005b40:	782b      	ldrb	r3, [r5, #0]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005b42:	4cb3      	ldr	r4, [pc, #716]	; (8005e10 <ip4_reass+0x2f8>)
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8005b4c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8005b4e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005b50:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8005b52:	f7fe fd05 	bl	8004560 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005b56:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8005b58:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005b5a:	4403      	add	r3, r0
 8005b5c:	2b0a      	cmp	r3, #10
 8005b5e:	dc6e      	bgt.n	8005c3e <ip4_reass+0x126>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005b60:	4eac      	ldr	r6, [pc, #688]	; (8005e14 <ip4_reass+0x2fc>)
 8005b62:	6834      	ldr	r4, [r6, #0]
 8005b64:	2c00      	cmp	r4, #0
 8005b66:	d178      	bne.n	8005c5a <ip4_reass+0x142>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005b68:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8005b6c:	49aa      	ldr	r1, [pc, #680]	; (8005e18 <ip4_reass+0x300>)
 8005b6e:	2002      	movs	r0, #2
 8005b70:	f7fe f9d4 	bl	8003f1c <memp_malloc_fn>
  if (ipr == NULL) {
 8005b74:	4604      	mov	r4, r0
 8005b76:	b970      	cbnz	r0, 8005b96 <ip4_reass+0x7e>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005b78:	4651      	mov	r1, sl
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7ff ff4a 	bl	8005a14 <ip_reass_remove_oldest_datagram>
 8005b80:	4582      	cmp	sl, r0
 8005b82:	dc65      	bgt.n	8005c50 <ip4_reass+0x138>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005b84:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005b88:	49a3      	ldr	r1, [pc, #652]	; (8005e18 <ip4_reass+0x300>)
 8005b8a:	2002      	movs	r0, #2
 8005b8c:	f7fe f9c6 	bl	8003f1c <memp_malloc_fn>
    if (ipr == NULL)
 8005b90:	4604      	mov	r4, r0
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d05c      	beq.n	8005c50 <ip4_reass+0x138>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8005b96:	221c      	movs	r2, #28
 8005b98:	2100      	movs	r1, #0
 8005b9a:	1d20      	adds	r0, r4, #4
 8005b9c:	f000 fb1c 	bl	80061d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8005ba4:	6833      	ldr	r3, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005ba6:	f104 0208 	add.w	r2, r4, #8
  ipr->next = reassdatagrams;
 8005baa:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005bac:	462b      	mov	r3, r5
  reassdatagrams = ipr;
 8005bae:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005bb0:	f105 0114 	add.w	r1, r5, #20
 8005bb4:	f853 0b04 	ldr.w	r0, [r3], #4
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	f842 0b04 	str.w	r0, [r2], #4
 8005bbe:	d1f9      	bne.n	8005bb4 <ip4_reass+0x9c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8005bc0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8005bc4:	f01b 0b20 	ands.w	fp, fp, #32
 8005bc8:	d108      	bne.n	8005bdc <ip4_reass+0xc4>
    u16_t datagram_len = (u16_t)(offset + len);
 8005bca:	9b01      	ldr	r3, [sp, #4]
 8005bcc:	444b      	add	r3, r9
 8005bce:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8005bd0:	4599      	cmp	r9, r3
 8005bd2:	d83d      	bhi.n	8005c50 <ip4_reass+0x138>
 8005bd4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d839      	bhi.n	8005c50 <ip4_reass+0x138>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8005bdc:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005bde:	8868      	ldrh	r0, [r5, #2]
 8005be0:	f7fe f8a8 	bl	8003d34 <lwip_htons>
 8005be4:	f895 8000 	ldrb.w	r8, [r5]
 8005be8:	f008 080f 	and.w	r8, r8, #15
 8005bec:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005bf0:	88e8      	ldrh	r0, [r5, #6]
 8005bf2:	f7fe f89f 	bl	8003d34 <lwip_htons>
  for (q = ipr->p; q != NULL;) {
 8005bf6:	f8d4 c004 	ldr.w	ip, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005bfa:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh->next_pbuf = NULL;
 8005bfe:	2500      	movs	r5, #0
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005c00:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005c04:	00c0      	lsls	r0, r0, #3
  iprh->end = offset + len;
 8005c06:	eb08 0300 	add.w	r3, r8, r0
  for (q = ipr->p; q != NULL;) {
 8005c0a:	4662      	mov	r2, ip
  int valid = 1;
 8005c0c:	f04f 0801 	mov.w	r8, #1
  iprh = (struct ip_reass_helper*)new_p->payload;
 8005c10:	687e      	ldr	r6, [r7, #4]
  iprh->end = offset + len;
 8005c12:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8005c14:	7035      	strb	r5, [r6, #0]
 8005c16:	7075      	strb	r5, [r6, #1]
 8005c18:	70b5      	strb	r5, [r6, #2]
 8005c1a:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8005c1c:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8005c1e:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8005c20:	bb52      	cbnz	r2, 8005c78 <ip4_reass+0x160>
    if (iprh_prev != NULL) {
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	f040 8092 	bne.w	8005d4c <ip4_reass+0x234>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8005c28:	f1bc 0f00 	cmp.w	ip, #0
 8005c2c:	d07d      	beq.n	8005d2a <ip4_reass+0x212>
 8005c2e:	4b7a      	ldr	r3, [pc, #488]	; (8005e18 <ip4_reass+0x300>)
 8005c30:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8005c34:	4979      	ldr	r1, [pc, #484]	; (8005e1c <ip4_reass+0x304>)
 8005c36:	487a      	ldr	r0, [pc, #488]	; (8005e20 <ip4_reass+0x308>)
 8005c38:	f001 f9ba 	bl	8006fb0 <iprintf>
 8005c3c:	e075      	b.n	8005d2a <ip4_reass+0x212>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005c3e:	4601      	mov	r1, r0
 8005c40:	4628      	mov	r0, r5
 8005c42:	f7ff fee7 	bl	8005a14 <ip_reass_remove_oldest_datagram>
 8005c46:	b118      	cbz	r0, 8005c50 <ip4_reass+0x138>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8005c48:	8823      	ldrh	r3, [r4, #0]
 8005c4a:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005c4c:	2b0a      	cmp	r3, #10
 8005c4e:	dd87      	ble.n	8005b60 <ip4_reass+0x48>
  pbuf_free(p);
 8005c50:	4638      	mov	r0, r7
 8005c52:	f7fe fad1 	bl	80041f8 <pbuf_free>
  return NULL;
 8005c56:	2500      	movs	r5, #0
 8005c58:	e0d6      	b.n	8005e08 <ip4_reass+0x2f0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8005c5a:	68eb      	ldr	r3, [r5, #12]
 8005c5c:	6962      	ldr	r2, [r4, #20]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d108      	bne.n	8005c74 <ip4_reass+0x15c>
 8005c62:	692b      	ldr	r3, [r5, #16]
 8005c64:	69a2      	ldr	r2, [r4, #24]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d104      	bne.n	8005c74 <ip4_reass+0x15c>
 8005c6a:	89a2      	ldrh	r2, [r4, #12]
 8005c6c:	88ab      	ldrh	r3, [r5, #4]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	f000 80de 	beq.w	8005e30 <ip4_reass+0x318>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005c74:	6824      	ldr	r4, [r4, #0]
 8005c76:	e775      	b.n	8005b64 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8005c78:	f8d2 e004 	ldr.w	lr, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8005c7c:	f8be 1004 	ldrh.w	r1, [lr, #4]
 8005c80:	4288      	cmp	r0, r1
 8005c82:	d254      	bcs.n	8005d2e <ip4_reass+0x216>
      iprh->next_pbuf = q;
 8005c84:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	d04d      	beq.n	8005d26 <ip4_reass+0x20e>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8005c8a:	88ea      	ldrh	r2, [r5, #6]
 8005c8c:	4290      	cmp	r0, r2
 8005c8e:	f0c0 8091 	bcc.w	8005db4 <ip4_reass+0x29c>
 8005c92:	428b      	cmp	r3, r1
 8005c94:	f200 808e 	bhi.w	8005db4 <ip4_reass+0x29c>
        iprh_prev->next_pbuf = new_p;
 8005c98:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8005c9a:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8005c9c:	f040 80e4 	bne.w	8005e68 <ip4_reass+0x350>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005ca0:	f1bb 0f00 	cmp.w	fp, #0
 8005ca4:	d004      	beq.n	8005cb0 <ip4_reass+0x198>
 8005ca6:	7fa3      	ldrb	r3, [r4, #30]
 8005ca8:	f013 0301 	ands.w	r3, r3, #1
 8005cac:	f000 808d 	beq.w	8005dca <ip4_reass+0x2b2>
    if (valid) {
 8005cb0:	f1b8 0f00 	cmp.w	r8, #0
 8005cb4:	d159      	bne.n	8005d6a <ip4_reass+0x252>
          q = iprh->next_pbuf;
 8005cb6:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8005cba:	4e55      	ldr	r6, [pc, #340]	; (8005e10 <ip4_reass+0x2f8>)
 8005cbc:	8833      	ldrh	r3, [r6, #0]
 8005cbe:	449a      	add	sl, r3
 8005cc0:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8005cc4:	f1bb 0f00 	cmp.w	fp, #0
 8005cc8:	d107      	bne.n	8005cda <ip4_reass+0x1c2>
    u16_t datagram_len = (u16_t)(offset + len);
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005cce:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8005cd0:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8005cda:	f1b8 0f01 	cmp.w	r8, #1
 8005cde:	d1ba      	bne.n	8005c56 <ip4_reass+0x13e>
    ipr->datagram_len += IP_HLEN;
 8005ce0:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005ce2:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005cee:	f104 0308 	add.w	r3, r4, #8
 8005cf2:	462a      	mov	r2, r5
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8005cf4:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005cf6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005cfa:	428b      	cmp	r3, r1
 8005cfc:	f842 0b04 	str.w	r0, [r2], #4
 8005d00:	d1f9      	bne.n	8005cf6 <ip4_reass+0x1de>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8005d02:	8ba0      	ldrh	r0, [r4, #28]
 8005d04:	f7fe f816 	bl	8003d34 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8005d08:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8005d0a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8005d0c:	71ab      	strb	r3, [r5, #6]
 8005d0e:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8005d10:	72ab      	strb	r3, [r5, #10]
 8005d12:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8005d14:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d159      	bne.n	8005dce <ip4_reass+0x2b6>
    if (ipr == reassdatagrams) {
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <ip4_reass+0x2fc>)
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	428c      	cmp	r4, r1
 8005d20:	d167      	bne.n	8005df2 <ip4_reass+0x2da>
      ipr_prev = NULL;
 8005d22:	4639      	mov	r1, r7
 8005d24:	e067      	b.n	8005df6 <ip4_reass+0x2de>
        if (iprh->end > iprh_tmp->start) {
 8005d26:	428b      	cmp	r3, r1
 8005d28:	d844      	bhi.n	8005db4 <ip4_reass+0x29c>
      ipr->p = new_p;
 8005d2a:	6067      	str	r7, [r4, #4]
 8005d2c:	e7b8      	b.n	8005ca0 <ip4_reass+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8005d2e:	d041      	beq.n	8005db4 <ip4_reass+0x29c>
    } else if (iprh->start < iprh_tmp->end) {
 8005d30:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8005d34:	4282      	cmp	r2, r0
 8005d36:	d83d      	bhi.n	8005db4 <ip4_reass+0x29c>
      if (iprh_prev != NULL) {
 8005d38:	b125      	cbz	r5, 8005d44 <ip4_reass+0x22c>
        if (iprh_prev->end != iprh_tmp->start) {
 8005d3a:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8005d3c:	428a      	cmp	r2, r1
 8005d3e:	bf18      	it	ne
 8005d40:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8005d44:	f8de 2000 	ldr.w	r2, [lr]
 8005d48:	4675      	mov	r5, lr
 8005d4a:	e769      	b.n	8005c20 <ip4_reass+0x108>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8005d4c:	88eb      	ldrh	r3, [r5, #6]
 8005d4e:	4283      	cmp	r3, r0
 8005d50:	d906      	bls.n	8005d60 <ip4_reass+0x248>
 8005d52:	4b31      	ldr	r3, [pc, #196]	; (8005e18 <ip4_reass+0x300>)
 8005d54:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005d58:	4932      	ldr	r1, [pc, #200]	; (8005e24 <ip4_reass+0x30c>)
 8005d5a:	4831      	ldr	r0, [pc, #196]	; (8005e20 <ip4_reass+0x308>)
 8005d5c:	f001 f928 	bl	8006fb0 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8005d60:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8005d62:	88ea      	ldrh	r2, [r5, #6]
 8005d64:	88b3      	ldrh	r3, [r6, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	e798      	b.n	8005c9c <ip4_reass+0x184>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0a2      	beq.n	8005cb6 <ip4_reass+0x19e>
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	888b      	ldrh	r3, [r1, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d19e      	bne.n	8005cb6 <ip4_reass+0x19e>
        q = iprh->next_pbuf;
 8005d78:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8005d7a:	b99b      	cbnz	r3, 8005da4 <ip4_reass+0x28c>
          LWIP_ASSERT("sanity check",
 8005d7c:	42b1      	cmp	r1, r6
 8005d7e:	d106      	bne.n	8005d8e <ip4_reass+0x276>
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <ip4_reass+0x300>)
 8005d82:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005d86:	4928      	ldr	r1, [pc, #160]	; (8005e28 <ip4_reass+0x310>)
 8005d88:	4825      	ldr	r0, [pc, #148]	; (8005e20 <ip4_reass+0x308>)
 8005d8a:	f001 f911 	bl	8006fb0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8005d8e:	6833      	ldr	r3, [r6, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d092      	beq.n	8005cba <ip4_reass+0x1a2>
 8005d94:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <ip4_reass+0x300>)
 8005d96:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8005d9a:	4924      	ldr	r1, [pc, #144]	; (8005e2c <ip4_reass+0x314>)
 8005d9c:	4820      	ldr	r0, [pc, #128]	; (8005e20 <ip4_reass+0x308>)
 8005d9e:	f001 f907 	bl	8006fb0 <iprintf>
 8005da2:	e78a      	b.n	8005cba <ip4_reass+0x1a2>
          iprh = (struct ip_reass_helper*)q->payload;
 8005da4:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8005da6:	88f0      	ldrh	r0, [r6, #6]
 8005da8:	8893      	ldrh	r3, [r2, #4]
 8005daa:	4298      	cmp	r0, r3
 8005dac:	d183      	bne.n	8005cb6 <ip4_reass+0x19e>
          q = iprh->next_pbuf;
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	4616      	mov	r6, r2
 8005db2:	e7e2      	b.n	8005d7a <ip4_reass+0x262>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7fe fbd3 	bl	8004560 <pbuf_clen>
 8005dba:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <ip4_reass+0x2f8>)
 8005dbc:	8813      	ldrh	r3, [r2, #0]
 8005dbe:	1a18      	subs	r0, r3, r0
 8005dc0:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f7fe fa18 	bl	80041f8 <pbuf_free>
 8005dc8:	e742      	b.n	8005c50 <ip4_reass+0x138>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8005dca:	4698      	mov	r8, r3
 8005dcc:	e775      	b.n	8005cba <ip4_reass+0x1a2>
      iprh = (struct ip_reass_helper*)r->payload;
 8005dce:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8005dd2:	f06f 0113 	mvn.w	r1, #19
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	f7fe fa08 	bl	80041ec <pbuf_header>
      pbuf_cat(p, r);
 8005ddc:	4639      	mov	r1, r7
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7fe fbda 	bl	8004598 <pbuf_cat>
      r = iprh->next_pbuf;
 8005de4:	f8d8 7000 	ldr.w	r7, [r8]
 8005de8:	e795      	b.n	8005d16 <ip4_reass+0x1fe>
        if (ipr_prev->next == ipr) {
 8005dea:	680b      	ldr	r3, [r1, #0]
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d002      	beq.n	8005df6 <ip4_reass+0x2de>
 8005df0:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8005df2:	2900      	cmp	r1, #0
 8005df4:	d1f9      	bne.n	8005dea <ip4_reass+0x2d2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8005df6:	4620      	mov	r0, r4
 8005df8:	f7ff fd76 	bl	80058e8 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f7fe fbaf 	bl	8004560 <pbuf_clen>
 8005e02:	8833      	ldrh	r3, [r6, #0]
 8005e04:	1a18      	subs	r0, r3, r0
 8005e06:	8030      	strh	r0, [r6, #0]
}
 8005e08:	4628      	mov	r0, r5
 8005e0a:	b003      	add	sp, #12
 8005e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e10:	20000e1c 	.word	0x20000e1c
 8005e14:	20000e20 	.word	0x20000e20
 8005e18:	0800b2c5 	.word	0x0800b2c5
 8005e1c:	0800b25f 	.word	0x0800b25f
 8005e20:	0800a865 	.word	0x0800a865
 8005e24:	0800b241 	.word	0x0800b241
 8005e28:	0800b296 	.word	0x0800b296
 8005e2c:	0800b2a3 	.word	0x0800b2a3
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005e30:	88e8      	ldrh	r0, [r5, #6]
 8005e32:	f7fd ff7f 	bl	8003d34 <lwip_htons>
 8005e36:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f47f aec0 	bne.w	8005bc0 <ip4_reass+0xa8>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005e40:	89e0      	ldrh	r0, [r4, #14]
 8005e42:	f7fd ff77 	bl	8003d34 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005e46:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	f43f aeb8 	beq.w	8005bc0 <ip4_reass+0xa8>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005e50:	462b      	mov	r3, r5
 8005e52:	f104 0208 	add.w	r2, r4, #8
 8005e56:	f105 0114 	add.w	r1, r5, #20
 8005e5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e5e:	428b      	cmp	r3, r1
 8005e60:	f842 0b04 	str.w	r0, [r2], #4
 8005e64:	d1f9      	bne.n	8005e5a <ip4_reass+0x342>
 8005e66:	e6ab      	b.n	8005bc0 <ip4_reass+0xa8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005e68:	f1bb 0f00 	cmp.w	fp, #0
 8005e6c:	f43f af23 	beq.w	8005cb6 <ip4_reass+0x19e>
 8005e70:	f04f 0800 	mov.w	r8, #0
 8005e74:	e717      	b.n	8005ca6 <ip4_reass+0x18e>
 8005e76:	bf00      	nop

08005e78 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005e78:	2308      	movs	r3, #8
{
 8005e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005e7e:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
{
 8005e82:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005e84:	f1a8 0814 	sub.w	r8, r8, #20
 8005e88:	fb98 f8f3 	sdiv	r8, r8, r3
 8005e8c:	fa1f f388 	uxth.w	r3, r8
 8005e90:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8005e92:	6843      	ldr	r3, [r0, #4]
{
 8005e94:	4607      	mov	r7, r0
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8005e96:	781e      	ldrb	r6, [r3, #0]
{
 8005e98:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8005e9a:	f006 060f 	and.w	r6, r6, #15
 8005e9e:	00b6      	lsls	r6, r6, #2
 8005ea0:	2e14      	cmp	r6, #20
{
 8005ea2:	9208      	str	r2, [sp, #32]
  original_iphdr = (struct ip_hdr *)p->payload;
 8005ea4:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8005ea6:	d00b      	beq.n	8005ec0 <ip4_frag+0x48>
 8005ea8:	f240 22e1 	movw	r2, #737	; 0x2e1
 8005eac:	4b5b      	ldr	r3, [pc, #364]	; (800601c <ip4_frag+0x1a4>)
 8005eae:	495c      	ldr	r1, [pc, #368]	; (8006020 <ip4_frag+0x1a8>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005eb0:	485c      	ldr	r0, [pc, #368]	; (8006024 <ip4_frag+0x1ac>)
 8005eb2:	f001 f87d 	bl	8006fb0 <iprintf>
 8005eb6:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8005eba:	b00b      	add	sp, #44	; 0x2c
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8005ec0:	9b02      	ldr	r3, [sp, #8]
 8005ec2:	88d8      	ldrh	r0, [r3, #6]
 8005ec4:	f7fd ff36 	bl	8003d34 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8005ec8:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005ecc:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8005ed0:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005ed2:	d004      	beq.n	8005ede <ip4_frag+0x66>
 8005ed4:	4b51      	ldr	r3, [pc, #324]	; (800601c <ip4_frag+0x1a4>)
 8005ed6:	f240 22e6 	movw	r2, #742	; 0x2e6
 8005eda:	4953      	ldr	r1, [pc, #332]	; (8006028 <ip4_frag+0x1b0>)
 8005edc:	e7e8      	b.n	8005eb0 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8005ede:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8005ee0:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8005ee4:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8005ee6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8005eea:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8005eec:	9306      	str	r3, [sp, #24]
  while (left) {
 8005eee:	b90d      	cbnz	r5, 8005ef4 <ip4_frag+0x7c>
  return ERR_OK;
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	e7e2      	b.n	8005eba <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8005ef4:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005ef6:	2200      	movs	r2, #0
    fragsize = LWIP_MIN(left, nfb * 8);
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	bfa8      	it	ge
 8005efc:	462b      	movge	r3, r5
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005efe:	2114      	movs	r1, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8005f00:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005f02:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8005f04:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005f06:	f7fe f9d9 	bl	80042bc <pbuf_alloc>
    if (rambuf == NULL) {
 8005f0a:	4680      	mov	r8, r0
 8005f0c:	b388      	cbz	r0, 8005f72 <ip4_frag+0xfa>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	2b13      	cmp	r3, #19
 8005f12:	d806      	bhi.n	8005f22 <ip4_frag+0xaa>
 8005f14:	4b41      	ldr	r3, [pc, #260]	; (800601c <ip4_frag+0x1a4>)
 8005f16:	f240 3209 	movw	r2, #777	; 0x309
 8005f1a:	4944      	ldr	r1, [pc, #272]	; (800602c <ip4_frag+0x1b4>)
 8005f1c:	4841      	ldr	r0, [pc, #260]	; (8006024 <ip4_frag+0x1ac>)
 8005f1e:	f001 f847 	bl	8006fb0 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8005f22:	9b02      	ldr	r3, [sp, #8]
 8005f24:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	3114      	adds	r1, #20
 8005f2c:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f30:	428b      	cmp	r3, r1
 8005f32:	f842 0b04 	str.w	r0, [r2], #4
 8005f36:	d1f9      	bne.n	8005f2c <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005f38:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8005f3c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005f40:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8005f42:	f1b9 0f00 	cmp.w	r9, #0
 8005f46:	d03a      	beq.n	8005fbe <ip4_frag+0x146>
      u16_t plen = p->len - poff;
 8005f48:	897c      	ldrh	r4, [r7, #10]
 8005f4a:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8005f4c:	b2a4      	uxth	r4, r4
 8005f4e:	454c      	cmp	r4, r9
 8005f50:	bf28      	it	cs
 8005f52:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8005f54:	b914      	cbnz	r4, 8005f5c <ip4_frag+0xe4>
        p = p->next;
 8005f56:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8005f58:	2600      	movs	r6, #0
 8005f5a:	e7f2      	b.n	8005f42 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8005f5c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005f60:	492e      	ldr	r1, [pc, #184]	; (800601c <ip4_frag+0x1a4>)
 8005f62:	2003      	movs	r0, #3
 8005f64:	f7fd ffda 	bl	8003f1c <memp_malloc_fn>
      if (pcr == NULL) {
 8005f68:	4682      	mov	sl, r0
 8005f6a:	b928      	cbnz	r0, 8005f78 <ip4_frag+0x100>
        pbuf_free(rambuf);
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	f7fe f943 	bl	80041f8 <pbuf_free>
  return ERR_MEM;
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	e7a0      	b.n	8005eba <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8005f78:	9401      	str	r4, [sp, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	4433      	add	r3, r6
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	4621      	mov	r1, r4
 8005f84:	4603      	mov	r3, r0
 8005f86:	2004      	movs	r0, #4
 8005f88:	f7fe f8f8 	bl	800417c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8005f8c:	b918      	cbnz	r0, 8005f96 <ip4_frag+0x11e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8005f8e:	4650      	mov	r0, sl
 8005f90:	f7ff fd7c 	bl	8005a8c <ip_frag_free_pbuf_custom_ref>
 8005f94:	e7ea      	b.n	8005f6c <ip4_frag+0xf4>
 8005f96:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f7fe fae9 	bl	8004570 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <ip4_frag+0x1b8>)
      left_to_copy -= newpbuflen;
 8005fa0:	eba9 0904 	sub.w	r9, r9, r4
      pcr->original = p;
 8005fa4:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005fa8:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8005fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fae:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8005fb0:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8005fb4:	f7fe faf0 	bl	8004598 <pbuf_cat>
      if (left_to_copy) {
 8005fb8:	f1b9 0f00 	cmp.w	r9, #0
 8005fbc:	d1cb      	bne.n	8005f56 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8005fbe:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 8005fc0:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8005fc2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8005fc6:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 8005fca:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 8005fcc:	3b13      	subs	r3, #19
    if (!last) {
 8005fce:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8005fd0:	bfa8      	it	ge
 8005fd2:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8005fd6:	f7fd fead 	bl	8003d34 <lwip_htons>
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	f103 0014 	add.w	r0, r3, #20
 8005fe4:	b280      	uxth	r0, r0
 8005fe6:	f7fd fea5 	bl	8003d34 <lwip_htons>
 8005fea:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8005fec:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8005fee:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8005ff0:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8005ff2:	4641      	mov	r1, r8
    IPH_CHKSUM_SET(iphdr, 0);
 8005ff4:	7293      	strb	r3, [r2, #10]
 8005ff6:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005ffe:	9a08      	ldr	r2, [sp, #32]
 8006000:	4798      	blx	r3
    pbuf_free(rambuf);
 8006002:	4640      	mov	r0, r8
 8006004:	f7fe f8f8 	bl	80041f8 <pbuf_free>
    left -= fragsize;
 8006008:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800600a:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 800600c:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800600e:	9b04      	ldr	r3, [sp, #16]
    left -= fragsize;
 8006010:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8006012:	4413      	add	r3, r2
 8006014:	b29b      	uxth	r3, r3
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	e769      	b.n	8005eee <ip4_frag+0x76>
 800601a:	bf00      	nop
 800601c:	0800b2c5 	.word	0x0800b2c5
 8006020:	0800b1e0 	.word	0x0800b1e0
 8006024:	0800a865 	.word	0x0800a865
 8006028:	0800b207 	.word	0x0800b207
 800602c:	0800b221 	.word	0x0800b221
 8006030:	08005ab9 	.word	0x08005ab9

08006034 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8006034:	8943      	ldrh	r3, [r0, #10]
{
 8006036:	b570      	push	{r4, r5, r6, lr}
  if (p->len <= SIZEOF_ETH_HDR) {
 8006038:	2b0e      	cmp	r3, #14
{
 800603a:	4604      	mov	r4, r0
 800603c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800603e:	d914      	bls.n	800606a <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8006040:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8006042:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8006044:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8006046:	07d9      	lsls	r1, r3, #31
 8006048:	d50a      	bpl.n	8006060 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800604a:	2b01      	cmp	r3, #1
 800604c:	d111      	bne.n	8006072 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800604e:	7843      	ldrb	r3, [r0, #1]
 8006050:	b933      	cbnz	r3, 8006060 <ethernet_input+0x2c>
 8006052:	7883      	ldrb	r3, [r0, #2]
 8006054:	2b5e      	cmp	r3, #94	; 0x5e
 8006056:	d103      	bne.n	8006060 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8006058:	7b63      	ldrb	r3, [r4, #13]
 800605a:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800605e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8006060:	2e08      	cmp	r6, #8
 8006062:	d010      	beq.n	8006086 <ethernet_input+0x52>
 8006064:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8006068:	d01e      	beq.n	80060a8 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800606a:	4620      	mov	r0, r4
 800606c:	f7fe f8c4 	bl	80041f8 <pbuf_free>
  return ERR_OK;
 8006070:	e018      	b.n	80060a4 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8006072:	2206      	movs	r2, #6
 8006074:	4914      	ldr	r1, [pc, #80]	; (80060c8 <ethernet_input+0x94>)
 8006076:	f000 f895 	bl	80061a4 <memcmp>
 800607a:	2800      	cmp	r0, #0
 800607c:	d1f0      	bne.n	8006060 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800607e:	7b63      	ldrb	r3, [r4, #13]
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	e7eb      	b.n	800605e <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8006086:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800608a:	071a      	lsls	r2, r3, #28
 800608c:	d5ed      	bpl.n	800606a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800608e:	f06f 010d 	mvn.w	r1, #13
 8006092:	4620      	mov	r0, r4
 8006094:	f7fe f8aa 	bl	80041ec <pbuf_header>
 8006098:	2800      	cmp	r0, #0
 800609a:	d1e6      	bne.n	800606a <ethernet_input+0x36>
        ip4_input(p, netif);
 800609c:	4629      	mov	r1, r5
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff fab8 	bl	8005614 <ip4_input>
}
 80060a4:	2000      	movs	r0, #0
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80060a8:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80060ac:	071b      	lsls	r3, r3, #28
 80060ae:	d5dc      	bpl.n	800606a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80060b0:	f06f 010d 	mvn.w	r1, #13
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7fe f899 	bl	80041ec <pbuf_header>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d1d5      	bne.n	800606a <ethernet_input+0x36>
        etharp_input(p, netif);
 80060be:	4629      	mov	r1, r5
 80060c0:	4620      	mov	r0, r4
 80060c2:	f7fe ff2b 	bl	8004f1c <etharp_input>
      break;
 80060c6:	e7ed      	b.n	80060a4 <ethernet_input+0x70>
 80060c8:	0800b379 	.word	0x0800b379

080060cc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80060d2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 80060d6:	460d      	mov	r5, r1
 80060d8:	4616      	mov	r6, r2
 80060da:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80060dc:	f7fd fe2a 	bl	8003d34 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80060e0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80060e2:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7fe f881 	bl	80041ec <pbuf_header>
 80060ea:	b9e0      	cbnz	r0, 8006126 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80060ec:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 80060ee:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	600b      	str	r3, [r1, #0]
 80060f6:	88bb      	ldrh	r3, [r7, #4]
 80060f8:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 80060fa:	6833      	ldr	r3, [r6, #0]
 80060fc:	f8c1 3006 	str.w	r3, [r1, #6]
 8006100:	88b3      	ldrh	r3, [r6, #4]
 8006102:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8006104:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006108:	2b06      	cmp	r3, #6
 800610a:	d006      	beq.n	800611a <ethernet_output+0x4e>
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <ethernet_output+0x64>)
 800610e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006112:	4908      	ldr	r1, [pc, #32]	; (8006134 <ethernet_output+0x68>)
 8006114:	4808      	ldr	r0, [pc, #32]	; (8006138 <ethernet_output+0x6c>)
 8006116:	f000 ff4b 	bl	8006fb0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800611a:	69a3      	ldr	r3, [r4, #24]
 800611c:	4629      	mov	r1, r5
 800611e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8006120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8006124:	4718      	bx	r3
}
 8006126:	f06f 0001 	mvn.w	r0, #1
 800612a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800612e:	bf00      	nop
 8006130:	0800b37f 	.word	0x0800b37f
 8006134:	0800b3b4 	.word	0x0800b3b4
 8006138:	0800a865 	.word	0x0800a865

0800613c <__libc_init_array>:
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	2500      	movs	r5, #0
 8006140:	4e0c      	ldr	r6, [pc, #48]	; (8006174 <__libc_init_array+0x38>)
 8006142:	4c0d      	ldr	r4, [pc, #52]	; (8006178 <__libc_init_array+0x3c>)
 8006144:	1ba4      	subs	r4, r4, r6
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	42a5      	cmp	r5, r4
 800614a:	d109      	bne.n	8006160 <__libc_init_array+0x24>
 800614c:	f004 fa88 	bl	800a660 <_init>
 8006150:	2500      	movs	r5, #0
 8006152:	4e0a      	ldr	r6, [pc, #40]	; (800617c <__libc_init_array+0x40>)
 8006154:	4c0a      	ldr	r4, [pc, #40]	; (8006180 <__libc_init_array+0x44>)
 8006156:	1ba4      	subs	r4, r4, r6
 8006158:	10a4      	asrs	r4, r4, #2
 800615a:	42a5      	cmp	r5, r4
 800615c:	d105      	bne.n	800616a <__libc_init_array+0x2e>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006164:	4798      	blx	r3
 8006166:	3501      	adds	r5, #1
 8006168:	e7ee      	b.n	8006148 <__libc_init_array+0xc>
 800616a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800616e:	4798      	blx	r3
 8006170:	3501      	adds	r5, #1
 8006172:	e7f2      	b.n	800615a <__libc_init_array+0x1e>
 8006174:	0800b708 	.word	0x0800b708
 8006178:	0800b708 	.word	0x0800b708
 800617c:	0800b708 	.word	0x0800b708
 8006180:	0800b70c 	.word	0x0800b70c

08006184 <malloc>:
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <malloc+0xc>)
 8006186:	4601      	mov	r1, r0
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f000 b887 	b.w	800629c <_malloc_r>
 800618e:	bf00      	nop
 8006190:	20000010 	.word	0x20000010

08006194 <free>:
 8006194:	4b02      	ldr	r3, [pc, #8]	; (80061a0 <free+0xc>)
 8006196:	4601      	mov	r1, r0
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f000 b833 	b.w	8006204 <_free_r>
 800619e:	bf00      	nop
 80061a0:	20000010 	.word	0x20000010

080061a4 <memcmp>:
 80061a4:	b530      	push	{r4, r5, lr}
 80061a6:	2400      	movs	r4, #0
 80061a8:	42a2      	cmp	r2, r4
 80061aa:	d101      	bne.n	80061b0 <memcmp+0xc>
 80061ac:	2000      	movs	r0, #0
 80061ae:	e007      	b.n	80061c0 <memcmp+0x1c>
 80061b0:	5d03      	ldrb	r3, [r0, r4]
 80061b2:	3401      	adds	r4, #1
 80061b4:	190d      	adds	r5, r1, r4
 80061b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	d0f4      	beq.n	80061a8 <memcmp+0x4>
 80061be:	1b58      	subs	r0, r3, r5
 80061c0:	bd30      	pop	{r4, r5, pc}

080061c2 <memcpy>:
 80061c2:	b510      	push	{r4, lr}
 80061c4:	1e43      	subs	r3, r0, #1
 80061c6:	440a      	add	r2, r1
 80061c8:	4291      	cmp	r1, r2
 80061ca:	d100      	bne.n	80061ce <memcpy+0xc>
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d6:	e7f7      	b.n	80061c8 <memcpy+0x6>

080061d8 <memset>:
 80061d8:	4603      	mov	r3, r0
 80061da:	4402      	add	r2, r0
 80061dc:	4293      	cmp	r3, r2
 80061de:	d100      	bne.n	80061e2 <memset+0xa>
 80061e0:	4770      	bx	lr
 80061e2:	f803 1b01 	strb.w	r1, [r3], #1
 80061e6:	e7f9      	b.n	80061dc <memset+0x4>

080061e8 <_calloc_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	fb02 f401 	mul.w	r4, r2, r1
 80061ee:	4621      	mov	r1, r4
 80061f0:	f000 f854 	bl	800629c <_malloc_r>
 80061f4:	4605      	mov	r5, r0
 80061f6:	b118      	cbz	r0, 8006200 <_calloc_r+0x18>
 80061f8:	4622      	mov	r2, r4
 80061fa:	2100      	movs	r1, #0
 80061fc:	f7ff ffec 	bl	80061d8 <memset>
 8006200:	4628      	mov	r0, r5
 8006202:	bd38      	pop	{r3, r4, r5, pc}

08006204 <_free_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4605      	mov	r5, r0
 8006208:	2900      	cmp	r1, #0
 800620a:	d043      	beq.n	8006294 <_free_r+0x90>
 800620c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006210:	1f0c      	subs	r4, r1, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	bfb8      	it	lt
 8006216:	18e4      	addlt	r4, r4, r3
 8006218:	f003 fa98 	bl	800974c <__malloc_lock>
 800621c:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <_free_r+0x94>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	4610      	mov	r0, r2
 8006222:	b933      	cbnz	r3, 8006232 <_free_r+0x2e>
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	6014      	str	r4, [r2, #0]
 8006228:	4628      	mov	r0, r5
 800622a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800622e:	f003 ba8e 	b.w	800974e <__malloc_unlock>
 8006232:	42a3      	cmp	r3, r4
 8006234:	d90b      	bls.n	800624e <_free_r+0x4a>
 8006236:	6821      	ldr	r1, [r4, #0]
 8006238:	1862      	adds	r2, r4, r1
 800623a:	4293      	cmp	r3, r2
 800623c:	bf01      	itttt	eq
 800623e:	681a      	ldreq	r2, [r3, #0]
 8006240:	685b      	ldreq	r3, [r3, #4]
 8006242:	1852      	addeq	r2, r2, r1
 8006244:	6022      	streq	r2, [r4, #0]
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6004      	str	r4, [r0, #0]
 800624a:	e7ed      	b.n	8006228 <_free_r+0x24>
 800624c:	4613      	mov	r3, r2
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	b10a      	cbz	r2, 8006256 <_free_r+0x52>
 8006252:	42a2      	cmp	r2, r4
 8006254:	d9fa      	bls.n	800624c <_free_r+0x48>
 8006256:	6819      	ldr	r1, [r3, #0]
 8006258:	1858      	adds	r0, r3, r1
 800625a:	42a0      	cmp	r0, r4
 800625c:	d10b      	bne.n	8006276 <_free_r+0x72>
 800625e:	6820      	ldr	r0, [r4, #0]
 8006260:	4401      	add	r1, r0
 8006262:	1858      	adds	r0, r3, r1
 8006264:	4282      	cmp	r2, r0
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	d1de      	bne.n	8006228 <_free_r+0x24>
 800626a:	6810      	ldr	r0, [r2, #0]
 800626c:	6852      	ldr	r2, [r2, #4]
 800626e:	4401      	add	r1, r0
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	605a      	str	r2, [r3, #4]
 8006274:	e7d8      	b.n	8006228 <_free_r+0x24>
 8006276:	d902      	bls.n	800627e <_free_r+0x7a>
 8006278:	230c      	movs	r3, #12
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	e7d4      	b.n	8006228 <_free_r+0x24>
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	1821      	adds	r1, r4, r0
 8006282:	428a      	cmp	r2, r1
 8006284:	bf01      	itttt	eq
 8006286:	6811      	ldreq	r1, [r2, #0]
 8006288:	6852      	ldreq	r2, [r2, #4]
 800628a:	1809      	addeq	r1, r1, r0
 800628c:	6021      	streq	r1, [r4, #0]
 800628e:	6062      	str	r2, [r4, #4]
 8006290:	605c      	str	r4, [r3, #4]
 8006292:	e7c9      	b.n	8006228 <_free_r+0x24>
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	bf00      	nop
 8006298:	20000e24 	.word	0x20000e24

0800629c <_malloc_r>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	1ccd      	adds	r5, r1, #3
 80062a0:	f025 0503 	bic.w	r5, r5, #3
 80062a4:	3508      	adds	r5, #8
 80062a6:	2d0c      	cmp	r5, #12
 80062a8:	bf38      	it	cc
 80062aa:	250c      	movcc	r5, #12
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	4606      	mov	r6, r0
 80062b0:	db01      	blt.n	80062b6 <_malloc_r+0x1a>
 80062b2:	42a9      	cmp	r1, r5
 80062b4:	d903      	bls.n	80062be <_malloc_r+0x22>
 80062b6:	230c      	movs	r3, #12
 80062b8:	6033      	str	r3, [r6, #0]
 80062ba:	2000      	movs	r0, #0
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	f003 fa45 	bl	800974c <__malloc_lock>
 80062c2:	4a21      	ldr	r2, [pc, #132]	; (8006348 <_malloc_r+0xac>)
 80062c4:	6814      	ldr	r4, [r2, #0]
 80062c6:	4621      	mov	r1, r4
 80062c8:	b991      	cbnz	r1, 80062f0 <_malloc_r+0x54>
 80062ca:	4c20      	ldr	r4, [pc, #128]	; (800634c <_malloc_r+0xb0>)
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	b91b      	cbnz	r3, 80062d8 <_malloc_r+0x3c>
 80062d0:	4630      	mov	r0, r6
 80062d2:	f000 fee9 	bl	80070a8 <_sbrk_r>
 80062d6:	6020      	str	r0, [r4, #0]
 80062d8:	4629      	mov	r1, r5
 80062da:	4630      	mov	r0, r6
 80062dc:	f000 fee4 	bl	80070a8 <_sbrk_r>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d124      	bne.n	800632e <_malloc_r+0x92>
 80062e4:	230c      	movs	r3, #12
 80062e6:	4630      	mov	r0, r6
 80062e8:	6033      	str	r3, [r6, #0]
 80062ea:	f003 fa30 	bl	800974e <__malloc_unlock>
 80062ee:	e7e4      	b.n	80062ba <_malloc_r+0x1e>
 80062f0:	680b      	ldr	r3, [r1, #0]
 80062f2:	1b5b      	subs	r3, r3, r5
 80062f4:	d418      	bmi.n	8006328 <_malloc_r+0x8c>
 80062f6:	2b0b      	cmp	r3, #11
 80062f8:	d90f      	bls.n	800631a <_malloc_r+0x7e>
 80062fa:	600b      	str	r3, [r1, #0]
 80062fc:	18cc      	adds	r4, r1, r3
 80062fe:	50cd      	str	r5, [r1, r3]
 8006300:	4630      	mov	r0, r6
 8006302:	f003 fa24 	bl	800974e <__malloc_unlock>
 8006306:	f104 000b 	add.w	r0, r4, #11
 800630a:	1d23      	adds	r3, r4, #4
 800630c:	f020 0007 	bic.w	r0, r0, #7
 8006310:	1ac3      	subs	r3, r0, r3
 8006312:	d0d3      	beq.n	80062bc <_malloc_r+0x20>
 8006314:	425a      	negs	r2, r3
 8006316:	50e2      	str	r2, [r4, r3]
 8006318:	e7d0      	b.n	80062bc <_malloc_r+0x20>
 800631a:	684b      	ldr	r3, [r1, #4]
 800631c:	428c      	cmp	r4, r1
 800631e:	bf16      	itet	ne
 8006320:	6063      	strne	r3, [r4, #4]
 8006322:	6013      	streq	r3, [r2, #0]
 8006324:	460c      	movne	r4, r1
 8006326:	e7eb      	b.n	8006300 <_malloc_r+0x64>
 8006328:	460c      	mov	r4, r1
 800632a:	6849      	ldr	r1, [r1, #4]
 800632c:	e7cc      	b.n	80062c8 <_malloc_r+0x2c>
 800632e:	1cc4      	adds	r4, r0, #3
 8006330:	f024 0403 	bic.w	r4, r4, #3
 8006334:	42a0      	cmp	r0, r4
 8006336:	d005      	beq.n	8006344 <_malloc_r+0xa8>
 8006338:	1a21      	subs	r1, r4, r0
 800633a:	4630      	mov	r0, r6
 800633c:	f000 feb4 	bl	80070a8 <_sbrk_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d0cf      	beq.n	80062e4 <_malloc_r+0x48>
 8006344:	6025      	str	r5, [r4, #0]
 8006346:	e7db      	b.n	8006300 <_malloc_r+0x64>
 8006348:	20000e24 	.word	0x20000e24
 800634c:	20000e28 	.word	0x20000e28

08006350 <__cvt>:
 8006350:	2b00      	cmp	r3, #0
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	461e      	mov	r6, r3
 8006358:	bfbb      	ittet	lt
 800635a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800635e:	461e      	movlt	r6, r3
 8006360:	2300      	movge	r3, #0
 8006362:	232d      	movlt	r3, #45	; 0x2d
 8006364:	b088      	sub	sp, #32
 8006366:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006368:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800636c:	f027 0720 	bic.w	r7, r7, #32
 8006370:	2f46      	cmp	r7, #70	; 0x46
 8006372:	4614      	mov	r4, r2
 8006374:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006376:	700b      	strb	r3, [r1, #0]
 8006378:	d004      	beq.n	8006384 <__cvt+0x34>
 800637a:	2f45      	cmp	r7, #69	; 0x45
 800637c:	d100      	bne.n	8006380 <__cvt+0x30>
 800637e:	3501      	adds	r5, #1
 8006380:	2302      	movs	r3, #2
 8006382:	e000      	b.n	8006386 <__cvt+0x36>
 8006384:	2303      	movs	r3, #3
 8006386:	aa07      	add	r2, sp, #28
 8006388:	9204      	str	r2, [sp, #16]
 800638a:	aa06      	add	r2, sp, #24
 800638c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006390:	e9cd 3500 	strd	r3, r5, [sp]
 8006394:	4622      	mov	r2, r4
 8006396:	4633      	mov	r3, r6
 8006398:	f001 feea 	bl	8008170 <_dtoa_r>
 800639c:	2f47      	cmp	r7, #71	; 0x47
 800639e:	4680      	mov	r8, r0
 80063a0:	d102      	bne.n	80063a8 <__cvt+0x58>
 80063a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063a4:	07db      	lsls	r3, r3, #31
 80063a6:	d526      	bpl.n	80063f6 <__cvt+0xa6>
 80063a8:	2f46      	cmp	r7, #70	; 0x46
 80063aa:	eb08 0905 	add.w	r9, r8, r5
 80063ae:	d111      	bne.n	80063d4 <__cvt+0x84>
 80063b0:	f898 3000 	ldrb.w	r3, [r8]
 80063b4:	2b30      	cmp	r3, #48	; 0x30
 80063b6:	d10a      	bne.n	80063ce <__cvt+0x7e>
 80063b8:	2200      	movs	r2, #0
 80063ba:	2300      	movs	r3, #0
 80063bc:	4620      	mov	r0, r4
 80063be:	4631      	mov	r1, r6
 80063c0:	f7fa fb5e 	bl	8000a80 <__aeabi_dcmpeq>
 80063c4:	b918      	cbnz	r0, 80063ce <__cvt+0x7e>
 80063c6:	f1c5 0501 	rsb	r5, r5, #1
 80063ca:	f8ca 5000 	str.w	r5, [sl]
 80063ce:	f8da 3000 	ldr.w	r3, [sl]
 80063d2:	4499      	add	r9, r3
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	4620      	mov	r0, r4
 80063da:	4631      	mov	r1, r6
 80063dc:	f7fa fb50 	bl	8000a80 <__aeabi_dcmpeq>
 80063e0:	b938      	cbnz	r0, 80063f2 <__cvt+0xa2>
 80063e2:	2230      	movs	r2, #48	; 0x30
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	454b      	cmp	r3, r9
 80063e8:	d205      	bcs.n	80063f6 <__cvt+0xa6>
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	9107      	str	r1, [sp, #28]
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e7f8      	b.n	80063e4 <__cvt+0x94>
 80063f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80063f6:	4640      	mov	r0, r8
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063fc:	eba3 0308 	sub.w	r3, r3, r8
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	b008      	add	sp, #32
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006408 <__exponent>:
 8006408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640a:	2900      	cmp	r1, #0
 800640c:	bfb4      	ite	lt
 800640e:	232d      	movlt	r3, #45	; 0x2d
 8006410:	232b      	movge	r3, #43	; 0x2b
 8006412:	4604      	mov	r4, r0
 8006414:	bfb8      	it	lt
 8006416:	4249      	neglt	r1, r1
 8006418:	2909      	cmp	r1, #9
 800641a:	f804 2b02 	strb.w	r2, [r4], #2
 800641e:	7043      	strb	r3, [r0, #1]
 8006420:	dd21      	ble.n	8006466 <__exponent+0x5e>
 8006422:	f10d 0307 	add.w	r3, sp, #7
 8006426:	461f      	mov	r7, r3
 8006428:	260a      	movs	r6, #10
 800642a:	fb91 f5f6 	sdiv	r5, r1, r6
 800642e:	fb06 1115 	mls	r1, r6, r5, r1
 8006432:	2d09      	cmp	r5, #9
 8006434:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006438:	f803 1c01 	strb.w	r1, [r3, #-1]
 800643c:	f103 32ff 	add.w	r2, r3, #4294967295
 8006440:	4629      	mov	r1, r5
 8006442:	dc09      	bgt.n	8006458 <__exponent+0x50>
 8006444:	3130      	adds	r1, #48	; 0x30
 8006446:	3b02      	subs	r3, #2
 8006448:	f802 1c01 	strb.w	r1, [r2, #-1]
 800644c:	42bb      	cmp	r3, r7
 800644e:	4622      	mov	r2, r4
 8006450:	d304      	bcc.n	800645c <__exponent+0x54>
 8006452:	1a10      	subs	r0, r2, r0
 8006454:	b003      	add	sp, #12
 8006456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006458:	4613      	mov	r3, r2
 800645a:	e7e6      	b.n	800642a <__exponent+0x22>
 800645c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006460:	f804 2b01 	strb.w	r2, [r4], #1
 8006464:	e7f2      	b.n	800644c <__exponent+0x44>
 8006466:	2330      	movs	r3, #48	; 0x30
 8006468:	4419      	add	r1, r3
 800646a:	7083      	strb	r3, [r0, #2]
 800646c:	1d02      	adds	r2, r0, #4
 800646e:	70c1      	strb	r1, [r0, #3]
 8006470:	e7ef      	b.n	8006452 <__exponent+0x4a>
	...

08006474 <_printf_float>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	b091      	sub	sp, #68	; 0x44
 800647a:	460c      	mov	r4, r1
 800647c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800647e:	4693      	mov	fp, r2
 8006480:	461e      	mov	r6, r3
 8006482:	4605      	mov	r5, r0
 8006484:	f003 f8d0 	bl	8009628 <_localeconv_r>
 8006488:	6803      	ldr	r3, [r0, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	9309      	str	r3, [sp, #36]	; 0x24
 800648e:	f7f9 fecb 	bl	8000228 <strlen>
 8006492:	2300      	movs	r3, #0
 8006494:	930e      	str	r3, [sp, #56]	; 0x38
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	900a      	str	r0, [sp, #40]	; 0x28
 800649a:	3307      	adds	r3, #7
 800649c:	f023 0307 	bic.w	r3, r3, #7
 80064a0:	f103 0208 	add.w	r2, r3, #8
 80064a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80064a8:	f8d4 a000 	ldr.w	sl, [r4]
 80064ac:	603a      	str	r2, [r7, #0]
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80064ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064be:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	4ba6      	ldr	r3, [pc, #664]	; (8006760 <_printf_float+0x2ec>)
 80064c6:	4638      	mov	r0, r7
 80064c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ca:	f7fa fb0b 	bl	8000ae4 <__aeabi_dcmpun>
 80064ce:	bb68      	cbnz	r0, 800652c <_printf_float+0xb8>
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295
 80064d4:	4ba2      	ldr	r3, [pc, #648]	; (8006760 <_printf_float+0x2ec>)
 80064d6:	4638      	mov	r0, r7
 80064d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064da:	f7fa fae5 	bl	8000aa8 <__aeabi_dcmple>
 80064de:	bb28      	cbnz	r0, 800652c <_printf_float+0xb8>
 80064e0:	2200      	movs	r2, #0
 80064e2:	2300      	movs	r3, #0
 80064e4:	4638      	mov	r0, r7
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7fa fad4 	bl	8000a94 <__aeabi_dcmplt>
 80064ec:	b110      	cbz	r0, 80064f4 <_printf_float+0x80>
 80064ee:	232d      	movs	r3, #45	; 0x2d
 80064f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f4:	4f9b      	ldr	r7, [pc, #620]	; (8006764 <_printf_float+0x2f0>)
 80064f6:	4b9c      	ldr	r3, [pc, #624]	; (8006768 <_printf_float+0x2f4>)
 80064f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064fc:	bf98      	it	ls
 80064fe:	461f      	movls	r7, r3
 8006500:	2303      	movs	r3, #3
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	f02a 0304 	bic.w	r3, sl, #4
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	9600      	str	r6, [sp, #0]
 8006510:	465b      	mov	r3, fp
 8006512:	aa0f      	add	r2, sp, #60	; 0x3c
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f9e2 	bl	80068e0 <_printf_common>
 800651c:	3001      	adds	r0, #1
 800651e:	f040 8090 	bne.w	8006642 <_printf_float+0x1ce>
 8006522:	f04f 30ff 	mov.w	r0, #4294967295
 8006526:	b011      	add	sp, #68	; 0x44
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	463a      	mov	r2, r7
 800652e:	464b      	mov	r3, r9
 8006530:	4638      	mov	r0, r7
 8006532:	4649      	mov	r1, r9
 8006534:	f7fa fad6 	bl	8000ae4 <__aeabi_dcmpun>
 8006538:	b110      	cbz	r0, 8006540 <_printf_float+0xcc>
 800653a:	4f8c      	ldr	r7, [pc, #560]	; (800676c <_printf_float+0x2f8>)
 800653c:	4b8c      	ldr	r3, [pc, #560]	; (8006770 <_printf_float+0x2fc>)
 800653e:	e7db      	b.n	80064f8 <_printf_float+0x84>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	a80d      	add	r0, sp, #52	; 0x34
 800654a:	a90e      	add	r1, sp, #56	; 0x38
 800654c:	d140      	bne.n	80065d0 <_printf_float+0x15c>
 800654e:	2306      	movs	r3, #6
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	f04f 0c00 	mov.w	ip, #0
 8006556:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800655a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	6022      	str	r2, [r4, #0]
 8006562:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	463a      	mov	r2, r7
 800656a:	464b      	mov	r3, r9
 800656c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff feed 	bl	8006350 <__cvt>
 8006576:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800657a:	2b47      	cmp	r3, #71	; 0x47
 800657c:	4607      	mov	r7, r0
 800657e:	d109      	bne.n	8006594 <_printf_float+0x120>
 8006580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006582:	1cd8      	adds	r0, r3, #3
 8006584:	db02      	blt.n	800658c <_printf_float+0x118>
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	4293      	cmp	r3, r2
 800658a:	dd47      	ble.n	800661c <_printf_float+0x1a8>
 800658c:	f1a8 0802 	sub.w	r8, r8, #2
 8006590:	fa5f f888 	uxtb.w	r8, r8
 8006594:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006598:	990d      	ldr	r1, [sp, #52]	; 0x34
 800659a:	d824      	bhi.n	80065e6 <_printf_float+0x172>
 800659c:	3901      	subs	r1, #1
 800659e:	4642      	mov	r2, r8
 80065a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065a4:	910d      	str	r1, [sp, #52]	; 0x34
 80065a6:	f7ff ff2f 	bl	8006408 <__exponent>
 80065aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ac:	4681      	mov	r9, r0
 80065ae:	1813      	adds	r3, r2, r0
 80065b0:	2a01      	cmp	r2, #1
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	dc02      	bgt.n	80065bc <_printf_float+0x148>
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	07d1      	lsls	r1, r2, #31
 80065ba:	d501      	bpl.n	80065c0 <_printf_float+0x14c>
 80065bc:	3301      	adds	r3, #1
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0a2      	beq.n	800650e <_printf_float+0x9a>
 80065c8:	232d      	movs	r3, #45	; 0x2d
 80065ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ce:	e79e      	b.n	800650e <_printf_float+0x9a>
 80065d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80065d4:	f000 816e 	beq.w	80068b4 <_printf_float+0x440>
 80065d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065dc:	d1b9      	bne.n	8006552 <_printf_float+0xde>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1b7      	bne.n	8006552 <_printf_float+0xde>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e7b4      	b.n	8006550 <_printf_float+0xdc>
 80065e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80065ea:	d119      	bne.n	8006620 <_printf_float+0x1ac>
 80065ec:	2900      	cmp	r1, #0
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	dd0c      	ble.n	800660c <_printf_float+0x198>
 80065f2:	6121      	str	r1, [r4, #16]
 80065f4:	b913      	cbnz	r3, 80065fc <_printf_float+0x188>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	07d2      	lsls	r2, r2, #31
 80065fa:	d502      	bpl.n	8006602 <_printf_float+0x18e>
 80065fc:	3301      	adds	r3, #1
 80065fe:	440b      	add	r3, r1
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006604:	f04f 0900 	mov.w	r9, #0
 8006608:	65a3      	str	r3, [r4, #88]	; 0x58
 800660a:	e7d9      	b.n	80065c0 <_printf_float+0x14c>
 800660c:	b913      	cbnz	r3, 8006614 <_printf_float+0x1a0>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	07d0      	lsls	r0, r2, #31
 8006612:	d501      	bpl.n	8006618 <_printf_float+0x1a4>
 8006614:	3302      	adds	r3, #2
 8006616:	e7f3      	b.n	8006600 <_printf_float+0x18c>
 8006618:	2301      	movs	r3, #1
 800661a:	e7f1      	b.n	8006600 <_printf_float+0x18c>
 800661c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006620:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006624:	4293      	cmp	r3, r2
 8006626:	db05      	blt.n	8006634 <_printf_float+0x1c0>
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	6123      	str	r3, [r4, #16]
 800662c:	07d1      	lsls	r1, r2, #31
 800662e:	d5e8      	bpl.n	8006602 <_printf_float+0x18e>
 8006630:	3301      	adds	r3, #1
 8006632:	e7e5      	b.n	8006600 <_printf_float+0x18c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfcc      	ite	gt
 8006638:	2301      	movgt	r3, #1
 800663a:	f1c3 0302 	rsble	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	e7de      	b.n	8006600 <_printf_float+0x18c>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	055a      	lsls	r2, r3, #21
 8006646:	d407      	bmi.n	8006658 <_printf_float+0x1e4>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	463a      	mov	r2, r7
 800664c:	4659      	mov	r1, fp
 800664e:	4628      	mov	r0, r5
 8006650:	47b0      	blx	r6
 8006652:	3001      	adds	r0, #1
 8006654:	d129      	bne.n	80066aa <_printf_float+0x236>
 8006656:	e764      	b.n	8006522 <_printf_float+0xae>
 8006658:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800665c:	f240 80d7 	bls.w	800680e <_printf_float+0x39a>
 8006660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	f7fa fa0a 	bl	8000a80 <__aeabi_dcmpeq>
 800666c:	b388      	cbz	r0, 80066d2 <_printf_float+0x25e>
 800666e:	2301      	movs	r3, #1
 8006670:	4a40      	ldr	r2, [pc, #256]	; (8006774 <_printf_float+0x300>)
 8006672:	4659      	mov	r1, fp
 8006674:	4628      	mov	r0, r5
 8006676:	47b0      	blx	r6
 8006678:	3001      	adds	r0, #1
 800667a:	f43f af52 	beq.w	8006522 <_printf_float+0xae>
 800667e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006682:	429a      	cmp	r2, r3
 8006684:	db02      	blt.n	800668c <_printf_float+0x218>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	07d8      	lsls	r0, r3, #31
 800668a:	d50e      	bpl.n	80066aa <_printf_float+0x236>
 800668c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006690:	4659      	mov	r1, fp
 8006692:	4628      	mov	r0, r5
 8006694:	47b0      	blx	r6
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af43 	beq.w	8006522 <_printf_float+0xae>
 800669c:	2700      	movs	r7, #0
 800669e:	f104 081a 	add.w	r8, r4, #26
 80066a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a4:	3b01      	subs	r3, #1
 80066a6:	42bb      	cmp	r3, r7
 80066a8:	dc09      	bgt.n	80066be <_printf_float+0x24a>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	079f      	lsls	r7, r3, #30
 80066ae:	f100 80fd 	bmi.w	80068ac <_printf_float+0x438>
 80066b2:	68e0      	ldr	r0, [r4, #12]
 80066b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066b6:	4298      	cmp	r0, r3
 80066b8:	bfb8      	it	lt
 80066ba:	4618      	movlt	r0, r3
 80066bc:	e733      	b.n	8006526 <_printf_float+0xb2>
 80066be:	2301      	movs	r3, #1
 80066c0:	4642      	mov	r2, r8
 80066c2:	4659      	mov	r1, fp
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b0      	blx	r6
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f af2a 	beq.w	8006522 <_printf_float+0xae>
 80066ce:	3701      	adds	r7, #1
 80066d0:	e7e7      	b.n	80066a2 <_printf_float+0x22e>
 80066d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dc2b      	bgt.n	8006730 <_printf_float+0x2bc>
 80066d8:	2301      	movs	r3, #1
 80066da:	4a26      	ldr	r2, [pc, #152]	; (8006774 <_printf_float+0x300>)
 80066dc:	4659      	mov	r1, fp
 80066de:	4628      	mov	r0, r5
 80066e0:	47b0      	blx	r6
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af1d 	beq.w	8006522 <_printf_float+0xae>
 80066e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ea:	b923      	cbnz	r3, 80066f6 <_printf_float+0x282>
 80066ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ee:	b913      	cbnz	r3, 80066f6 <_printf_float+0x282>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	07d9      	lsls	r1, r3, #31
 80066f4:	d5d9      	bpl.n	80066aa <_printf_float+0x236>
 80066f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066fa:	4659      	mov	r1, fp
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b0      	blx	r6
 8006700:	3001      	adds	r0, #1
 8006702:	f43f af0e 	beq.w	8006522 <_printf_float+0xae>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 091a 	add.w	r9, r4, #26
 800670e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006710:	425b      	negs	r3, r3
 8006712:	4543      	cmp	r3, r8
 8006714:	dc01      	bgt.n	800671a <_printf_float+0x2a6>
 8006716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006718:	e797      	b.n	800664a <_printf_float+0x1d6>
 800671a:	2301      	movs	r3, #1
 800671c:	464a      	mov	r2, r9
 800671e:	4659      	mov	r1, fp
 8006720:	4628      	mov	r0, r5
 8006722:	47b0      	blx	r6
 8006724:	3001      	adds	r0, #1
 8006726:	f43f aefc 	beq.w	8006522 <_printf_float+0xae>
 800672a:	f108 0801 	add.w	r8, r8, #1
 800672e:	e7ee      	b.n	800670e <_printf_float+0x29a>
 8006730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006734:	429a      	cmp	r2, r3
 8006736:	bfa8      	it	ge
 8006738:	461a      	movge	r2, r3
 800673a:	2a00      	cmp	r2, #0
 800673c:	4690      	mov	r8, r2
 800673e:	dd07      	ble.n	8006750 <_printf_float+0x2dc>
 8006740:	4613      	mov	r3, r2
 8006742:	4659      	mov	r1, fp
 8006744:	463a      	mov	r2, r7
 8006746:	4628      	mov	r0, r5
 8006748:	47b0      	blx	r6
 800674a:	3001      	adds	r0, #1
 800674c:	f43f aee9 	beq.w	8006522 <_printf_float+0xae>
 8006750:	f104 031a 	add.w	r3, r4, #26
 8006754:	f04f 0a00 	mov.w	sl, #0
 8006758:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800675c:	930b      	str	r3, [sp, #44]	; 0x2c
 800675e:	e015      	b.n	800678c <_printf_float+0x318>
 8006760:	7fefffff 	.word	0x7fefffff
 8006764:	0800b3f4 	.word	0x0800b3f4
 8006768:	0800b3f0 	.word	0x0800b3f0
 800676c:	0800b3fc 	.word	0x0800b3fc
 8006770:	0800b3f8 	.word	0x0800b3f8
 8006774:	0800ac93 	.word	0x0800ac93
 8006778:	2301      	movs	r3, #1
 800677a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800677c:	4659      	mov	r1, fp
 800677e:	4628      	mov	r0, r5
 8006780:	47b0      	blx	r6
 8006782:	3001      	adds	r0, #1
 8006784:	f43f aecd 	beq.w	8006522 <_printf_float+0xae>
 8006788:	f10a 0a01 	add.w	sl, sl, #1
 800678c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006790:	eba9 0308 	sub.w	r3, r9, r8
 8006794:	4553      	cmp	r3, sl
 8006796:	dcef      	bgt.n	8006778 <_printf_float+0x304>
 8006798:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800679c:	429a      	cmp	r2, r3
 800679e:	444f      	add	r7, r9
 80067a0:	db14      	blt.n	80067cc <_printf_float+0x358>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	07da      	lsls	r2, r3, #31
 80067a6:	d411      	bmi.n	80067cc <_printf_float+0x358>
 80067a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067ac:	eba3 0209 	sub.w	r2, r3, r9
 80067b0:	eba3 0901 	sub.w	r9, r3, r1
 80067b4:	4591      	cmp	r9, r2
 80067b6:	bfa8      	it	ge
 80067b8:	4691      	movge	r9, r2
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	dc0d      	bgt.n	80067dc <_printf_float+0x368>
 80067c0:	2700      	movs	r7, #0
 80067c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067c6:	f104 081a 	add.w	r8, r4, #26
 80067ca:	e018      	b.n	80067fe <_printf_float+0x38a>
 80067cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067d0:	4659      	mov	r1, fp
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b0      	blx	r6
 80067d6:	3001      	adds	r0, #1
 80067d8:	d1e6      	bne.n	80067a8 <_printf_float+0x334>
 80067da:	e6a2      	b.n	8006522 <_printf_float+0xae>
 80067dc:	464b      	mov	r3, r9
 80067de:	463a      	mov	r2, r7
 80067e0:	4659      	mov	r1, fp
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b0      	blx	r6
 80067e6:	3001      	adds	r0, #1
 80067e8:	d1ea      	bne.n	80067c0 <_printf_float+0x34c>
 80067ea:	e69a      	b.n	8006522 <_printf_float+0xae>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4642      	mov	r2, r8
 80067f0:	4659      	mov	r1, fp
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b0      	blx	r6
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f ae93 	beq.w	8006522 <_printf_float+0xae>
 80067fc:	3701      	adds	r7, #1
 80067fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	eba3 0309 	sub.w	r3, r3, r9
 8006808:	42bb      	cmp	r3, r7
 800680a:	dcef      	bgt.n	80067ec <_printf_float+0x378>
 800680c:	e74d      	b.n	80066aa <_printf_float+0x236>
 800680e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006810:	2a01      	cmp	r2, #1
 8006812:	dc01      	bgt.n	8006818 <_printf_float+0x3a4>
 8006814:	07db      	lsls	r3, r3, #31
 8006816:	d538      	bpl.n	800688a <_printf_float+0x416>
 8006818:	2301      	movs	r3, #1
 800681a:	463a      	mov	r2, r7
 800681c:	4659      	mov	r1, fp
 800681e:	4628      	mov	r0, r5
 8006820:	47b0      	blx	r6
 8006822:	3001      	adds	r0, #1
 8006824:	f43f ae7d 	beq.w	8006522 <_printf_float+0xae>
 8006828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800682c:	4659      	mov	r1, fp
 800682e:	4628      	mov	r0, r5
 8006830:	47b0      	blx	r6
 8006832:	3001      	adds	r0, #1
 8006834:	f107 0701 	add.w	r7, r7, #1
 8006838:	f43f ae73 	beq.w	8006522 <_printf_float+0xae>
 800683c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006842:	2200      	movs	r2, #0
 8006844:	f103 38ff 	add.w	r8, r3, #4294967295
 8006848:	2300      	movs	r3, #0
 800684a:	f7fa f919 	bl	8000a80 <__aeabi_dcmpeq>
 800684e:	b9c0      	cbnz	r0, 8006882 <_printf_float+0x40e>
 8006850:	4643      	mov	r3, r8
 8006852:	463a      	mov	r2, r7
 8006854:	4659      	mov	r1, fp
 8006856:	4628      	mov	r0, r5
 8006858:	47b0      	blx	r6
 800685a:	3001      	adds	r0, #1
 800685c:	d10d      	bne.n	800687a <_printf_float+0x406>
 800685e:	e660      	b.n	8006522 <_printf_float+0xae>
 8006860:	2301      	movs	r3, #1
 8006862:	4642      	mov	r2, r8
 8006864:	4659      	mov	r1, fp
 8006866:	4628      	mov	r0, r5
 8006868:	47b0      	blx	r6
 800686a:	3001      	adds	r0, #1
 800686c:	f43f ae59 	beq.w	8006522 <_printf_float+0xae>
 8006870:	3701      	adds	r7, #1
 8006872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006874:	3b01      	subs	r3, #1
 8006876:	42bb      	cmp	r3, r7
 8006878:	dcf2      	bgt.n	8006860 <_printf_float+0x3ec>
 800687a:	464b      	mov	r3, r9
 800687c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006880:	e6e4      	b.n	800664c <_printf_float+0x1d8>
 8006882:	2700      	movs	r7, #0
 8006884:	f104 081a 	add.w	r8, r4, #26
 8006888:	e7f3      	b.n	8006872 <_printf_float+0x3fe>
 800688a:	2301      	movs	r3, #1
 800688c:	e7e1      	b.n	8006852 <_printf_float+0x3de>
 800688e:	2301      	movs	r3, #1
 8006890:	4642      	mov	r2, r8
 8006892:	4659      	mov	r1, fp
 8006894:	4628      	mov	r0, r5
 8006896:	47b0      	blx	r6
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae42 	beq.w	8006522 <_printf_float+0xae>
 800689e:	3701      	adds	r7, #1
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	42bb      	cmp	r3, r7
 80068a8:	dcf1      	bgt.n	800688e <_printf_float+0x41a>
 80068aa:	e702      	b.n	80066b2 <_printf_float+0x23e>
 80068ac:	2700      	movs	r7, #0
 80068ae:	f104 0819 	add.w	r8, r4, #25
 80068b2:	e7f5      	b.n	80068a0 <_printf_float+0x42c>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f43f ae94 	beq.w	80065e2 <_printf_float+0x16e>
 80068ba:	f04f 0c00 	mov.w	ip, #0
 80068be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80068c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80068c6:	6022      	str	r2, [r4, #0]
 80068c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80068cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	463a      	mov	r2, r7
 80068d4:	464b      	mov	r3, r9
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7ff fd3a 	bl	8006350 <__cvt>
 80068dc:	4607      	mov	r7, r0
 80068de:	e64f      	b.n	8006580 <_printf_float+0x10c>

080068e0 <_printf_common>:
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	4691      	mov	r9, r2
 80068e6:	461f      	mov	r7, r3
 80068e8:	688a      	ldr	r2, [r1, #8]
 80068ea:	690b      	ldr	r3, [r1, #16]
 80068ec:	4606      	mov	r6, r0
 80068ee:	4293      	cmp	r3, r2
 80068f0:	bfb8      	it	lt
 80068f2:	4613      	movlt	r3, r2
 80068f4:	f8c9 3000 	str.w	r3, [r9]
 80068f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068fc:	460c      	mov	r4, r1
 80068fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006902:	b112      	cbz	r2, 800690a <_printf_common+0x2a>
 8006904:	3301      	adds	r3, #1
 8006906:	f8c9 3000 	str.w	r3, [r9]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	0699      	lsls	r1, r3, #26
 800690e:	bf42      	ittt	mi
 8006910:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006914:	3302      	addmi	r3, #2
 8006916:	f8c9 3000 	strmi.w	r3, [r9]
 800691a:	6825      	ldr	r5, [r4, #0]
 800691c:	f015 0506 	ands.w	r5, r5, #6
 8006920:	d107      	bne.n	8006932 <_printf_common+0x52>
 8006922:	f104 0a19 	add.w	sl, r4, #25
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	f8d9 2000 	ldr.w	r2, [r9]
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	42ab      	cmp	r3, r5
 8006930:	dc29      	bgt.n	8006986 <_printf_common+0xa6>
 8006932:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006936:	6822      	ldr	r2, [r4, #0]
 8006938:	3300      	adds	r3, #0
 800693a:	bf18      	it	ne
 800693c:	2301      	movne	r3, #1
 800693e:	0692      	lsls	r2, r2, #26
 8006940:	d42e      	bmi.n	80069a0 <_printf_common+0xc0>
 8006942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006946:	4639      	mov	r1, r7
 8006948:	4630      	mov	r0, r6
 800694a:	47c0      	blx	r8
 800694c:	3001      	adds	r0, #1
 800694e:	d021      	beq.n	8006994 <_printf_common+0xb4>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	68e5      	ldr	r5, [r4, #12]
 8006954:	f003 0306 	and.w	r3, r3, #6
 8006958:	2b04      	cmp	r3, #4
 800695a:	bf18      	it	ne
 800695c:	2500      	movne	r5, #0
 800695e:	f8d9 2000 	ldr.w	r2, [r9]
 8006962:	f04f 0900 	mov.w	r9, #0
 8006966:	bf08      	it	eq
 8006968:	1aad      	subeq	r5, r5, r2
 800696a:	68a3      	ldr	r3, [r4, #8]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	bf08      	it	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	4293      	cmp	r3, r2
 8006976:	bfc4      	itt	gt
 8006978:	1a9b      	subgt	r3, r3, r2
 800697a:	18ed      	addgt	r5, r5, r3
 800697c:	341a      	adds	r4, #26
 800697e:	454d      	cmp	r5, r9
 8006980:	d11a      	bne.n	80069b8 <_printf_common+0xd8>
 8006982:	2000      	movs	r0, #0
 8006984:	e008      	b.n	8006998 <_printf_common+0xb8>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4639      	mov	r1, r7
 800698c:	4630      	mov	r0, r6
 800698e:	47c0      	blx	r8
 8006990:	3001      	adds	r0, #1
 8006992:	d103      	bne.n	800699c <_printf_common+0xbc>
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699c:	3501      	adds	r5, #1
 800699e:	e7c2      	b.n	8006926 <_printf_common+0x46>
 80069a0:	2030      	movs	r0, #48	; 0x30
 80069a2:	18e1      	adds	r1, r4, r3
 80069a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069ae:	4422      	add	r2, r4
 80069b0:	3302      	adds	r3, #2
 80069b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b6:	e7c4      	b.n	8006942 <_printf_common+0x62>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4622      	mov	r2, r4
 80069bc:	4639      	mov	r1, r7
 80069be:	4630      	mov	r0, r6
 80069c0:	47c0      	blx	r8
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0e6      	beq.n	8006994 <_printf_common+0xb4>
 80069c6:	f109 0901 	add.w	r9, r9, #1
 80069ca:	e7d8      	b.n	800697e <_printf_common+0x9e>

080069cc <_printf_i>:
 80069cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80069d4:	460c      	mov	r4, r1
 80069d6:	7e09      	ldrb	r1, [r1, #24]
 80069d8:	b085      	sub	sp, #20
 80069da:	296e      	cmp	r1, #110	; 0x6e
 80069dc:	4617      	mov	r7, r2
 80069de:	4606      	mov	r6, r0
 80069e0:	4698      	mov	r8, r3
 80069e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e4:	f000 80b3 	beq.w	8006b4e <_printf_i+0x182>
 80069e8:	d822      	bhi.n	8006a30 <_printf_i+0x64>
 80069ea:	2963      	cmp	r1, #99	; 0x63
 80069ec:	d036      	beq.n	8006a5c <_printf_i+0x90>
 80069ee:	d80a      	bhi.n	8006a06 <_printf_i+0x3a>
 80069f0:	2900      	cmp	r1, #0
 80069f2:	f000 80b9 	beq.w	8006b68 <_printf_i+0x19c>
 80069f6:	2958      	cmp	r1, #88	; 0x58
 80069f8:	f000 8083 	beq.w	8006b02 <_printf_i+0x136>
 80069fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a04:	e032      	b.n	8006a6c <_printf_i+0xa0>
 8006a06:	2964      	cmp	r1, #100	; 0x64
 8006a08:	d001      	beq.n	8006a0e <_printf_i+0x42>
 8006a0a:	2969      	cmp	r1, #105	; 0x69
 8006a0c:	d1f6      	bne.n	80069fc <_printf_i+0x30>
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	6813      	ldr	r3, [r2, #0]
 8006a12:	0605      	lsls	r5, r0, #24
 8006a14:	f103 0104 	add.w	r1, r3, #4
 8006a18:	d52a      	bpl.n	8006a70 <_printf_i+0xa4>
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6011      	str	r1, [r2, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da03      	bge.n	8006a2a <_printf_i+0x5e>
 8006a22:	222d      	movs	r2, #45	; 0x2d
 8006a24:	425b      	negs	r3, r3
 8006a26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a2a:	486f      	ldr	r0, [pc, #444]	; (8006be8 <_printf_i+0x21c>)
 8006a2c:	220a      	movs	r2, #10
 8006a2e:	e039      	b.n	8006aa4 <_printf_i+0xd8>
 8006a30:	2973      	cmp	r1, #115	; 0x73
 8006a32:	f000 809d 	beq.w	8006b70 <_printf_i+0x1a4>
 8006a36:	d808      	bhi.n	8006a4a <_printf_i+0x7e>
 8006a38:	296f      	cmp	r1, #111	; 0x6f
 8006a3a:	d020      	beq.n	8006a7e <_printf_i+0xb2>
 8006a3c:	2970      	cmp	r1, #112	; 0x70
 8006a3e:	d1dd      	bne.n	80069fc <_printf_i+0x30>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	f043 0320 	orr.w	r3, r3, #32
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	e003      	b.n	8006a52 <_printf_i+0x86>
 8006a4a:	2975      	cmp	r1, #117	; 0x75
 8006a4c:	d017      	beq.n	8006a7e <_printf_i+0xb2>
 8006a4e:	2978      	cmp	r1, #120	; 0x78
 8006a50:	d1d4      	bne.n	80069fc <_printf_i+0x30>
 8006a52:	2378      	movs	r3, #120	; 0x78
 8006a54:	4865      	ldr	r0, [pc, #404]	; (8006bec <_printf_i+0x220>)
 8006a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a5a:	e055      	b.n	8006b08 <_printf_i+0x13c>
 8006a5c:	6813      	ldr	r3, [r2, #0]
 8006a5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a62:	1d19      	adds	r1, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6011      	str	r1, [r2, #0]
 8006a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e08c      	b.n	8006b8a <_printf_i+0x1be>
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a76:	6011      	str	r1, [r2, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	b21b      	sxthne	r3, r3
 8006a7c:	e7cf      	b.n	8006a1e <_printf_i+0x52>
 8006a7e:	6813      	ldr	r3, [r2, #0]
 8006a80:	6825      	ldr	r5, [r4, #0]
 8006a82:	1d18      	adds	r0, r3, #4
 8006a84:	6010      	str	r0, [r2, #0]
 8006a86:	0628      	lsls	r0, r5, #24
 8006a88:	d501      	bpl.n	8006a8e <_printf_i+0xc2>
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	e002      	b.n	8006a94 <_printf_i+0xc8>
 8006a8e:	0668      	lsls	r0, r5, #25
 8006a90:	d5fb      	bpl.n	8006a8a <_printf_i+0xbe>
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	296f      	cmp	r1, #111	; 0x6f
 8006a96:	bf14      	ite	ne
 8006a98:	220a      	movne	r2, #10
 8006a9a:	2208      	moveq	r2, #8
 8006a9c:	4852      	ldr	r0, [pc, #328]	; (8006be8 <_printf_i+0x21c>)
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aa4:	6865      	ldr	r5, [r4, #4]
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	60a5      	str	r5, [r4, #8]
 8006aaa:	f2c0 8095 	blt.w	8006bd8 <_printf_i+0x20c>
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	f021 0104 	bic.w	r1, r1, #4
 8006ab4:	6021      	str	r1, [r4, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d13d      	bne.n	8006b36 <_printf_i+0x16a>
 8006aba:	2d00      	cmp	r5, #0
 8006abc:	f040 808e 	bne.w	8006bdc <_printf_i+0x210>
 8006ac0:	4665      	mov	r5, ip
 8006ac2:	2a08      	cmp	r2, #8
 8006ac4:	d10b      	bne.n	8006ade <_printf_i+0x112>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	07db      	lsls	r3, r3, #31
 8006aca:	d508      	bpl.n	8006ade <_printf_i+0x112>
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	bfde      	ittt	le
 8006ad4:	2330      	movle	r3, #48	; 0x30
 8006ad6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ada:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ade:	ebac 0305 	sub.w	r3, ip, r5
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	f8cd 8000 	str.w	r8, [sp]
 8006ae8:	463b      	mov	r3, r7
 8006aea:	aa03      	add	r2, sp, #12
 8006aec:	4621      	mov	r1, r4
 8006aee:	4630      	mov	r0, r6
 8006af0:	f7ff fef6 	bl	80068e0 <_printf_common>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d14d      	bne.n	8006b94 <_printf_i+0x1c8>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	b005      	add	sp, #20
 8006afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b02:	4839      	ldr	r0, [pc, #228]	; (8006be8 <_printf_i+0x21c>)
 8006b04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b08:	6813      	ldr	r3, [r2, #0]
 8006b0a:	6821      	ldr	r1, [r4, #0]
 8006b0c:	1d1d      	adds	r5, r3, #4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6015      	str	r5, [r2, #0]
 8006b12:	060a      	lsls	r2, r1, #24
 8006b14:	d50b      	bpl.n	8006b2e <_printf_i+0x162>
 8006b16:	07ca      	lsls	r2, r1, #31
 8006b18:	bf44      	itt	mi
 8006b1a:	f041 0120 	orrmi.w	r1, r1, #32
 8006b1e:	6021      	strmi	r1, [r4, #0]
 8006b20:	b91b      	cbnz	r3, 8006b2a <_printf_i+0x15e>
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	f022 0220 	bic.w	r2, r2, #32
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	e7b7      	b.n	8006a9e <_printf_i+0xd2>
 8006b2e:	064d      	lsls	r5, r1, #25
 8006b30:	bf48      	it	mi
 8006b32:	b29b      	uxthmi	r3, r3
 8006b34:	e7ef      	b.n	8006b16 <_printf_i+0x14a>
 8006b36:	4665      	mov	r5, ip
 8006b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b3c:	fb02 3311 	mls	r3, r2, r1, r3
 8006b40:	5cc3      	ldrb	r3, [r0, r3]
 8006b42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b46:	460b      	mov	r3, r1
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d1f5      	bne.n	8006b38 <_printf_i+0x16c>
 8006b4c:	e7b9      	b.n	8006ac2 <_printf_i+0xf6>
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	6825      	ldr	r5, [r4, #0]
 8006b52:	1d18      	adds	r0, r3, #4
 8006b54:	6961      	ldr	r1, [r4, #20]
 8006b56:	6010      	str	r0, [r2, #0]
 8006b58:	0628      	lsls	r0, r5, #24
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	d501      	bpl.n	8006b62 <_printf_i+0x196>
 8006b5e:	6019      	str	r1, [r3, #0]
 8006b60:	e002      	b.n	8006b68 <_printf_i+0x19c>
 8006b62:	066a      	lsls	r2, r5, #25
 8006b64:	d5fb      	bpl.n	8006b5e <_printf_i+0x192>
 8006b66:	8019      	strh	r1, [r3, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4665      	mov	r5, ip
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	e7b9      	b.n	8006ae4 <_printf_i+0x118>
 8006b70:	6813      	ldr	r3, [r2, #0]
 8006b72:	1d19      	adds	r1, r3, #4
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	681d      	ldr	r5, [r3, #0]
 8006b78:	6862      	ldr	r2, [r4, #4]
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f002 fdd7 	bl	8009730 <memchr>
 8006b82:	b108      	cbz	r0, 8006b88 <_printf_i+0x1bc>
 8006b84:	1b40      	subs	r0, r0, r5
 8006b86:	6060      	str	r0, [r4, #4]
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b92:	e7a7      	b.n	8006ae4 <_printf_i+0x118>
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	462a      	mov	r2, r5
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d0aa      	beq.n	8006af8 <_printf_i+0x12c>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	079b      	lsls	r3, r3, #30
 8006ba6:	d413      	bmi.n	8006bd0 <_printf_i+0x204>
 8006ba8:	68e0      	ldr	r0, [r4, #12]
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	4298      	cmp	r0, r3
 8006bae:	bfb8      	it	lt
 8006bb0:	4618      	movlt	r0, r3
 8006bb2:	e7a3      	b.n	8006afc <_printf_i+0x130>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	464a      	mov	r2, r9
 8006bb8:	4639      	mov	r1, r7
 8006bba:	4630      	mov	r0, r6
 8006bbc:	47c0      	blx	r8
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d09a      	beq.n	8006af8 <_printf_i+0x12c>
 8006bc2:	3501      	adds	r5, #1
 8006bc4:	68e3      	ldr	r3, [r4, #12]
 8006bc6:	9a03      	ldr	r2, [sp, #12]
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	42ab      	cmp	r3, r5
 8006bcc:	dcf2      	bgt.n	8006bb4 <_printf_i+0x1e8>
 8006bce:	e7eb      	b.n	8006ba8 <_printf_i+0x1dc>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	f104 0919 	add.w	r9, r4, #25
 8006bd6:	e7f5      	b.n	8006bc4 <_printf_i+0x1f8>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ac      	bne.n	8006b36 <_printf_i+0x16a>
 8006bdc:	7803      	ldrb	r3, [r0, #0]
 8006bde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be6:	e76c      	b.n	8006ac2 <_printf_i+0xf6>
 8006be8:	0800b400 	.word	0x0800b400
 8006bec:	0800b411 	.word	0x0800b411

08006bf0 <_scanf_float>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	688b      	ldr	r3, [r1, #8]
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c00:	bf88      	it	hi
 8006c02:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006c06:	b087      	sub	sp, #28
 8006c08:	bf85      	ittet	hi
 8006c0a:	189b      	addhi	r3, r3, r2
 8006c0c:	9301      	strhi	r3, [sp, #4]
 8006c0e:	2300      	movls	r3, #0
 8006c10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c14:	4688      	mov	r8, r1
 8006c16:	f04f 0b00 	mov.w	fp, #0
 8006c1a:	bf8c      	ite	hi
 8006c1c:	608b      	strhi	r3, [r1, #8]
 8006c1e:	9301      	strls	r3, [sp, #4]
 8006c20:	680b      	ldr	r3, [r1, #0]
 8006c22:	4607      	mov	r7, r0
 8006c24:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c28:	f848 3b1c 	str.w	r3, [r8], #28
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	4645      	mov	r5, r8
 8006c30:	465a      	mov	r2, fp
 8006c32:	46d9      	mov	r9, fp
 8006c34:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006c38:	f8cd b008 	str.w	fp, [sp, #8]
 8006c3c:	68a1      	ldr	r1, [r4, #8]
 8006c3e:	b181      	cbz	r1, 8006c62 <_scanf_float+0x72>
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b49      	cmp	r3, #73	; 0x49
 8006c46:	d071      	beq.n	8006d2c <_scanf_float+0x13c>
 8006c48:	d84d      	bhi.n	8006ce6 <_scanf_float+0xf6>
 8006c4a:	2b39      	cmp	r3, #57	; 0x39
 8006c4c:	d840      	bhi.n	8006cd0 <_scanf_float+0xe0>
 8006c4e:	2b31      	cmp	r3, #49	; 0x31
 8006c50:	f080 8088 	bcs.w	8006d64 <_scanf_float+0x174>
 8006c54:	2b2d      	cmp	r3, #45	; 0x2d
 8006c56:	f000 8090 	beq.w	8006d7a <_scanf_float+0x18a>
 8006c5a:	d815      	bhi.n	8006c88 <_scanf_float+0x98>
 8006c5c:	2b2b      	cmp	r3, #43	; 0x2b
 8006c5e:	f000 808c 	beq.w	8006d7a <_scanf_float+0x18a>
 8006c62:	f1b9 0f00 	cmp.w	r9, #0
 8006c66:	d003      	beq.n	8006c70 <_scanf_float+0x80>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	3a01      	subs	r2, #1
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	f200 80ea 	bhi.w	8006e4c <_scanf_float+0x25c>
 8006c78:	4545      	cmp	r5, r8
 8006c7a:	f200 80dc 	bhi.w	8006e36 <_scanf_float+0x246>
 8006c7e:	2601      	movs	r6, #1
 8006c80:	4630      	mov	r0, r6
 8006c82:	b007      	add	sp, #28
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	2b2e      	cmp	r3, #46	; 0x2e
 8006c8a:	f000 809f 	beq.w	8006dcc <_scanf_float+0x1dc>
 8006c8e:	2b30      	cmp	r3, #48	; 0x30
 8006c90:	d1e7      	bne.n	8006c62 <_scanf_float+0x72>
 8006c92:	6820      	ldr	r0, [r4, #0]
 8006c94:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006c98:	d064      	beq.n	8006d64 <_scanf_float+0x174>
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006ca0:	6020      	str	r0, [r4, #0]
 8006ca2:	f109 0901 	add.w	r9, r9, #1
 8006ca6:	b11b      	cbz	r3, 8006cb0 <_scanf_float+0xc0>
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	3101      	adds	r1, #1
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	60a1      	str	r1, [r4, #8]
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	6873      	ldr	r3, [r6, #4]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	6073      	str	r3, [r6, #4]
 8006cc4:	f340 80ac 	ble.w	8006e20 <_scanf_float+0x230>
 8006cc8:	6833      	ldr	r3, [r6, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	e7b5      	b.n	8006c3c <_scanf_float+0x4c>
 8006cd0:	2b45      	cmp	r3, #69	; 0x45
 8006cd2:	f000 8085 	beq.w	8006de0 <_scanf_float+0x1f0>
 8006cd6:	2b46      	cmp	r3, #70	; 0x46
 8006cd8:	d06a      	beq.n	8006db0 <_scanf_float+0x1c0>
 8006cda:	2b41      	cmp	r3, #65	; 0x41
 8006cdc:	d1c1      	bne.n	8006c62 <_scanf_float+0x72>
 8006cde:	2a01      	cmp	r2, #1
 8006ce0:	d1bf      	bne.n	8006c62 <_scanf_float+0x72>
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	e046      	b.n	8006d74 <_scanf_float+0x184>
 8006ce6:	2b65      	cmp	r3, #101	; 0x65
 8006ce8:	d07a      	beq.n	8006de0 <_scanf_float+0x1f0>
 8006cea:	d818      	bhi.n	8006d1e <_scanf_float+0x12e>
 8006cec:	2b54      	cmp	r3, #84	; 0x54
 8006cee:	d066      	beq.n	8006dbe <_scanf_float+0x1ce>
 8006cf0:	d811      	bhi.n	8006d16 <_scanf_float+0x126>
 8006cf2:	2b4e      	cmp	r3, #78	; 0x4e
 8006cf4:	d1b5      	bne.n	8006c62 <_scanf_float+0x72>
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	d146      	bne.n	8006d88 <_scanf_float+0x198>
 8006cfa:	f1b9 0f00 	cmp.w	r9, #0
 8006cfe:	d145      	bne.n	8006d8c <_scanf_float+0x19c>
 8006d00:	6821      	ldr	r1, [r4, #0]
 8006d02:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d06:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d0a:	d13f      	bne.n	8006d8c <_scanf_float+0x19c>
 8006d0c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d10:	6021      	str	r1, [r4, #0]
 8006d12:	2201      	movs	r2, #1
 8006d14:	e02e      	b.n	8006d74 <_scanf_float+0x184>
 8006d16:	2b59      	cmp	r3, #89	; 0x59
 8006d18:	d01e      	beq.n	8006d58 <_scanf_float+0x168>
 8006d1a:	2b61      	cmp	r3, #97	; 0x61
 8006d1c:	e7de      	b.n	8006cdc <_scanf_float+0xec>
 8006d1e:	2b6e      	cmp	r3, #110	; 0x6e
 8006d20:	d0e9      	beq.n	8006cf6 <_scanf_float+0x106>
 8006d22:	d815      	bhi.n	8006d50 <_scanf_float+0x160>
 8006d24:	2b66      	cmp	r3, #102	; 0x66
 8006d26:	d043      	beq.n	8006db0 <_scanf_float+0x1c0>
 8006d28:	2b69      	cmp	r3, #105	; 0x69
 8006d2a:	d19a      	bne.n	8006c62 <_scanf_float+0x72>
 8006d2c:	f1bb 0f00 	cmp.w	fp, #0
 8006d30:	d138      	bne.n	8006da4 <_scanf_float+0x1b4>
 8006d32:	f1b9 0f00 	cmp.w	r9, #0
 8006d36:	d197      	bne.n	8006c68 <_scanf_float+0x78>
 8006d38:	6821      	ldr	r1, [r4, #0]
 8006d3a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d3e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d42:	d195      	bne.n	8006c70 <_scanf_float+0x80>
 8006d44:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d48:	6021      	str	r1, [r4, #0]
 8006d4a:	f04f 0b01 	mov.w	fp, #1
 8006d4e:	e011      	b.n	8006d74 <_scanf_float+0x184>
 8006d50:	2b74      	cmp	r3, #116	; 0x74
 8006d52:	d034      	beq.n	8006dbe <_scanf_float+0x1ce>
 8006d54:	2b79      	cmp	r3, #121	; 0x79
 8006d56:	d184      	bne.n	8006c62 <_scanf_float+0x72>
 8006d58:	f1bb 0f07 	cmp.w	fp, #7
 8006d5c:	d181      	bne.n	8006c62 <_scanf_float+0x72>
 8006d5e:	f04f 0b08 	mov.w	fp, #8
 8006d62:	e007      	b.n	8006d74 <_scanf_float+0x184>
 8006d64:	eb12 0f0b 	cmn.w	r2, fp
 8006d68:	f47f af7b 	bne.w	8006c62 <_scanf_float+0x72>
 8006d6c:	6821      	ldr	r1, [r4, #0]
 8006d6e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006d72:	6021      	str	r1, [r4, #0]
 8006d74:	702b      	strb	r3, [r5, #0]
 8006d76:	3501      	adds	r5, #1
 8006d78:	e79a      	b.n	8006cb0 <_scanf_float+0xc0>
 8006d7a:	6821      	ldr	r1, [r4, #0]
 8006d7c:	0608      	lsls	r0, r1, #24
 8006d7e:	f57f af70 	bpl.w	8006c62 <_scanf_float+0x72>
 8006d82:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d86:	e7f4      	b.n	8006d72 <_scanf_float+0x182>
 8006d88:	2a02      	cmp	r2, #2
 8006d8a:	d047      	beq.n	8006e1c <_scanf_float+0x22c>
 8006d8c:	f1bb 0f01 	cmp.w	fp, #1
 8006d90:	d003      	beq.n	8006d9a <_scanf_float+0x1aa>
 8006d92:	f1bb 0f04 	cmp.w	fp, #4
 8006d96:	f47f af64 	bne.w	8006c62 <_scanf_float+0x72>
 8006d9a:	f10b 0b01 	add.w	fp, fp, #1
 8006d9e:	fa5f fb8b 	uxtb.w	fp, fp
 8006da2:	e7e7      	b.n	8006d74 <_scanf_float+0x184>
 8006da4:	f1bb 0f03 	cmp.w	fp, #3
 8006da8:	d0f7      	beq.n	8006d9a <_scanf_float+0x1aa>
 8006daa:	f1bb 0f05 	cmp.w	fp, #5
 8006dae:	e7f2      	b.n	8006d96 <_scanf_float+0x1a6>
 8006db0:	f1bb 0f02 	cmp.w	fp, #2
 8006db4:	f47f af55 	bne.w	8006c62 <_scanf_float+0x72>
 8006db8:	f04f 0b03 	mov.w	fp, #3
 8006dbc:	e7da      	b.n	8006d74 <_scanf_float+0x184>
 8006dbe:	f1bb 0f06 	cmp.w	fp, #6
 8006dc2:	f47f af4e 	bne.w	8006c62 <_scanf_float+0x72>
 8006dc6:	f04f 0b07 	mov.w	fp, #7
 8006dca:	e7d3      	b.n	8006d74 <_scanf_float+0x184>
 8006dcc:	6821      	ldr	r1, [r4, #0]
 8006dce:	0588      	lsls	r0, r1, #22
 8006dd0:	f57f af47 	bpl.w	8006c62 <_scanf_float+0x72>
 8006dd4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006dd8:	6021      	str	r1, [r4, #0]
 8006dda:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dde:	e7c9      	b.n	8006d74 <_scanf_float+0x184>
 8006de0:	6821      	ldr	r1, [r4, #0]
 8006de2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006de6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006dea:	d006      	beq.n	8006dfa <_scanf_float+0x20a>
 8006dec:	0548      	lsls	r0, r1, #21
 8006dee:	f57f af38 	bpl.w	8006c62 <_scanf_float+0x72>
 8006df2:	f1b9 0f00 	cmp.w	r9, #0
 8006df6:	f43f af3b 	beq.w	8006c70 <_scanf_float+0x80>
 8006dfa:	0588      	lsls	r0, r1, #22
 8006dfc:	bf58      	it	pl
 8006dfe:	9802      	ldrpl	r0, [sp, #8]
 8006e00:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e04:	bf58      	it	pl
 8006e06:	eba9 0000 	subpl.w	r0, r9, r0
 8006e0a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006e0e:	bf58      	it	pl
 8006e10:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006e14:	6021      	str	r1, [r4, #0]
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	e7ab      	b.n	8006d74 <_scanf_float+0x184>
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	e7a9      	b.n	8006d74 <_scanf_float+0x184>
 8006e20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e24:	4631      	mov	r1, r6
 8006e26:	4638      	mov	r0, r7
 8006e28:	9205      	str	r2, [sp, #20]
 8006e2a:	4798      	blx	r3
 8006e2c:	9a05      	ldr	r2, [sp, #20]
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f af04 	beq.w	8006c3c <_scanf_float+0x4c>
 8006e34:	e715      	b.n	8006c62 <_scanf_float+0x72>
 8006e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e40:	4638      	mov	r0, r7
 8006e42:	4798      	blx	r3
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	e715      	b.n	8006c78 <_scanf_float+0x88>
 8006e4c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006e50:	2b06      	cmp	r3, #6
 8006e52:	d80a      	bhi.n	8006e6a <_scanf_float+0x27a>
 8006e54:	f1bb 0f02 	cmp.w	fp, #2
 8006e58:	d967      	bls.n	8006f2a <_scanf_float+0x33a>
 8006e5a:	f1ab 0b03 	sub.w	fp, fp, #3
 8006e5e:	fa5f fb8b 	uxtb.w	fp, fp
 8006e62:	eba5 0b0b 	sub.w	fp, r5, fp
 8006e66:	455d      	cmp	r5, fp
 8006e68:	d14a      	bne.n	8006f00 <_scanf_float+0x310>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	05da      	lsls	r2, r3, #23
 8006e6e:	d51f      	bpl.n	8006eb0 <_scanf_float+0x2c0>
 8006e70:	055b      	lsls	r3, r3, #21
 8006e72:	d467      	bmi.n	8006f44 <_scanf_float+0x354>
 8006e74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	2965      	cmp	r1, #101	; 0x65
 8006e7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e80:	f105 3bff 	add.w	fp, r5, #4294967295
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	d00d      	beq.n	8006ea4 <_scanf_float+0x2b4>
 8006e88:	2945      	cmp	r1, #69	; 0x45
 8006e8a:	d00b      	beq.n	8006ea4 <_scanf_float+0x2b4>
 8006e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e90:	4632      	mov	r2, r6
 8006e92:	4638      	mov	r0, r7
 8006e94:	4798      	blx	r3
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f1a5 0b02 	sub.w	fp, r5, #2
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4638      	mov	r0, r7
 8006eac:	4798      	blx	r3
 8006eae:	465d      	mov	r5, fp
 8006eb0:	6826      	ldr	r6, [r4, #0]
 8006eb2:	f016 0610 	ands.w	r6, r6, #16
 8006eb6:	d176      	bne.n	8006fa6 <_scanf_float+0x3b6>
 8006eb8:	702e      	strb	r6, [r5, #0]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec4:	d141      	bne.n	8006f4a <_scanf_float+0x35a>
 8006ec6:	9b02      	ldr	r3, [sp, #8]
 8006ec8:	eba9 0303 	sub.w	r3, r9, r3
 8006ecc:	425a      	negs	r2, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d148      	bne.n	8006f64 <_scanf_float+0x374>
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f000 ff5e 	bl	8007d98 <_strtod_r>
 8006edc:	6825      	ldr	r5, [r4, #0]
 8006ede:	4680      	mov	r8, r0
 8006ee0:	f015 0f02 	tst.w	r5, #2
 8006ee4:	4689      	mov	r9, r1
 8006ee6:	f8da 3000 	ldr.w	r3, [sl]
 8006eea:	d046      	beq.n	8006f7a <_scanf_float+0x38a>
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	f8ca 2000 	str.w	r2, [sl]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	e9c3 8900 	strd	r8, r9, [r3]
 8006ef8:	68e3      	ldr	r3, [r4, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60e3      	str	r3, [r4, #12]
 8006efe:	e6bf      	b.n	8006c80 <_scanf_float+0x90>
 8006f00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f04:	4632      	mov	r2, r6
 8006f06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	4798      	blx	r3
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	e7a7      	b.n	8006e66 <_scanf_float+0x276>
 8006f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f20:	4638      	mov	r0, r7
 8006f22:	4798      	blx	r3
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	4545      	cmp	r5, r8
 8006f2c:	d8f3      	bhi.n	8006f16 <_scanf_float+0x326>
 8006f2e:	e6a6      	b.n	8006c7e <_scanf_float+0x8e>
 8006f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f34:	4632      	mov	r2, r6
 8006f36:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	4798      	blx	r3
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	4545      	cmp	r5, r8
 8006f46:	d8f3      	bhi.n	8006f30 <_scanf_float+0x340>
 8006f48:	e699      	b.n	8006c7e <_scanf_float+0x8e>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0c0      	beq.n	8006ed2 <_scanf_float+0x2e2>
 8006f50:	9904      	ldr	r1, [sp, #16]
 8006f52:	230a      	movs	r3, #10
 8006f54:	4632      	mov	r2, r6
 8006f56:	3101      	adds	r1, #1
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f000 ffa9 	bl	8007eb0 <_strtol_r>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	9d04      	ldr	r5, [sp, #16]
 8006f62:	1ac2      	subs	r2, r0, r3
 8006f64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	bf28      	it	cs
 8006f6c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006f70:	490e      	ldr	r1, [pc, #56]	; (8006fac <_scanf_float+0x3bc>)
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f8ac 	bl	80070d0 <siprintf>
 8006f78:	e7ab      	b.n	8006ed2 <_scanf_float+0x2e2>
 8006f7a:	1d1f      	adds	r7, r3, #4
 8006f7c:	f015 0504 	ands.w	r5, r5, #4
 8006f80:	f8ca 7000 	str.w	r7, [sl]
 8006f84:	d1b5      	bne.n	8006ef2 <_scanf_float+0x302>
 8006f86:	681f      	ldr	r7, [r3, #0]
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	f7f9 fdaa 	bl	8000ae4 <__aeabi_dcmpun>
 8006f90:	b120      	cbz	r0, 8006f9c <_scanf_float+0x3ac>
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f898 	bl	80070c8 <nanf>
 8006f98:	6038      	str	r0, [r7, #0]
 8006f9a:	e7ad      	b.n	8006ef8 <_scanf_float+0x308>
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 fdfe 	bl	8000ba0 <__aeabi_d2f>
 8006fa4:	e7f8      	b.n	8006f98 <_scanf_float+0x3a8>
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e66a      	b.n	8006c80 <_scanf_float+0x90>
 8006faa:	bf00      	nop
 8006fac:	0800b422 	.word	0x0800b422

08006fb0 <iprintf>:
 8006fb0:	b40f      	push	{r0, r1, r2, r3}
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <iprintf+0x2c>)
 8006fb4:	b513      	push	{r0, r1, r4, lr}
 8006fb6:	681c      	ldr	r4, [r3, #0]
 8006fb8:	b124      	cbz	r4, 8006fc4 <iprintf+0x14>
 8006fba:	69a3      	ldr	r3, [r4, #24]
 8006fbc:	b913      	cbnz	r3, 8006fc4 <iprintf+0x14>
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f001 ff7a 	bl	8008eb8 <__sinit>
 8006fc4:	ab05      	add	r3, sp, #20
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	68a1      	ldr	r1, [r4, #8]
 8006fca:	4620      	mov	r0, r4
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	f003 f931 	bl	800a234 <_vfiprintf_r>
 8006fd2:	b002      	add	sp, #8
 8006fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd8:	b004      	add	sp, #16
 8006fda:	4770      	bx	lr
 8006fdc:	20000010 	.word	0x20000010

08006fe0 <_puts_r>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	460e      	mov	r6, r1
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	b118      	cbz	r0, 8006ff0 <_puts_r+0x10>
 8006fe8:	6983      	ldr	r3, [r0, #24]
 8006fea:	b90b      	cbnz	r3, 8006ff0 <_puts_r+0x10>
 8006fec:	f001 ff64 	bl	8008eb8 <__sinit>
 8006ff0:	69ab      	ldr	r3, [r5, #24]
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	b913      	cbnz	r3, 8006ffc <_puts_r+0x1c>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f001 ff5e 	bl	8008eb8 <__sinit>
 8006ffc:	4b23      	ldr	r3, [pc, #140]	; (800708c <_puts_r+0xac>)
 8006ffe:	429c      	cmp	r4, r3
 8007000:	d117      	bne.n	8007032 <_puts_r+0x52>
 8007002:	686c      	ldr	r4, [r5, #4]
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	071b      	lsls	r3, r3, #28
 8007008:	d51d      	bpl.n	8007046 <_puts_r+0x66>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	b1db      	cbz	r3, 8007046 <_puts_r+0x66>
 800700e:	3e01      	subs	r6, #1
 8007010:	68a3      	ldr	r3, [r4, #8]
 8007012:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007016:	3b01      	subs	r3, #1
 8007018:	60a3      	str	r3, [r4, #8]
 800701a:	b9e9      	cbnz	r1, 8007058 <_puts_r+0x78>
 800701c:	2b00      	cmp	r3, #0
 800701e:	da2e      	bge.n	800707e <_puts_r+0x9e>
 8007020:	4622      	mov	r2, r4
 8007022:	210a      	movs	r1, #10
 8007024:	4628      	mov	r0, r5
 8007026:	f000 ff55 	bl	8007ed4 <__swbuf_r>
 800702a:	3001      	adds	r0, #1
 800702c:	d011      	beq.n	8007052 <_puts_r+0x72>
 800702e:	200a      	movs	r0, #10
 8007030:	e011      	b.n	8007056 <_puts_r+0x76>
 8007032:	4b17      	ldr	r3, [pc, #92]	; (8007090 <_puts_r+0xb0>)
 8007034:	429c      	cmp	r4, r3
 8007036:	d101      	bne.n	800703c <_puts_r+0x5c>
 8007038:	68ac      	ldr	r4, [r5, #8]
 800703a:	e7e3      	b.n	8007004 <_puts_r+0x24>
 800703c:	4b15      	ldr	r3, [pc, #84]	; (8007094 <_puts_r+0xb4>)
 800703e:	429c      	cmp	r4, r3
 8007040:	bf08      	it	eq
 8007042:	68ec      	ldreq	r4, [r5, #12]
 8007044:	e7de      	b.n	8007004 <_puts_r+0x24>
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f000 ff95 	bl	8007f78 <__swsetup_r>
 800704e:	2800      	cmp	r0, #0
 8007050:	d0dd      	beq.n	800700e <_puts_r+0x2e>
 8007052:	f04f 30ff 	mov.w	r0, #4294967295
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	2b00      	cmp	r3, #0
 800705a:	da04      	bge.n	8007066 <_puts_r+0x86>
 800705c:	69a2      	ldr	r2, [r4, #24]
 800705e:	429a      	cmp	r2, r3
 8007060:	dc06      	bgt.n	8007070 <_puts_r+0x90>
 8007062:	290a      	cmp	r1, #10
 8007064:	d004      	beq.n	8007070 <_puts_r+0x90>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	7019      	strb	r1, [r3, #0]
 800706e:	e7cf      	b.n	8007010 <_puts_r+0x30>
 8007070:	4622      	mov	r2, r4
 8007072:	4628      	mov	r0, r5
 8007074:	f000 ff2e 	bl	8007ed4 <__swbuf_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d1c9      	bne.n	8007010 <_puts_r+0x30>
 800707c:	e7e9      	b.n	8007052 <_puts_r+0x72>
 800707e:	200a      	movs	r0, #10
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	7018      	strb	r0, [r3, #0]
 8007088:	e7e5      	b.n	8007056 <_puts_r+0x76>
 800708a:	bf00      	nop
 800708c:	0800b4a8 	.word	0x0800b4a8
 8007090:	0800b4c8 	.word	0x0800b4c8
 8007094:	0800b488 	.word	0x0800b488

08007098 <puts>:
 8007098:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <puts+0xc>)
 800709a:	4601      	mov	r1, r0
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	f7ff bf9f 	b.w	8006fe0 <_puts_r>
 80070a2:	bf00      	nop
 80070a4:	20000010 	.word	0x20000010

080070a8 <_sbrk_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	2300      	movs	r3, #0
 80070ac:	4c05      	ldr	r4, [pc, #20]	; (80070c4 <_sbrk_r+0x1c>)
 80070ae:	4605      	mov	r5, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	f7fa fbc2 	bl	800183c <_sbrk>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_sbrk_r+0x1a>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_sbrk_r+0x1a>
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	2000609c 	.word	0x2000609c

080070c8 <nanf>:
 80070c8:	4800      	ldr	r0, [pc, #0]	; (80070cc <nanf+0x4>)
 80070ca:	4770      	bx	lr
 80070cc:	7fc00000 	.word	0x7fc00000

080070d0 <siprintf>:
 80070d0:	b40e      	push	{r1, r2, r3}
 80070d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070d6:	b500      	push	{lr}
 80070d8:	b09c      	sub	sp, #112	; 0x70
 80070da:	ab1d      	add	r3, sp, #116	; 0x74
 80070dc:	9002      	str	r0, [sp, #8]
 80070de:	9006      	str	r0, [sp, #24]
 80070e0:	9107      	str	r1, [sp, #28]
 80070e2:	9104      	str	r1, [sp, #16]
 80070e4:	4808      	ldr	r0, [pc, #32]	; (8007108 <siprintf+0x38>)
 80070e6:	4909      	ldr	r1, [pc, #36]	; (800710c <siprintf+0x3c>)
 80070e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ec:	9105      	str	r1, [sp, #20]
 80070ee:	6800      	ldr	r0, [r0, #0]
 80070f0:	a902      	add	r1, sp, #8
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	f002 ff7e 	bl	8009ff4 <_svfiprintf_r>
 80070f8:	2200      	movs	r2, #0
 80070fa:	9b02      	ldr	r3, [sp, #8]
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	b01c      	add	sp, #112	; 0x70
 8007100:	f85d eb04 	ldr.w	lr, [sp], #4
 8007104:	b003      	add	sp, #12
 8007106:	4770      	bx	lr
 8007108:	20000010 	.word	0x20000010
 800710c:	ffff0208 	.word	0xffff0208

08007110 <strcat>:
 8007110:	4603      	mov	r3, r0
 8007112:	b510      	push	{r4, lr}
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	1c5c      	adds	r4, r3, #1
 8007118:	b93a      	cbnz	r2, 800712a <strcat+0x1a>
 800711a:	3b01      	subs	r3, #1
 800711c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007120:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007124:	2a00      	cmp	r2, #0
 8007126:	d1f9      	bne.n	800711c <strcat+0xc>
 8007128:	bd10      	pop	{r4, pc}
 800712a:	4623      	mov	r3, r4
 800712c:	e7f2      	b.n	8007114 <strcat+0x4>

0800712e <strncmp>:
 800712e:	b510      	push	{r4, lr}
 8007130:	b16a      	cbz	r2, 800714e <strncmp+0x20>
 8007132:	3901      	subs	r1, #1
 8007134:	1884      	adds	r4, r0, r2
 8007136:	f810 3b01 	ldrb.w	r3, [r0], #1
 800713a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800713e:	4293      	cmp	r3, r2
 8007140:	d103      	bne.n	800714a <strncmp+0x1c>
 8007142:	42a0      	cmp	r0, r4
 8007144:	d001      	beq.n	800714a <strncmp+0x1c>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f5      	bne.n	8007136 <strncmp+0x8>
 800714a:	1a98      	subs	r0, r3, r2
 800714c:	bd10      	pop	{r4, pc}
 800714e:	4610      	mov	r0, r2
 8007150:	e7fc      	b.n	800714c <strncmp+0x1e>

08007152 <sulp>:
 8007152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007156:	460f      	mov	r7, r1
 8007158:	4690      	mov	r8, r2
 800715a:	f002 fdc3 	bl	8009ce4 <__ulp>
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	f1b8 0f00 	cmp.w	r8, #0
 8007166:	d011      	beq.n	800718c <sulp+0x3a>
 8007168:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800716c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007170:	2b00      	cmp	r3, #0
 8007172:	dd0b      	ble.n	800718c <sulp+0x3a>
 8007174:	2400      	movs	r4, #0
 8007176:	051b      	lsls	r3, r3, #20
 8007178:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800717c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007180:	4622      	mov	r2, r4
 8007182:	462b      	mov	r3, r5
 8007184:	f7f9 fa14 	bl	80005b0 <__aeabi_dmul>
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	4620      	mov	r0, r4
 800718e:	4629      	mov	r1, r5
 8007190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007194:	0000      	movs	r0, r0
	...

08007198 <_strtod_l>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	461f      	mov	r7, r3
 800719e:	2300      	movs	r3, #0
 80071a0:	b0a1      	sub	sp, #132	; 0x84
 80071a2:	4683      	mov	fp, r0
 80071a4:	4638      	mov	r0, r7
 80071a6:	460e      	mov	r6, r1
 80071a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80071aa:	931c      	str	r3, [sp, #112]	; 0x70
 80071ac:	f002 fa39 	bl	8009622 <__localeconv_l>
 80071b0:	4680      	mov	r8, r0
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	f7f9 f838 	bl	8000228 <strlen>
 80071b8:	f04f 0900 	mov.w	r9, #0
 80071bc:	4604      	mov	r4, r0
 80071be:	f04f 0a00 	mov.w	sl, #0
 80071c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80071c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	2a0d      	cmp	r2, #13
 80071ca:	d832      	bhi.n	8007232 <_strtod_l+0x9a>
 80071cc:	2a09      	cmp	r2, #9
 80071ce:	d236      	bcs.n	800723e <_strtod_l+0xa6>
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	d03e      	beq.n	8007252 <_strtod_l+0xba>
 80071d4:	2300      	movs	r3, #0
 80071d6:	930d      	str	r3, [sp, #52]	; 0x34
 80071d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80071da:	782b      	ldrb	r3, [r5, #0]
 80071dc:	2b30      	cmp	r3, #48	; 0x30
 80071de:	f040 80ac 	bne.w	800733a <_strtod_l+0x1a2>
 80071e2:	786b      	ldrb	r3, [r5, #1]
 80071e4:	2b58      	cmp	r3, #88	; 0x58
 80071e6:	d001      	beq.n	80071ec <_strtod_l+0x54>
 80071e8:	2b78      	cmp	r3, #120	; 0x78
 80071ea:	d167      	bne.n	80072bc <_strtod_l+0x124>
 80071ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ee:	9702      	str	r7, [sp, #8]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	ab1c      	add	r3, sp, #112	; 0x70
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	4a89      	ldr	r2, [pc, #548]	; (800741c <_strtod_l+0x284>)
 80071f8:	ab1d      	add	r3, sp, #116	; 0x74
 80071fa:	a91b      	add	r1, sp, #108	; 0x6c
 80071fc:	4658      	mov	r0, fp
 80071fe:	f001 ff35 	bl	800906c <__gethex>
 8007202:	f010 0407 	ands.w	r4, r0, #7
 8007206:	4606      	mov	r6, r0
 8007208:	d005      	beq.n	8007216 <_strtod_l+0x7e>
 800720a:	2c06      	cmp	r4, #6
 800720c:	d12b      	bne.n	8007266 <_strtod_l+0xce>
 800720e:	2300      	movs	r3, #0
 8007210:	3501      	adds	r5, #1
 8007212:	951b      	str	r5, [sp, #108]	; 0x6c
 8007214:	930d      	str	r3, [sp, #52]	; 0x34
 8007216:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 85a6 	bne.w	8007d6a <_strtod_l+0xbd2>
 800721e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007220:	b1e3      	cbz	r3, 800725c <_strtod_l+0xc4>
 8007222:	464a      	mov	r2, r9
 8007224:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007228:	4610      	mov	r0, r2
 800722a:	4619      	mov	r1, r3
 800722c:	b021      	add	sp, #132	; 0x84
 800722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007232:	2a2b      	cmp	r2, #43	; 0x2b
 8007234:	d015      	beq.n	8007262 <_strtod_l+0xca>
 8007236:	2a2d      	cmp	r2, #45	; 0x2d
 8007238:	d004      	beq.n	8007244 <_strtod_l+0xac>
 800723a:	2a20      	cmp	r2, #32
 800723c:	d1ca      	bne.n	80071d4 <_strtod_l+0x3c>
 800723e:	3301      	adds	r3, #1
 8007240:	931b      	str	r3, [sp, #108]	; 0x6c
 8007242:	e7bf      	b.n	80071c4 <_strtod_l+0x2c>
 8007244:	2201      	movs	r2, #1
 8007246:	920d      	str	r2, [sp, #52]	; 0x34
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	921b      	str	r2, [sp, #108]	; 0x6c
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1c2      	bne.n	80071d8 <_strtod_l+0x40>
 8007252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007254:	961b      	str	r6, [sp, #108]	; 0x6c
 8007256:	2b00      	cmp	r3, #0
 8007258:	f040 8585 	bne.w	8007d66 <_strtod_l+0xbce>
 800725c:	464a      	mov	r2, r9
 800725e:	4653      	mov	r3, sl
 8007260:	e7e2      	b.n	8007228 <_strtod_l+0x90>
 8007262:	2200      	movs	r2, #0
 8007264:	e7ef      	b.n	8007246 <_strtod_l+0xae>
 8007266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007268:	b13a      	cbz	r2, 800727a <_strtod_l+0xe2>
 800726a:	2135      	movs	r1, #53	; 0x35
 800726c:	a81e      	add	r0, sp, #120	; 0x78
 800726e:	f002 fe2c 	bl	8009eca <__copybits>
 8007272:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007274:	4658      	mov	r0, fp
 8007276:	f002 fa9f 	bl	80097b8 <_Bfree>
 800727a:	3c01      	subs	r4, #1
 800727c:	2c04      	cmp	r4, #4
 800727e:	d806      	bhi.n	800728e <_strtod_l+0xf6>
 8007280:	e8df f004 	tbb	[pc, r4]
 8007284:	1714030a 	.word	0x1714030a
 8007288:	0a          	.byte	0x0a
 8007289:	00          	.byte	0x00
 800728a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800728e:	0731      	lsls	r1, r6, #28
 8007290:	d5c1      	bpl.n	8007216 <_strtod_l+0x7e>
 8007292:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007296:	e7be      	b.n	8007216 <_strtod_l+0x7e>
 8007298:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800729a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800729e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80072a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072a6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80072aa:	e7f0      	b.n	800728e <_strtod_l+0xf6>
 80072ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007420 <_strtod_l+0x288>
 80072b0:	e7ed      	b.n	800728e <_strtod_l+0xf6>
 80072b2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80072b6:	f04f 39ff 	mov.w	r9, #4294967295
 80072ba:	e7e8      	b.n	800728e <_strtod_l+0xf6>
 80072bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	2b30      	cmp	r3, #48	; 0x30
 80072c6:	d0f9      	beq.n	80072bc <_strtod_l+0x124>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0a4      	beq.n	8007216 <_strtod_l+0x7e>
 80072cc:	2301      	movs	r3, #1
 80072ce:	2500      	movs	r5, #0
 80072d0:	220a      	movs	r2, #10
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072d6:	9506      	str	r5, [sp, #24]
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	9504      	str	r5, [sp, #16]
 80072dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80072de:	7807      	ldrb	r7, [r0, #0]
 80072e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80072e4:	b2d9      	uxtb	r1, r3
 80072e6:	2909      	cmp	r1, #9
 80072e8:	d929      	bls.n	800733e <_strtod_l+0x1a6>
 80072ea:	4622      	mov	r2, r4
 80072ec:	f8d8 1000 	ldr.w	r1, [r8]
 80072f0:	f7ff ff1d 	bl	800712e <strncmp>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d031      	beq.n	800735c <_strtod_l+0x1c4>
 80072f8:	2000      	movs	r0, #0
 80072fa:	463b      	mov	r3, r7
 80072fc:	4602      	mov	r2, r0
 80072fe:	9c04      	ldr	r4, [sp, #16]
 8007300:	9005      	str	r0, [sp, #20]
 8007302:	2b65      	cmp	r3, #101	; 0x65
 8007304:	d001      	beq.n	800730a <_strtod_l+0x172>
 8007306:	2b45      	cmp	r3, #69	; 0x45
 8007308:	d114      	bne.n	8007334 <_strtod_l+0x19c>
 800730a:	b924      	cbnz	r4, 8007316 <_strtod_l+0x17e>
 800730c:	b910      	cbnz	r0, 8007314 <_strtod_l+0x17c>
 800730e:	9b07      	ldr	r3, [sp, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d09e      	beq.n	8007252 <_strtod_l+0xba>
 8007314:	2400      	movs	r4, #0
 8007316:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007318:	1c73      	adds	r3, r6, #1
 800731a:	931b      	str	r3, [sp, #108]	; 0x6c
 800731c:	7873      	ldrb	r3, [r6, #1]
 800731e:	2b2b      	cmp	r3, #43	; 0x2b
 8007320:	d078      	beq.n	8007414 <_strtod_l+0x27c>
 8007322:	2b2d      	cmp	r3, #45	; 0x2d
 8007324:	d070      	beq.n	8007408 <_strtod_l+0x270>
 8007326:	f04f 0c00 	mov.w	ip, #0
 800732a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800732e:	2f09      	cmp	r7, #9
 8007330:	d97c      	bls.n	800742c <_strtod_l+0x294>
 8007332:	961b      	str	r6, [sp, #108]	; 0x6c
 8007334:	f04f 0e00 	mov.w	lr, #0
 8007338:	e09a      	b.n	8007470 <_strtod_l+0x2d8>
 800733a:	2300      	movs	r3, #0
 800733c:	e7c7      	b.n	80072ce <_strtod_l+0x136>
 800733e:	9904      	ldr	r1, [sp, #16]
 8007340:	3001      	adds	r0, #1
 8007342:	2908      	cmp	r1, #8
 8007344:	bfd7      	itett	le
 8007346:	9906      	ldrle	r1, [sp, #24]
 8007348:	fb02 3505 	mlagt	r5, r2, r5, r3
 800734c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007350:	9306      	strle	r3, [sp, #24]
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	901b      	str	r0, [sp, #108]	; 0x6c
 8007356:	3301      	adds	r3, #1
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	e7bf      	b.n	80072dc <_strtod_l+0x144>
 800735c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800735e:	191a      	adds	r2, r3, r4
 8007360:	921b      	str	r2, [sp, #108]	; 0x6c
 8007362:	9a04      	ldr	r2, [sp, #16]
 8007364:	5d1b      	ldrb	r3, [r3, r4]
 8007366:	2a00      	cmp	r2, #0
 8007368:	d037      	beq.n	80073da <_strtod_l+0x242>
 800736a:	4602      	mov	r2, r0
 800736c:	9c04      	ldr	r4, [sp, #16]
 800736e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007372:	2909      	cmp	r1, #9
 8007374:	d913      	bls.n	800739e <_strtod_l+0x206>
 8007376:	2101      	movs	r1, #1
 8007378:	9105      	str	r1, [sp, #20]
 800737a:	e7c2      	b.n	8007302 <_strtod_l+0x16a>
 800737c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800737e:	3001      	adds	r0, #1
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	921b      	str	r2, [sp, #108]	; 0x6c
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b30      	cmp	r3, #48	; 0x30
 8007388:	d0f8      	beq.n	800737c <_strtod_l+0x1e4>
 800738a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800738e:	2a08      	cmp	r2, #8
 8007390:	f200 84f0 	bhi.w	8007d74 <_strtod_l+0xbdc>
 8007394:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007396:	9208      	str	r2, [sp, #32]
 8007398:	4602      	mov	r2, r0
 800739a:	2000      	movs	r0, #0
 800739c:	4604      	mov	r4, r0
 800739e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80073a2:	f100 0101 	add.w	r1, r0, #1
 80073a6:	d012      	beq.n	80073ce <_strtod_l+0x236>
 80073a8:	440a      	add	r2, r1
 80073aa:	270a      	movs	r7, #10
 80073ac:	4621      	mov	r1, r4
 80073ae:	eb00 0c04 	add.w	ip, r0, r4
 80073b2:	458c      	cmp	ip, r1
 80073b4:	d113      	bne.n	80073de <_strtod_l+0x246>
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	2908      	cmp	r1, #8
 80073ba:	f104 0401 	add.w	r4, r4, #1
 80073be:	4404      	add	r4, r0
 80073c0:	dc19      	bgt.n	80073f6 <_strtod_l+0x25e>
 80073c2:	210a      	movs	r1, #10
 80073c4:	9b06      	ldr	r3, [sp, #24]
 80073c6:	fb01 e303 	mla	r3, r1, r3, lr
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	2100      	movs	r1, #0
 80073ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073d0:	1c58      	adds	r0, r3, #1
 80073d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	4608      	mov	r0, r1
 80073d8:	e7c9      	b.n	800736e <_strtod_l+0x1d6>
 80073da:	9804      	ldr	r0, [sp, #16]
 80073dc:	e7d3      	b.n	8007386 <_strtod_l+0x1ee>
 80073de:	2908      	cmp	r1, #8
 80073e0:	f101 0101 	add.w	r1, r1, #1
 80073e4:	dc03      	bgt.n	80073ee <_strtod_l+0x256>
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	437b      	muls	r3, r7
 80073ea:	9306      	str	r3, [sp, #24]
 80073ec:	e7e1      	b.n	80073b2 <_strtod_l+0x21a>
 80073ee:	2910      	cmp	r1, #16
 80073f0:	bfd8      	it	le
 80073f2:	437d      	mulle	r5, r7
 80073f4:	e7dd      	b.n	80073b2 <_strtod_l+0x21a>
 80073f6:	2c10      	cmp	r4, #16
 80073f8:	bfdc      	itt	le
 80073fa:	210a      	movle	r1, #10
 80073fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8007400:	e7e4      	b.n	80073cc <_strtod_l+0x234>
 8007402:	2301      	movs	r3, #1
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	e781      	b.n	800730c <_strtod_l+0x174>
 8007408:	f04f 0c01 	mov.w	ip, #1
 800740c:	1cb3      	adds	r3, r6, #2
 800740e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007410:	78b3      	ldrb	r3, [r6, #2]
 8007412:	e78a      	b.n	800732a <_strtod_l+0x192>
 8007414:	f04f 0c00 	mov.w	ip, #0
 8007418:	e7f8      	b.n	800740c <_strtod_l+0x274>
 800741a:	bf00      	nop
 800741c:	0800b428 	.word	0x0800b428
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007426:	1c5f      	adds	r7, r3, #1
 8007428:	971b      	str	r7, [sp, #108]	; 0x6c
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b30      	cmp	r3, #48	; 0x30
 800742e:	d0f9      	beq.n	8007424 <_strtod_l+0x28c>
 8007430:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007434:	2f08      	cmp	r7, #8
 8007436:	f63f af7d 	bhi.w	8007334 <_strtod_l+0x19c>
 800743a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800743e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007444:	1c5f      	adds	r7, r3, #1
 8007446:	971b      	str	r7, [sp, #108]	; 0x6c
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800744e:	f1b8 0f09 	cmp.w	r8, #9
 8007452:	d937      	bls.n	80074c4 <_strtod_l+0x32c>
 8007454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007456:	1a7f      	subs	r7, r7, r1
 8007458:	2f08      	cmp	r7, #8
 800745a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800745e:	dc37      	bgt.n	80074d0 <_strtod_l+0x338>
 8007460:	45be      	cmp	lr, r7
 8007462:	bfa8      	it	ge
 8007464:	46be      	movge	lr, r7
 8007466:	f1bc 0f00 	cmp.w	ip, #0
 800746a:	d001      	beq.n	8007470 <_strtod_l+0x2d8>
 800746c:	f1ce 0e00 	rsb	lr, lr, #0
 8007470:	2c00      	cmp	r4, #0
 8007472:	d151      	bne.n	8007518 <_strtod_l+0x380>
 8007474:	2800      	cmp	r0, #0
 8007476:	f47f aece 	bne.w	8007216 <_strtod_l+0x7e>
 800747a:	9a07      	ldr	r2, [sp, #28]
 800747c:	2a00      	cmp	r2, #0
 800747e:	f47f aeca 	bne.w	8007216 <_strtod_l+0x7e>
 8007482:	9a05      	ldr	r2, [sp, #20]
 8007484:	2a00      	cmp	r2, #0
 8007486:	f47f aee4 	bne.w	8007252 <_strtod_l+0xba>
 800748a:	2b4e      	cmp	r3, #78	; 0x4e
 800748c:	d027      	beq.n	80074de <_strtod_l+0x346>
 800748e:	dc21      	bgt.n	80074d4 <_strtod_l+0x33c>
 8007490:	2b49      	cmp	r3, #73	; 0x49
 8007492:	f47f aede 	bne.w	8007252 <_strtod_l+0xba>
 8007496:	49a4      	ldr	r1, [pc, #656]	; (8007728 <_strtod_l+0x590>)
 8007498:	a81b      	add	r0, sp, #108	; 0x6c
 800749a:	f002 f81b 	bl	80094d4 <__match>
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f aed7 	beq.w	8007252 <_strtod_l+0xba>
 80074a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a6:	49a1      	ldr	r1, [pc, #644]	; (800772c <_strtod_l+0x594>)
 80074a8:	3b01      	subs	r3, #1
 80074aa:	a81b      	add	r0, sp, #108	; 0x6c
 80074ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80074ae:	f002 f811 	bl	80094d4 <__match>
 80074b2:	b910      	cbnz	r0, 80074ba <_strtod_l+0x322>
 80074b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074b6:	3301      	adds	r3, #1
 80074b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80074ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007740 <_strtod_l+0x5a8>
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	e6a8      	b.n	8007216 <_strtod_l+0x7e>
 80074c4:	210a      	movs	r1, #10
 80074c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80074ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80074ce:	e7b8      	b.n	8007442 <_strtod_l+0x2aa>
 80074d0:	46be      	mov	lr, r7
 80074d2:	e7c8      	b.n	8007466 <_strtod_l+0x2ce>
 80074d4:	2b69      	cmp	r3, #105	; 0x69
 80074d6:	d0de      	beq.n	8007496 <_strtod_l+0x2fe>
 80074d8:	2b6e      	cmp	r3, #110	; 0x6e
 80074da:	f47f aeba 	bne.w	8007252 <_strtod_l+0xba>
 80074de:	4994      	ldr	r1, [pc, #592]	; (8007730 <_strtod_l+0x598>)
 80074e0:	a81b      	add	r0, sp, #108	; 0x6c
 80074e2:	f001 fff7 	bl	80094d4 <__match>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f43f aeb3 	beq.w	8007252 <_strtod_l+0xba>
 80074ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b28      	cmp	r3, #40	; 0x28
 80074f2:	d10e      	bne.n	8007512 <_strtod_l+0x37a>
 80074f4:	aa1e      	add	r2, sp, #120	; 0x78
 80074f6:	498f      	ldr	r1, [pc, #572]	; (8007734 <_strtod_l+0x59c>)
 80074f8:	a81b      	add	r0, sp, #108	; 0x6c
 80074fa:	f001 ffff 	bl	80094fc <__hexnan>
 80074fe:	2805      	cmp	r0, #5
 8007500:	d107      	bne.n	8007512 <_strtod_l+0x37a>
 8007502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007504:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007508:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800750c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007510:	e681      	b.n	8007216 <_strtod_l+0x7e>
 8007512:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007748 <_strtod_l+0x5b0>
 8007516:	e7d2      	b.n	80074be <_strtod_l+0x326>
 8007518:	ebae 0302 	sub.w	r3, lr, r2
 800751c:	9307      	str	r3, [sp, #28]
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	9806      	ldr	r0, [sp, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf08      	it	eq
 8007526:	4623      	moveq	r3, r4
 8007528:	2c10      	cmp	r4, #16
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	46a0      	mov	r8, r4
 800752e:	bfa8      	it	ge
 8007530:	f04f 0810 	movge.w	r8, #16
 8007534:	f7f8 ffc2 	bl	80004bc <__aeabi_ui2d>
 8007538:	2c09      	cmp	r4, #9
 800753a:	4681      	mov	r9, r0
 800753c:	468a      	mov	sl, r1
 800753e:	dc13      	bgt.n	8007568 <_strtod_l+0x3d0>
 8007540:	9b07      	ldr	r3, [sp, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f43f ae67 	beq.w	8007216 <_strtod_l+0x7e>
 8007548:	9b07      	ldr	r3, [sp, #28]
 800754a:	dd7e      	ble.n	800764a <_strtod_l+0x4b2>
 800754c:	2b16      	cmp	r3, #22
 800754e:	dc65      	bgt.n	800761c <_strtod_l+0x484>
 8007550:	4a79      	ldr	r2, [pc, #484]	; (8007738 <_strtod_l+0x5a0>)
 8007552:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007556:	464a      	mov	r2, r9
 8007558:	e9de 0100 	ldrd	r0, r1, [lr]
 800755c:	4653      	mov	r3, sl
 800755e:	f7f9 f827 	bl	80005b0 <__aeabi_dmul>
 8007562:	4681      	mov	r9, r0
 8007564:	468a      	mov	sl, r1
 8007566:	e656      	b.n	8007216 <_strtod_l+0x7e>
 8007568:	4b73      	ldr	r3, [pc, #460]	; (8007738 <_strtod_l+0x5a0>)
 800756a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800756e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007572:	f7f9 f81d 	bl	80005b0 <__aeabi_dmul>
 8007576:	4606      	mov	r6, r0
 8007578:	4628      	mov	r0, r5
 800757a:	460f      	mov	r7, r1
 800757c:	f7f8 ff9e 	bl	80004bc <__aeabi_ui2d>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	f7f8 fe5c 	bl	8000244 <__adddf3>
 800758c:	2c0f      	cmp	r4, #15
 800758e:	4681      	mov	r9, r0
 8007590:	468a      	mov	sl, r1
 8007592:	ddd5      	ble.n	8007540 <_strtod_l+0x3a8>
 8007594:	9b07      	ldr	r3, [sp, #28]
 8007596:	eba4 0808 	sub.w	r8, r4, r8
 800759a:	4498      	add	r8, r3
 800759c:	f1b8 0f00 	cmp.w	r8, #0
 80075a0:	f340 809a 	ble.w	80076d8 <_strtod_l+0x540>
 80075a4:	f018 030f 	ands.w	r3, r8, #15
 80075a8:	d00a      	beq.n	80075c0 <_strtod_l+0x428>
 80075aa:	4963      	ldr	r1, [pc, #396]	; (8007738 <_strtod_l+0x5a0>)
 80075ac:	464a      	mov	r2, r9
 80075ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b6:	4653      	mov	r3, sl
 80075b8:	f7f8 fffa 	bl	80005b0 <__aeabi_dmul>
 80075bc:	4681      	mov	r9, r0
 80075be:	468a      	mov	sl, r1
 80075c0:	f038 080f 	bics.w	r8, r8, #15
 80075c4:	d077      	beq.n	80076b6 <_strtod_l+0x51e>
 80075c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80075ca:	dd4b      	ble.n	8007664 <_strtod_l+0x4cc>
 80075cc:	f04f 0800 	mov.w	r8, #0
 80075d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80075d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80075d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80075dc:	2322      	movs	r3, #34	; 0x22
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007740 <_strtod_l+0x5a8>
 80075e6:	f8cb 3000 	str.w	r3, [fp]
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f43f ae12 	beq.w	8007216 <_strtod_l+0x7e>
 80075f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075f4:	4658      	mov	r0, fp
 80075f6:	f002 f8df 	bl	80097b8 <_Bfree>
 80075fa:	9906      	ldr	r1, [sp, #24]
 80075fc:	4658      	mov	r0, fp
 80075fe:	f002 f8db 	bl	80097b8 <_Bfree>
 8007602:	9904      	ldr	r1, [sp, #16]
 8007604:	4658      	mov	r0, fp
 8007606:	f002 f8d7 	bl	80097b8 <_Bfree>
 800760a:	9908      	ldr	r1, [sp, #32]
 800760c:	4658      	mov	r0, fp
 800760e:	f002 f8d3 	bl	80097b8 <_Bfree>
 8007612:	4641      	mov	r1, r8
 8007614:	4658      	mov	r0, fp
 8007616:	f002 f8cf 	bl	80097b8 <_Bfree>
 800761a:	e5fc      	b.n	8007216 <_strtod_l+0x7e>
 800761c:	9a07      	ldr	r2, [sp, #28]
 800761e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007622:	4293      	cmp	r3, r2
 8007624:	dbb6      	blt.n	8007594 <_strtod_l+0x3fc>
 8007626:	4d44      	ldr	r5, [pc, #272]	; (8007738 <_strtod_l+0x5a0>)
 8007628:	f1c4 040f 	rsb	r4, r4, #15
 800762c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007630:	464a      	mov	r2, r9
 8007632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007636:	4653      	mov	r3, sl
 8007638:	f7f8 ffba 	bl	80005b0 <__aeabi_dmul>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	1b1c      	subs	r4, r3, r4
 8007640:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007648:	e789      	b.n	800755e <_strtod_l+0x3c6>
 800764a:	f113 0f16 	cmn.w	r3, #22
 800764e:	dba1      	blt.n	8007594 <_strtod_l+0x3fc>
 8007650:	4a39      	ldr	r2, [pc, #228]	; (8007738 <_strtod_l+0x5a0>)
 8007652:	4648      	mov	r0, r9
 8007654:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007658:	e9d2 2300 	ldrd	r2, r3, [r2]
 800765c:	4651      	mov	r1, sl
 800765e:	f7f9 f8d1 	bl	8000804 <__aeabi_ddiv>
 8007662:	e77e      	b.n	8007562 <_strtod_l+0x3ca>
 8007664:	2300      	movs	r3, #0
 8007666:	4648      	mov	r0, r9
 8007668:	4651      	mov	r1, sl
 800766a:	461d      	mov	r5, r3
 800766c:	4e33      	ldr	r6, [pc, #204]	; (800773c <_strtod_l+0x5a4>)
 800766e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007672:	f1b8 0f01 	cmp.w	r8, #1
 8007676:	dc21      	bgt.n	80076bc <_strtod_l+0x524>
 8007678:	b10b      	cbz	r3, 800767e <_strtod_l+0x4e6>
 800767a:	4681      	mov	r9, r0
 800767c:	468a      	mov	sl, r1
 800767e:	4b2f      	ldr	r3, [pc, #188]	; (800773c <_strtod_l+0x5a4>)
 8007680:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007684:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007688:	464a      	mov	r2, r9
 800768a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800768e:	4653      	mov	r3, sl
 8007690:	f7f8 ff8e 	bl	80005b0 <__aeabi_dmul>
 8007694:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <_strtod_l+0x5a8>)
 8007696:	460a      	mov	r2, r1
 8007698:	400b      	ands	r3, r1
 800769a:	492a      	ldr	r1, [pc, #168]	; (8007744 <_strtod_l+0x5ac>)
 800769c:	4681      	mov	r9, r0
 800769e:	428b      	cmp	r3, r1
 80076a0:	d894      	bhi.n	80075cc <_strtod_l+0x434>
 80076a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80076a6:	428b      	cmp	r3, r1
 80076a8:	bf86      	itte	hi
 80076aa:	f04f 39ff 	movhi.w	r9, #4294967295
 80076ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800774c <_strtod_l+0x5b4>
 80076b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80076b6:	2300      	movs	r3, #0
 80076b8:	9305      	str	r3, [sp, #20]
 80076ba:	e07b      	b.n	80077b4 <_strtod_l+0x61c>
 80076bc:	f018 0f01 	tst.w	r8, #1
 80076c0:	d006      	beq.n	80076d0 <_strtod_l+0x538>
 80076c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f7f8 ff71 	bl	80005b0 <__aeabi_dmul>
 80076ce:	2301      	movs	r3, #1
 80076d0:	3501      	adds	r5, #1
 80076d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076d6:	e7cc      	b.n	8007672 <_strtod_l+0x4da>
 80076d8:	d0ed      	beq.n	80076b6 <_strtod_l+0x51e>
 80076da:	f1c8 0800 	rsb	r8, r8, #0
 80076de:	f018 020f 	ands.w	r2, r8, #15
 80076e2:	d00a      	beq.n	80076fa <_strtod_l+0x562>
 80076e4:	4b14      	ldr	r3, [pc, #80]	; (8007738 <_strtod_l+0x5a0>)
 80076e6:	4648      	mov	r0, r9
 80076e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ec:	4651      	mov	r1, sl
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f9 f887 	bl	8000804 <__aeabi_ddiv>
 80076f6:	4681      	mov	r9, r0
 80076f8:	468a      	mov	sl, r1
 80076fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076fe:	d0da      	beq.n	80076b6 <_strtod_l+0x51e>
 8007700:	f1b8 0f1f 	cmp.w	r8, #31
 8007704:	dd24      	ble.n	8007750 <_strtod_l+0x5b8>
 8007706:	f04f 0800 	mov.w	r8, #0
 800770a:	f8cd 8010 	str.w	r8, [sp, #16]
 800770e:	f8cd 8020 	str.w	r8, [sp, #32]
 8007712:	f8cd 8018 	str.w	r8, [sp, #24]
 8007716:	2322      	movs	r3, #34	; 0x22
 8007718:	f04f 0900 	mov.w	r9, #0
 800771c:	f04f 0a00 	mov.w	sl, #0
 8007720:	f8cb 3000 	str.w	r3, [fp]
 8007724:	e761      	b.n	80075ea <_strtod_l+0x452>
 8007726:	bf00      	nop
 8007728:	0800b3f5 	.word	0x0800b3f5
 800772c:	0800b47b 	.word	0x0800b47b
 8007730:	0800b3fd 	.word	0x0800b3fd
 8007734:	0800b43c 	.word	0x0800b43c
 8007738:	0800b518 	.word	0x0800b518
 800773c:	0800b4f0 	.word	0x0800b4f0
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	7ca00000 	.word	0x7ca00000
 8007748:	fff80000 	.word	0xfff80000
 800774c:	7fefffff 	.word	0x7fefffff
 8007750:	f018 0310 	ands.w	r3, r8, #16
 8007754:	bf18      	it	ne
 8007756:	236a      	movne	r3, #106	; 0x6a
 8007758:	4648      	mov	r0, r9
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	4651      	mov	r1, sl
 800775e:	2300      	movs	r3, #0
 8007760:	4da1      	ldr	r5, [pc, #644]	; (80079e8 <_strtod_l+0x850>)
 8007762:	f1b8 0f00 	cmp.w	r8, #0
 8007766:	f300 8113 	bgt.w	8007990 <_strtod_l+0x7f8>
 800776a:	b10b      	cbz	r3, 8007770 <_strtod_l+0x5d8>
 800776c:	4681      	mov	r9, r0
 800776e:	468a      	mov	sl, r1
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	b1bb      	cbz	r3, 80077a4 <_strtod_l+0x60c>
 8007774:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800777c:	2b00      	cmp	r3, #0
 800777e:	4651      	mov	r1, sl
 8007780:	dd10      	ble.n	80077a4 <_strtod_l+0x60c>
 8007782:	2b1f      	cmp	r3, #31
 8007784:	f340 8110 	ble.w	80079a8 <_strtod_l+0x810>
 8007788:	2b34      	cmp	r3, #52	; 0x34
 800778a:	bfd8      	it	le
 800778c:	f04f 32ff 	movle.w	r2, #4294967295
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	bfcf      	iteee	gt
 8007796:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800779a:	3b20      	suble	r3, #32
 800779c:	fa02 f303 	lslle.w	r3, r2, r3
 80077a0:	ea03 0a01 	andle.w	sl, r3, r1
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4648      	mov	r0, r9
 80077aa:	4651      	mov	r1, sl
 80077ac:	f7f9 f968 	bl	8000a80 <__aeabi_dcmpeq>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1a8      	bne.n	8007706 <_strtod_l+0x56e>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	9a04      	ldr	r2, [sp, #16]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	9908      	ldr	r1, [sp, #32]
 80077bc:	4623      	mov	r3, r4
 80077be:	4658      	mov	r0, fp
 80077c0:	f002 f84c 	bl	800985c <__s2b>
 80077c4:	9008      	str	r0, [sp, #32]
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f af00 	beq.w	80075cc <_strtod_l+0x434>
 80077cc:	9a07      	ldr	r2, [sp, #28]
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	f1c3 0300 	rsb	r3, r3, #0
 80077d6:	bfa8      	it	ge
 80077d8:	2300      	movge	r3, #0
 80077da:	f04f 0800 	mov.w	r8, #0
 80077de:	930e      	str	r3, [sp, #56]	; 0x38
 80077e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077e4:	9316      	str	r3, [sp, #88]	; 0x58
 80077e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80077ea:	9b08      	ldr	r3, [sp, #32]
 80077ec:	4658      	mov	r0, fp
 80077ee:	6859      	ldr	r1, [r3, #4]
 80077f0:	f001 ffae 	bl	8009750 <_Balloc>
 80077f4:	9006      	str	r0, [sp, #24]
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f43f aef0 	beq.w	80075dc <_strtod_l+0x444>
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	300c      	adds	r0, #12
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	f103 010c 	add.w	r1, r3, #12
 8007806:	3202      	adds	r2, #2
 8007808:	0092      	lsls	r2, r2, #2
 800780a:	f7fe fcda 	bl	80061c2 <memcpy>
 800780e:	ab1e      	add	r3, sp, #120	; 0x78
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	ab1d      	add	r3, sp, #116	; 0x74
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	464a      	mov	r2, r9
 8007818:	4653      	mov	r3, sl
 800781a:	4658      	mov	r0, fp
 800781c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007820:	f002 fad6 	bl	8009dd0 <__d2b>
 8007824:	901c      	str	r0, [sp, #112]	; 0x70
 8007826:	2800      	cmp	r0, #0
 8007828:	f43f aed8 	beq.w	80075dc <_strtod_l+0x444>
 800782c:	2101      	movs	r1, #1
 800782e:	4658      	mov	r0, fp
 8007830:	f002 f8a0 	bl	8009974 <__i2b>
 8007834:	9004      	str	r0, [sp, #16]
 8007836:	4603      	mov	r3, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f aecf 	beq.w	80075dc <_strtod_l+0x444>
 800783e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007840:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007842:	2d00      	cmp	r5, #0
 8007844:	bfab      	itete	ge
 8007846:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007848:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800784a:	18ee      	addge	r6, r5, r3
 800784c:	1b5c      	sublt	r4, r3, r5
 800784e:	9b05      	ldr	r3, [sp, #20]
 8007850:	bfa8      	it	ge
 8007852:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007854:	eba5 0503 	sub.w	r5, r5, r3
 8007858:	4415      	add	r5, r2
 800785a:	4b64      	ldr	r3, [pc, #400]	; (80079ec <_strtod_l+0x854>)
 800785c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007860:	bfb8      	it	lt
 8007862:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007864:	429d      	cmp	r5, r3
 8007866:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800786a:	f280 80af 	bge.w	80079cc <_strtod_l+0x834>
 800786e:	1b5b      	subs	r3, r3, r5
 8007870:	2b1f      	cmp	r3, #31
 8007872:	eba2 0203 	sub.w	r2, r2, r3
 8007876:	f04f 0701 	mov.w	r7, #1
 800787a:	f300 809c 	bgt.w	80079b6 <_strtod_l+0x81e>
 800787e:	2500      	movs	r5, #0
 8007880:	fa07 f303 	lsl.w	r3, r7, r3
 8007884:	930f      	str	r3, [sp, #60]	; 0x3c
 8007886:	18b7      	adds	r7, r6, r2
 8007888:	9b05      	ldr	r3, [sp, #20]
 800788a:	42be      	cmp	r6, r7
 800788c:	4414      	add	r4, r2
 800788e:	441c      	add	r4, r3
 8007890:	4633      	mov	r3, r6
 8007892:	bfa8      	it	ge
 8007894:	463b      	movge	r3, r7
 8007896:	42a3      	cmp	r3, r4
 8007898:	bfa8      	it	ge
 800789a:	4623      	movge	r3, r4
 800789c:	2b00      	cmp	r3, #0
 800789e:	bfc2      	ittt	gt
 80078a0:	1aff      	subgt	r7, r7, r3
 80078a2:	1ae4      	subgt	r4, r4, r3
 80078a4:	1af6      	subgt	r6, r6, r3
 80078a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a8:	b1bb      	cbz	r3, 80078da <_strtod_l+0x742>
 80078aa:	461a      	mov	r2, r3
 80078ac:	9904      	ldr	r1, [sp, #16]
 80078ae:	4658      	mov	r0, fp
 80078b0:	f002 f8fe 	bl	8009ab0 <__pow5mult>
 80078b4:	9004      	str	r0, [sp, #16]
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f43f ae90 	beq.w	80075dc <_strtod_l+0x444>
 80078bc:	4601      	mov	r1, r0
 80078be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078c0:	4658      	mov	r0, fp
 80078c2:	f002 f860 	bl	8009986 <__multiply>
 80078c6:	9009      	str	r0, [sp, #36]	; 0x24
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f43f ae87 	beq.w	80075dc <_strtod_l+0x444>
 80078ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078d0:	4658      	mov	r0, fp
 80078d2:	f001 ff71 	bl	80097b8 <_Bfree>
 80078d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d8:	931c      	str	r3, [sp, #112]	; 0x70
 80078da:	2f00      	cmp	r7, #0
 80078dc:	dc7a      	bgt.n	80079d4 <_strtod_l+0x83c>
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dd08      	ble.n	80078f6 <_strtod_l+0x75e>
 80078e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078e6:	9906      	ldr	r1, [sp, #24]
 80078e8:	4658      	mov	r0, fp
 80078ea:	f002 f8e1 	bl	8009ab0 <__pow5mult>
 80078ee:	9006      	str	r0, [sp, #24]
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f43f ae73 	beq.w	80075dc <_strtod_l+0x444>
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	dd08      	ble.n	800790c <_strtod_l+0x774>
 80078fa:	4622      	mov	r2, r4
 80078fc:	9906      	ldr	r1, [sp, #24]
 80078fe:	4658      	mov	r0, fp
 8007900:	f002 f924 	bl	8009b4c <__lshift>
 8007904:	9006      	str	r0, [sp, #24]
 8007906:	2800      	cmp	r0, #0
 8007908:	f43f ae68 	beq.w	80075dc <_strtod_l+0x444>
 800790c:	2e00      	cmp	r6, #0
 800790e:	dd08      	ble.n	8007922 <_strtod_l+0x78a>
 8007910:	4632      	mov	r2, r6
 8007912:	9904      	ldr	r1, [sp, #16]
 8007914:	4658      	mov	r0, fp
 8007916:	f002 f919 	bl	8009b4c <__lshift>
 800791a:	9004      	str	r0, [sp, #16]
 800791c:	2800      	cmp	r0, #0
 800791e:	f43f ae5d 	beq.w	80075dc <_strtod_l+0x444>
 8007922:	9a06      	ldr	r2, [sp, #24]
 8007924:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007926:	4658      	mov	r0, fp
 8007928:	f002 f97e 	bl	8009c28 <__mdiff>
 800792c:	4680      	mov	r8, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	f43f ae54 	beq.w	80075dc <_strtod_l+0x444>
 8007934:	2400      	movs	r4, #0
 8007936:	68c3      	ldr	r3, [r0, #12]
 8007938:	9904      	ldr	r1, [sp, #16]
 800793a:	60c4      	str	r4, [r0, #12]
 800793c:	930c      	str	r3, [sp, #48]	; 0x30
 800793e:	f002 f959 	bl	8009bf4 <__mcmp>
 8007942:	42a0      	cmp	r0, r4
 8007944:	da54      	bge.n	80079f0 <_strtod_l+0x858>
 8007946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007948:	b9f3      	cbnz	r3, 8007988 <_strtod_l+0x7f0>
 800794a:	f1b9 0f00 	cmp.w	r9, #0
 800794e:	d11b      	bne.n	8007988 <_strtod_l+0x7f0>
 8007950:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007954:	b9c3      	cbnz	r3, 8007988 <_strtod_l+0x7f0>
 8007956:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800795a:	0d1b      	lsrs	r3, r3, #20
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007962:	d911      	bls.n	8007988 <_strtod_l+0x7f0>
 8007964:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007968:	b91b      	cbnz	r3, 8007972 <_strtod_l+0x7da>
 800796a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800796e:	2b01      	cmp	r3, #1
 8007970:	dd0a      	ble.n	8007988 <_strtod_l+0x7f0>
 8007972:	4641      	mov	r1, r8
 8007974:	2201      	movs	r2, #1
 8007976:	4658      	mov	r0, fp
 8007978:	f002 f8e8 	bl	8009b4c <__lshift>
 800797c:	9904      	ldr	r1, [sp, #16]
 800797e:	4680      	mov	r8, r0
 8007980:	f002 f938 	bl	8009bf4 <__mcmp>
 8007984:	2800      	cmp	r0, #0
 8007986:	dc68      	bgt.n	8007a5a <_strtod_l+0x8c2>
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d172      	bne.n	8007a74 <_strtod_l+0x8dc>
 800798e:	e630      	b.n	80075f2 <_strtod_l+0x45a>
 8007990:	f018 0f01 	tst.w	r8, #1
 8007994:	d004      	beq.n	80079a0 <_strtod_l+0x808>
 8007996:	e9d5 2300 	ldrd	r2, r3, [r5]
 800799a:	f7f8 fe09 	bl	80005b0 <__aeabi_dmul>
 800799e:	2301      	movs	r3, #1
 80079a0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079a4:	3508      	adds	r5, #8
 80079a6:	e6dc      	b.n	8007762 <_strtod_l+0x5ca>
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	ea03 0909 	and.w	r9, r3, r9
 80079b4:	e6f6      	b.n	80077a4 <_strtod_l+0x60c>
 80079b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80079ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80079be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80079c2:	35e2      	adds	r5, #226	; 0xe2
 80079c4:	fa07 f505 	lsl.w	r5, r7, r5
 80079c8:	970f      	str	r7, [sp, #60]	; 0x3c
 80079ca:	e75c      	b.n	8007886 <_strtod_l+0x6ee>
 80079cc:	2301      	movs	r3, #1
 80079ce:	2500      	movs	r5, #0
 80079d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80079d2:	e758      	b.n	8007886 <_strtod_l+0x6ee>
 80079d4:	463a      	mov	r2, r7
 80079d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079d8:	4658      	mov	r0, fp
 80079da:	f002 f8b7 	bl	8009b4c <__lshift>
 80079de:	901c      	str	r0, [sp, #112]	; 0x70
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f47f af7c 	bne.w	80078de <_strtod_l+0x746>
 80079e6:	e5f9      	b.n	80075dc <_strtod_l+0x444>
 80079e8:	0800b450 	.word	0x0800b450
 80079ec:	fffffc02 	.word	0xfffffc02
 80079f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80079f4:	f040 8089 	bne.w	8007b0a <_strtod_l+0x972>
 80079f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80079fe:	b342      	cbz	r2, 8007a52 <_strtod_l+0x8ba>
 8007a00:	4aaf      	ldr	r2, [pc, #700]	; (8007cc0 <_strtod_l+0xb28>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d156      	bne.n	8007ab4 <_strtod_l+0x91c>
 8007a06:	9b05      	ldr	r3, [sp, #20]
 8007a08:	4648      	mov	r0, r9
 8007a0a:	b1eb      	cbz	r3, 8007a48 <_strtod_l+0x8b0>
 8007a0c:	4653      	mov	r3, sl
 8007a0e:	4aad      	ldr	r2, [pc, #692]	; (8007cc4 <_strtod_l+0xb2c>)
 8007a10:	f04f 31ff 	mov.w	r1, #4294967295
 8007a14:	401a      	ands	r2, r3
 8007a16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007a1a:	d818      	bhi.n	8007a4e <_strtod_l+0x8b6>
 8007a1c:	0d12      	lsrs	r2, r2, #20
 8007a1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a22:	fa01 f303 	lsl.w	r3, r1, r3
 8007a26:	4298      	cmp	r0, r3
 8007a28:	d144      	bne.n	8007ab4 <_strtod_l+0x91c>
 8007a2a:	4ba7      	ldr	r3, [pc, #668]	; (8007cc8 <_strtod_l+0xb30>)
 8007a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d102      	bne.n	8007a38 <_strtod_l+0x8a0>
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f add2 	beq.w	80075dc <_strtod_l+0x444>
 8007a38:	4ba2      	ldr	r3, [pc, #648]	; (8007cc4 <_strtod_l+0xb2c>)
 8007a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a3c:	f04f 0900 	mov.w	r9, #0
 8007a40:	401a      	ands	r2, r3
 8007a42:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007a46:	e79f      	b.n	8007988 <_strtod_l+0x7f0>
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4c:	e7eb      	b.n	8007a26 <_strtod_l+0x88e>
 8007a4e:	460b      	mov	r3, r1
 8007a50:	e7e9      	b.n	8007a26 <_strtod_l+0x88e>
 8007a52:	bb7b      	cbnz	r3, 8007ab4 <_strtod_l+0x91c>
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	d12c      	bne.n	8007ab4 <_strtod_l+0x91c>
 8007a5a:	9905      	ldr	r1, [sp, #20]
 8007a5c:	4653      	mov	r3, sl
 8007a5e:	4a99      	ldr	r2, [pc, #612]	; (8007cc4 <_strtod_l+0xb2c>)
 8007a60:	b1f1      	cbz	r1, 8007aa0 <_strtod_l+0x908>
 8007a62:	ea02 010a 	and.w	r1, r2, sl
 8007a66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a6a:	dc19      	bgt.n	8007aa0 <_strtod_l+0x908>
 8007a6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a70:	f77f ae51 	ble.w	8007716 <_strtod_l+0x57e>
 8007a74:	2300      	movs	r3, #0
 8007a76:	4a95      	ldr	r2, [pc, #596]	; (8007ccc <_strtod_l+0xb34>)
 8007a78:	4648      	mov	r0, r9
 8007a7a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007a7e:	4651      	mov	r1, sl
 8007a80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a84:	f7f8 fd94 	bl	80005b0 <__aeabi_dmul>
 8007a88:	4681      	mov	r9, r0
 8007a8a:	468a      	mov	sl, r1
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	f47f adb0 	bne.w	80075f2 <_strtod_l+0x45a>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f47f adad 	bne.w	80075f2 <_strtod_l+0x45a>
 8007a98:	2322      	movs	r3, #34	; 0x22
 8007a9a:	f8cb 3000 	str.w	r3, [fp]
 8007a9e:	e5a8      	b.n	80075f2 <_strtod_l+0x45a>
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007aa6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007aaa:	f04f 39ff 	mov.w	r9, #4294967295
 8007aae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007ab2:	e769      	b.n	8007988 <_strtod_l+0x7f0>
 8007ab4:	b19d      	cbz	r5, 8007ade <_strtod_l+0x946>
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	421d      	tst	r5, r3
 8007aba:	f43f af65 	beq.w	8007988 <_strtod_l+0x7f0>
 8007abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac0:	9a05      	ldr	r2, [sp, #20]
 8007ac2:	4648      	mov	r0, r9
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	b173      	cbz	r3, 8007ae6 <_strtod_l+0x94e>
 8007ac8:	f7ff fb43 	bl	8007152 <sulp>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ad4:	f7f8 fbb6 	bl	8000244 <__adddf3>
 8007ad8:	4681      	mov	r9, r0
 8007ada:	468a      	mov	sl, r1
 8007adc:	e754      	b.n	8007988 <_strtod_l+0x7f0>
 8007ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae0:	ea13 0f09 	tst.w	r3, r9
 8007ae4:	e7e9      	b.n	8007aba <_strtod_l+0x922>
 8007ae6:	f7ff fb34 	bl	8007152 <sulp>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007af2:	f7f8 fba5 	bl	8000240 <__aeabi_dsub>
 8007af6:	2200      	movs	r2, #0
 8007af8:	2300      	movs	r3, #0
 8007afa:	4681      	mov	r9, r0
 8007afc:	468a      	mov	sl, r1
 8007afe:	f7f8 ffbf 	bl	8000a80 <__aeabi_dcmpeq>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f47f ae07 	bne.w	8007716 <_strtod_l+0x57e>
 8007b08:	e73e      	b.n	8007988 <_strtod_l+0x7f0>
 8007b0a:	9904      	ldr	r1, [sp, #16]
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	f002 f9ae 	bl	8009e6e <__ratio>
 8007b12:	2200      	movs	r2, #0
 8007b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	f7f8 ffc4 	bl	8000aa8 <__aeabi_dcmple>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d075      	beq.n	8007c10 <_strtod_l+0xa78>
 8007b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d047      	beq.n	8007bba <_strtod_l+0xa22>
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	4f68      	ldr	r7, [pc, #416]	; (8007cd0 <_strtod_l+0xb38>)
 8007b2e:	4d68      	ldr	r5, [pc, #416]	; (8007cd0 <_strtod_l+0xb38>)
 8007b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b36:	0d1b      	lsrs	r3, r3, #20
 8007b38:	051b      	lsls	r3, r3, #20
 8007b3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b3e:	4b65      	ldr	r3, [pc, #404]	; (8007cd4 <_strtod_l+0xb3c>)
 8007b40:	429a      	cmp	r2, r3
 8007b42:	f040 80cf 	bne.w	8007ce4 <_strtod_l+0xb4c>
 8007b46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	4648      	mov	r0, r9
 8007b52:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007b56:	4651      	mov	r1, sl
 8007b58:	f002 f8c4 	bl	8009ce4 <__ulp>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 fd24 	bl	80005b0 <__aeabi_dmul>
 8007b68:	464a      	mov	r2, r9
 8007b6a:	4653      	mov	r3, sl
 8007b6c:	f7f8 fb6a 	bl	8000244 <__adddf3>
 8007b70:	460b      	mov	r3, r1
 8007b72:	4954      	ldr	r1, [pc, #336]	; (8007cc4 <_strtod_l+0xb2c>)
 8007b74:	4a58      	ldr	r2, [pc, #352]	; (8007cd8 <_strtod_l+0xb40>)
 8007b76:	4019      	ands	r1, r3
 8007b78:	4291      	cmp	r1, r2
 8007b7a:	4681      	mov	r9, r0
 8007b7c:	d95e      	bls.n	8007c3c <_strtod_l+0xaa4>
 8007b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d103      	bne.n	8007b90 <_strtod_l+0x9f8>
 8007b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	f43f ad26 	beq.w	80075dc <_strtod_l+0x444>
 8007b90:	f04f 39ff 	mov.w	r9, #4294967295
 8007b94:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007cc8 <_strtod_l+0xb30>
 8007b98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f001 fe0c 	bl	80097b8 <_Bfree>
 8007ba0:	9906      	ldr	r1, [sp, #24]
 8007ba2:	4658      	mov	r0, fp
 8007ba4:	f001 fe08 	bl	80097b8 <_Bfree>
 8007ba8:	9904      	ldr	r1, [sp, #16]
 8007baa:	4658      	mov	r0, fp
 8007bac:	f001 fe04 	bl	80097b8 <_Bfree>
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f001 fe00 	bl	80097b8 <_Bfree>
 8007bb8:	e617      	b.n	80077ea <_strtod_l+0x652>
 8007bba:	f1b9 0f00 	cmp.w	r9, #0
 8007bbe:	d119      	bne.n	8007bf4 <_strtod_l+0xa5c>
 8007bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc6:	b9e3      	cbnz	r3, 8007c02 <_strtod_l+0xa6a>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <_strtod_l+0xb38>)
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f7f8 ff60 	bl	8000a94 <__aeabi_dcmplt>
 8007bd4:	b9c8      	cbnz	r0, 8007c0a <_strtod_l+0xa72>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4b40      	ldr	r3, [pc, #256]	; (8007cdc <_strtod_l+0xb44>)
 8007bda:	4630      	mov	r0, r6
 8007bdc:	4639      	mov	r1, r7
 8007bde:	f7f8 fce7 	bl	80005b0 <__aeabi_dmul>
 8007be2:	4604      	mov	r4, r0
 8007be4:	460d      	mov	r5, r1
 8007be6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007bea:	9418      	str	r4, [sp, #96]	; 0x60
 8007bec:	9319      	str	r3, [sp, #100]	; 0x64
 8007bee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007bf2:	e79d      	b.n	8007b30 <_strtod_l+0x998>
 8007bf4:	f1b9 0f01 	cmp.w	r9, #1
 8007bf8:	d103      	bne.n	8007c02 <_strtod_l+0xa6a>
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f43f ad8a 	beq.w	8007716 <_strtod_l+0x57e>
 8007c02:	2600      	movs	r6, #0
 8007c04:	4f36      	ldr	r7, [pc, #216]	; (8007ce0 <_strtod_l+0xb48>)
 8007c06:	2400      	movs	r4, #0
 8007c08:	e791      	b.n	8007b2e <_strtod_l+0x996>
 8007c0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007c0c:	4d33      	ldr	r5, [pc, #204]	; (8007cdc <_strtod_l+0xb44>)
 8007c0e:	e7ea      	b.n	8007be6 <_strtod_l+0xa4e>
 8007c10:	4b32      	ldr	r3, [pc, #200]	; (8007cdc <_strtod_l+0xb44>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f8 fcca 	bl	80005b0 <__aeabi_dmul>
 8007c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	b933      	cbnz	r3, 8007c32 <_strtod_l+0xa9a>
 8007c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c28:	9010      	str	r0, [sp, #64]	; 0x40
 8007c2a:	9311      	str	r3, [sp, #68]	; 0x44
 8007c2c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c30:	e77e      	b.n	8007b30 <_strtod_l+0x998>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c3a:	e7f7      	b.n	8007c2c <_strtod_l+0xa94>
 8007c3c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007c40:	9b05      	ldr	r3, [sp, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1a8      	bne.n	8007b98 <_strtod_l+0xa00>
 8007c46:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007c4a:	0d1b      	lsrs	r3, r3, #20
 8007c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c4e:	051b      	lsls	r3, r3, #20
 8007c50:	429a      	cmp	r2, r3
 8007c52:	4656      	mov	r6, sl
 8007c54:	d1a0      	bne.n	8007b98 <_strtod_l+0xa00>
 8007c56:	4629      	mov	r1, r5
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7f8 ff59 	bl	8000b10 <__aeabi_d2iz>
 8007c5e:	f7f8 fc3d 	bl	80004dc <__aeabi_i2d>
 8007c62:	460b      	mov	r3, r1
 8007c64:	4602      	mov	r2, r0
 8007c66:	4629      	mov	r1, r5
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f7f8 fae9 	bl	8000240 <__aeabi_dsub>
 8007c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	b933      	cbnz	r3, 8007c84 <_strtod_l+0xaec>
 8007c76:	f1b9 0f00 	cmp.w	r9, #0
 8007c7a:	d103      	bne.n	8007c84 <_strtod_l+0xaec>
 8007c7c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007c80:	2e00      	cmp	r6, #0
 8007c82:	d06a      	beq.n	8007d5a <_strtod_l+0xbc2>
 8007c84:	a30a      	add	r3, pc, #40	; (adr r3, 8007cb0 <_strtod_l+0xb18>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7f8 ff01 	bl	8000a94 <__aeabi_dcmplt>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f47f acad 	bne.w	80075f2 <_strtod_l+0x45a>
 8007c98:	a307      	add	r3, pc, #28	; (adr r3, 8007cb8 <_strtod_l+0xb20>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 ff15 	bl	8000ad0 <__aeabi_dcmpgt>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f43f af76 	beq.w	8007b98 <_strtod_l+0xa00>
 8007cac:	e4a1      	b.n	80075f2 <_strtod_l+0x45a>
 8007cae:	bf00      	nop
 8007cb0:	94a03595 	.word	0x94a03595
 8007cb4:	3fdfffff 	.word	0x3fdfffff
 8007cb8:	35afe535 	.word	0x35afe535
 8007cbc:	3fe00000 	.word	0x3fe00000
 8007cc0:	000fffff 	.word	0x000fffff
 8007cc4:	7ff00000 	.word	0x7ff00000
 8007cc8:	7fefffff 	.word	0x7fefffff
 8007ccc:	39500000 	.word	0x39500000
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	7fe00000 	.word	0x7fe00000
 8007cd8:	7c9fffff 	.word	0x7c9fffff
 8007cdc:	3fe00000 	.word	0x3fe00000
 8007ce0:	bff00000 	.word	0xbff00000
 8007ce4:	9b05      	ldr	r3, [sp, #20]
 8007ce6:	b313      	cbz	r3, 8007d2e <_strtod_l+0xb96>
 8007ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cee:	d81e      	bhi.n	8007d2e <_strtod_l+0xb96>
 8007cf0:	a325      	add	r3, pc, #148	; (adr r3, 8007d88 <_strtod_l+0xbf0>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 fed5 	bl	8000aa8 <__aeabi_dcmple>
 8007cfe:	b190      	cbz	r0, 8007d26 <_strtod_l+0xb8e>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7f8 ff2c 	bl	8000b60 <__aeabi_d2uiz>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	bf08      	it	eq
 8007d0c:	2001      	moveq	r0, #1
 8007d0e:	f7f8 fbd5 	bl	80004bc <__aeabi_ui2d>
 8007d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d14:	4604      	mov	r4, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	b9d3      	cbnz	r3, 8007d50 <_strtod_l+0xbb8>
 8007d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d1e:	9012      	str	r0, [sp, #72]	; 0x48
 8007d20:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d28:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007d2c:	1a9f      	subs	r7, r3, r2
 8007d2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d32:	f001 ffd7 	bl	8009ce4 <__ulp>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	f7f8 fc37 	bl	80005b0 <__aeabi_dmul>
 8007d42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d46:	f7f8 fa7d 	bl	8000244 <__adddf3>
 8007d4a:	4681      	mov	r9, r0
 8007d4c:	468a      	mov	sl, r1
 8007d4e:	e777      	b.n	8007c40 <_strtod_l+0xaa8>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007d58:	e7e3      	b.n	8007d22 <_strtod_l+0xb8a>
 8007d5a:	a30d      	add	r3, pc, #52	; (adr r3, 8007d90 <_strtod_l+0xbf8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fe98 	bl	8000a94 <__aeabi_dcmplt>
 8007d64:	e79f      	b.n	8007ca6 <_strtod_l+0xb0e>
 8007d66:	2300      	movs	r3, #0
 8007d68:	930d      	str	r3, [sp, #52]	; 0x34
 8007d6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f7ff ba55 	b.w	800721e <_strtod_l+0x86>
 8007d74:	2b65      	cmp	r3, #101	; 0x65
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f43f ab42 	beq.w	8007402 <_strtod_l+0x26a>
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4614      	mov	r4, r2
 8007d82:	9105      	str	r1, [sp, #20]
 8007d84:	f7ff babf 	b.w	8007306 <_strtod_l+0x16e>
 8007d88:	ffc00000 	.word	0xffc00000
 8007d8c:	41dfffff 	.word	0x41dfffff
 8007d90:	94a03595 	.word	0x94a03595
 8007d94:	3fcfffff 	.word	0x3fcfffff

08007d98 <_strtod_r>:
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <_strtod_r+0x18>)
 8007d9a:	b410      	push	{r4}
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4c05      	ldr	r4, [pc, #20]	; (8007db4 <_strtod_r+0x1c>)
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf08      	it	eq
 8007da6:	4623      	moveq	r3, r4
 8007da8:	bc10      	pop	{r4}
 8007daa:	f7ff b9f5 	b.w	8007198 <_strtod_l>
 8007dae:	bf00      	nop
 8007db0:	20000010 	.word	0x20000010
 8007db4:	20000074 	.word	0x20000074

08007db8 <_strtol_l.isra.0>:
 8007db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	4692      	mov	sl, r2
 8007dc2:	461e      	mov	r6, r3
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	463d      	mov	r5, r7
 8007dc8:	9808      	ldr	r0, [sp, #32]
 8007dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dce:	f001 fc25 	bl	800961c <__locale_ctype_ptr_l>
 8007dd2:	4420      	add	r0, r4
 8007dd4:	7843      	ldrb	r3, [r0, #1]
 8007dd6:	f013 0308 	ands.w	r3, r3, #8
 8007dda:	d132      	bne.n	8007e42 <_strtol_l.isra.0+0x8a>
 8007ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8007dde:	d132      	bne.n	8007e46 <_strtol_l.isra.0+0x8e>
 8007de0:	2201      	movs	r2, #1
 8007de2:	787c      	ldrb	r4, [r7, #1]
 8007de4:	1cbd      	adds	r5, r7, #2
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	d05d      	beq.n	8007ea6 <_strtol_l.isra.0+0xee>
 8007dea:	2e10      	cmp	r6, #16
 8007dec:	d109      	bne.n	8007e02 <_strtol_l.isra.0+0x4a>
 8007dee:	2c30      	cmp	r4, #48	; 0x30
 8007df0:	d107      	bne.n	8007e02 <_strtol_l.isra.0+0x4a>
 8007df2:	782b      	ldrb	r3, [r5, #0]
 8007df4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007df8:	2b58      	cmp	r3, #88	; 0x58
 8007dfa:	d14f      	bne.n	8007e9c <_strtol_l.isra.0+0xe4>
 8007dfc:	2610      	movs	r6, #16
 8007dfe:	786c      	ldrb	r4, [r5, #1]
 8007e00:	3502      	adds	r5, #2
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	bf14      	ite	ne
 8007e06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007e0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007e0e:	2700      	movs	r7, #0
 8007e10:	fbb1 fcf6 	udiv	ip, r1, r6
 8007e14:	4638      	mov	r0, r7
 8007e16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007e1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d817      	bhi.n	8007e52 <_strtol_l.isra.0+0x9a>
 8007e22:	461c      	mov	r4, r3
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	dd23      	ble.n	8007e70 <_strtol_l.isra.0+0xb8>
 8007e28:	1c7b      	adds	r3, r7, #1
 8007e2a:	d007      	beq.n	8007e3c <_strtol_l.isra.0+0x84>
 8007e2c:	4584      	cmp	ip, r0
 8007e2e:	d31c      	bcc.n	8007e6a <_strtol_l.isra.0+0xb2>
 8007e30:	d101      	bne.n	8007e36 <_strtol_l.isra.0+0x7e>
 8007e32:	45a6      	cmp	lr, r4
 8007e34:	db19      	blt.n	8007e6a <_strtol_l.isra.0+0xb2>
 8007e36:	2701      	movs	r7, #1
 8007e38:	fb00 4006 	mla	r0, r0, r6, r4
 8007e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e40:	e7eb      	b.n	8007e1a <_strtol_l.isra.0+0x62>
 8007e42:	462f      	mov	r7, r5
 8007e44:	e7bf      	b.n	8007dc6 <_strtol_l.isra.0+0xe>
 8007e46:	2c2b      	cmp	r4, #43	; 0x2b
 8007e48:	bf04      	itt	eq
 8007e4a:	1cbd      	addeq	r5, r7, #2
 8007e4c:	787c      	ldrbeq	r4, [r7, #1]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	e7c9      	b.n	8007de6 <_strtol_l.isra.0+0x2e>
 8007e52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007e56:	2b19      	cmp	r3, #25
 8007e58:	d801      	bhi.n	8007e5e <_strtol_l.isra.0+0xa6>
 8007e5a:	3c37      	subs	r4, #55	; 0x37
 8007e5c:	e7e2      	b.n	8007e24 <_strtol_l.isra.0+0x6c>
 8007e5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007e62:	2b19      	cmp	r3, #25
 8007e64:	d804      	bhi.n	8007e70 <_strtol_l.isra.0+0xb8>
 8007e66:	3c57      	subs	r4, #87	; 0x57
 8007e68:	e7dc      	b.n	8007e24 <_strtol_l.isra.0+0x6c>
 8007e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e6e:	e7e5      	b.n	8007e3c <_strtol_l.isra.0+0x84>
 8007e70:	1c7b      	adds	r3, r7, #1
 8007e72:	d108      	bne.n	8007e86 <_strtol_l.isra.0+0xce>
 8007e74:	2322      	movs	r3, #34	; 0x22
 8007e76:	4608      	mov	r0, r1
 8007e78:	f8c8 3000 	str.w	r3, [r8]
 8007e7c:	f1ba 0f00 	cmp.w	sl, #0
 8007e80:	d107      	bne.n	8007e92 <_strtol_l.isra.0+0xda>
 8007e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e86:	b102      	cbz	r2, 8007e8a <_strtol_l.isra.0+0xd2>
 8007e88:	4240      	negs	r0, r0
 8007e8a:	f1ba 0f00 	cmp.w	sl, #0
 8007e8e:	d0f8      	beq.n	8007e82 <_strtol_l.isra.0+0xca>
 8007e90:	b10f      	cbz	r7, 8007e96 <_strtol_l.isra.0+0xde>
 8007e92:	f105 39ff 	add.w	r9, r5, #4294967295
 8007e96:	f8ca 9000 	str.w	r9, [sl]
 8007e9a:	e7f2      	b.n	8007e82 <_strtol_l.isra.0+0xca>
 8007e9c:	2430      	movs	r4, #48	; 0x30
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d1af      	bne.n	8007e02 <_strtol_l.isra.0+0x4a>
 8007ea2:	2608      	movs	r6, #8
 8007ea4:	e7ad      	b.n	8007e02 <_strtol_l.isra.0+0x4a>
 8007ea6:	2c30      	cmp	r4, #48	; 0x30
 8007ea8:	d0a3      	beq.n	8007df2 <_strtol_l.isra.0+0x3a>
 8007eaa:	260a      	movs	r6, #10
 8007eac:	e7a9      	b.n	8007e02 <_strtol_l.isra.0+0x4a>
	...

08007eb0 <_strtol_r>:
 8007eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eb2:	4c06      	ldr	r4, [pc, #24]	; (8007ecc <_strtol_r+0x1c>)
 8007eb4:	4d06      	ldr	r5, [pc, #24]	; (8007ed0 <_strtol_r+0x20>)
 8007eb6:	6824      	ldr	r4, [r4, #0]
 8007eb8:	6a24      	ldr	r4, [r4, #32]
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	bf08      	it	eq
 8007ebe:	462c      	moveq	r4, r5
 8007ec0:	9400      	str	r4, [sp, #0]
 8007ec2:	f7ff ff79 	bl	8007db8 <_strtol_l.isra.0>
 8007ec6:	b003      	add	sp, #12
 8007ec8:	bd30      	pop	{r4, r5, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000010 	.word	0x20000010
 8007ed0:	20000074 	.word	0x20000074

08007ed4 <__swbuf_r>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	460e      	mov	r6, r1
 8007ed8:	4614      	mov	r4, r2
 8007eda:	4605      	mov	r5, r0
 8007edc:	b118      	cbz	r0, 8007ee6 <__swbuf_r+0x12>
 8007ede:	6983      	ldr	r3, [r0, #24]
 8007ee0:	b90b      	cbnz	r3, 8007ee6 <__swbuf_r+0x12>
 8007ee2:	f000 ffe9 	bl	8008eb8 <__sinit>
 8007ee6:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <__swbuf_r+0x98>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	d12a      	bne.n	8007f42 <__swbuf_r+0x6e>
 8007eec:	686c      	ldr	r4, [r5, #4]
 8007eee:	69a3      	ldr	r3, [r4, #24]
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	071a      	lsls	r2, r3, #28
 8007ef6:	d52e      	bpl.n	8007f56 <__swbuf_r+0x82>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	b363      	cbz	r3, 8007f56 <__swbuf_r+0x82>
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	6820      	ldr	r0, [r4, #0]
 8007f00:	b2f6      	uxtb	r6, r6
 8007f02:	1ac0      	subs	r0, r0, r3
 8007f04:	6963      	ldr	r3, [r4, #20]
 8007f06:	4637      	mov	r7, r6
 8007f08:	4283      	cmp	r3, r0
 8007f0a:	dc04      	bgt.n	8007f16 <__swbuf_r+0x42>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 ff68 	bl	8008de4 <_fflush_r>
 8007f14:	bb28      	cbnz	r0, 8007f62 <__swbuf_r+0x8e>
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	3001      	adds	r0, #1
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	701e      	strb	r6, [r3, #0]
 8007f26:	6963      	ldr	r3, [r4, #20]
 8007f28:	4283      	cmp	r3, r0
 8007f2a:	d004      	beq.n	8007f36 <__swbuf_r+0x62>
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	07db      	lsls	r3, r3, #31
 8007f30:	d519      	bpl.n	8007f66 <__swbuf_r+0x92>
 8007f32:	2e0a      	cmp	r6, #10
 8007f34:	d117      	bne.n	8007f66 <__swbuf_r+0x92>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 ff53 	bl	8008de4 <_fflush_r>
 8007f3e:	b190      	cbz	r0, 8007f66 <__swbuf_r+0x92>
 8007f40:	e00f      	b.n	8007f62 <__swbuf_r+0x8e>
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <__swbuf_r+0x9c>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d101      	bne.n	8007f4c <__swbuf_r+0x78>
 8007f48:	68ac      	ldr	r4, [r5, #8]
 8007f4a:	e7d0      	b.n	8007eee <__swbuf_r+0x1a>
 8007f4c:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <__swbuf_r+0xa0>)
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	bf08      	it	eq
 8007f52:	68ec      	ldreq	r4, [r5, #12]
 8007f54:	e7cb      	b.n	8007eee <__swbuf_r+0x1a>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f80d 	bl	8007f78 <__swsetup_r>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d0cc      	beq.n	8007efc <__swbuf_r+0x28>
 8007f62:	f04f 37ff 	mov.w	r7, #4294967295
 8007f66:	4638      	mov	r0, r7
 8007f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	0800b4a8 	.word	0x0800b4a8
 8007f70:	0800b4c8 	.word	0x0800b4c8
 8007f74:	0800b488 	.word	0x0800b488

08007f78 <__swsetup_r>:
 8007f78:	4b32      	ldr	r3, [pc, #200]	; (8008044 <__swsetup_r+0xcc>)
 8007f7a:	b570      	push	{r4, r5, r6, lr}
 8007f7c:	681d      	ldr	r5, [r3, #0]
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	b125      	cbz	r5, 8007f8e <__swsetup_r+0x16>
 8007f84:	69ab      	ldr	r3, [r5, #24]
 8007f86:	b913      	cbnz	r3, 8007f8e <__swsetup_r+0x16>
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 ff95 	bl	8008eb8 <__sinit>
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	; (8008048 <__swsetup_r+0xd0>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d10f      	bne.n	8007fb4 <__swsetup_r+0x3c>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	0715      	lsls	r5, r2, #28
 8007f9e:	d42c      	bmi.n	8007ffa <__swsetup_r+0x82>
 8007fa0:	06d0      	lsls	r0, r2, #27
 8007fa2:	d411      	bmi.n	8007fc8 <__swsetup_r+0x50>
 8007fa4:	2209      	movs	r2, #9
 8007fa6:	6032      	str	r2, [r6, #0]
 8007fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	e03e      	b.n	8008032 <__swsetup_r+0xba>
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <__swsetup_r+0xd4>)
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d101      	bne.n	8007fbe <__swsetup_r+0x46>
 8007fba:	68ac      	ldr	r4, [r5, #8]
 8007fbc:	e7eb      	b.n	8007f96 <__swsetup_r+0x1e>
 8007fbe:	4b24      	ldr	r3, [pc, #144]	; (8008050 <__swsetup_r+0xd8>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	bf08      	it	eq
 8007fc4:	68ec      	ldreq	r4, [r5, #12]
 8007fc6:	e7e6      	b.n	8007f96 <__swsetup_r+0x1e>
 8007fc8:	0751      	lsls	r1, r2, #29
 8007fca:	d512      	bpl.n	8007ff2 <__swsetup_r+0x7a>
 8007fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fce:	b141      	cbz	r1, 8007fe2 <__swsetup_r+0x6a>
 8007fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	d002      	beq.n	8007fde <__swsetup_r+0x66>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7fe f913 	bl	8006204 <_free_r>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	2300      	movs	r3, #0
 8007fec:	6063      	str	r3, [r4, #4]
 8007fee:	6923      	ldr	r3, [r4, #16]
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f043 0308 	orr.w	r3, r3, #8
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	b94b      	cbnz	r3, 8008012 <__swsetup_r+0x9a>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d003      	beq.n	8008012 <__swsetup_r+0x9a>
 800800a:	4621      	mov	r1, r4
 800800c:	4630      	mov	r0, r6
 800800e:	f001 fb3d 	bl	800968c <__smakebuf_r>
 8008012:	89a2      	ldrh	r2, [r4, #12]
 8008014:	f012 0301 	ands.w	r3, r2, #1
 8008018:	d00c      	beq.n	8008034 <__swsetup_r+0xbc>
 800801a:	2300      	movs	r3, #0
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	6963      	ldr	r3, [r4, #20]
 8008020:	425b      	negs	r3, r3
 8008022:	61a3      	str	r3, [r4, #24]
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	b953      	cbnz	r3, 800803e <__swsetup_r+0xc6>
 8008028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008030:	d1ba      	bne.n	8007fa8 <__swsetup_r+0x30>
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	0792      	lsls	r2, r2, #30
 8008036:	bf58      	it	pl
 8008038:	6963      	ldrpl	r3, [r4, #20]
 800803a:	60a3      	str	r3, [r4, #8]
 800803c:	e7f2      	b.n	8008024 <__swsetup_r+0xac>
 800803e:	2000      	movs	r0, #0
 8008040:	e7f7      	b.n	8008032 <__swsetup_r+0xba>
 8008042:	bf00      	nop
 8008044:	20000010 	.word	0x20000010
 8008048:	0800b4a8 	.word	0x0800b4a8
 800804c:	0800b4c8 	.word	0x0800b4c8
 8008050:	0800b488 	.word	0x0800b488

08008054 <quorem>:
 8008054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	6903      	ldr	r3, [r0, #16]
 800805a:	690c      	ldr	r4, [r1, #16]
 800805c:	4680      	mov	r8, r0
 800805e:	42a3      	cmp	r3, r4
 8008060:	f2c0 8084 	blt.w	800816c <quorem+0x118>
 8008064:	3c01      	subs	r4, #1
 8008066:	f101 0714 	add.w	r7, r1, #20
 800806a:	f100 0614 	add.w	r6, r0, #20
 800806e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008072:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008076:	3501      	adds	r5, #1
 8008078:	fbb0 f5f5 	udiv	r5, r0, r5
 800807c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008080:	eb06 030c 	add.w	r3, r6, ip
 8008084:	eb07 090c 	add.w	r9, r7, ip
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	b39d      	cbz	r5, 80080f4 <quorem+0xa0>
 800808c:	f04f 0a00 	mov.w	sl, #0
 8008090:	4638      	mov	r0, r7
 8008092:	46b6      	mov	lr, r6
 8008094:	46d3      	mov	fp, sl
 8008096:	f850 2b04 	ldr.w	r2, [r0], #4
 800809a:	b293      	uxth	r3, r2
 800809c:	fb05 a303 	mla	r3, r5, r3, sl
 80080a0:	0c12      	lsrs	r2, r2, #16
 80080a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080a6:	fb05 a202 	mla	r2, r5, r2, sl
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	ebab 0303 	sub.w	r3, fp, r3
 80080b0:	f8de b000 	ldr.w	fp, [lr]
 80080b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80080b8:	fa1f fb8b 	uxth.w	fp, fp
 80080bc:	445b      	add	r3, fp
 80080be:	fa1f fb82 	uxth.w	fp, r2
 80080c2:	f8de 2000 	ldr.w	r2, [lr]
 80080c6:	4581      	cmp	r9, r0
 80080c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80080cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80080da:	f84e 3b04 	str.w	r3, [lr], #4
 80080de:	d2da      	bcs.n	8008096 <quorem+0x42>
 80080e0:	f856 300c 	ldr.w	r3, [r6, ip]
 80080e4:	b933      	cbnz	r3, 80080f4 <quorem+0xa0>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	429e      	cmp	r6, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	d331      	bcc.n	8008154 <quorem+0x100>
 80080f0:	f8c8 4010 	str.w	r4, [r8, #16]
 80080f4:	4640      	mov	r0, r8
 80080f6:	f001 fd7d 	bl	8009bf4 <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	db26      	blt.n	800814c <quorem+0xf8>
 80080fe:	4630      	mov	r0, r6
 8008100:	f04f 0c00 	mov.w	ip, #0
 8008104:	3501      	adds	r5, #1
 8008106:	f857 1b04 	ldr.w	r1, [r7], #4
 800810a:	f8d0 e000 	ldr.w	lr, [r0]
 800810e:	b28b      	uxth	r3, r1
 8008110:	ebac 0303 	sub.w	r3, ip, r3
 8008114:	fa1f f28e 	uxth.w	r2, lr
 8008118:	4413      	add	r3, r2
 800811a:	0c0a      	lsrs	r2, r1, #16
 800811c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008124:	b29b      	uxth	r3, r3
 8008126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800812a:	45b9      	cmp	r9, r7
 800812c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008130:	f840 3b04 	str.w	r3, [r0], #4
 8008134:	d2e7      	bcs.n	8008106 <quorem+0xb2>
 8008136:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800813a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800813e:	b92a      	cbnz	r2, 800814c <quorem+0xf8>
 8008140:	3b04      	subs	r3, #4
 8008142:	429e      	cmp	r6, r3
 8008144:	461a      	mov	r2, r3
 8008146:	d30b      	bcc.n	8008160 <quorem+0x10c>
 8008148:	f8c8 4010 	str.w	r4, [r8, #16]
 800814c:	4628      	mov	r0, r5
 800814e:	b003      	add	sp, #12
 8008150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	3b04      	subs	r3, #4
 8008158:	2a00      	cmp	r2, #0
 800815a:	d1c9      	bne.n	80080f0 <quorem+0x9c>
 800815c:	3c01      	subs	r4, #1
 800815e:	e7c4      	b.n	80080ea <quorem+0x96>
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	3b04      	subs	r3, #4
 8008164:	2a00      	cmp	r2, #0
 8008166:	d1ef      	bne.n	8008148 <quorem+0xf4>
 8008168:	3c01      	subs	r4, #1
 800816a:	e7ea      	b.n	8008142 <quorem+0xee>
 800816c:	2000      	movs	r0, #0
 800816e:	e7ee      	b.n	800814e <quorem+0xfa>

08008170 <_dtoa_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4616      	mov	r6, r2
 8008176:	461f      	mov	r7, r3
 8008178:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800817a:	b095      	sub	sp, #84	; 0x54
 800817c:	4604      	mov	r4, r0
 800817e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008182:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008186:	b93d      	cbnz	r5, 8008198 <_dtoa_r+0x28>
 8008188:	2010      	movs	r0, #16
 800818a:	f7fd fffb 	bl	8006184 <malloc>
 800818e:	6260      	str	r0, [r4, #36]	; 0x24
 8008190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008194:	6005      	str	r5, [r0, #0]
 8008196:	60c5      	str	r5, [r0, #12]
 8008198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	b151      	cbz	r1, 80081b4 <_dtoa_r+0x44>
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	2301      	movs	r3, #1
 80081a2:	4093      	lsls	r3, r2
 80081a4:	604a      	str	r2, [r1, #4]
 80081a6:	608b      	str	r3, [r1, #8]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f001 fb05 	bl	80097b8 <_Bfree>
 80081ae:	2200      	movs	r2, #0
 80081b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	1e3b      	subs	r3, r7, #0
 80081b6:	bfaf      	iteee	ge
 80081b8:	2300      	movge	r3, #0
 80081ba:	2201      	movlt	r2, #1
 80081bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081c0:	9303      	strlt	r3, [sp, #12]
 80081c2:	bfac      	ite	ge
 80081c4:	f8c8 3000 	strge.w	r3, [r8]
 80081c8:	f8c8 2000 	strlt.w	r2, [r8]
 80081cc:	4bae      	ldr	r3, [pc, #696]	; (8008488 <_dtoa_r+0x318>)
 80081ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081d2:	ea33 0308 	bics.w	r3, r3, r8
 80081d6:	d11b      	bne.n	8008210 <_dtoa_r+0xa0>
 80081d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80081dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	9b02      	ldr	r3, [sp, #8]
 80081e2:	b923      	cbnz	r3, 80081ee <_dtoa_r+0x7e>
 80081e4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f000 8545 	beq.w	8008c78 <_dtoa_r+0xb08>
 80081ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081f0:	b953      	cbnz	r3, 8008208 <_dtoa_r+0x98>
 80081f2:	4ba6      	ldr	r3, [pc, #664]	; (800848c <_dtoa_r+0x31c>)
 80081f4:	e021      	b.n	800823a <_dtoa_r+0xca>
 80081f6:	4ba6      	ldr	r3, [pc, #664]	; (8008490 <_dtoa_r+0x320>)
 80081f8:	9306      	str	r3, [sp, #24]
 80081fa:	3308      	adds	r3, #8
 80081fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	9806      	ldr	r0, [sp, #24]
 8008202:	b015      	add	sp, #84	; 0x54
 8008204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008208:	4ba0      	ldr	r3, [pc, #640]	; (800848c <_dtoa_r+0x31c>)
 800820a:	9306      	str	r3, [sp, #24]
 800820c:	3303      	adds	r3, #3
 800820e:	e7f5      	b.n	80081fc <_dtoa_r+0x8c>
 8008210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	2300      	movs	r3, #0
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 fc30 	bl	8000a80 <__aeabi_dcmpeq>
 8008220:	4682      	mov	sl, r0
 8008222:	b160      	cbz	r0, 800823e <_dtoa_r+0xce>
 8008224:	2301      	movs	r3, #1
 8008226:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8520 	beq.w	8008c72 <_dtoa_r+0xb02>
 8008232:	4b98      	ldr	r3, [pc, #608]	; (8008494 <_dtoa_r+0x324>)
 8008234:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	3b01      	subs	r3, #1
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	e7e0      	b.n	8008200 <_dtoa_r+0x90>
 800823e:	ab12      	add	r3, sp, #72	; 0x48
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	ab13      	add	r3, sp, #76	; 0x4c
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4632      	mov	r2, r6
 8008248:	463b      	mov	r3, r7
 800824a:	4620      	mov	r0, r4
 800824c:	f001 fdc0 	bl	8009dd0 <__d2b>
 8008250:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008254:	4683      	mov	fp, r0
 8008256:	2d00      	cmp	r5, #0
 8008258:	d07d      	beq.n	8008356 <_dtoa_r+0x1e6>
 800825a:	46b0      	mov	r8, r6
 800825c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008260:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008264:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008268:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800826c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008270:	2200      	movs	r2, #0
 8008272:	4b89      	ldr	r3, [pc, #548]	; (8008498 <_dtoa_r+0x328>)
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f7 ffe2 	bl	8000240 <__aeabi_dsub>
 800827c:	a37c      	add	r3, pc, #496	; (adr r3, 8008470 <_dtoa_r+0x300>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f995 	bl	80005b0 <__aeabi_dmul>
 8008286:	a37c      	add	r3, pc, #496	; (adr r3, 8008478 <_dtoa_r+0x308>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f7f7 ffda 	bl	8000244 <__adddf3>
 8008290:	4606      	mov	r6, r0
 8008292:	4628      	mov	r0, r5
 8008294:	460f      	mov	r7, r1
 8008296:	f7f8 f921 	bl	80004dc <__aeabi_i2d>
 800829a:	a379      	add	r3, pc, #484	; (adr r3, 8008480 <_dtoa_r+0x310>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f8 f986 	bl	80005b0 <__aeabi_dmul>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f7 ffca 	bl	8000244 <__adddf3>
 80082b0:	4606      	mov	r6, r0
 80082b2:	460f      	mov	r7, r1
 80082b4:	f7f8 fc2c 	bl	8000b10 <__aeabi_d2iz>
 80082b8:	2200      	movs	r2, #0
 80082ba:	4682      	mov	sl, r0
 80082bc:	2300      	movs	r3, #0
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 fbe7 	bl	8000a94 <__aeabi_dcmplt>
 80082c6:	b148      	cbz	r0, 80082dc <_dtoa_r+0x16c>
 80082c8:	4650      	mov	r0, sl
 80082ca:	f7f8 f907 	bl	80004dc <__aeabi_i2d>
 80082ce:	4632      	mov	r2, r6
 80082d0:	463b      	mov	r3, r7
 80082d2:	f7f8 fbd5 	bl	8000a80 <__aeabi_dcmpeq>
 80082d6:	b908      	cbnz	r0, 80082dc <_dtoa_r+0x16c>
 80082d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082dc:	f1ba 0f16 	cmp.w	sl, #22
 80082e0:	d85a      	bhi.n	8008398 <_dtoa_r+0x228>
 80082e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082e6:	496d      	ldr	r1, [pc, #436]	; (800849c <_dtoa_r+0x32c>)
 80082e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80082ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f0:	f7f8 fbee 	bl	8000ad0 <__aeabi_dcmpgt>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d051      	beq.n	800839c <_dtoa_r+0x22c>
 80082f8:	2300      	movs	r3, #0
 80082fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008302:	1b5d      	subs	r5, r3, r5
 8008304:	1e6b      	subs	r3, r5, #1
 8008306:	9307      	str	r3, [sp, #28]
 8008308:	bf43      	ittte	mi
 800830a:	2300      	movmi	r3, #0
 800830c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008310:	9307      	strmi	r3, [sp, #28]
 8008312:	f04f 0900 	movpl.w	r9, #0
 8008316:	f1ba 0f00 	cmp.w	sl, #0
 800831a:	db41      	blt.n	80083a0 <_dtoa_r+0x230>
 800831c:	9b07      	ldr	r3, [sp, #28]
 800831e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008322:	4453      	add	r3, sl
 8008324:	9307      	str	r3, [sp, #28]
 8008326:	2300      	movs	r3, #0
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800832c:	2b09      	cmp	r3, #9
 800832e:	f200 808f 	bhi.w	8008450 <_dtoa_r+0x2e0>
 8008332:	2b05      	cmp	r3, #5
 8008334:	bfc4      	itt	gt
 8008336:	3b04      	subgt	r3, #4
 8008338:	931e      	strgt	r3, [sp, #120]	; 0x78
 800833a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800833c:	bfc8      	it	gt
 800833e:	2500      	movgt	r5, #0
 8008340:	f1a3 0302 	sub.w	r3, r3, #2
 8008344:	bfd8      	it	le
 8008346:	2501      	movle	r5, #1
 8008348:	2b03      	cmp	r3, #3
 800834a:	f200 808d 	bhi.w	8008468 <_dtoa_r+0x2f8>
 800834e:	e8df f003 	tbb	[pc, r3]
 8008352:	7d7b      	.short	0x7d7b
 8008354:	6f2f      	.short	0x6f2f
 8008356:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800835a:	441d      	add	r5, r3
 800835c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008360:	2820      	cmp	r0, #32
 8008362:	dd13      	ble.n	800838c <_dtoa_r+0x21c>
 8008364:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	fa08 f800 	lsl.w	r8, r8, r0
 800836e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008372:	fa23 f000 	lsr.w	r0, r3, r0
 8008376:	ea48 0000 	orr.w	r0, r8, r0
 800837a:	f7f8 f89f 	bl	80004bc <__aeabi_ui2d>
 800837e:	2301      	movs	r3, #1
 8008380:	4680      	mov	r8, r0
 8008382:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008386:	3d01      	subs	r5, #1
 8008388:	9310      	str	r3, [sp, #64]	; 0x40
 800838a:	e771      	b.n	8008270 <_dtoa_r+0x100>
 800838c:	9b02      	ldr	r3, [sp, #8]
 800838e:	f1c0 0020 	rsb	r0, r0, #32
 8008392:	fa03 f000 	lsl.w	r0, r3, r0
 8008396:	e7f0      	b.n	800837a <_dtoa_r+0x20a>
 8008398:	2301      	movs	r3, #1
 800839a:	e7b0      	b.n	80082fe <_dtoa_r+0x18e>
 800839c:	900d      	str	r0, [sp, #52]	; 0x34
 800839e:	e7af      	b.n	8008300 <_dtoa_r+0x190>
 80083a0:	f1ca 0300 	rsb	r3, sl, #0
 80083a4:	9308      	str	r3, [sp, #32]
 80083a6:	2300      	movs	r3, #0
 80083a8:	eba9 090a 	sub.w	r9, r9, sl
 80083ac:	930c      	str	r3, [sp, #48]	; 0x30
 80083ae:	e7bc      	b.n	800832a <_dtoa_r+0x1ba>
 80083b0:	2301      	movs	r3, #1
 80083b2:	9309      	str	r3, [sp, #36]	; 0x24
 80083b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dd74      	ble.n	80084a4 <_dtoa_r+0x334>
 80083ba:	4698      	mov	r8, r3
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	2200      	movs	r2, #0
 80083c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083c2:	6072      	str	r2, [r6, #4]
 80083c4:	2204      	movs	r2, #4
 80083c6:	f102 0014 	add.w	r0, r2, #20
 80083ca:	4298      	cmp	r0, r3
 80083cc:	6871      	ldr	r1, [r6, #4]
 80083ce:	d96e      	bls.n	80084ae <_dtoa_r+0x33e>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f001 f9bd 	bl	8009750 <_Balloc>
 80083d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f1b8 0f0e 	cmp.w	r8, #14
 80083e0:	9306      	str	r3, [sp, #24]
 80083e2:	f200 80ed 	bhi.w	80085c0 <_dtoa_r+0x450>
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	f000 80ea 	beq.w	80085c0 <_dtoa_r+0x450>
 80083ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083f0:	f1ba 0f00 	cmp.w	sl, #0
 80083f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80083f8:	dd77      	ble.n	80084ea <_dtoa_r+0x37a>
 80083fa:	4a28      	ldr	r2, [pc, #160]	; (800849c <_dtoa_r+0x32c>)
 80083fc:	f00a 030f 	and.w	r3, sl, #15
 8008400:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008404:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008408:	06f0      	lsls	r0, r6, #27
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008412:	d568      	bpl.n	80084e6 <_dtoa_r+0x376>
 8008414:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008418:	4b21      	ldr	r3, [pc, #132]	; (80084a0 <_dtoa_r+0x330>)
 800841a:	2503      	movs	r5, #3
 800841c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008420:	f7f8 f9f0 	bl	8000804 <__aeabi_ddiv>
 8008424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008428:	f006 060f 	and.w	r6, r6, #15
 800842c:	4f1c      	ldr	r7, [pc, #112]	; (80084a0 <_dtoa_r+0x330>)
 800842e:	e04f      	b.n	80084d0 <_dtoa_r+0x360>
 8008430:	2301      	movs	r3, #1
 8008432:	9309      	str	r3, [sp, #36]	; 0x24
 8008434:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008436:	4453      	add	r3, sl
 8008438:	f103 0801 	add.w	r8, r3, #1
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	4643      	mov	r3, r8
 8008440:	2b01      	cmp	r3, #1
 8008442:	bfb8      	it	lt
 8008444:	2301      	movlt	r3, #1
 8008446:	e7ba      	b.n	80083be <_dtoa_r+0x24e>
 8008448:	2300      	movs	r3, #0
 800844a:	e7b2      	b.n	80083b2 <_dtoa_r+0x242>
 800844c:	2300      	movs	r3, #0
 800844e:	e7f0      	b.n	8008432 <_dtoa_r+0x2c2>
 8008450:	2501      	movs	r5, #1
 8008452:	2300      	movs	r3, #0
 8008454:	9509      	str	r5, [sp, #36]	; 0x24
 8008456:	931e      	str	r3, [sp, #120]	; 0x78
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	2200      	movs	r2, #0
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	4698      	mov	r8, r3
 8008462:	2312      	movs	r3, #18
 8008464:	921f      	str	r2, [sp, #124]	; 0x7c
 8008466:	e7aa      	b.n	80083be <_dtoa_r+0x24e>
 8008468:	2301      	movs	r3, #1
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	e7f4      	b.n	8008458 <_dtoa_r+0x2e8>
 800846e:	bf00      	nop
 8008470:	636f4361 	.word	0x636f4361
 8008474:	3fd287a7 	.word	0x3fd287a7
 8008478:	8b60c8b3 	.word	0x8b60c8b3
 800847c:	3fc68a28 	.word	0x3fc68a28
 8008480:	509f79fb 	.word	0x509f79fb
 8008484:	3fd34413 	.word	0x3fd34413
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	0800b481 	.word	0x0800b481
 8008490:	0800b478 	.word	0x0800b478
 8008494:	0800ac94 	.word	0x0800ac94
 8008498:	3ff80000 	.word	0x3ff80000
 800849c:	0800b518 	.word	0x0800b518
 80084a0:	0800b4f0 	.word	0x0800b4f0
 80084a4:	2301      	movs	r3, #1
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	4698      	mov	r8, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	e7da      	b.n	8008464 <_dtoa_r+0x2f4>
 80084ae:	3101      	adds	r1, #1
 80084b0:	6071      	str	r1, [r6, #4]
 80084b2:	0052      	lsls	r2, r2, #1
 80084b4:	e787      	b.n	80083c6 <_dtoa_r+0x256>
 80084b6:	07f1      	lsls	r1, r6, #31
 80084b8:	d508      	bpl.n	80084cc <_dtoa_r+0x35c>
 80084ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c2:	f7f8 f875 	bl	80005b0 <__aeabi_dmul>
 80084c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80084ca:	3501      	adds	r5, #1
 80084cc:	1076      	asrs	r6, r6, #1
 80084ce:	3708      	adds	r7, #8
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	d1f0      	bne.n	80084b6 <_dtoa_r+0x346>
 80084d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084dc:	f7f8 f992 	bl	8000804 <__aeabi_ddiv>
 80084e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e4:	e01b      	b.n	800851e <_dtoa_r+0x3ae>
 80084e6:	2502      	movs	r5, #2
 80084e8:	e7a0      	b.n	800842c <_dtoa_r+0x2bc>
 80084ea:	f000 80a4 	beq.w	8008636 <_dtoa_r+0x4c6>
 80084ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80084f2:	f1ca 0600 	rsb	r6, sl, #0
 80084f6:	4ba0      	ldr	r3, [pc, #640]	; (8008778 <_dtoa_r+0x608>)
 80084f8:	f006 020f 	and.w	r2, r6, #15
 80084fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f8 f854 	bl	80005b0 <__aeabi_dmul>
 8008508:	2502      	movs	r5, #2
 800850a:	2300      	movs	r3, #0
 800850c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008510:	4f9a      	ldr	r7, [pc, #616]	; (800877c <_dtoa_r+0x60c>)
 8008512:	1136      	asrs	r6, r6, #4
 8008514:	2e00      	cmp	r6, #0
 8008516:	f040 8083 	bne.w	8008620 <_dtoa_r+0x4b0>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e0      	bne.n	80084e0 <_dtoa_r+0x370>
 800851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 808a 	beq.w	800863a <_dtoa_r+0x4ca>
 8008526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800852a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800852e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008532:	2200      	movs	r2, #0
 8008534:	4b92      	ldr	r3, [pc, #584]	; (8008780 <_dtoa_r+0x610>)
 8008536:	f7f8 faad 	bl	8000a94 <__aeabi_dcmplt>
 800853a:	2800      	cmp	r0, #0
 800853c:	d07d      	beq.n	800863a <_dtoa_r+0x4ca>
 800853e:	f1b8 0f00 	cmp.w	r8, #0
 8008542:	d07a      	beq.n	800863a <_dtoa_r+0x4ca>
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	dd36      	ble.n	80085b8 <_dtoa_r+0x448>
 800854a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800854e:	2200      	movs	r2, #0
 8008550:	4b8c      	ldr	r3, [pc, #560]	; (8008784 <_dtoa_r+0x614>)
 8008552:	f7f8 f82d 	bl	80005b0 <__aeabi_dmul>
 8008556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855a:	9e04      	ldr	r6, [sp, #16]
 800855c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008560:	3501      	adds	r5, #1
 8008562:	4628      	mov	r0, r5
 8008564:	f7f7 ffba 	bl	80004dc <__aeabi_i2d>
 8008568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800856c:	f7f8 f820 	bl	80005b0 <__aeabi_dmul>
 8008570:	2200      	movs	r2, #0
 8008572:	4b85      	ldr	r3, [pc, #532]	; (8008788 <_dtoa_r+0x618>)
 8008574:	f7f7 fe66 	bl	8000244 <__adddf3>
 8008578:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800857c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008580:	950b      	str	r5, [sp, #44]	; 0x2c
 8008582:	2e00      	cmp	r6, #0
 8008584:	d15c      	bne.n	8008640 <_dtoa_r+0x4d0>
 8008586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	4b7f      	ldr	r3, [pc, #508]	; (800878c <_dtoa_r+0x61c>)
 800858e:	f7f7 fe57 	bl	8000240 <__aeabi_dsub>
 8008592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008594:	462b      	mov	r3, r5
 8008596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859a:	f7f8 fa99 	bl	8000ad0 <__aeabi_dcmpgt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f040 8281 	bne.w	8008aa6 <_dtoa_r+0x936>
 80085a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085aa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80085ae:	f7f8 fa71 	bl	8000a94 <__aeabi_dcmplt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f040 8275 	bne.w	8008aa2 <_dtoa_r+0x932>
 80085b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80085bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f2c0 814b 	blt.w	800885e <_dtoa_r+0x6ee>
 80085c8:	f1ba 0f0e 	cmp.w	sl, #14
 80085cc:	f300 8147 	bgt.w	800885e <_dtoa_r+0x6ee>
 80085d0:	4b69      	ldr	r3, [pc, #420]	; (8008778 <_dtoa_r+0x608>)
 80085d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f280 80d7 	bge.w	8008794 <_dtoa_r+0x624>
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	f300 80d3 	bgt.w	8008794 <_dtoa_r+0x624>
 80085ee:	f040 8257 	bne.w	8008aa0 <_dtoa_r+0x930>
 80085f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f6:	2200      	movs	r2, #0
 80085f8:	4b64      	ldr	r3, [pc, #400]	; (800878c <_dtoa_r+0x61c>)
 80085fa:	f7f7 ffd9 	bl	80005b0 <__aeabi_dmul>
 80085fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008602:	f7f8 fa5b 	bl	8000abc <__aeabi_dcmpge>
 8008606:	4646      	mov	r6, r8
 8008608:	4647      	mov	r7, r8
 800860a:	2800      	cmp	r0, #0
 800860c:	f040 822d 	bne.w	8008a6a <_dtoa_r+0x8fa>
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	9a06      	ldr	r2, [sp, #24]
 8008614:	1c5d      	adds	r5, r3, #1
 8008616:	2331      	movs	r3, #49	; 0x31
 8008618:	f10a 0a01 	add.w	sl, sl, #1
 800861c:	7013      	strb	r3, [r2, #0]
 800861e:	e228      	b.n	8008a72 <_dtoa_r+0x902>
 8008620:	07f2      	lsls	r2, r6, #31
 8008622:	d505      	bpl.n	8008630 <_dtoa_r+0x4c0>
 8008624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008628:	f7f7 ffc2 	bl	80005b0 <__aeabi_dmul>
 800862c:	2301      	movs	r3, #1
 800862e:	3501      	adds	r5, #1
 8008630:	1076      	asrs	r6, r6, #1
 8008632:	3708      	adds	r7, #8
 8008634:	e76e      	b.n	8008514 <_dtoa_r+0x3a4>
 8008636:	2502      	movs	r5, #2
 8008638:	e771      	b.n	800851e <_dtoa_r+0x3ae>
 800863a:	4657      	mov	r7, sl
 800863c:	4646      	mov	r6, r8
 800863e:	e790      	b.n	8008562 <_dtoa_r+0x3f2>
 8008640:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <_dtoa_r+0x608>)
 8008642:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008646:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800864a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d048      	beq.n	80086e2 <_dtoa_r+0x572>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	2000      	movs	r0, #0
 8008656:	494e      	ldr	r1, [pc, #312]	; (8008790 <_dtoa_r+0x620>)
 8008658:	f7f8 f8d4 	bl	8000804 <__aeabi_ddiv>
 800865c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008660:	f7f7 fdee 	bl	8000240 <__aeabi_dsub>
 8008664:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008668:	9d06      	ldr	r5, [sp, #24]
 800866a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866e:	f7f8 fa4f 	bl	8000b10 <__aeabi_d2iz>
 8008672:	9011      	str	r0, [sp, #68]	; 0x44
 8008674:	f7f7 ff32 	bl	80004dc <__aeabi_i2d>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008680:	f7f7 fdde 	bl	8000240 <__aeabi_dsub>
 8008684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868a:	3330      	adds	r3, #48	; 0x30
 800868c:	f805 3b01 	strb.w	r3, [r5], #1
 8008690:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008694:	f7f8 f9fe 	bl	8000a94 <__aeabi_dcmplt>
 8008698:	2800      	cmp	r0, #0
 800869a:	d163      	bne.n	8008764 <_dtoa_r+0x5f4>
 800869c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a0:	2000      	movs	r0, #0
 80086a2:	4937      	ldr	r1, [pc, #220]	; (8008780 <_dtoa_r+0x610>)
 80086a4:	f7f7 fdcc 	bl	8000240 <__aeabi_dsub>
 80086a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086ac:	f7f8 f9f2 	bl	8000a94 <__aeabi_dcmplt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f040 80b5 	bne.w	8008820 <_dtoa_r+0x6b0>
 80086b6:	9b06      	ldr	r3, [sp, #24]
 80086b8:	1aeb      	subs	r3, r5, r3
 80086ba:	429e      	cmp	r6, r3
 80086bc:	f77f af7c 	ble.w	80085b8 <_dtoa_r+0x448>
 80086c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086c4:	2200      	movs	r2, #0
 80086c6:	4b2f      	ldr	r3, [pc, #188]	; (8008784 <_dtoa_r+0x614>)
 80086c8:	f7f7 ff72 	bl	80005b0 <__aeabi_dmul>
 80086cc:	2200      	movs	r2, #0
 80086ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d6:	4b2b      	ldr	r3, [pc, #172]	; (8008784 <_dtoa_r+0x614>)
 80086d8:	f7f7 ff6a 	bl	80005b0 <__aeabi_dmul>
 80086dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e0:	e7c3      	b.n	800866a <_dtoa_r+0x4fa>
 80086e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086e6:	f7f7 ff63 	bl	80005b0 <__aeabi_dmul>
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086f0:	199d      	adds	r5, r3, r6
 80086f2:	461e      	mov	r6, r3
 80086f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f8:	f7f8 fa0a 	bl	8000b10 <__aeabi_d2iz>
 80086fc:	9011      	str	r0, [sp, #68]	; 0x44
 80086fe:	f7f7 feed 	bl	80004dc <__aeabi_i2d>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800870a:	f7f7 fd99 	bl	8000240 <__aeabi_dsub>
 800870e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008714:	3330      	adds	r3, #48	; 0x30
 8008716:	f806 3b01 	strb.w	r3, [r6], #1
 800871a:	42ae      	cmp	r6, r5
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	d124      	bne.n	800876c <_dtoa_r+0x5fc>
 8008722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <_dtoa_r+0x620>)
 8008728:	f7f7 fd8c 	bl	8000244 <__adddf3>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008734:	f7f8 f9cc 	bl	8000ad0 <__aeabi_dcmpgt>
 8008738:	2800      	cmp	r0, #0
 800873a:	d171      	bne.n	8008820 <_dtoa_r+0x6b0>
 800873c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008740:	2000      	movs	r0, #0
 8008742:	4913      	ldr	r1, [pc, #76]	; (8008790 <_dtoa_r+0x620>)
 8008744:	f7f7 fd7c 	bl	8000240 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008750:	f7f8 f9a0 	bl	8000a94 <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	f43f af2f 	beq.w	80085b8 <_dtoa_r+0x448>
 800875a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800875e:	1e6a      	subs	r2, r5, #1
 8008760:	2b30      	cmp	r3, #48	; 0x30
 8008762:	d001      	beq.n	8008768 <_dtoa_r+0x5f8>
 8008764:	46ba      	mov	sl, r7
 8008766:	e04a      	b.n	80087fe <_dtoa_r+0x68e>
 8008768:	4615      	mov	r5, r2
 800876a:	e7f6      	b.n	800875a <_dtoa_r+0x5ea>
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <_dtoa_r+0x614>)
 800876e:	f7f7 ff1f 	bl	80005b0 <__aeabi_dmul>
 8008772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008776:	e7bd      	b.n	80086f4 <_dtoa_r+0x584>
 8008778:	0800b518 	.word	0x0800b518
 800877c:	0800b4f0 	.word	0x0800b4f0
 8008780:	3ff00000 	.word	0x3ff00000
 8008784:	40240000 	.word	0x40240000
 8008788:	401c0000 	.word	0x401c0000
 800878c:	40140000 	.word	0x40140000
 8008790:	3fe00000 	.word	0x3fe00000
 8008794:	9d06      	ldr	r5, [sp, #24]
 8008796:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800879a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f8 f82f 	bl	8000804 <__aeabi_ddiv>
 80087a6:	f7f8 f9b3 	bl	8000b10 <__aeabi_d2iz>
 80087aa:	4681      	mov	r9, r0
 80087ac:	f7f7 fe96 	bl	80004dc <__aeabi_i2d>
 80087b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087b4:	f7f7 fefc 	bl	80005b0 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f7 fd3e 	bl	8000240 <__aeabi_dsub>
 80087c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80087c8:	f805 6b01 	strb.w	r6, [r5], #1
 80087cc:	9e06      	ldr	r6, [sp, #24]
 80087ce:	4602      	mov	r2, r0
 80087d0:	1bae      	subs	r6, r5, r6
 80087d2:	45b0      	cmp	r8, r6
 80087d4:	460b      	mov	r3, r1
 80087d6:	d135      	bne.n	8008844 <_dtoa_r+0x6d4>
 80087d8:	f7f7 fd34 	bl	8000244 <__adddf3>
 80087dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e0:	4606      	mov	r6, r0
 80087e2:	460f      	mov	r7, r1
 80087e4:	f7f8 f974 	bl	8000ad0 <__aeabi_dcmpgt>
 80087e8:	b9c8      	cbnz	r0, 800881e <_dtoa_r+0x6ae>
 80087ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f8 f945 	bl	8000a80 <__aeabi_dcmpeq>
 80087f6:	b110      	cbz	r0, 80087fe <_dtoa_r+0x68e>
 80087f8:	f019 0f01 	tst.w	r9, #1
 80087fc:	d10f      	bne.n	800881e <_dtoa_r+0x6ae>
 80087fe:	4659      	mov	r1, fp
 8008800:	4620      	mov	r0, r4
 8008802:	f000 ffd9 	bl	80097b8 <_Bfree>
 8008806:	2300      	movs	r3, #0
 8008808:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800880a:	702b      	strb	r3, [r5, #0]
 800880c:	f10a 0301 	add.w	r3, sl, #1
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008814:	2b00      	cmp	r3, #0
 8008816:	f43f acf3 	beq.w	8008200 <_dtoa_r+0x90>
 800881a:	601d      	str	r5, [r3, #0]
 800881c:	e4f0      	b.n	8008200 <_dtoa_r+0x90>
 800881e:	4657      	mov	r7, sl
 8008820:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008824:	1e6b      	subs	r3, r5, #1
 8008826:	2a39      	cmp	r2, #57	; 0x39
 8008828:	d106      	bne.n	8008838 <_dtoa_r+0x6c8>
 800882a:	9a06      	ldr	r2, [sp, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	d107      	bne.n	8008840 <_dtoa_r+0x6d0>
 8008830:	2330      	movs	r3, #48	; 0x30
 8008832:	7013      	strb	r3, [r2, #0]
 8008834:	4613      	mov	r3, r2
 8008836:	3701      	adds	r7, #1
 8008838:	781a      	ldrb	r2, [r3, #0]
 800883a:	3201      	adds	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e791      	b.n	8008764 <_dtoa_r+0x5f4>
 8008840:	461d      	mov	r5, r3
 8008842:	e7ed      	b.n	8008820 <_dtoa_r+0x6b0>
 8008844:	2200      	movs	r2, #0
 8008846:	4b99      	ldr	r3, [pc, #612]	; (8008aac <_dtoa_r+0x93c>)
 8008848:	f7f7 feb2 	bl	80005b0 <__aeabi_dmul>
 800884c:	2200      	movs	r2, #0
 800884e:	2300      	movs	r3, #0
 8008850:	4606      	mov	r6, r0
 8008852:	460f      	mov	r7, r1
 8008854:	f7f8 f914 	bl	8000a80 <__aeabi_dcmpeq>
 8008858:	2800      	cmp	r0, #0
 800885a:	d09e      	beq.n	800879a <_dtoa_r+0x62a>
 800885c:	e7cf      	b.n	80087fe <_dtoa_r+0x68e>
 800885e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008860:	2a00      	cmp	r2, #0
 8008862:	f000 8088 	beq.w	8008976 <_dtoa_r+0x806>
 8008866:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008868:	2a01      	cmp	r2, #1
 800886a:	dc6d      	bgt.n	8008948 <_dtoa_r+0x7d8>
 800886c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800886e:	2a00      	cmp	r2, #0
 8008870:	d066      	beq.n	8008940 <_dtoa_r+0x7d0>
 8008872:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008876:	464d      	mov	r5, r9
 8008878:	9e08      	ldr	r6, [sp, #32]
 800887a:	9a07      	ldr	r2, [sp, #28]
 800887c:	2101      	movs	r1, #1
 800887e:	441a      	add	r2, r3
 8008880:	4620      	mov	r0, r4
 8008882:	4499      	add	r9, r3
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	f001 f875 	bl	8009974 <__i2b>
 800888a:	4607      	mov	r7, r0
 800888c:	2d00      	cmp	r5, #0
 800888e:	dd0b      	ble.n	80088a8 <_dtoa_r+0x738>
 8008890:	9b07      	ldr	r3, [sp, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd08      	ble.n	80088a8 <_dtoa_r+0x738>
 8008896:	42ab      	cmp	r3, r5
 8008898:	bfa8      	it	ge
 800889a:	462b      	movge	r3, r5
 800889c:	9a07      	ldr	r2, [sp, #28]
 800889e:	eba9 0903 	sub.w	r9, r9, r3
 80088a2:	1aed      	subs	r5, r5, r3
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	9307      	str	r3, [sp, #28]
 80088a8:	9b08      	ldr	r3, [sp, #32]
 80088aa:	b1eb      	cbz	r3, 80088e8 <_dtoa_r+0x778>
 80088ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d065      	beq.n	800897e <_dtoa_r+0x80e>
 80088b2:	b18e      	cbz	r6, 80088d8 <_dtoa_r+0x768>
 80088b4:	4639      	mov	r1, r7
 80088b6:	4632      	mov	r2, r6
 80088b8:	4620      	mov	r0, r4
 80088ba:	f001 f8f9 	bl	8009ab0 <__pow5mult>
 80088be:	465a      	mov	r2, fp
 80088c0:	4601      	mov	r1, r0
 80088c2:	4607      	mov	r7, r0
 80088c4:	4620      	mov	r0, r4
 80088c6:	f001 f85e 	bl	8009986 <__multiply>
 80088ca:	4659      	mov	r1, fp
 80088cc:	900a      	str	r0, [sp, #40]	; 0x28
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 ff72 	bl	80097b8 <_Bfree>
 80088d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d6:	469b      	mov	fp, r3
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	1b9a      	subs	r2, r3, r6
 80088dc:	d004      	beq.n	80088e8 <_dtoa_r+0x778>
 80088de:	4659      	mov	r1, fp
 80088e0:	4620      	mov	r0, r4
 80088e2:	f001 f8e5 	bl	8009ab0 <__pow5mult>
 80088e6:	4683      	mov	fp, r0
 80088e8:	2101      	movs	r1, #1
 80088ea:	4620      	mov	r0, r4
 80088ec:	f001 f842 	bl	8009974 <__i2b>
 80088f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f2:	4606      	mov	r6, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 81c6 	beq.w	8008c86 <_dtoa_r+0xb16>
 80088fa:	461a      	mov	r2, r3
 80088fc:	4601      	mov	r1, r0
 80088fe:	4620      	mov	r0, r4
 8008900:	f001 f8d6 	bl	8009ab0 <__pow5mult>
 8008904:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008906:	4606      	mov	r6, r0
 8008908:	2b01      	cmp	r3, #1
 800890a:	dc3e      	bgt.n	800898a <_dtoa_r+0x81a>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d137      	bne.n	8008982 <_dtoa_r+0x812>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008918:	2b00      	cmp	r3, #0
 800891a:	d134      	bne.n	8008986 <_dtoa_r+0x816>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008922:	0d1b      	lsrs	r3, r3, #20
 8008924:	051b      	lsls	r3, r3, #20
 8008926:	b12b      	cbz	r3, 8008934 <_dtoa_r+0x7c4>
 8008928:	9b07      	ldr	r3, [sp, #28]
 800892a:	f109 0901 	add.w	r9, r9, #1
 800892e:	3301      	adds	r3, #1
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	2301      	movs	r3, #1
 8008934:	9308      	str	r3, [sp, #32]
 8008936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d128      	bne.n	800898e <_dtoa_r+0x81e>
 800893c:	2001      	movs	r0, #1
 800893e:	e02e      	b.n	800899e <_dtoa_r+0x82e>
 8008940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008942:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008946:	e796      	b.n	8008876 <_dtoa_r+0x706>
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	f108 36ff 	add.w	r6, r8, #4294967295
 800894e:	42b3      	cmp	r3, r6
 8008950:	bfb7      	itett	lt
 8008952:	9b08      	ldrlt	r3, [sp, #32]
 8008954:	1b9e      	subge	r6, r3, r6
 8008956:	1af2      	sublt	r2, r6, r3
 8008958:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800895a:	bfbf      	itttt	lt
 800895c:	9608      	strlt	r6, [sp, #32]
 800895e:	189b      	addlt	r3, r3, r2
 8008960:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008962:	2600      	movlt	r6, #0
 8008964:	f1b8 0f00 	cmp.w	r8, #0
 8008968:	bfb9      	ittee	lt
 800896a:	eba9 0508 	sublt.w	r5, r9, r8
 800896e:	2300      	movlt	r3, #0
 8008970:	464d      	movge	r5, r9
 8008972:	4643      	movge	r3, r8
 8008974:	e781      	b.n	800887a <_dtoa_r+0x70a>
 8008976:	9e08      	ldr	r6, [sp, #32]
 8008978:	464d      	mov	r5, r9
 800897a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800897c:	e786      	b.n	800888c <_dtoa_r+0x71c>
 800897e:	9a08      	ldr	r2, [sp, #32]
 8008980:	e7ad      	b.n	80088de <_dtoa_r+0x76e>
 8008982:	2300      	movs	r3, #0
 8008984:	e7d6      	b.n	8008934 <_dtoa_r+0x7c4>
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	e7d4      	b.n	8008934 <_dtoa_r+0x7c4>
 800898a:	2300      	movs	r3, #0
 800898c:	9308      	str	r3, [sp, #32]
 800898e:	6933      	ldr	r3, [r6, #16]
 8008990:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008994:	6918      	ldr	r0, [r3, #16]
 8008996:	f000 ff9f 	bl	80098d8 <__hi0bits>
 800899a:	f1c0 0020 	rsb	r0, r0, #32
 800899e:	9b07      	ldr	r3, [sp, #28]
 80089a0:	4418      	add	r0, r3
 80089a2:	f010 001f 	ands.w	r0, r0, #31
 80089a6:	d047      	beq.n	8008a38 <_dtoa_r+0x8c8>
 80089a8:	f1c0 0320 	rsb	r3, r0, #32
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	dd3b      	ble.n	8008a28 <_dtoa_r+0x8b8>
 80089b0:	9b07      	ldr	r3, [sp, #28]
 80089b2:	f1c0 001c 	rsb	r0, r0, #28
 80089b6:	4481      	add	r9, r0
 80089b8:	4405      	add	r5, r0
 80089ba:	4403      	add	r3, r0
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	dd05      	ble.n	80089d0 <_dtoa_r+0x860>
 80089c4:	4659      	mov	r1, fp
 80089c6:	464a      	mov	r2, r9
 80089c8:	4620      	mov	r0, r4
 80089ca:	f001 f8bf 	bl	8009b4c <__lshift>
 80089ce:	4683      	mov	fp, r0
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dd05      	ble.n	80089e2 <_dtoa_r+0x872>
 80089d6:	4631      	mov	r1, r6
 80089d8:	461a      	mov	r2, r3
 80089da:	4620      	mov	r0, r4
 80089dc:	f001 f8b6 	bl	8009b4c <__lshift>
 80089e0:	4606      	mov	r6, r0
 80089e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e4:	b353      	cbz	r3, 8008a3c <_dtoa_r+0x8cc>
 80089e6:	4631      	mov	r1, r6
 80089e8:	4658      	mov	r0, fp
 80089ea:	f001 f903 	bl	8009bf4 <__mcmp>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	da24      	bge.n	8008a3c <_dtoa_r+0x8cc>
 80089f2:	2300      	movs	r3, #0
 80089f4:	4659      	mov	r1, fp
 80089f6:	220a      	movs	r2, #10
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fef4 	bl	80097e6 <__multadd>
 80089fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a04:	4683      	mov	fp, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 8144 	beq.w	8008c94 <_dtoa_r+0xb24>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4639      	mov	r1, r7
 8008a10:	220a      	movs	r2, #10
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fee7 	bl	80097e6 <__multadd>
 8008a18:	9b04      	ldr	r3, [sp, #16]
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc4d      	bgt.n	8008abc <_dtoa_r+0x94c>
 8008a20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	dd4a      	ble.n	8008abc <_dtoa_r+0x94c>
 8008a26:	e011      	b.n	8008a4c <_dtoa_r+0x8dc>
 8008a28:	d0c9      	beq.n	80089be <_dtoa_r+0x84e>
 8008a2a:	9a07      	ldr	r2, [sp, #28]
 8008a2c:	331c      	adds	r3, #28
 8008a2e:	441a      	add	r2, r3
 8008a30:	4499      	add	r9, r3
 8008a32:	441d      	add	r5, r3
 8008a34:	4613      	mov	r3, r2
 8008a36:	e7c1      	b.n	80089bc <_dtoa_r+0x84c>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	e7f6      	b.n	8008a2a <_dtoa_r+0x8ba>
 8008a3c:	f1b8 0f00 	cmp.w	r8, #0
 8008a40:	dc36      	bgt.n	8008ab0 <_dtoa_r+0x940>
 8008a42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	dd33      	ble.n	8008ab0 <_dtoa_r+0x940>
 8008a48:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	b963      	cbnz	r3, 8008a6a <_dtoa_r+0x8fa>
 8008a50:	4631      	mov	r1, r6
 8008a52:	2205      	movs	r2, #5
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fec6 	bl	80097e6 <__multadd>
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	4658      	mov	r0, fp
 8008a60:	f001 f8c8 	bl	8009bf4 <__mcmp>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f73f add3 	bgt.w	8008610 <_dtoa_r+0x4a0>
 8008a6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a6c:	9d06      	ldr	r5, [sp, #24]
 8008a6e:	ea6f 0a03 	mvn.w	sl, r3
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	4631      	mov	r1, r6
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fe9d 	bl	80097b8 <_Bfree>
 8008a7e:	2f00      	cmp	r7, #0
 8008a80:	f43f aebd 	beq.w	80087fe <_dtoa_r+0x68e>
 8008a84:	f1b9 0f00 	cmp.w	r9, #0
 8008a88:	d005      	beq.n	8008a96 <_dtoa_r+0x926>
 8008a8a:	45b9      	cmp	r9, r7
 8008a8c:	d003      	beq.n	8008a96 <_dtoa_r+0x926>
 8008a8e:	4649      	mov	r1, r9
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fe91 	bl	80097b8 <_Bfree>
 8008a96:	4639      	mov	r1, r7
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fe8d 	bl	80097b8 <_Bfree>
 8008a9e:	e6ae      	b.n	80087fe <_dtoa_r+0x68e>
 8008aa0:	2600      	movs	r6, #0
 8008aa2:	4637      	mov	r7, r6
 8008aa4:	e7e1      	b.n	8008a6a <_dtoa_r+0x8fa>
 8008aa6:	46ba      	mov	sl, r7
 8008aa8:	4637      	mov	r7, r6
 8008aaa:	e5b1      	b.n	8008610 <_dtoa_r+0x4a0>
 8008aac:	40240000 	.word	0x40240000
 8008ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab2:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 80f3 	beq.w	8008ca2 <_dtoa_r+0xb32>
 8008abc:	2d00      	cmp	r5, #0
 8008abe:	dd05      	ble.n	8008acc <_dtoa_r+0x95c>
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f001 f841 	bl	8009b4c <__lshift>
 8008aca:	4607      	mov	r7, r0
 8008acc:	9b08      	ldr	r3, [sp, #32]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d04c      	beq.n	8008b6c <_dtoa_r+0x9fc>
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fe3b 	bl	8009750 <_Balloc>
 8008ada:	4605      	mov	r5, r0
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	f107 010c 	add.w	r1, r7, #12
 8008ae2:	3202      	adds	r2, #2
 8008ae4:	0092      	lsls	r2, r2, #2
 8008ae6:	300c      	adds	r0, #12
 8008ae8:	f7fd fb6b 	bl	80061c2 <memcpy>
 8008aec:	2201      	movs	r2, #1
 8008aee:	4629      	mov	r1, r5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f001 f82b 	bl	8009b4c <__lshift>
 8008af6:	46b9      	mov	r9, r7
 8008af8:	4607      	mov	r7, r0
 8008afa:	9b06      	ldr	r3, [sp, #24]
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	9308      	str	r3, [sp, #32]
 8008b06:	4631      	mov	r1, r6
 8008b08:	4658      	mov	r0, fp
 8008b0a:	f7ff faa3 	bl	8008054 <quorem>
 8008b0e:	4649      	mov	r1, r9
 8008b10:	4605      	mov	r5, r0
 8008b12:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b16:	4658      	mov	r0, fp
 8008b18:	f001 f86c 	bl	8009bf4 <__mcmp>
 8008b1c:	463a      	mov	r2, r7
 8008b1e:	9002      	str	r0, [sp, #8]
 8008b20:	4631      	mov	r1, r6
 8008b22:	4620      	mov	r0, r4
 8008b24:	f001 f880 	bl	8009c28 <__mdiff>
 8008b28:	68c3      	ldr	r3, [r0, #12]
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	bb03      	cbnz	r3, 8008b70 <_dtoa_r+0xa00>
 8008b2e:	4601      	mov	r1, r0
 8008b30:	9009      	str	r0, [sp, #36]	; 0x24
 8008b32:	4658      	mov	r0, fp
 8008b34:	f001 f85e 	bl	8009bf4 <__mcmp>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4620      	mov	r0, r4
 8008b40:	9309      	str	r3, [sp, #36]	; 0x24
 8008b42:	f000 fe39 	bl	80097b8 <_Bfree>
 8008b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b48:	b9a3      	cbnz	r3, 8008b74 <_dtoa_r+0xa04>
 8008b4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b4c:	b992      	cbnz	r2, 8008b74 <_dtoa_r+0xa04>
 8008b4e:	9a08      	ldr	r2, [sp, #32]
 8008b50:	b982      	cbnz	r2, 8008b74 <_dtoa_r+0xa04>
 8008b52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b56:	d029      	beq.n	8008bac <_dtoa_r+0xa3c>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	dd01      	ble.n	8008b62 <_dtoa_r+0x9f2>
 8008b5e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	1c5d      	adds	r5, r3, #1
 8008b66:	f883 8000 	strb.w	r8, [r3]
 8008b6a:	e784      	b.n	8008a76 <_dtoa_r+0x906>
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	e7c2      	b.n	8008af6 <_dtoa_r+0x986>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7e3      	b.n	8008b3c <_dtoa_r+0x9cc>
 8008b74:	9a02      	ldr	r2, [sp, #8]
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	db04      	blt.n	8008b84 <_dtoa_r+0xa14>
 8008b7a:	d123      	bne.n	8008bc4 <_dtoa_r+0xa54>
 8008b7c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b7e:	bb0a      	cbnz	r2, 8008bc4 <_dtoa_r+0xa54>
 8008b80:	9a08      	ldr	r2, [sp, #32]
 8008b82:	b9fa      	cbnz	r2, 8008bc4 <_dtoa_r+0xa54>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	ddec      	ble.n	8008b62 <_dtoa_r+0x9f2>
 8008b88:	4659      	mov	r1, fp
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 ffdd 	bl	8009b4c <__lshift>
 8008b92:	4631      	mov	r1, r6
 8008b94:	4683      	mov	fp, r0
 8008b96:	f001 f82d 	bl	8009bf4 <__mcmp>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	dc03      	bgt.n	8008ba6 <_dtoa_r+0xa36>
 8008b9e:	d1e0      	bne.n	8008b62 <_dtoa_r+0x9f2>
 8008ba0:	f018 0f01 	tst.w	r8, #1
 8008ba4:	d0dd      	beq.n	8008b62 <_dtoa_r+0x9f2>
 8008ba6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008baa:	d1d8      	bne.n	8008b5e <_dtoa_r+0x9ee>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	1c5d      	adds	r5, r3, #1
 8008bb2:	2339      	movs	r3, #57	; 0x39
 8008bb4:	7013      	strb	r3, [r2, #0]
 8008bb6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bba:	1e6a      	subs	r2, r5, #1
 8008bbc:	2b39      	cmp	r3, #57	; 0x39
 8008bbe:	d04d      	beq.n	8008c5c <_dtoa_r+0xaec>
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	e052      	b.n	8008c6a <_dtoa_r+0xafa>
 8008bc4:	9a07      	ldr	r2, [sp, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f102 0501 	add.w	r5, r2, #1
 8008bcc:	dd06      	ble.n	8008bdc <_dtoa_r+0xa6c>
 8008bce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bd2:	d0eb      	beq.n	8008bac <_dtoa_r+0xa3c>
 8008bd4:	f108 0801 	add.w	r8, r8, #1
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	e7c4      	b.n	8008b66 <_dtoa_r+0x9f6>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	9a04      	ldr	r2, [sp, #16]
 8008be0:	1aeb      	subs	r3, r5, r3
 8008be2:	4293      	cmp	r3, r2
 8008be4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008be8:	d021      	beq.n	8008c2e <_dtoa_r+0xabe>
 8008bea:	4659      	mov	r1, fp
 8008bec:	2300      	movs	r3, #0
 8008bee:	220a      	movs	r2, #10
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 fdf8 	bl	80097e6 <__multadd>
 8008bf6:	45b9      	cmp	r9, r7
 8008bf8:	4683      	mov	fp, r0
 8008bfa:	f04f 0300 	mov.w	r3, #0
 8008bfe:	f04f 020a 	mov.w	r2, #10
 8008c02:	4649      	mov	r1, r9
 8008c04:	4620      	mov	r0, r4
 8008c06:	d105      	bne.n	8008c14 <_dtoa_r+0xaa4>
 8008c08:	f000 fded 	bl	80097e6 <__multadd>
 8008c0c:	4681      	mov	r9, r0
 8008c0e:	4607      	mov	r7, r0
 8008c10:	9507      	str	r5, [sp, #28]
 8008c12:	e778      	b.n	8008b06 <_dtoa_r+0x996>
 8008c14:	f000 fde7 	bl	80097e6 <__multadd>
 8008c18:	4639      	mov	r1, r7
 8008c1a:	4681      	mov	r9, r0
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	220a      	movs	r2, #10
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fde0 	bl	80097e6 <__multadd>
 8008c26:	4607      	mov	r7, r0
 8008c28:	e7f2      	b.n	8008c10 <_dtoa_r+0xaa0>
 8008c2a:	f04f 0900 	mov.w	r9, #0
 8008c2e:	4659      	mov	r1, fp
 8008c30:	2201      	movs	r2, #1
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 ff8a 	bl	8009b4c <__lshift>
 8008c38:	4631      	mov	r1, r6
 8008c3a:	4683      	mov	fp, r0
 8008c3c:	f000 ffda 	bl	8009bf4 <__mcmp>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	dcb8      	bgt.n	8008bb6 <_dtoa_r+0xa46>
 8008c44:	d102      	bne.n	8008c4c <_dtoa_r+0xadc>
 8008c46:	f018 0f01 	tst.w	r8, #1
 8008c4a:	d1b4      	bne.n	8008bb6 <_dtoa_r+0xa46>
 8008c4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c50:	1e6a      	subs	r2, r5, #1
 8008c52:	2b30      	cmp	r3, #48	; 0x30
 8008c54:	f47f af0f 	bne.w	8008a76 <_dtoa_r+0x906>
 8008c58:	4615      	mov	r5, r2
 8008c5a:	e7f7      	b.n	8008c4c <_dtoa_r+0xadc>
 8008c5c:	9b06      	ldr	r3, [sp, #24]
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d105      	bne.n	8008c6e <_dtoa_r+0xafe>
 8008c62:	2331      	movs	r3, #49	; 0x31
 8008c64:	9a06      	ldr	r2, [sp, #24]
 8008c66:	f10a 0a01 	add.w	sl, sl, #1
 8008c6a:	7013      	strb	r3, [r2, #0]
 8008c6c:	e703      	b.n	8008a76 <_dtoa_r+0x906>
 8008c6e:	4615      	mov	r5, r2
 8008c70:	e7a1      	b.n	8008bb6 <_dtoa_r+0xa46>
 8008c72:	4b17      	ldr	r3, [pc, #92]	; (8008cd0 <_dtoa_r+0xb60>)
 8008c74:	f7ff bae1 	b.w	800823a <_dtoa_r+0xca>
 8008c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f47f aabb 	bne.w	80081f6 <_dtoa_r+0x86>
 8008c80:	4b14      	ldr	r3, [pc, #80]	; (8008cd4 <_dtoa_r+0xb64>)
 8008c82:	f7ff bada 	b.w	800823a <_dtoa_r+0xca>
 8008c86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	f77f ae3f 	ble.w	800890c <_dtoa_r+0x79c>
 8008c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c90:	9308      	str	r3, [sp, #32]
 8008c92:	e653      	b.n	800893c <_dtoa_r+0x7cc>
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dc03      	bgt.n	8008ca2 <_dtoa_r+0xb32>
 8008c9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	f73f aed5 	bgt.w	8008a4c <_dtoa_r+0x8dc>
 8008ca2:	9d06      	ldr	r5, [sp, #24]
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4658      	mov	r0, fp
 8008ca8:	f7ff f9d4 	bl	8008054 <quorem>
 8008cac:	9b06      	ldr	r3, [sp, #24]
 8008cae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008cb2:	f805 8b01 	strb.w	r8, [r5], #1
 8008cb6:	9a04      	ldr	r2, [sp, #16]
 8008cb8:	1aeb      	subs	r3, r5, r3
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	ddb5      	ble.n	8008c2a <_dtoa_r+0xaba>
 8008cbe:	4659      	mov	r1, fp
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fd8e 	bl	80097e6 <__multadd>
 8008cca:	4683      	mov	fp, r0
 8008ccc:	e7ea      	b.n	8008ca4 <_dtoa_r+0xb34>
 8008cce:	bf00      	nop
 8008cd0:	0800ac93 	.word	0x0800ac93
 8008cd4:	0800b478 	.word	0x0800b478

08008cd8 <__sflush_r>:
 8008cd8:	898a      	ldrh	r2, [r1, #12]
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	4605      	mov	r5, r0
 8008ce0:	0710      	lsls	r0, r2, #28
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	d458      	bmi.n	8008d98 <__sflush_r+0xc0>
 8008ce6:	684b      	ldr	r3, [r1, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	dc05      	bgt.n	8008cf8 <__sflush_r+0x20>
 8008cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	dc02      	bgt.n	8008cf8 <__sflush_r+0x20>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	d0f9      	beq.n	8008cf2 <__sflush_r+0x1a>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d04:	682f      	ldr	r7, [r5, #0]
 8008d06:	6a21      	ldr	r1, [r4, #32]
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	d032      	beq.n	8008d72 <__sflush_r+0x9a>
 8008d0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	075a      	lsls	r2, r3, #29
 8008d12:	d505      	bpl.n	8008d20 <__sflush_r+0x48>
 8008d14:	6863      	ldr	r3, [r4, #4]
 8008d16:	1ac0      	subs	r0, r0, r3
 8008d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d1a:	b10b      	cbz	r3, 8008d20 <__sflush_r+0x48>
 8008d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d1e:	1ac0      	subs	r0, r0, r3
 8008d20:	2300      	movs	r3, #0
 8008d22:	4602      	mov	r2, r0
 8008d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d26:	6a21      	ldr	r1, [r4, #32]
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b0      	blx	r6
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	d106      	bne.n	8008d40 <__sflush_r+0x68>
 8008d32:	6829      	ldr	r1, [r5, #0]
 8008d34:	291d      	cmp	r1, #29
 8008d36:	d848      	bhi.n	8008dca <__sflush_r+0xf2>
 8008d38:	4a29      	ldr	r2, [pc, #164]	; (8008de0 <__sflush_r+0x108>)
 8008d3a:	40ca      	lsrs	r2, r1
 8008d3c:	07d6      	lsls	r6, r2, #31
 8008d3e:	d544      	bpl.n	8008dca <__sflush_r+0xf2>
 8008d40:	2200      	movs	r2, #0
 8008d42:	6062      	str	r2, [r4, #4]
 8008d44:	6922      	ldr	r2, [r4, #16]
 8008d46:	04d9      	lsls	r1, r3, #19
 8008d48:	6022      	str	r2, [r4, #0]
 8008d4a:	d504      	bpl.n	8008d56 <__sflush_r+0x7e>
 8008d4c:	1c42      	adds	r2, r0, #1
 8008d4e:	d101      	bne.n	8008d54 <__sflush_r+0x7c>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b903      	cbnz	r3, 8008d56 <__sflush_r+0x7e>
 8008d54:	6560      	str	r0, [r4, #84]	; 0x54
 8008d56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d58:	602f      	str	r7, [r5, #0]
 8008d5a:	2900      	cmp	r1, #0
 8008d5c:	d0c9      	beq.n	8008cf2 <__sflush_r+0x1a>
 8008d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d62:	4299      	cmp	r1, r3
 8008d64:	d002      	beq.n	8008d6c <__sflush_r+0x94>
 8008d66:	4628      	mov	r0, r5
 8008d68:	f7fd fa4c 	bl	8006204 <_free_r>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	6360      	str	r0, [r4, #52]	; 0x34
 8008d70:	e7c0      	b.n	8008cf4 <__sflush_r+0x1c>
 8008d72:	2301      	movs	r3, #1
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b0      	blx	r6
 8008d78:	1c41      	adds	r1, r0, #1
 8008d7a:	d1c8      	bne.n	8008d0e <__sflush_r+0x36>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0c5      	beq.n	8008d0e <__sflush_r+0x36>
 8008d82:	2b1d      	cmp	r3, #29
 8008d84:	d001      	beq.n	8008d8a <__sflush_r+0xb2>
 8008d86:	2b16      	cmp	r3, #22
 8008d88:	d101      	bne.n	8008d8e <__sflush_r+0xb6>
 8008d8a:	602f      	str	r7, [r5, #0]
 8008d8c:	e7b1      	b.n	8008cf2 <__sflush_r+0x1a>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	e7ad      	b.n	8008cf4 <__sflush_r+0x1c>
 8008d98:	690f      	ldr	r7, [r1, #16]
 8008d9a:	2f00      	cmp	r7, #0
 8008d9c:	d0a9      	beq.n	8008cf2 <__sflush_r+0x1a>
 8008d9e:	0793      	lsls	r3, r2, #30
 8008da0:	bf18      	it	ne
 8008da2:	2300      	movne	r3, #0
 8008da4:	680e      	ldr	r6, [r1, #0]
 8008da6:	bf08      	it	eq
 8008da8:	694b      	ldreq	r3, [r1, #20]
 8008daa:	eba6 0807 	sub.w	r8, r6, r7
 8008dae:	600f      	str	r7, [r1, #0]
 8008db0:	608b      	str	r3, [r1, #8]
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	dd9c      	ble.n	8008cf2 <__sflush_r+0x1a>
 8008db8:	4643      	mov	r3, r8
 8008dba:	463a      	mov	r2, r7
 8008dbc:	6a21      	ldr	r1, [r4, #32]
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dc2:	47b0      	blx	r6
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	dc06      	bgt.n	8008dd6 <__sflush_r+0xfe>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	e78e      	b.n	8008cf4 <__sflush_r+0x1c>
 8008dd6:	4407      	add	r7, r0
 8008dd8:	eba8 0800 	sub.w	r8, r8, r0
 8008ddc:	e7e9      	b.n	8008db2 <__sflush_r+0xda>
 8008dde:	bf00      	nop
 8008de0:	20400001 	.word	0x20400001

08008de4 <_fflush_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	690b      	ldr	r3, [r1, #16]
 8008de8:	4605      	mov	r5, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b1db      	cbz	r3, 8008e26 <_fflush_r+0x42>
 8008dee:	b118      	cbz	r0, 8008df8 <_fflush_r+0x14>
 8008df0:	6983      	ldr	r3, [r0, #24]
 8008df2:	b90b      	cbnz	r3, 8008df8 <_fflush_r+0x14>
 8008df4:	f000 f860 	bl	8008eb8 <__sinit>
 8008df8:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <_fflush_r+0x48>)
 8008dfa:	429c      	cmp	r4, r3
 8008dfc:	d109      	bne.n	8008e12 <_fflush_r+0x2e>
 8008dfe:	686c      	ldr	r4, [r5, #4]
 8008e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e04:	b17b      	cbz	r3, 8008e26 <_fflush_r+0x42>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e0e:	f7ff bf63 	b.w	8008cd8 <__sflush_r>
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <_fflush_r+0x4c>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d101      	bne.n	8008e1c <_fflush_r+0x38>
 8008e18:	68ac      	ldr	r4, [r5, #8]
 8008e1a:	e7f1      	b.n	8008e00 <_fflush_r+0x1c>
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <_fflush_r+0x50>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	bf08      	it	eq
 8008e22:	68ec      	ldreq	r4, [r5, #12]
 8008e24:	e7ec      	b.n	8008e00 <_fflush_r+0x1c>
 8008e26:	2000      	movs	r0, #0
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	bf00      	nop
 8008e2c:	0800b4a8 	.word	0x0800b4a8
 8008e30:	0800b4c8 	.word	0x0800b4c8
 8008e34:	0800b488 	.word	0x0800b488

08008e38 <std>:
 8008e38:	2300      	movs	r3, #0
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e42:	6083      	str	r3, [r0, #8]
 8008e44:	8181      	strh	r1, [r0, #12]
 8008e46:	6643      	str	r3, [r0, #100]	; 0x64
 8008e48:	81c2      	strh	r2, [r0, #14]
 8008e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e4e:	6183      	str	r3, [r0, #24]
 8008e50:	4619      	mov	r1, r3
 8008e52:	2208      	movs	r2, #8
 8008e54:	305c      	adds	r0, #92	; 0x5c
 8008e56:	f7fd f9bf 	bl	80061d8 <memset>
 8008e5a:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <std+0x38>)
 8008e5c:	6224      	str	r4, [r4, #32]
 8008e5e:	6263      	str	r3, [r4, #36]	; 0x24
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <std+0x3c>)
 8008e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <std+0x40>)
 8008e66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e68:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <std+0x44>)
 8008e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	bf00      	nop
 8008e70:	0800a461 	.word	0x0800a461
 8008e74:	0800a483 	.word	0x0800a483
 8008e78:	0800a4bb 	.word	0x0800a4bb
 8008e7c:	0800a4df 	.word	0x0800a4df

08008e80 <_cleanup_r>:
 8008e80:	4901      	ldr	r1, [pc, #4]	; (8008e88 <_cleanup_r+0x8>)
 8008e82:	f000 b885 	b.w	8008f90 <_fwalk_reent>
 8008e86:	bf00      	nop
 8008e88:	08008de5 	.word	0x08008de5

08008e8c <__sfmoreglue>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	2568      	movs	r5, #104	; 0x68
 8008e90:	1e4a      	subs	r2, r1, #1
 8008e92:	4355      	muls	r5, r2
 8008e94:	460e      	mov	r6, r1
 8008e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e9a:	f7fd f9ff 	bl	800629c <_malloc_r>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	b140      	cbz	r0, 8008eb4 <__sfmoreglue+0x28>
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ea8:	300c      	adds	r0, #12
 8008eaa:	60a0      	str	r0, [r4, #8]
 8008eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008eb0:	f7fd f992 	bl	80061d8 <memset>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}

08008eb8 <__sinit>:
 8008eb8:	6983      	ldr	r3, [r0, #24]
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	bb33      	cbnz	r3, 8008f0e <__sinit+0x56>
 8008ec0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008ec4:	6503      	str	r3, [r0, #80]	; 0x50
 8008ec6:	4b12      	ldr	r3, [pc, #72]	; (8008f10 <__sinit+0x58>)
 8008ec8:	4a12      	ldr	r2, [pc, #72]	; (8008f14 <__sinit+0x5c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6282      	str	r2, [r0, #40]	; 0x28
 8008ece:	4298      	cmp	r0, r3
 8008ed0:	bf04      	itt	eq
 8008ed2:	2301      	moveq	r3, #1
 8008ed4:	6183      	streq	r3, [r0, #24]
 8008ed6:	f000 f81f 	bl	8008f18 <__sfp>
 8008eda:	6060      	str	r0, [r4, #4]
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 f81b 	bl	8008f18 <__sfp>
 8008ee2:	60a0      	str	r0, [r4, #8]
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 f817 	bl	8008f18 <__sfp>
 8008eea:	2200      	movs	r2, #0
 8008eec:	60e0      	str	r0, [r4, #12]
 8008eee:	2104      	movs	r1, #4
 8008ef0:	6860      	ldr	r0, [r4, #4]
 8008ef2:	f7ff ffa1 	bl	8008e38 <std>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	2109      	movs	r1, #9
 8008efa:	68a0      	ldr	r0, [r4, #8]
 8008efc:	f7ff ff9c 	bl	8008e38 <std>
 8008f00:	2202      	movs	r2, #2
 8008f02:	2112      	movs	r1, #18
 8008f04:	68e0      	ldr	r0, [r4, #12]
 8008f06:	f7ff ff97 	bl	8008e38 <std>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	61a3      	str	r3, [r4, #24]
 8008f0e:	bd10      	pop	{r4, pc}
 8008f10:	0800b3ec 	.word	0x0800b3ec
 8008f14:	08008e81 	.word	0x08008e81

08008f18 <__sfp>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <__sfp+0x70>)
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	681e      	ldr	r6, [r3, #0]
 8008f20:	69b3      	ldr	r3, [r6, #24]
 8008f22:	b913      	cbnz	r3, 8008f2a <__sfp+0x12>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff ffc7 	bl	8008eb8 <__sinit>
 8008f2a:	3648      	adds	r6, #72	; 0x48
 8008f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	d503      	bpl.n	8008f3c <__sfp+0x24>
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	b133      	cbz	r3, 8008f46 <__sfp+0x2e>
 8008f38:	6836      	ldr	r6, [r6, #0]
 8008f3a:	e7f7      	b.n	8008f2c <__sfp+0x14>
 8008f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f40:	b16d      	cbz	r5, 8008f5e <__sfp+0x46>
 8008f42:	3468      	adds	r4, #104	; 0x68
 8008f44:	e7f4      	b.n	8008f30 <__sfp+0x18>
 8008f46:	2104      	movs	r1, #4
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ff9f 	bl	8008e8c <__sfmoreglue>
 8008f4e:	6030      	str	r0, [r6, #0]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1f1      	bne.n	8008f38 <__sfp+0x20>
 8008f54:	230c      	movs	r3, #12
 8008f56:	4604      	mov	r4, r0
 8008f58:	603b      	str	r3, [r7, #0]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <__sfp+0x74>)
 8008f60:	6665      	str	r5, [r4, #100]	; 0x64
 8008f62:	e9c4 5500 	strd	r5, r5, [r4]
 8008f66:	60a5      	str	r5, [r4, #8]
 8008f68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008f6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008f70:	2208      	movs	r2, #8
 8008f72:	4629      	mov	r1, r5
 8008f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f78:	f7fd f92e 	bl	80061d8 <memset>
 8008f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f84:	e7e9      	b.n	8008f5a <__sfp+0x42>
 8008f86:	bf00      	nop
 8008f88:	0800b3ec 	.word	0x0800b3ec
 8008f8c:	ffff0001 	.word	0xffff0001

08008f90 <_fwalk_reent>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	4680      	mov	r8, r0
 8008f96:	4689      	mov	r9, r1
 8008f98:	2600      	movs	r6, #0
 8008f9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f9e:	b914      	cbnz	r4, 8008fa6 <_fwalk_reent+0x16>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008faa:	3f01      	subs	r7, #1
 8008fac:	d501      	bpl.n	8008fb2 <_fwalk_reent+0x22>
 8008fae:	6824      	ldr	r4, [r4, #0]
 8008fb0:	e7f5      	b.n	8008f9e <_fwalk_reent+0xe>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d907      	bls.n	8008fc8 <_fwalk_reent+0x38>
 8008fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	d003      	beq.n	8008fc8 <_fwalk_reent+0x38>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	47c8      	blx	r9
 8008fc6:	4306      	orrs	r6, r0
 8008fc8:	3568      	adds	r5, #104	; 0x68
 8008fca:	e7ee      	b.n	8008faa <_fwalk_reent+0x1a>

08008fcc <rshift>:
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	6906      	ldr	r6, [r0, #16]
 8008fd0:	114b      	asrs	r3, r1, #5
 8008fd2:	429e      	cmp	r6, r3
 8008fd4:	f100 0414 	add.w	r4, r0, #20
 8008fd8:	dd31      	ble.n	800903e <rshift+0x72>
 8008fda:	f011 011f 	ands.w	r1, r1, #31
 8008fde:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008fe2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008fe6:	d108      	bne.n	8008ffa <rshift+0x2e>
 8008fe8:	4621      	mov	r1, r4
 8008fea:	42b2      	cmp	r2, r6
 8008fec:	460b      	mov	r3, r1
 8008fee:	d211      	bcs.n	8009014 <rshift+0x48>
 8008ff0:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ff4:	f841 3b04 	str.w	r3, [r1], #4
 8008ff8:	e7f7      	b.n	8008fea <rshift+0x1e>
 8008ffa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008ffe:	4623      	mov	r3, r4
 8009000:	f1c1 0c20 	rsb	ip, r1, #32
 8009004:	40cd      	lsrs	r5, r1
 8009006:	3204      	adds	r2, #4
 8009008:	42b2      	cmp	r2, r6
 800900a:	4617      	mov	r7, r2
 800900c:	d30d      	bcc.n	800902a <rshift+0x5e>
 800900e:	601d      	str	r5, [r3, #0]
 8009010:	b105      	cbz	r5, 8009014 <rshift+0x48>
 8009012:	3304      	adds	r3, #4
 8009014:	42a3      	cmp	r3, r4
 8009016:	eba3 0204 	sub.w	r2, r3, r4
 800901a:	bf08      	it	eq
 800901c:	2300      	moveq	r3, #0
 800901e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009022:	6102      	str	r2, [r0, #16]
 8009024:	bf08      	it	eq
 8009026:	6143      	streq	r3, [r0, #20]
 8009028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902a:	683f      	ldr	r7, [r7, #0]
 800902c:	fa07 f70c 	lsl.w	r7, r7, ip
 8009030:	433d      	orrs	r5, r7
 8009032:	f843 5b04 	str.w	r5, [r3], #4
 8009036:	f852 5b04 	ldr.w	r5, [r2], #4
 800903a:	40cd      	lsrs	r5, r1
 800903c:	e7e4      	b.n	8009008 <rshift+0x3c>
 800903e:	4623      	mov	r3, r4
 8009040:	e7e8      	b.n	8009014 <rshift+0x48>

08009042 <__hexdig_fun>:
 8009042:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009046:	2b09      	cmp	r3, #9
 8009048:	d802      	bhi.n	8009050 <__hexdig_fun+0xe>
 800904a:	3820      	subs	r0, #32
 800904c:	b2c0      	uxtb	r0, r0
 800904e:	4770      	bx	lr
 8009050:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009054:	2b05      	cmp	r3, #5
 8009056:	d801      	bhi.n	800905c <__hexdig_fun+0x1a>
 8009058:	3847      	subs	r0, #71	; 0x47
 800905a:	e7f7      	b.n	800904c <__hexdig_fun+0xa>
 800905c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009060:	2b05      	cmp	r3, #5
 8009062:	d801      	bhi.n	8009068 <__hexdig_fun+0x26>
 8009064:	3827      	subs	r0, #39	; 0x27
 8009066:	e7f1      	b.n	800904c <__hexdig_fun+0xa>
 8009068:	2000      	movs	r0, #0
 800906a:	4770      	bx	lr

0800906c <__gethex>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	b08b      	sub	sp, #44	; 0x2c
 8009072:	9002      	str	r0, [sp, #8]
 8009074:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009076:	468a      	mov	sl, r1
 8009078:	4690      	mov	r8, r2
 800907a:	9306      	str	r3, [sp, #24]
 800907c:	f000 fad1 	bl	8009622 <__localeconv_l>
 8009080:	6803      	ldr	r3, [r0, #0]
 8009082:	f04f 0b00 	mov.w	fp, #0
 8009086:	4618      	mov	r0, r3
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	f7f7 f8cd 	bl	8000228 <strlen>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	9001      	str	r0, [sp, #4]
 8009092:	4403      	add	r3, r0
 8009094:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	f8da 3000 	ldr.w	r3, [sl]
 800909e:	3302      	adds	r3, #2
 80090a0:	461f      	mov	r7, r3
 80090a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80090a6:	2830      	cmp	r0, #48	; 0x30
 80090a8:	d06c      	beq.n	8009184 <__gethex+0x118>
 80090aa:	f7ff ffca 	bl	8009042 <__hexdig_fun>
 80090ae:	4604      	mov	r4, r0
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d16a      	bne.n	800918a <__gethex+0x11e>
 80090b4:	9a01      	ldr	r2, [sp, #4]
 80090b6:	9903      	ldr	r1, [sp, #12]
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7fe f838 	bl	800712e <strncmp>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d166      	bne.n	8009190 <__gethex+0x124>
 80090c2:	9b01      	ldr	r3, [sp, #4]
 80090c4:	5cf8      	ldrb	r0, [r7, r3]
 80090c6:	18fe      	adds	r6, r7, r3
 80090c8:	f7ff ffbb 	bl	8009042 <__hexdig_fun>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d062      	beq.n	8009196 <__gethex+0x12a>
 80090d0:	4633      	mov	r3, r6
 80090d2:	7818      	ldrb	r0, [r3, #0]
 80090d4:	461f      	mov	r7, r3
 80090d6:	2830      	cmp	r0, #48	; 0x30
 80090d8:	f103 0301 	add.w	r3, r3, #1
 80090dc:	d0f9      	beq.n	80090d2 <__gethex+0x66>
 80090de:	f7ff ffb0 	bl	8009042 <__hexdig_fun>
 80090e2:	fab0 f580 	clz	r5, r0
 80090e6:	4634      	mov	r4, r6
 80090e8:	f04f 0b01 	mov.w	fp, #1
 80090ec:	096d      	lsrs	r5, r5, #5
 80090ee:	463a      	mov	r2, r7
 80090f0:	4616      	mov	r6, r2
 80090f2:	7830      	ldrb	r0, [r6, #0]
 80090f4:	3201      	adds	r2, #1
 80090f6:	f7ff ffa4 	bl	8009042 <__hexdig_fun>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d1f8      	bne.n	80090f0 <__gethex+0x84>
 80090fe:	9a01      	ldr	r2, [sp, #4]
 8009100:	9903      	ldr	r1, [sp, #12]
 8009102:	4630      	mov	r0, r6
 8009104:	f7fe f813 	bl	800712e <strncmp>
 8009108:	b950      	cbnz	r0, 8009120 <__gethex+0xb4>
 800910a:	b954      	cbnz	r4, 8009122 <__gethex+0xb6>
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	18f4      	adds	r4, r6, r3
 8009110:	4622      	mov	r2, r4
 8009112:	4616      	mov	r6, r2
 8009114:	7830      	ldrb	r0, [r6, #0]
 8009116:	3201      	adds	r2, #1
 8009118:	f7ff ff93 	bl	8009042 <__hexdig_fun>
 800911c:	2800      	cmp	r0, #0
 800911e:	d1f8      	bne.n	8009112 <__gethex+0xa6>
 8009120:	b10c      	cbz	r4, 8009126 <__gethex+0xba>
 8009122:	1ba4      	subs	r4, r4, r6
 8009124:	00a4      	lsls	r4, r4, #2
 8009126:	7833      	ldrb	r3, [r6, #0]
 8009128:	2b50      	cmp	r3, #80	; 0x50
 800912a:	d001      	beq.n	8009130 <__gethex+0xc4>
 800912c:	2b70      	cmp	r3, #112	; 0x70
 800912e:	d140      	bne.n	80091b2 <__gethex+0x146>
 8009130:	7873      	ldrb	r3, [r6, #1]
 8009132:	2b2b      	cmp	r3, #43	; 0x2b
 8009134:	d031      	beq.n	800919a <__gethex+0x12e>
 8009136:	2b2d      	cmp	r3, #45	; 0x2d
 8009138:	d033      	beq.n	80091a2 <__gethex+0x136>
 800913a:	f04f 0900 	mov.w	r9, #0
 800913e:	1c71      	adds	r1, r6, #1
 8009140:	7808      	ldrb	r0, [r1, #0]
 8009142:	f7ff ff7e 	bl	8009042 <__hexdig_fun>
 8009146:	1e43      	subs	r3, r0, #1
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b18      	cmp	r3, #24
 800914c:	d831      	bhi.n	80091b2 <__gethex+0x146>
 800914e:	f1a0 0210 	sub.w	r2, r0, #16
 8009152:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009156:	f7ff ff74 	bl	8009042 <__hexdig_fun>
 800915a:	1e43      	subs	r3, r0, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b18      	cmp	r3, #24
 8009160:	d922      	bls.n	80091a8 <__gethex+0x13c>
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	d000      	beq.n	800916a <__gethex+0xfe>
 8009168:	4252      	negs	r2, r2
 800916a:	4414      	add	r4, r2
 800916c:	f8ca 1000 	str.w	r1, [sl]
 8009170:	b30d      	cbz	r5, 80091b6 <__gethex+0x14a>
 8009172:	f1bb 0f00 	cmp.w	fp, #0
 8009176:	bf0c      	ite	eq
 8009178:	2706      	moveq	r7, #6
 800917a:	2700      	movne	r7, #0
 800917c:	4638      	mov	r0, r7
 800917e:	b00b      	add	sp, #44	; 0x2c
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	f10b 0b01 	add.w	fp, fp, #1
 8009188:	e78a      	b.n	80090a0 <__gethex+0x34>
 800918a:	2500      	movs	r5, #0
 800918c:	462c      	mov	r4, r5
 800918e:	e7ae      	b.n	80090ee <__gethex+0x82>
 8009190:	463e      	mov	r6, r7
 8009192:	2501      	movs	r5, #1
 8009194:	e7c7      	b.n	8009126 <__gethex+0xba>
 8009196:	4604      	mov	r4, r0
 8009198:	e7fb      	b.n	8009192 <__gethex+0x126>
 800919a:	f04f 0900 	mov.w	r9, #0
 800919e:	1cb1      	adds	r1, r6, #2
 80091a0:	e7ce      	b.n	8009140 <__gethex+0xd4>
 80091a2:	f04f 0901 	mov.w	r9, #1
 80091a6:	e7fa      	b.n	800919e <__gethex+0x132>
 80091a8:	230a      	movs	r3, #10
 80091aa:	fb03 0202 	mla	r2, r3, r2, r0
 80091ae:	3a10      	subs	r2, #16
 80091b0:	e7cf      	b.n	8009152 <__gethex+0xe6>
 80091b2:	4631      	mov	r1, r6
 80091b4:	e7da      	b.n	800916c <__gethex+0x100>
 80091b6:	4629      	mov	r1, r5
 80091b8:	1bf3      	subs	r3, r6, r7
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b07      	cmp	r3, #7
 80091be:	dc49      	bgt.n	8009254 <__gethex+0x1e8>
 80091c0:	9802      	ldr	r0, [sp, #8]
 80091c2:	f000 fac5 	bl	8009750 <_Balloc>
 80091c6:	f04f 0b00 	mov.w	fp, #0
 80091ca:	4605      	mov	r5, r0
 80091cc:	46da      	mov	sl, fp
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	f100 0914 	add.w	r9, r0, #20
 80091d4:	f1c3 0301 	rsb	r3, r3, #1
 80091d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80091dc:	9308      	str	r3, [sp, #32]
 80091de:	42b7      	cmp	r7, r6
 80091e0:	d33b      	bcc.n	800925a <__gethex+0x1ee>
 80091e2:	9804      	ldr	r0, [sp, #16]
 80091e4:	f840 ab04 	str.w	sl, [r0], #4
 80091e8:	eba0 0009 	sub.w	r0, r0, r9
 80091ec:	1080      	asrs	r0, r0, #2
 80091ee:	6128      	str	r0, [r5, #16]
 80091f0:	0147      	lsls	r7, r0, #5
 80091f2:	4650      	mov	r0, sl
 80091f4:	f000 fb70 	bl	80098d8 <__hi0bits>
 80091f8:	f8d8 6000 	ldr.w	r6, [r8]
 80091fc:	1a3f      	subs	r7, r7, r0
 80091fe:	42b7      	cmp	r7, r6
 8009200:	dd64      	ble.n	80092cc <__gethex+0x260>
 8009202:	1bbf      	subs	r7, r7, r6
 8009204:	4639      	mov	r1, r7
 8009206:	4628      	mov	r0, r5
 8009208:	f000 fe79 	bl	8009efe <__any_on>
 800920c:	4682      	mov	sl, r0
 800920e:	b178      	cbz	r0, 8009230 <__gethex+0x1c4>
 8009210:	f04f 0a01 	mov.w	sl, #1
 8009214:	1e7b      	subs	r3, r7, #1
 8009216:	1159      	asrs	r1, r3, #5
 8009218:	f003 021f 	and.w	r2, r3, #31
 800921c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009220:	fa0a f202 	lsl.w	r2, sl, r2
 8009224:	420a      	tst	r2, r1
 8009226:	d003      	beq.n	8009230 <__gethex+0x1c4>
 8009228:	4553      	cmp	r3, sl
 800922a:	dc46      	bgt.n	80092ba <__gethex+0x24e>
 800922c:	f04f 0a02 	mov.w	sl, #2
 8009230:	4639      	mov	r1, r7
 8009232:	4628      	mov	r0, r5
 8009234:	f7ff feca 	bl	8008fcc <rshift>
 8009238:	443c      	add	r4, r7
 800923a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800923e:	42a3      	cmp	r3, r4
 8009240:	da52      	bge.n	80092e8 <__gethex+0x27c>
 8009242:	4629      	mov	r1, r5
 8009244:	9802      	ldr	r0, [sp, #8]
 8009246:	f000 fab7 	bl	80097b8 <_Bfree>
 800924a:	2300      	movs	r3, #0
 800924c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800924e:	27a3      	movs	r7, #163	; 0xa3
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	e793      	b.n	800917c <__gethex+0x110>
 8009254:	3101      	adds	r1, #1
 8009256:	105b      	asrs	r3, r3, #1
 8009258:	e7b0      	b.n	80091bc <__gethex+0x150>
 800925a:	1e73      	subs	r3, r6, #1
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	9a07      	ldr	r2, [sp, #28]
 8009260:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009264:	4293      	cmp	r3, r2
 8009266:	d018      	beq.n	800929a <__gethex+0x22e>
 8009268:	f1bb 0f20 	cmp.w	fp, #32
 800926c:	d107      	bne.n	800927e <__gethex+0x212>
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	f8c3 a000 	str.w	sl, [r3]
 8009274:	f04f 0a00 	mov.w	sl, #0
 8009278:	46d3      	mov	fp, sl
 800927a:	3304      	adds	r3, #4
 800927c:	9304      	str	r3, [sp, #16]
 800927e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009282:	f7ff fede 	bl	8009042 <__hexdig_fun>
 8009286:	f000 000f 	and.w	r0, r0, #15
 800928a:	fa00 f00b 	lsl.w	r0, r0, fp
 800928e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009292:	f10b 0b04 	add.w	fp, fp, #4
 8009296:	9b05      	ldr	r3, [sp, #20]
 8009298:	e00d      	b.n	80092b6 <__gethex+0x24a>
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	9a08      	ldr	r2, [sp, #32]
 800929e:	4413      	add	r3, r2
 80092a0:	42bb      	cmp	r3, r7
 80092a2:	d3e1      	bcc.n	8009268 <__gethex+0x1fc>
 80092a4:	4618      	mov	r0, r3
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	9903      	ldr	r1, [sp, #12]
 80092aa:	9309      	str	r3, [sp, #36]	; 0x24
 80092ac:	f7fd ff3f 	bl	800712e <strncmp>
 80092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d1d8      	bne.n	8009268 <__gethex+0x1fc>
 80092b6:	461e      	mov	r6, r3
 80092b8:	e791      	b.n	80091de <__gethex+0x172>
 80092ba:	1eb9      	subs	r1, r7, #2
 80092bc:	4628      	mov	r0, r5
 80092be:	f000 fe1e 	bl	8009efe <__any_on>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d0b2      	beq.n	800922c <__gethex+0x1c0>
 80092c6:	f04f 0a03 	mov.w	sl, #3
 80092ca:	e7b1      	b.n	8009230 <__gethex+0x1c4>
 80092cc:	da09      	bge.n	80092e2 <__gethex+0x276>
 80092ce:	1bf7      	subs	r7, r6, r7
 80092d0:	4629      	mov	r1, r5
 80092d2:	463a      	mov	r2, r7
 80092d4:	9802      	ldr	r0, [sp, #8]
 80092d6:	f000 fc39 	bl	8009b4c <__lshift>
 80092da:	4605      	mov	r5, r0
 80092dc:	1be4      	subs	r4, r4, r7
 80092de:	f100 0914 	add.w	r9, r0, #20
 80092e2:	f04f 0a00 	mov.w	sl, #0
 80092e6:	e7a8      	b.n	800923a <__gethex+0x1ce>
 80092e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092ec:	42a0      	cmp	r0, r4
 80092ee:	dd6b      	ble.n	80093c8 <__gethex+0x35c>
 80092f0:	1b04      	subs	r4, r0, r4
 80092f2:	42a6      	cmp	r6, r4
 80092f4:	dc2e      	bgt.n	8009354 <__gethex+0x2e8>
 80092f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d022      	beq.n	8009344 <__gethex+0x2d8>
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d024      	beq.n	800934c <__gethex+0x2e0>
 8009302:	2b01      	cmp	r3, #1
 8009304:	d115      	bne.n	8009332 <__gethex+0x2c6>
 8009306:	42a6      	cmp	r6, r4
 8009308:	d113      	bne.n	8009332 <__gethex+0x2c6>
 800930a:	2e01      	cmp	r6, #1
 800930c:	dc0b      	bgt.n	8009326 <__gethex+0x2ba>
 800930e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009312:	9a06      	ldr	r2, [sp, #24]
 8009314:	2762      	movs	r7, #98	; 0x62
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	2301      	movs	r3, #1
 800931a:	612b      	str	r3, [r5, #16]
 800931c:	f8c9 3000 	str.w	r3, [r9]
 8009320:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009322:	601d      	str	r5, [r3, #0]
 8009324:	e72a      	b.n	800917c <__gethex+0x110>
 8009326:	1e71      	subs	r1, r6, #1
 8009328:	4628      	mov	r0, r5
 800932a:	f000 fde8 	bl	8009efe <__any_on>
 800932e:	2800      	cmp	r0, #0
 8009330:	d1ed      	bne.n	800930e <__gethex+0x2a2>
 8009332:	4629      	mov	r1, r5
 8009334:	9802      	ldr	r0, [sp, #8]
 8009336:	f000 fa3f 	bl	80097b8 <_Bfree>
 800933a:	2300      	movs	r3, #0
 800933c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800933e:	2750      	movs	r7, #80	; 0x50
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	e71b      	b.n	800917c <__gethex+0x110>
 8009344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0e1      	beq.n	800930e <__gethex+0x2a2>
 800934a:	e7f2      	b.n	8009332 <__gethex+0x2c6>
 800934c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1dd      	bne.n	800930e <__gethex+0x2a2>
 8009352:	e7ee      	b.n	8009332 <__gethex+0x2c6>
 8009354:	1e67      	subs	r7, r4, #1
 8009356:	f1ba 0f00 	cmp.w	sl, #0
 800935a:	d132      	bne.n	80093c2 <__gethex+0x356>
 800935c:	b127      	cbz	r7, 8009368 <__gethex+0x2fc>
 800935e:	4639      	mov	r1, r7
 8009360:	4628      	mov	r0, r5
 8009362:	f000 fdcc 	bl	8009efe <__any_on>
 8009366:	4682      	mov	sl, r0
 8009368:	2301      	movs	r3, #1
 800936a:	117a      	asrs	r2, r7, #5
 800936c:	f007 071f 	and.w	r7, r7, #31
 8009370:	fa03 f707 	lsl.w	r7, r3, r7
 8009374:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009378:	4621      	mov	r1, r4
 800937a:	421f      	tst	r7, r3
 800937c:	f04f 0702 	mov.w	r7, #2
 8009380:	4628      	mov	r0, r5
 8009382:	bf18      	it	ne
 8009384:	f04a 0a02 	orrne.w	sl, sl, #2
 8009388:	1b36      	subs	r6, r6, r4
 800938a:	f7ff fe1f 	bl	8008fcc <rshift>
 800938e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009392:	f1ba 0f00 	cmp.w	sl, #0
 8009396:	d048      	beq.n	800942a <__gethex+0x3be>
 8009398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d015      	beq.n	80093cc <__gethex+0x360>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d017      	beq.n	80093d4 <__gethex+0x368>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d109      	bne.n	80093bc <__gethex+0x350>
 80093a8:	f01a 0f02 	tst.w	sl, #2
 80093ac:	d006      	beq.n	80093bc <__gethex+0x350>
 80093ae:	f8d9 3000 	ldr.w	r3, [r9]
 80093b2:	ea4a 0a03 	orr.w	sl, sl, r3
 80093b6:	f01a 0f01 	tst.w	sl, #1
 80093ba:	d10e      	bne.n	80093da <__gethex+0x36e>
 80093bc:	f047 0710 	orr.w	r7, r7, #16
 80093c0:	e033      	b.n	800942a <__gethex+0x3be>
 80093c2:	f04f 0a01 	mov.w	sl, #1
 80093c6:	e7cf      	b.n	8009368 <__gethex+0x2fc>
 80093c8:	2701      	movs	r7, #1
 80093ca:	e7e2      	b.n	8009392 <__gethex+0x326>
 80093cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ce:	f1c3 0301 	rsb	r3, r3, #1
 80093d2:	9315      	str	r3, [sp, #84]	; 0x54
 80093d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f0      	beq.n	80093bc <__gethex+0x350>
 80093da:	f04f 0c00 	mov.w	ip, #0
 80093de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80093e2:	f105 0314 	add.w	r3, r5, #20
 80093e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80093ea:	eb03 010a 	add.w	r1, r3, sl
 80093ee:	4618      	mov	r0, r3
 80093f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093f8:	d01c      	beq.n	8009434 <__gethex+0x3c8>
 80093fa:	3201      	adds	r2, #1
 80093fc:	6002      	str	r2, [r0, #0]
 80093fe:	2f02      	cmp	r7, #2
 8009400:	f105 0314 	add.w	r3, r5, #20
 8009404:	d138      	bne.n	8009478 <__gethex+0x40c>
 8009406:	f8d8 2000 	ldr.w	r2, [r8]
 800940a:	3a01      	subs	r2, #1
 800940c:	42b2      	cmp	r2, r6
 800940e:	d10a      	bne.n	8009426 <__gethex+0x3ba>
 8009410:	2201      	movs	r2, #1
 8009412:	1171      	asrs	r1, r6, #5
 8009414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009418:	f006 061f 	and.w	r6, r6, #31
 800941c:	fa02 f606 	lsl.w	r6, r2, r6
 8009420:	421e      	tst	r6, r3
 8009422:	bf18      	it	ne
 8009424:	4617      	movne	r7, r2
 8009426:	f047 0720 	orr.w	r7, r7, #32
 800942a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800942c:	601d      	str	r5, [r3, #0]
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	601c      	str	r4, [r3, #0]
 8009432:	e6a3      	b.n	800917c <__gethex+0x110>
 8009434:	4299      	cmp	r1, r3
 8009436:	f843 cc04 	str.w	ip, [r3, #-4]
 800943a:	d8d8      	bhi.n	80093ee <__gethex+0x382>
 800943c:	68ab      	ldr	r3, [r5, #8]
 800943e:	4599      	cmp	r9, r3
 8009440:	db12      	blt.n	8009468 <__gethex+0x3fc>
 8009442:	6869      	ldr	r1, [r5, #4]
 8009444:	9802      	ldr	r0, [sp, #8]
 8009446:	3101      	adds	r1, #1
 8009448:	f000 f982 	bl	8009750 <_Balloc>
 800944c:	4683      	mov	fp, r0
 800944e:	692a      	ldr	r2, [r5, #16]
 8009450:	f105 010c 	add.w	r1, r5, #12
 8009454:	3202      	adds	r2, #2
 8009456:	0092      	lsls	r2, r2, #2
 8009458:	300c      	adds	r0, #12
 800945a:	f7fc feb2 	bl	80061c2 <memcpy>
 800945e:	4629      	mov	r1, r5
 8009460:	9802      	ldr	r0, [sp, #8]
 8009462:	f000 f9a9 	bl	80097b8 <_Bfree>
 8009466:	465d      	mov	r5, fp
 8009468:	692b      	ldr	r3, [r5, #16]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	612a      	str	r2, [r5, #16]
 800946e:	2201      	movs	r2, #1
 8009470:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009474:	615a      	str	r2, [r3, #20]
 8009476:	e7c2      	b.n	80093fe <__gethex+0x392>
 8009478:	692a      	ldr	r2, [r5, #16]
 800947a:	454a      	cmp	r2, r9
 800947c:	dd0b      	ble.n	8009496 <__gethex+0x42a>
 800947e:	2101      	movs	r1, #1
 8009480:	4628      	mov	r0, r5
 8009482:	f7ff fda3 	bl	8008fcc <rshift>
 8009486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800948a:	3401      	adds	r4, #1
 800948c:	42a3      	cmp	r3, r4
 800948e:	f6ff aed8 	blt.w	8009242 <__gethex+0x1d6>
 8009492:	2701      	movs	r7, #1
 8009494:	e7c7      	b.n	8009426 <__gethex+0x3ba>
 8009496:	f016 061f 	ands.w	r6, r6, #31
 800949a:	d0fa      	beq.n	8009492 <__gethex+0x426>
 800949c:	449a      	add	sl, r3
 800949e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80094a2:	f000 fa19 	bl	80098d8 <__hi0bits>
 80094a6:	f1c6 0620 	rsb	r6, r6, #32
 80094aa:	42b0      	cmp	r0, r6
 80094ac:	dbe7      	blt.n	800947e <__gethex+0x412>
 80094ae:	e7f0      	b.n	8009492 <__gethex+0x426>

080094b0 <L_shift>:
 80094b0:	f1c2 0208 	rsb	r2, r2, #8
 80094b4:	0092      	lsls	r2, r2, #2
 80094b6:	b570      	push	{r4, r5, r6, lr}
 80094b8:	f1c2 0620 	rsb	r6, r2, #32
 80094bc:	6843      	ldr	r3, [r0, #4]
 80094be:	6804      	ldr	r4, [r0, #0]
 80094c0:	fa03 f506 	lsl.w	r5, r3, r6
 80094c4:	432c      	orrs	r4, r5
 80094c6:	40d3      	lsrs	r3, r2
 80094c8:	6004      	str	r4, [r0, #0]
 80094ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80094ce:	4288      	cmp	r0, r1
 80094d0:	d3f4      	bcc.n	80094bc <L_shift+0xc>
 80094d2:	bd70      	pop	{r4, r5, r6, pc}

080094d4 <__match>:
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	6803      	ldr	r3, [r0, #0]
 80094d8:	3301      	adds	r3, #1
 80094da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094de:	b914      	cbnz	r4, 80094e6 <__match+0x12>
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	2001      	movs	r0, #1
 80094e4:	bd30      	pop	{r4, r5, pc}
 80094e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094ee:	2d19      	cmp	r5, #25
 80094f0:	bf98      	it	ls
 80094f2:	3220      	addls	r2, #32
 80094f4:	42a2      	cmp	r2, r4
 80094f6:	d0f0      	beq.n	80094da <__match+0x6>
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7f3      	b.n	80094e4 <__match+0x10>

080094fc <__hexnan>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	2500      	movs	r5, #0
 8009502:	680b      	ldr	r3, [r1, #0]
 8009504:	4682      	mov	sl, r0
 8009506:	115f      	asrs	r7, r3, #5
 8009508:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800950c:	f013 031f 	ands.w	r3, r3, #31
 8009510:	bf18      	it	ne
 8009512:	3704      	addne	r7, #4
 8009514:	1f3e      	subs	r6, r7, #4
 8009516:	4690      	mov	r8, r2
 8009518:	46b1      	mov	r9, r6
 800951a:	4634      	mov	r4, r6
 800951c:	46ab      	mov	fp, r5
 800951e:	b087      	sub	sp, #28
 8009520:	6801      	ldr	r1, [r0, #0]
 8009522:	9301      	str	r3, [sp, #4]
 8009524:	f847 5c04 	str.w	r5, [r7, #-4]
 8009528:	9502      	str	r5, [sp, #8]
 800952a:	784a      	ldrb	r2, [r1, #1]
 800952c:	1c4b      	adds	r3, r1, #1
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	b342      	cbz	r2, 8009584 <__hexnan+0x88>
 8009532:	4610      	mov	r0, r2
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	9204      	str	r2, [sp, #16]
 8009538:	f7ff fd83 	bl	8009042 <__hexdig_fun>
 800953c:	2800      	cmp	r0, #0
 800953e:	d143      	bne.n	80095c8 <__hexnan+0xcc>
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	9905      	ldr	r1, [sp, #20]
 8009544:	2a20      	cmp	r2, #32
 8009546:	d818      	bhi.n	800957a <__hexnan+0x7e>
 8009548:	9b02      	ldr	r3, [sp, #8]
 800954a:	459b      	cmp	fp, r3
 800954c:	dd13      	ble.n	8009576 <__hexnan+0x7a>
 800954e:	454c      	cmp	r4, r9
 8009550:	d206      	bcs.n	8009560 <__hexnan+0x64>
 8009552:	2d07      	cmp	r5, #7
 8009554:	dc04      	bgt.n	8009560 <__hexnan+0x64>
 8009556:	462a      	mov	r2, r5
 8009558:	4649      	mov	r1, r9
 800955a:	4620      	mov	r0, r4
 800955c:	f7ff ffa8 	bl	80094b0 <L_shift>
 8009560:	4544      	cmp	r4, r8
 8009562:	d944      	bls.n	80095ee <__hexnan+0xf2>
 8009564:	2300      	movs	r3, #0
 8009566:	f1a4 0904 	sub.w	r9, r4, #4
 800956a:	f844 3c04 	str.w	r3, [r4, #-4]
 800956e:	461d      	mov	r5, r3
 8009570:	464c      	mov	r4, r9
 8009572:	f8cd b008 	str.w	fp, [sp, #8]
 8009576:	9903      	ldr	r1, [sp, #12]
 8009578:	e7d7      	b.n	800952a <__hexnan+0x2e>
 800957a:	2a29      	cmp	r2, #41	; 0x29
 800957c:	d14a      	bne.n	8009614 <__hexnan+0x118>
 800957e:	3102      	adds	r1, #2
 8009580:	f8ca 1000 	str.w	r1, [sl]
 8009584:	f1bb 0f00 	cmp.w	fp, #0
 8009588:	d044      	beq.n	8009614 <__hexnan+0x118>
 800958a:	454c      	cmp	r4, r9
 800958c:	d206      	bcs.n	800959c <__hexnan+0xa0>
 800958e:	2d07      	cmp	r5, #7
 8009590:	dc04      	bgt.n	800959c <__hexnan+0xa0>
 8009592:	462a      	mov	r2, r5
 8009594:	4649      	mov	r1, r9
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff ff8a 	bl	80094b0 <L_shift>
 800959c:	4544      	cmp	r4, r8
 800959e:	d928      	bls.n	80095f2 <__hexnan+0xf6>
 80095a0:	4643      	mov	r3, r8
 80095a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80095a6:	42a6      	cmp	r6, r4
 80095a8:	f843 2b04 	str.w	r2, [r3], #4
 80095ac:	d2f9      	bcs.n	80095a2 <__hexnan+0xa6>
 80095ae:	2200      	movs	r2, #0
 80095b0:	f843 2b04 	str.w	r2, [r3], #4
 80095b4:	429e      	cmp	r6, r3
 80095b6:	d2fb      	bcs.n	80095b0 <__hexnan+0xb4>
 80095b8:	6833      	ldr	r3, [r6, #0]
 80095ba:	b91b      	cbnz	r3, 80095c4 <__hexnan+0xc8>
 80095bc:	4546      	cmp	r6, r8
 80095be:	d127      	bne.n	8009610 <__hexnan+0x114>
 80095c0:	2301      	movs	r3, #1
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	2005      	movs	r0, #5
 80095c6:	e026      	b.n	8009616 <__hexnan+0x11a>
 80095c8:	3501      	adds	r5, #1
 80095ca:	2d08      	cmp	r5, #8
 80095cc:	f10b 0b01 	add.w	fp, fp, #1
 80095d0:	dd06      	ble.n	80095e0 <__hexnan+0xe4>
 80095d2:	4544      	cmp	r4, r8
 80095d4:	d9cf      	bls.n	8009576 <__hexnan+0x7a>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2501      	movs	r5, #1
 80095da:	f844 3c04 	str.w	r3, [r4, #-4]
 80095de:	3c04      	subs	r4, #4
 80095e0:	6822      	ldr	r2, [r4, #0]
 80095e2:	f000 000f 	and.w	r0, r0, #15
 80095e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80095ea:	6020      	str	r0, [r4, #0]
 80095ec:	e7c3      	b.n	8009576 <__hexnan+0x7a>
 80095ee:	2508      	movs	r5, #8
 80095f0:	e7c1      	b.n	8009576 <__hexnan+0x7a>
 80095f2:	9b01      	ldr	r3, [sp, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0df      	beq.n	80095b8 <__hexnan+0xbc>
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295
 80095fc:	f1c3 0320 	rsb	r3, r3, #32
 8009600:	fa22 f303 	lsr.w	r3, r2, r3
 8009604:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009608:	401a      	ands	r2, r3
 800960a:	f847 2c04 	str.w	r2, [r7, #-4]
 800960e:	e7d3      	b.n	80095b8 <__hexnan+0xbc>
 8009610:	3e04      	subs	r6, #4
 8009612:	e7d1      	b.n	80095b8 <__hexnan+0xbc>
 8009614:	2004      	movs	r0, #4
 8009616:	b007      	add	sp, #28
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800961c <__locale_ctype_ptr_l>:
 800961c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009620:	4770      	bx	lr

08009622 <__localeconv_l>:
 8009622:	30f0      	adds	r0, #240	; 0xf0
 8009624:	4770      	bx	lr
	...

08009628 <_localeconv_r>:
 8009628:	4b04      	ldr	r3, [pc, #16]	; (800963c <_localeconv_r+0x14>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6a18      	ldr	r0, [r3, #32]
 800962e:	4b04      	ldr	r3, [pc, #16]	; (8009640 <_localeconv_r+0x18>)
 8009630:	2800      	cmp	r0, #0
 8009632:	bf08      	it	eq
 8009634:	4618      	moveq	r0, r3
 8009636:	30f0      	adds	r0, #240	; 0xf0
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000010 	.word	0x20000010
 8009640:	20000074 	.word	0x20000074

08009644 <__swhatbuf_r>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	460e      	mov	r6, r1
 8009648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800964c:	b096      	sub	sp, #88	; 0x58
 800964e:	2900      	cmp	r1, #0
 8009650:	4614      	mov	r4, r2
 8009652:	461d      	mov	r5, r3
 8009654:	da07      	bge.n	8009666 <__swhatbuf_r+0x22>
 8009656:	2300      	movs	r3, #0
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	89b3      	ldrh	r3, [r6, #12]
 800965c:	061a      	lsls	r2, r3, #24
 800965e:	d410      	bmi.n	8009682 <__swhatbuf_r+0x3e>
 8009660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009664:	e00e      	b.n	8009684 <__swhatbuf_r+0x40>
 8009666:	466a      	mov	r2, sp
 8009668:	f000 ff6c 	bl	800a544 <_fstat_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	dbf2      	blt.n	8009656 <__swhatbuf_r+0x12>
 8009670:	9a01      	ldr	r2, [sp, #4]
 8009672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800967a:	425a      	negs	r2, r3
 800967c:	415a      	adcs	r2, r3
 800967e:	602a      	str	r2, [r5, #0]
 8009680:	e7ee      	b.n	8009660 <__swhatbuf_r+0x1c>
 8009682:	2340      	movs	r3, #64	; 0x40
 8009684:	2000      	movs	r0, #0
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	b016      	add	sp, #88	; 0x58
 800968a:	bd70      	pop	{r4, r5, r6, pc}

0800968c <__smakebuf_r>:
 800968c:	898b      	ldrh	r3, [r1, #12]
 800968e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009690:	079d      	lsls	r5, r3, #30
 8009692:	4606      	mov	r6, r0
 8009694:	460c      	mov	r4, r1
 8009696:	d507      	bpl.n	80096a8 <__smakebuf_r+0x1c>
 8009698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	2301      	movs	r3, #1
 80096a2:	6163      	str	r3, [r4, #20]
 80096a4:	b002      	add	sp, #8
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	ab01      	add	r3, sp, #4
 80096aa:	466a      	mov	r2, sp
 80096ac:	f7ff ffca 	bl	8009644 <__swhatbuf_r>
 80096b0:	9900      	ldr	r1, [sp, #0]
 80096b2:	4605      	mov	r5, r0
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7fc fdf1 	bl	800629c <_malloc_r>
 80096ba:	b948      	cbnz	r0, 80096d0 <__smakebuf_r+0x44>
 80096bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c0:	059a      	lsls	r2, r3, #22
 80096c2:	d4ef      	bmi.n	80096a4 <__smakebuf_r+0x18>
 80096c4:	f023 0303 	bic.w	r3, r3, #3
 80096c8:	f043 0302 	orr.w	r3, r3, #2
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	e7e3      	b.n	8009698 <__smakebuf_r+0xc>
 80096d0:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <__smakebuf_r+0x7c>)
 80096d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	6020      	str	r0, [r4, #0]
 80096d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	6120      	str	r0, [r4, #16]
 80096e2:	6163      	str	r3, [r4, #20]
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	b15b      	cbz	r3, 8009700 <__smakebuf_r+0x74>
 80096e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ec:	4630      	mov	r0, r6
 80096ee:	f000 ff3b 	bl	800a568 <_isatty_r>
 80096f2:	b128      	cbz	r0, 8009700 <__smakebuf_r+0x74>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	431d      	orrs	r5, r3
 8009704:	81a5      	strh	r5, [r4, #12]
 8009706:	e7cd      	b.n	80096a4 <__smakebuf_r+0x18>
 8009708:	08008e81 	.word	0x08008e81

0800970c <__ascii_mbtowc>:
 800970c:	b082      	sub	sp, #8
 800970e:	b901      	cbnz	r1, 8009712 <__ascii_mbtowc+0x6>
 8009710:	a901      	add	r1, sp, #4
 8009712:	b142      	cbz	r2, 8009726 <__ascii_mbtowc+0x1a>
 8009714:	b14b      	cbz	r3, 800972a <__ascii_mbtowc+0x1e>
 8009716:	7813      	ldrb	r3, [r2, #0]
 8009718:	600b      	str	r3, [r1, #0]
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	1c10      	adds	r0, r2, #0
 800971e:	bf18      	it	ne
 8009720:	2001      	movne	r0, #1
 8009722:	b002      	add	sp, #8
 8009724:	4770      	bx	lr
 8009726:	4610      	mov	r0, r2
 8009728:	e7fb      	b.n	8009722 <__ascii_mbtowc+0x16>
 800972a:	f06f 0001 	mvn.w	r0, #1
 800972e:	e7f8      	b.n	8009722 <__ascii_mbtowc+0x16>

08009730 <memchr>:
 8009730:	b510      	push	{r4, lr}
 8009732:	b2c9      	uxtb	r1, r1
 8009734:	4402      	add	r2, r0
 8009736:	4290      	cmp	r0, r2
 8009738:	4603      	mov	r3, r0
 800973a:	d101      	bne.n	8009740 <memchr+0x10>
 800973c:	2300      	movs	r3, #0
 800973e:	e003      	b.n	8009748 <memchr+0x18>
 8009740:	781c      	ldrb	r4, [r3, #0]
 8009742:	3001      	adds	r0, #1
 8009744:	428c      	cmp	r4, r1
 8009746:	d1f6      	bne.n	8009736 <memchr+0x6>
 8009748:	4618      	mov	r0, r3
 800974a:	bd10      	pop	{r4, pc}

0800974c <__malloc_lock>:
 800974c:	4770      	bx	lr

0800974e <__malloc_unlock>:
 800974e:	4770      	bx	lr

08009750 <_Balloc>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009754:	4604      	mov	r4, r0
 8009756:	460e      	mov	r6, r1
 8009758:	b93d      	cbnz	r5, 800976a <_Balloc+0x1a>
 800975a:	2010      	movs	r0, #16
 800975c:	f7fc fd12 	bl	8006184 <malloc>
 8009760:	6260      	str	r0, [r4, #36]	; 0x24
 8009762:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009766:	6005      	str	r5, [r0, #0]
 8009768:	60c5      	str	r5, [r0, #12]
 800976a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800976c:	68eb      	ldr	r3, [r5, #12]
 800976e:	b183      	cbz	r3, 8009792 <_Balloc+0x42>
 8009770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009778:	b9b8      	cbnz	r0, 80097aa <_Balloc+0x5a>
 800977a:	2101      	movs	r1, #1
 800977c:	fa01 f506 	lsl.w	r5, r1, r6
 8009780:	1d6a      	adds	r2, r5, #5
 8009782:	0092      	lsls	r2, r2, #2
 8009784:	4620      	mov	r0, r4
 8009786:	f7fc fd2f 	bl	80061e8 <_calloc_r>
 800978a:	b160      	cbz	r0, 80097a6 <_Balloc+0x56>
 800978c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009790:	e00e      	b.n	80097b0 <_Balloc+0x60>
 8009792:	2221      	movs	r2, #33	; 0x21
 8009794:	2104      	movs	r1, #4
 8009796:	4620      	mov	r0, r4
 8009798:	f7fc fd26 	bl	80061e8 <_calloc_r>
 800979c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800979e:	60e8      	str	r0, [r5, #12]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e4      	bne.n	8009770 <_Balloc+0x20>
 80097a6:	2000      	movs	r0, #0
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	6802      	ldr	r2, [r0, #0]
 80097ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80097b0:	2300      	movs	r3, #0
 80097b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097b6:	e7f7      	b.n	80097a8 <_Balloc+0x58>

080097b8 <_Bfree>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097bc:	4606      	mov	r6, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	b93c      	cbnz	r4, 80097d2 <_Bfree+0x1a>
 80097c2:	2010      	movs	r0, #16
 80097c4:	f7fc fcde 	bl	8006184 <malloc>
 80097c8:	6270      	str	r0, [r6, #36]	; 0x24
 80097ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097ce:	6004      	str	r4, [r0, #0]
 80097d0:	60c4      	str	r4, [r0, #12]
 80097d2:	b13d      	cbz	r5, 80097e4 <_Bfree+0x2c>
 80097d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097d6:	686a      	ldr	r2, [r5, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097de:	6029      	str	r1, [r5, #0]
 80097e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80097e4:	bd70      	pop	{r4, r5, r6, pc}

080097e6 <__multadd>:
 80097e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	461f      	mov	r7, r3
 80097ec:	4606      	mov	r6, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	2300      	movs	r3, #0
 80097f2:	690d      	ldr	r5, [r1, #16]
 80097f4:	f101 0c14 	add.w	ip, r1, #20
 80097f8:	f8dc 0000 	ldr.w	r0, [ip]
 80097fc:	3301      	adds	r3, #1
 80097fe:	b281      	uxth	r1, r0
 8009800:	fb02 7101 	mla	r1, r2, r1, r7
 8009804:	0c00      	lsrs	r0, r0, #16
 8009806:	0c0f      	lsrs	r7, r1, #16
 8009808:	fb02 7000 	mla	r0, r2, r0, r7
 800980c:	b289      	uxth	r1, r1
 800980e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009812:	429d      	cmp	r5, r3
 8009814:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009818:	f84c 1b04 	str.w	r1, [ip], #4
 800981c:	dcec      	bgt.n	80097f8 <__multadd+0x12>
 800981e:	b1d7      	cbz	r7, 8009856 <__multadd+0x70>
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	42ab      	cmp	r3, r5
 8009824:	dc12      	bgt.n	800984c <__multadd+0x66>
 8009826:	6861      	ldr	r1, [r4, #4]
 8009828:	4630      	mov	r0, r6
 800982a:	3101      	adds	r1, #1
 800982c:	f7ff ff90 	bl	8009750 <_Balloc>
 8009830:	4680      	mov	r8, r0
 8009832:	6922      	ldr	r2, [r4, #16]
 8009834:	f104 010c 	add.w	r1, r4, #12
 8009838:	3202      	adds	r2, #2
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	300c      	adds	r0, #12
 800983e:	f7fc fcc0 	bl	80061c2 <memcpy>
 8009842:	4621      	mov	r1, r4
 8009844:	4630      	mov	r0, r6
 8009846:	f7ff ffb7 	bl	80097b8 <_Bfree>
 800984a:	4644      	mov	r4, r8
 800984c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009850:	3501      	adds	r5, #1
 8009852:	615f      	str	r7, [r3, #20]
 8009854:	6125      	str	r5, [r4, #16]
 8009856:	4620      	mov	r0, r4
 8009858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800985c <__s2b>:
 800985c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009860:	4615      	mov	r5, r2
 8009862:	2209      	movs	r2, #9
 8009864:	461f      	mov	r7, r3
 8009866:	3308      	adds	r3, #8
 8009868:	460c      	mov	r4, r1
 800986a:	fb93 f3f2 	sdiv	r3, r3, r2
 800986e:	4606      	mov	r6, r0
 8009870:	2201      	movs	r2, #1
 8009872:	2100      	movs	r1, #0
 8009874:	429a      	cmp	r2, r3
 8009876:	db20      	blt.n	80098ba <__s2b+0x5e>
 8009878:	4630      	mov	r0, r6
 800987a:	f7ff ff69 	bl	8009750 <_Balloc>
 800987e:	9b08      	ldr	r3, [sp, #32]
 8009880:	2d09      	cmp	r5, #9
 8009882:	6143      	str	r3, [r0, #20]
 8009884:	f04f 0301 	mov.w	r3, #1
 8009888:	6103      	str	r3, [r0, #16]
 800988a:	dd19      	ble.n	80098c0 <__s2b+0x64>
 800988c:	f104 0809 	add.w	r8, r4, #9
 8009890:	46c1      	mov	r9, r8
 8009892:	442c      	add	r4, r5
 8009894:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009898:	4601      	mov	r1, r0
 800989a:	3b30      	subs	r3, #48	; 0x30
 800989c:	220a      	movs	r2, #10
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ffa1 	bl	80097e6 <__multadd>
 80098a4:	45a1      	cmp	r9, r4
 80098a6:	d1f5      	bne.n	8009894 <__s2b+0x38>
 80098a8:	eb08 0405 	add.w	r4, r8, r5
 80098ac:	3c08      	subs	r4, #8
 80098ae:	1b2d      	subs	r5, r5, r4
 80098b0:	1963      	adds	r3, r4, r5
 80098b2:	42bb      	cmp	r3, r7
 80098b4:	db07      	blt.n	80098c6 <__s2b+0x6a>
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	0052      	lsls	r2, r2, #1
 80098bc:	3101      	adds	r1, #1
 80098be:	e7d9      	b.n	8009874 <__s2b+0x18>
 80098c0:	340a      	adds	r4, #10
 80098c2:	2509      	movs	r5, #9
 80098c4:	e7f3      	b.n	80098ae <__s2b+0x52>
 80098c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098ca:	4601      	mov	r1, r0
 80098cc:	3b30      	subs	r3, #48	; 0x30
 80098ce:	220a      	movs	r2, #10
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff ff88 	bl	80097e6 <__multadd>
 80098d6:	e7eb      	b.n	80098b0 <__s2b+0x54>

080098d8 <__hi0bits>:
 80098d8:	0c02      	lsrs	r2, r0, #16
 80098da:	0412      	lsls	r2, r2, #16
 80098dc:	4603      	mov	r3, r0
 80098de:	b9b2      	cbnz	r2, 800990e <__hi0bits+0x36>
 80098e0:	0403      	lsls	r3, r0, #16
 80098e2:	2010      	movs	r0, #16
 80098e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098e8:	bf04      	itt	eq
 80098ea:	021b      	lsleq	r3, r3, #8
 80098ec:	3008      	addeq	r0, #8
 80098ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098f2:	bf04      	itt	eq
 80098f4:	011b      	lsleq	r3, r3, #4
 80098f6:	3004      	addeq	r0, #4
 80098f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098fc:	bf04      	itt	eq
 80098fe:	009b      	lsleq	r3, r3, #2
 8009900:	3002      	addeq	r0, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	db06      	blt.n	8009914 <__hi0bits+0x3c>
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	d503      	bpl.n	8009912 <__hi0bits+0x3a>
 800990a:	3001      	adds	r0, #1
 800990c:	4770      	bx	lr
 800990e:	2000      	movs	r0, #0
 8009910:	e7e8      	b.n	80098e4 <__hi0bits+0xc>
 8009912:	2020      	movs	r0, #32
 8009914:	4770      	bx	lr

08009916 <__lo0bits>:
 8009916:	6803      	ldr	r3, [r0, #0]
 8009918:	4601      	mov	r1, r0
 800991a:	f013 0207 	ands.w	r2, r3, #7
 800991e:	d00b      	beq.n	8009938 <__lo0bits+0x22>
 8009920:	07da      	lsls	r2, r3, #31
 8009922:	d423      	bmi.n	800996c <__lo0bits+0x56>
 8009924:	0798      	lsls	r0, r3, #30
 8009926:	bf49      	itett	mi
 8009928:	085b      	lsrmi	r3, r3, #1
 800992a:	089b      	lsrpl	r3, r3, #2
 800992c:	2001      	movmi	r0, #1
 800992e:	600b      	strmi	r3, [r1, #0]
 8009930:	bf5c      	itt	pl
 8009932:	600b      	strpl	r3, [r1, #0]
 8009934:	2002      	movpl	r0, #2
 8009936:	4770      	bx	lr
 8009938:	b298      	uxth	r0, r3
 800993a:	b9a8      	cbnz	r0, 8009968 <__lo0bits+0x52>
 800993c:	2010      	movs	r0, #16
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009944:	bf04      	itt	eq
 8009946:	0a1b      	lsreq	r3, r3, #8
 8009948:	3008      	addeq	r0, #8
 800994a:	071a      	lsls	r2, r3, #28
 800994c:	bf04      	itt	eq
 800994e:	091b      	lsreq	r3, r3, #4
 8009950:	3004      	addeq	r0, #4
 8009952:	079a      	lsls	r2, r3, #30
 8009954:	bf04      	itt	eq
 8009956:	089b      	lsreq	r3, r3, #2
 8009958:	3002      	addeq	r0, #2
 800995a:	07da      	lsls	r2, r3, #31
 800995c:	d402      	bmi.n	8009964 <__lo0bits+0x4e>
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	d006      	beq.n	8009970 <__lo0bits+0x5a>
 8009962:	3001      	adds	r0, #1
 8009964:	600b      	str	r3, [r1, #0]
 8009966:	4770      	bx	lr
 8009968:	4610      	mov	r0, r2
 800996a:	e7e9      	b.n	8009940 <__lo0bits+0x2a>
 800996c:	2000      	movs	r0, #0
 800996e:	4770      	bx	lr
 8009970:	2020      	movs	r0, #32
 8009972:	4770      	bx	lr

08009974 <__i2b>:
 8009974:	b510      	push	{r4, lr}
 8009976:	460c      	mov	r4, r1
 8009978:	2101      	movs	r1, #1
 800997a:	f7ff fee9 	bl	8009750 <_Balloc>
 800997e:	2201      	movs	r2, #1
 8009980:	6144      	str	r4, [r0, #20]
 8009982:	6102      	str	r2, [r0, #16]
 8009984:	bd10      	pop	{r4, pc}

08009986 <__multiply>:
 8009986:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	4614      	mov	r4, r2
 800998c:	690a      	ldr	r2, [r1, #16]
 800998e:	6923      	ldr	r3, [r4, #16]
 8009990:	4688      	mov	r8, r1
 8009992:	429a      	cmp	r2, r3
 8009994:	bfbe      	ittt	lt
 8009996:	460b      	movlt	r3, r1
 8009998:	46a0      	movlt	r8, r4
 800999a:	461c      	movlt	r4, r3
 800999c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099ac:	eb07 0609 	add.w	r6, r7, r9
 80099b0:	42b3      	cmp	r3, r6
 80099b2:	bfb8      	it	lt
 80099b4:	3101      	addlt	r1, #1
 80099b6:	f7ff fecb 	bl	8009750 <_Balloc>
 80099ba:	f100 0514 	add.w	r5, r0, #20
 80099be:	462b      	mov	r3, r5
 80099c0:	2200      	movs	r2, #0
 80099c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80099c6:	4573      	cmp	r3, lr
 80099c8:	d316      	bcc.n	80099f8 <__multiply+0x72>
 80099ca:	f104 0214 	add.w	r2, r4, #20
 80099ce:	f108 0114 	add.w	r1, r8, #20
 80099d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80099d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	9201      	str	r2, [sp, #4]
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d80c      	bhi.n	80099fe <__multiply+0x78>
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	dd03      	ble.n	80099f0 <__multiply+0x6a>
 80099e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d05d      	beq.n	8009aac <__multiply+0x126>
 80099f0:	6106      	str	r6, [r0, #16]
 80099f2:	b003      	add	sp, #12
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	f843 2b04 	str.w	r2, [r3], #4
 80099fc:	e7e3      	b.n	80099c6 <__multiply+0x40>
 80099fe:	f8b2 b000 	ldrh.w	fp, [r2]
 8009a02:	f1bb 0f00 	cmp.w	fp, #0
 8009a06:	d023      	beq.n	8009a50 <__multiply+0xca>
 8009a08:	4689      	mov	r9, r1
 8009a0a:	46ac      	mov	ip, r5
 8009a0c:	f04f 0800 	mov.w	r8, #0
 8009a10:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a14:	f8dc a000 	ldr.w	sl, [ip]
 8009a18:	b2a3      	uxth	r3, r4
 8009a1a:	fa1f fa8a 	uxth.w	sl, sl
 8009a1e:	fb0b a303 	mla	r3, fp, r3, sl
 8009a22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a26:	f8dc 4000 	ldr.w	r4, [ip]
 8009a2a:	4443      	add	r3, r8
 8009a2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a30:	fb0b 840a 	mla	r4, fp, sl, r8
 8009a34:	46e2      	mov	sl, ip
 8009a36:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a40:	454f      	cmp	r7, r9
 8009a42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a46:	f84a 3b04 	str.w	r3, [sl], #4
 8009a4a:	d82b      	bhi.n	8009aa4 <__multiply+0x11e>
 8009a4c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009a50:	9b01      	ldr	r3, [sp, #4]
 8009a52:	3204      	adds	r2, #4
 8009a54:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009a58:	f1ba 0f00 	cmp.w	sl, #0
 8009a5c:	d020      	beq.n	8009aa0 <__multiply+0x11a>
 8009a5e:	4689      	mov	r9, r1
 8009a60:	46a8      	mov	r8, r5
 8009a62:	f04f 0b00 	mov.w	fp, #0
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a6c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a76:	46c4      	mov	ip, r8
 8009a78:	445c      	add	r4, fp
 8009a7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a7e:	f84c 3b04 	str.w	r3, [ip], #4
 8009a82:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a86:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a8a:	0c1b      	lsrs	r3, r3, #16
 8009a8c:	fb0a b303 	mla	r3, sl, r3, fp
 8009a90:	454f      	cmp	r7, r9
 8009a92:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a96:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a9a:	d805      	bhi.n	8009aa8 <__multiply+0x122>
 8009a9c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009aa0:	3504      	adds	r5, #4
 8009aa2:	e79b      	b.n	80099dc <__multiply+0x56>
 8009aa4:	46d4      	mov	ip, sl
 8009aa6:	e7b3      	b.n	8009a10 <__multiply+0x8a>
 8009aa8:	46e0      	mov	r8, ip
 8009aaa:	e7dd      	b.n	8009a68 <__multiply+0xe2>
 8009aac:	3e01      	subs	r6, #1
 8009aae:	e799      	b.n	80099e4 <__multiply+0x5e>

08009ab0 <__pow5mult>:
 8009ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab4:	4615      	mov	r5, r2
 8009ab6:	f012 0203 	ands.w	r2, r2, #3
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	d007      	beq.n	8009ad0 <__pow5mult+0x20>
 8009ac0:	4c21      	ldr	r4, [pc, #132]	; (8009b48 <__pow5mult+0x98>)
 8009ac2:	3a01      	subs	r2, #1
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aca:	f7ff fe8c 	bl	80097e6 <__multadd>
 8009ace:	4607      	mov	r7, r0
 8009ad0:	10ad      	asrs	r5, r5, #2
 8009ad2:	d035      	beq.n	8009b40 <__pow5mult+0x90>
 8009ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ad6:	b93c      	cbnz	r4, 8009ae8 <__pow5mult+0x38>
 8009ad8:	2010      	movs	r0, #16
 8009ada:	f7fc fb53 	bl	8006184 <malloc>
 8009ade:	6270      	str	r0, [r6, #36]	; 0x24
 8009ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ae4:	6004      	str	r4, [r0, #0]
 8009ae6:	60c4      	str	r4, [r0, #12]
 8009ae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009af0:	b94c      	cbnz	r4, 8009b06 <__pow5mult+0x56>
 8009af2:	f240 2171 	movw	r1, #625	; 0x271
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff ff3c 	bl	8009974 <__i2b>
 8009afc:	2300      	movs	r3, #0
 8009afe:	4604      	mov	r4, r0
 8009b00:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	07eb      	lsls	r3, r5, #31
 8009b0c:	d50a      	bpl.n	8009b24 <__pow5mult+0x74>
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4622      	mov	r2, r4
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7ff ff37 	bl	8009986 <__multiply>
 8009b18:	4681      	mov	r9, r0
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff fe4b 	bl	80097b8 <_Bfree>
 8009b22:	464f      	mov	r7, r9
 8009b24:	106d      	asrs	r5, r5, #1
 8009b26:	d00b      	beq.n	8009b40 <__pow5mult+0x90>
 8009b28:	6820      	ldr	r0, [r4, #0]
 8009b2a:	b938      	cbnz	r0, 8009b3c <__pow5mult+0x8c>
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff ff28 	bl	8009986 <__multiply>
 8009b36:	6020      	str	r0, [r4, #0]
 8009b38:	f8c0 8000 	str.w	r8, [r0]
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	e7e4      	b.n	8009b0a <__pow5mult+0x5a>
 8009b40:	4638      	mov	r0, r7
 8009b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b46:	bf00      	nop
 8009b48:	0800b5e0 	.word	0x0800b5e0

08009b4c <__lshift>:
 8009b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	460c      	mov	r4, r1
 8009b52:	4607      	mov	r7, r0
 8009b54:	4616      	mov	r6, r2
 8009b56:	6923      	ldr	r3, [r4, #16]
 8009b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b5c:	eb0a 0903 	add.w	r9, sl, r3
 8009b60:	6849      	ldr	r1, [r1, #4]
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	f109 0501 	add.w	r5, r9, #1
 8009b68:	42ab      	cmp	r3, r5
 8009b6a:	db32      	blt.n	8009bd2 <__lshift+0x86>
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f7ff fdef 	bl	8009750 <_Balloc>
 8009b72:	2300      	movs	r3, #0
 8009b74:	4680      	mov	r8, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	f100 0114 	add.w	r1, r0, #20
 8009b7c:	4553      	cmp	r3, sl
 8009b7e:	db2b      	blt.n	8009bd8 <__lshift+0x8c>
 8009b80:	6920      	ldr	r0, [r4, #16]
 8009b82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b86:	f104 0314 	add.w	r3, r4, #20
 8009b8a:	f016 021f 	ands.w	r2, r6, #31
 8009b8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b96:	d025      	beq.n	8009be4 <__lshift+0x98>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f1c2 0e20 	rsb	lr, r2, #32
 8009b9e:	468a      	mov	sl, r1
 8009ba0:	681e      	ldr	r6, [r3, #0]
 8009ba2:	4096      	lsls	r6, r2
 8009ba4:	4330      	orrs	r0, r6
 8009ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8009baa:	f853 0b04 	ldr.w	r0, [r3], #4
 8009bae:	459c      	cmp	ip, r3
 8009bb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8009bb4:	d814      	bhi.n	8009be0 <__lshift+0x94>
 8009bb6:	6048      	str	r0, [r1, #4]
 8009bb8:	b108      	cbz	r0, 8009bbe <__lshift+0x72>
 8009bba:	f109 0502 	add.w	r5, r9, #2
 8009bbe:	3d01      	subs	r5, #1
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f7ff fdf6 	bl	80097b8 <_Bfree>
 8009bcc:	4640      	mov	r0, r8
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd2:	3101      	adds	r1, #1
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	e7c7      	b.n	8009b68 <__lshift+0x1c>
 8009bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	e7cd      	b.n	8009b7c <__lshift+0x30>
 8009be0:	4651      	mov	r1, sl
 8009be2:	e7dc      	b.n	8009b9e <__lshift+0x52>
 8009be4:	3904      	subs	r1, #4
 8009be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bea:	459c      	cmp	ip, r3
 8009bec:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bf0:	d8f9      	bhi.n	8009be6 <__lshift+0x9a>
 8009bf2:	e7e4      	b.n	8009bbe <__lshift+0x72>

08009bf4 <__mcmp>:
 8009bf4:	6903      	ldr	r3, [r0, #16]
 8009bf6:	690a      	ldr	r2, [r1, #16]
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	d10c      	bne.n	8009c18 <__mcmp+0x24>
 8009bfe:	0092      	lsls	r2, r2, #2
 8009c00:	3014      	adds	r0, #20
 8009c02:	3114      	adds	r1, #20
 8009c04:	1884      	adds	r4, r0, r2
 8009c06:	4411      	add	r1, r2
 8009c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c10:	4295      	cmp	r5, r2
 8009c12:	d003      	beq.n	8009c1c <__mcmp+0x28>
 8009c14:	d305      	bcc.n	8009c22 <__mcmp+0x2e>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4618      	mov	r0, r3
 8009c1a:	bd30      	pop	{r4, r5, pc}
 8009c1c:	42a0      	cmp	r0, r4
 8009c1e:	d3f3      	bcc.n	8009c08 <__mcmp+0x14>
 8009c20:	e7fa      	b.n	8009c18 <__mcmp+0x24>
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	e7f7      	b.n	8009c18 <__mcmp+0x24>

08009c28 <__mdiff>:
 8009c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	4607      	mov	r7, r0
 8009c30:	4611      	mov	r1, r2
 8009c32:	4628      	mov	r0, r5
 8009c34:	4614      	mov	r4, r2
 8009c36:	f7ff ffdd 	bl	8009bf4 <__mcmp>
 8009c3a:	1e06      	subs	r6, r0, #0
 8009c3c:	d108      	bne.n	8009c50 <__mdiff+0x28>
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff fd85 	bl	8009750 <_Balloc>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	bfa4      	itt	ge
 8009c52:	4623      	movge	r3, r4
 8009c54:	462c      	movge	r4, r5
 8009c56:	4638      	mov	r0, r7
 8009c58:	6861      	ldr	r1, [r4, #4]
 8009c5a:	bfa6      	itte	ge
 8009c5c:	461d      	movge	r5, r3
 8009c5e:	2600      	movge	r6, #0
 8009c60:	2601      	movlt	r6, #1
 8009c62:	f7ff fd75 	bl	8009750 <_Balloc>
 8009c66:	f04f 0e00 	mov.w	lr, #0
 8009c6a:	60c6      	str	r6, [r0, #12]
 8009c6c:	692b      	ldr	r3, [r5, #16]
 8009c6e:	6926      	ldr	r6, [r4, #16]
 8009c70:	f104 0214 	add.w	r2, r4, #20
 8009c74:	f105 0914 	add.w	r9, r5, #20
 8009c78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c80:	f100 0114 	add.w	r1, r0, #20
 8009c84:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c88:	f859 5b04 	ldr.w	r5, [r9], #4
 8009c8c:	fa1f f38a 	uxth.w	r3, sl
 8009c90:	4473      	add	r3, lr
 8009c92:	b2ac      	uxth	r4, r5
 8009c94:	1b1b      	subs	r3, r3, r4
 8009c96:	0c2c      	lsrs	r4, r5, #16
 8009c98:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009c9c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009ca6:	45c8      	cmp	r8, r9
 8009ca8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009cac:	4694      	mov	ip, r2
 8009cae:	f841 4b04 	str.w	r4, [r1], #4
 8009cb2:	d8e7      	bhi.n	8009c84 <__mdiff+0x5c>
 8009cb4:	45bc      	cmp	ip, r7
 8009cb6:	d304      	bcc.n	8009cc2 <__mdiff+0x9a>
 8009cb8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009cbc:	b183      	cbz	r3, 8009ce0 <__mdiff+0xb8>
 8009cbe:	6106      	str	r6, [r0, #16]
 8009cc0:	e7c4      	b.n	8009c4c <__mdiff+0x24>
 8009cc2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009cc6:	b2a2      	uxth	r2, r4
 8009cc8:	4472      	add	r2, lr
 8009cca:	1413      	asrs	r3, r2, #16
 8009ccc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cd6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009cda:	f841 2b04 	str.w	r2, [r1], #4
 8009cde:	e7e9      	b.n	8009cb4 <__mdiff+0x8c>
 8009ce0:	3e01      	subs	r6, #1
 8009ce2:	e7e9      	b.n	8009cb8 <__mdiff+0x90>

08009ce4 <__ulp>:
 8009ce4:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <__ulp+0x44>)
 8009ce6:	400b      	ands	r3, r1
 8009ce8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd02      	ble.n	8009cf6 <__ulp+0x12>
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4770      	bx	lr
 8009cf6:	425b      	negs	r3, r3
 8009cf8:	151b      	asrs	r3, r3, #20
 8009cfa:	2b13      	cmp	r3, #19
 8009cfc:	f04f 0000 	mov.w	r0, #0
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	dc04      	bgt.n	8009d10 <__ulp+0x2c>
 8009d06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009d0a:	fa42 f103 	asr.w	r1, r2, r3
 8009d0e:	4770      	bx	lr
 8009d10:	2201      	movs	r2, #1
 8009d12:	3b14      	subs	r3, #20
 8009d14:	2b1e      	cmp	r3, #30
 8009d16:	bfce      	itee	gt
 8009d18:	4613      	movgt	r3, r2
 8009d1a:	f1c3 031f 	rsble	r3, r3, #31
 8009d1e:	fa02 f303 	lslle.w	r3, r2, r3
 8009d22:	4618      	mov	r0, r3
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	7ff00000 	.word	0x7ff00000

08009d2c <__b2d>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	6907      	ldr	r7, [r0, #16]
 8009d32:	f100 0914 	add.w	r9, r0, #20
 8009d36:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009d3a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009d3e:	f1a7 0804 	sub.w	r8, r7, #4
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff fdc8 	bl	80098d8 <__hi0bits>
 8009d48:	f1c0 0320 	rsb	r3, r0, #32
 8009d4c:	280a      	cmp	r0, #10
 8009d4e:	600b      	str	r3, [r1, #0]
 8009d50:	491e      	ldr	r1, [pc, #120]	; (8009dcc <__b2d+0xa0>)
 8009d52:	dc17      	bgt.n	8009d84 <__b2d+0x58>
 8009d54:	45c1      	cmp	r9, r8
 8009d56:	bf28      	it	cs
 8009d58:	2200      	movcs	r2, #0
 8009d5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d5e:	fa26 f30c 	lsr.w	r3, r6, ip
 8009d62:	bf38      	it	cc
 8009d64:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009d68:	ea43 0501 	orr.w	r5, r3, r1
 8009d6c:	f100 0315 	add.w	r3, r0, #21
 8009d70:	fa06 f303 	lsl.w	r3, r6, r3
 8009d74:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d78:	ea43 0402 	orr.w	r4, r3, r2
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d84:	45c1      	cmp	r9, r8
 8009d86:	bf3a      	itte	cc
 8009d88:	f1a7 0808 	subcc.w	r8, r7, #8
 8009d8c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009d90:	2200      	movcs	r2, #0
 8009d92:	f1b0 030b 	subs.w	r3, r0, #11
 8009d96:	d015      	beq.n	8009dc4 <__b2d+0x98>
 8009d98:	409e      	lsls	r6, r3
 8009d9a:	f1c3 0720 	rsb	r7, r3, #32
 8009d9e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009da2:	fa22 f107 	lsr.w	r1, r2, r7
 8009da6:	45c8      	cmp	r8, r9
 8009da8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009dac:	ea46 0501 	orr.w	r5, r6, r1
 8009db0:	bf94      	ite	ls
 8009db2:	2100      	movls	r1, #0
 8009db4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009db8:	fa02 f003 	lsl.w	r0, r2, r3
 8009dbc:	40f9      	lsrs	r1, r7
 8009dbe:	ea40 0401 	orr.w	r4, r0, r1
 8009dc2:	e7db      	b.n	8009d7c <__b2d+0x50>
 8009dc4:	ea46 0501 	orr.w	r5, r6, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	e7d7      	b.n	8009d7c <__b2d+0x50>
 8009dcc:	3ff00000 	.word	0x3ff00000

08009dd0 <__d2b>:
 8009dd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009dd4:	461c      	mov	r4, r3
 8009dd6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4690      	mov	r8, r2
 8009dde:	f7ff fcb7 	bl	8009750 <_Balloc>
 8009de2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009de6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009dea:	4607      	mov	r7, r0
 8009dec:	bb34      	cbnz	r4, 8009e3c <__d2b+0x6c>
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	f1b8 0200 	subs.w	r2, r8, #0
 8009df4:	d027      	beq.n	8009e46 <__d2b+0x76>
 8009df6:	a802      	add	r0, sp, #8
 8009df8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009dfc:	f7ff fd8b 	bl	8009916 <__lo0bits>
 8009e00:	9900      	ldr	r1, [sp, #0]
 8009e02:	b1f0      	cbz	r0, 8009e42 <__d2b+0x72>
 8009e04:	9a01      	ldr	r2, [sp, #4]
 8009e06:	f1c0 0320 	rsb	r3, r0, #32
 8009e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	40c2      	lsrs	r2, r0
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	9201      	str	r2, [sp, #4]
 8009e16:	9b01      	ldr	r3, [sp, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bf14      	ite	ne
 8009e1c:	2102      	movne	r1, #2
 8009e1e:	2101      	moveq	r1, #1
 8009e20:	61bb      	str	r3, [r7, #24]
 8009e22:	6139      	str	r1, [r7, #16]
 8009e24:	b1c4      	cbz	r4, 8009e58 <__d2b+0x88>
 8009e26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009e2a:	4404      	add	r4, r0
 8009e2c:	6034      	str	r4, [r6, #0]
 8009e2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e32:	6028      	str	r0, [r5, #0]
 8009e34:	4638      	mov	r0, r7
 8009e36:	b002      	add	sp, #8
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e40:	e7d5      	b.n	8009dee <__d2b+0x1e>
 8009e42:	6179      	str	r1, [r7, #20]
 8009e44:	e7e7      	b.n	8009e16 <__d2b+0x46>
 8009e46:	a801      	add	r0, sp, #4
 8009e48:	f7ff fd65 	bl	8009916 <__lo0bits>
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	6139      	str	r1, [r7, #16]
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	3020      	adds	r0, #32
 8009e56:	e7e5      	b.n	8009e24 <__d2b+0x54>
 8009e58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009e60:	6030      	str	r0, [r6, #0]
 8009e62:	6918      	ldr	r0, [r3, #16]
 8009e64:	f7ff fd38 	bl	80098d8 <__hi0bits>
 8009e68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009e6c:	e7e1      	b.n	8009e32 <__d2b+0x62>

08009e6e <__ratio>:
 8009e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e72:	4688      	mov	r8, r1
 8009e74:	4669      	mov	r1, sp
 8009e76:	4681      	mov	r9, r0
 8009e78:	f7ff ff58 	bl	8009d2c <__b2d>
 8009e7c:	468b      	mov	fp, r1
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460f      	mov	r7, r1
 8009e82:	4640      	mov	r0, r8
 8009e84:	a901      	add	r1, sp, #4
 8009e86:	f7ff ff51 	bl	8009d2c <__b2d>
 8009e8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e92:	460d      	mov	r5, r1
 8009e94:	eba3 0c02 	sub.w	ip, r3, r2
 8009e98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bfd5      	itete	le
 8009ea6:	460a      	movle	r2, r1
 8009ea8:	463a      	movgt	r2, r7
 8009eaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009eae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009eb2:	bfd8      	it	le
 8009eb4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009eb8:	462b      	mov	r3, r5
 8009eba:	4602      	mov	r2, r0
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7f6 fca0 	bl	8000804 <__aeabi_ddiv>
 8009ec4:	b003      	add	sp, #12
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eca <__copybits>:
 8009eca:	3901      	subs	r1, #1
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	1149      	asrs	r1, r1, #5
 8009ed0:	6914      	ldr	r4, [r2, #16]
 8009ed2:	3101      	adds	r1, #1
 8009ed4:	f102 0314 	add.w	r3, r2, #20
 8009ed8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009edc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	d303      	bcc.n	8009eee <__copybits+0x24>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	428a      	cmp	r2, r1
 8009eea:	d305      	bcc.n	8009ef8 <__copybits+0x2e>
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef2:	f840 2b04 	str.w	r2, [r0], #4
 8009ef6:	e7f3      	b.n	8009ee0 <__copybits+0x16>
 8009ef8:	f842 3b04 	str.w	r3, [r2], #4
 8009efc:	e7f4      	b.n	8009ee8 <__copybits+0x1e>

08009efe <__any_on>:
 8009efe:	f100 0214 	add.w	r2, r0, #20
 8009f02:	6900      	ldr	r0, [r0, #16]
 8009f04:	114b      	asrs	r3, r1, #5
 8009f06:	4298      	cmp	r0, r3
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	db11      	blt.n	8009f30 <__any_on+0x32>
 8009f0c:	dd0a      	ble.n	8009f24 <__any_on+0x26>
 8009f0e:	f011 011f 	ands.w	r1, r1, #31
 8009f12:	d007      	beq.n	8009f24 <__any_on+0x26>
 8009f14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f18:	fa24 f001 	lsr.w	r0, r4, r1
 8009f1c:	fa00 f101 	lsl.w	r1, r0, r1
 8009f20:	428c      	cmp	r4, r1
 8009f22:	d10b      	bne.n	8009f3c <__any_on+0x3e>
 8009f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d803      	bhi.n	8009f34 <__any_on+0x36>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	bd10      	pop	{r4, pc}
 8009f30:	4603      	mov	r3, r0
 8009f32:	e7f7      	b.n	8009f24 <__any_on+0x26>
 8009f34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f38:	2900      	cmp	r1, #0
 8009f3a:	d0f5      	beq.n	8009f28 <__any_on+0x2a>
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7f6      	b.n	8009f2e <__any_on+0x30>

08009f40 <__ssputs_r>:
 8009f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	688e      	ldr	r6, [r1, #8]
 8009f46:	4682      	mov	sl, r0
 8009f48:	429e      	cmp	r6, r3
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	4690      	mov	r8, r2
 8009f4e:	4699      	mov	r9, r3
 8009f50:	d837      	bhi.n	8009fc2 <__ssputs_r+0x82>
 8009f52:	898a      	ldrh	r2, [r1, #12]
 8009f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f58:	d031      	beq.n	8009fbe <__ssputs_r+0x7e>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	6825      	ldr	r5, [r4, #0]
 8009f5e:	6909      	ldr	r1, [r1, #16]
 8009f60:	1a6f      	subs	r7, r5, r1
 8009f62:	6965      	ldr	r5, [r4, #20]
 8009f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f68:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f6c:	f109 0301 	add.w	r3, r9, #1
 8009f70:	443b      	add	r3, r7
 8009f72:	429d      	cmp	r5, r3
 8009f74:	bf38      	it	cc
 8009f76:	461d      	movcc	r5, r3
 8009f78:	0553      	lsls	r3, r2, #21
 8009f7a:	d530      	bpl.n	8009fde <__ssputs_r+0x9e>
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	f7fc f98d 	bl	800629c <_malloc_r>
 8009f82:	4606      	mov	r6, r0
 8009f84:	b950      	cbnz	r0, 8009f9c <__ssputs_r+0x5c>
 8009f86:	230c      	movs	r3, #12
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	f8ca 3000 	str.w	r3, [sl]
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f96:	81a3      	strh	r3, [r4, #12]
 8009f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9c:	463a      	mov	r2, r7
 8009f9e:	6921      	ldr	r1, [r4, #16]
 8009fa0:	f7fc f90f 	bl	80061c2 <memcpy>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fae:	81a3      	strh	r3, [r4, #12]
 8009fb0:	6126      	str	r6, [r4, #16]
 8009fb2:	443e      	add	r6, r7
 8009fb4:	6026      	str	r6, [r4, #0]
 8009fb6:	464e      	mov	r6, r9
 8009fb8:	6165      	str	r5, [r4, #20]
 8009fba:	1bed      	subs	r5, r5, r7
 8009fbc:	60a5      	str	r5, [r4, #8]
 8009fbe:	454e      	cmp	r6, r9
 8009fc0:	d900      	bls.n	8009fc4 <__ssputs_r+0x84>
 8009fc2:	464e      	mov	r6, r9
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	4641      	mov	r1, r8
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	f000 faef 	bl	800a5ac <memmove>
 8009fce:	68a3      	ldr	r3, [r4, #8]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	1b9b      	subs	r3, r3, r6
 8009fd4:	60a3      	str	r3, [r4, #8]
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	441e      	add	r6, r3
 8009fda:	6026      	str	r6, [r4, #0]
 8009fdc:	e7dc      	b.n	8009f98 <__ssputs_r+0x58>
 8009fde:	462a      	mov	r2, r5
 8009fe0:	f000 fafd 	bl	800a5de <_realloc_r>
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d1e2      	bne.n	8009fb0 <__ssputs_r+0x70>
 8009fea:	6921      	ldr	r1, [r4, #16]
 8009fec:	4650      	mov	r0, sl
 8009fee:	f7fc f909 	bl	8006204 <_free_r>
 8009ff2:	e7c8      	b.n	8009f86 <__ssputs_r+0x46>

08009ff4 <_svfiprintf_r>:
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	461d      	mov	r5, r3
 8009ffa:	898b      	ldrh	r3, [r1, #12]
 8009ffc:	b09d      	sub	sp, #116	; 0x74
 8009ffe:	061f      	lsls	r7, r3, #24
 800a000:	4680      	mov	r8, r0
 800a002:	460c      	mov	r4, r1
 800a004:	4616      	mov	r6, r2
 800a006:	d50f      	bpl.n	800a028 <_svfiprintf_r+0x34>
 800a008:	690b      	ldr	r3, [r1, #16]
 800a00a:	b96b      	cbnz	r3, 800a028 <_svfiprintf_r+0x34>
 800a00c:	2140      	movs	r1, #64	; 0x40
 800a00e:	f7fc f945 	bl	800629c <_malloc_r>
 800a012:	6020      	str	r0, [r4, #0]
 800a014:	6120      	str	r0, [r4, #16]
 800a016:	b928      	cbnz	r0, 800a024 <_svfiprintf_r+0x30>
 800a018:	230c      	movs	r3, #12
 800a01a:	f8c8 3000 	str.w	r3, [r8]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	e0c8      	b.n	800a1b6 <_svfiprintf_r+0x1c2>
 800a024:	2340      	movs	r3, #64	; 0x40
 800a026:	6163      	str	r3, [r4, #20]
 800a028:	2300      	movs	r3, #0
 800a02a:	9309      	str	r3, [sp, #36]	; 0x24
 800a02c:	2320      	movs	r3, #32
 800a02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a032:	2330      	movs	r3, #48	; 0x30
 800a034:	f04f 0b01 	mov.w	fp, #1
 800a038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a03c:	9503      	str	r5, [sp, #12]
 800a03e:	4637      	mov	r7, r6
 800a040:	463d      	mov	r5, r7
 800a042:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a046:	b10b      	cbz	r3, 800a04c <_svfiprintf_r+0x58>
 800a048:	2b25      	cmp	r3, #37	; 0x25
 800a04a:	d13e      	bne.n	800a0ca <_svfiprintf_r+0xd6>
 800a04c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a050:	d00b      	beq.n	800a06a <_svfiprintf_r+0x76>
 800a052:	4653      	mov	r3, sl
 800a054:	4632      	mov	r2, r6
 800a056:	4621      	mov	r1, r4
 800a058:	4640      	mov	r0, r8
 800a05a:	f7ff ff71 	bl	8009f40 <__ssputs_r>
 800a05e:	3001      	adds	r0, #1
 800a060:	f000 80a4 	beq.w	800a1ac <_svfiprintf_r+0x1b8>
 800a064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a066:	4453      	add	r3, sl
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	783b      	ldrb	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 809d 	beq.w	800a1ac <_svfiprintf_r+0x1b8>
 800a072:	2300      	movs	r3, #0
 800a074:	f04f 32ff 	mov.w	r2, #4294967295
 800a078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a084:	931a      	str	r3, [sp, #104]	; 0x68
 800a086:	462f      	mov	r7, r5
 800a088:	2205      	movs	r2, #5
 800a08a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a08e:	4850      	ldr	r0, [pc, #320]	; (800a1d0 <_svfiprintf_r+0x1dc>)
 800a090:	f7ff fb4e 	bl	8009730 <memchr>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	b9d0      	cbnz	r0, 800a0ce <_svfiprintf_r+0xda>
 800a098:	06d9      	lsls	r1, r3, #27
 800a09a:	bf44      	itt	mi
 800a09c:	2220      	movmi	r2, #32
 800a09e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0a2:	071a      	lsls	r2, r3, #28
 800a0a4:	bf44      	itt	mi
 800a0a6:	222b      	movmi	r2, #43	; 0x2b
 800a0a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0ac:	782a      	ldrb	r2, [r5, #0]
 800a0ae:	2a2a      	cmp	r2, #42	; 0x2a
 800a0b0:	d015      	beq.n	800a0de <_svfiprintf_r+0xea>
 800a0b2:	462f      	mov	r7, r5
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	250a      	movs	r5, #10
 800a0b8:	9a07      	ldr	r2, [sp, #28]
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c0:	3b30      	subs	r3, #48	; 0x30
 800a0c2:	2b09      	cmp	r3, #9
 800a0c4:	d94d      	bls.n	800a162 <_svfiprintf_r+0x16e>
 800a0c6:	b1b8      	cbz	r0, 800a0f8 <_svfiprintf_r+0x104>
 800a0c8:	e00f      	b.n	800a0ea <_svfiprintf_r+0xf6>
 800a0ca:	462f      	mov	r7, r5
 800a0cc:	e7b8      	b.n	800a040 <_svfiprintf_r+0x4c>
 800a0ce:	4a40      	ldr	r2, [pc, #256]	; (800a1d0 <_svfiprintf_r+0x1dc>)
 800a0d0:	463d      	mov	r5, r7
 800a0d2:	1a80      	subs	r0, r0, r2
 800a0d4:	fa0b f000 	lsl.w	r0, fp, r0
 800a0d8:	4318      	orrs	r0, r3
 800a0da:	9004      	str	r0, [sp, #16]
 800a0dc:	e7d3      	b.n	800a086 <_svfiprintf_r+0x92>
 800a0de:	9a03      	ldr	r2, [sp, #12]
 800a0e0:	1d11      	adds	r1, r2, #4
 800a0e2:	6812      	ldr	r2, [r2, #0]
 800a0e4:	9103      	str	r1, [sp, #12]
 800a0e6:	2a00      	cmp	r2, #0
 800a0e8:	db01      	blt.n	800a0ee <_svfiprintf_r+0xfa>
 800a0ea:	9207      	str	r2, [sp, #28]
 800a0ec:	e004      	b.n	800a0f8 <_svfiprintf_r+0x104>
 800a0ee:	4252      	negs	r2, r2
 800a0f0:	f043 0302 	orr.w	r3, r3, #2
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	783b      	ldrb	r3, [r7, #0]
 800a0fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a0fc:	d10c      	bne.n	800a118 <_svfiprintf_r+0x124>
 800a0fe:	787b      	ldrb	r3, [r7, #1]
 800a100:	2b2a      	cmp	r3, #42	; 0x2a
 800a102:	d133      	bne.n	800a16c <_svfiprintf_r+0x178>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	3702      	adds	r7, #2
 800a108:	1d1a      	adds	r2, r3, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	9203      	str	r2, [sp, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	bfb8      	it	lt
 800a112:	f04f 33ff 	movlt.w	r3, #4294967295
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	4d2e      	ldr	r5, [pc, #184]	; (800a1d4 <_svfiprintf_r+0x1e0>)
 800a11a:	2203      	movs	r2, #3
 800a11c:	7839      	ldrb	r1, [r7, #0]
 800a11e:	4628      	mov	r0, r5
 800a120:	f7ff fb06 	bl	8009730 <memchr>
 800a124:	b138      	cbz	r0, 800a136 <_svfiprintf_r+0x142>
 800a126:	2340      	movs	r3, #64	; 0x40
 800a128:	1b40      	subs	r0, r0, r5
 800a12a:	fa03 f000 	lsl.w	r0, r3, r0
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	3701      	adds	r7, #1
 800a132:	4303      	orrs	r3, r0
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	7839      	ldrb	r1, [r7, #0]
 800a138:	2206      	movs	r2, #6
 800a13a:	4827      	ldr	r0, [pc, #156]	; (800a1d8 <_svfiprintf_r+0x1e4>)
 800a13c:	1c7e      	adds	r6, r7, #1
 800a13e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a142:	f7ff faf5 	bl	8009730 <memchr>
 800a146:	2800      	cmp	r0, #0
 800a148:	d038      	beq.n	800a1bc <_svfiprintf_r+0x1c8>
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <_svfiprintf_r+0x1e8>)
 800a14c:	bb13      	cbnz	r3, 800a194 <_svfiprintf_r+0x1a0>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	3307      	adds	r3, #7
 800a152:	f023 0307 	bic.w	r3, r3, #7
 800a156:	3308      	adds	r3, #8
 800a158:	9303      	str	r3, [sp, #12]
 800a15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15c:	444b      	add	r3, r9
 800a15e:	9309      	str	r3, [sp, #36]	; 0x24
 800a160:	e76d      	b.n	800a03e <_svfiprintf_r+0x4a>
 800a162:	fb05 3202 	mla	r2, r5, r2, r3
 800a166:	2001      	movs	r0, #1
 800a168:	460f      	mov	r7, r1
 800a16a:	e7a6      	b.n	800a0ba <_svfiprintf_r+0xc6>
 800a16c:	2300      	movs	r3, #0
 800a16e:	250a      	movs	r5, #10
 800a170:	4619      	mov	r1, r3
 800a172:	3701      	adds	r7, #1
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	4638      	mov	r0, r7
 800a178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a17c:	3a30      	subs	r2, #48	; 0x30
 800a17e:	2a09      	cmp	r2, #9
 800a180:	d903      	bls.n	800a18a <_svfiprintf_r+0x196>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c8      	beq.n	800a118 <_svfiprintf_r+0x124>
 800a186:	9105      	str	r1, [sp, #20]
 800a188:	e7c6      	b.n	800a118 <_svfiprintf_r+0x124>
 800a18a:	fb05 2101 	mla	r1, r5, r1, r2
 800a18e:	2301      	movs	r3, #1
 800a190:	4607      	mov	r7, r0
 800a192:	e7f0      	b.n	800a176 <_svfiprintf_r+0x182>
 800a194:	ab03      	add	r3, sp, #12
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	4622      	mov	r2, r4
 800a19a:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <_svfiprintf_r+0x1ec>)
 800a19c:	a904      	add	r1, sp, #16
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f7fc f968 	bl	8006474 <_printf_float>
 800a1a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1a8:	4681      	mov	r9, r0
 800a1aa:	d1d6      	bne.n	800a15a <_svfiprintf_r+0x166>
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	065b      	lsls	r3, r3, #25
 800a1b0:	f53f af35 	bmi.w	800a01e <_svfiprintf_r+0x2a>
 800a1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1b6:	b01d      	add	sp, #116	; 0x74
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	ab03      	add	r3, sp, #12
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <_svfiprintf_r+0x1ec>)
 800a1c4:	a904      	add	r1, sp, #16
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	f7fc fc00 	bl	80069cc <_printf_i>
 800a1cc:	e7ea      	b.n	800a1a4 <_svfiprintf_r+0x1b0>
 800a1ce:	bf00      	nop
 800a1d0:	0800b5ec 	.word	0x0800b5ec
 800a1d4:	0800b5f2 	.word	0x0800b5f2
 800a1d8:	0800b5f6 	.word	0x0800b5f6
 800a1dc:	08006475 	.word	0x08006475
 800a1e0:	08009f41 	.word	0x08009f41

0800a1e4 <__sfputc_r>:
 800a1e4:	6893      	ldr	r3, [r2, #8]
 800a1e6:	b410      	push	{r4}
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	6093      	str	r3, [r2, #8]
 800a1ee:	da07      	bge.n	800a200 <__sfputc_r+0x1c>
 800a1f0:	6994      	ldr	r4, [r2, #24]
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	db01      	blt.n	800a1fa <__sfputc_r+0x16>
 800a1f6:	290a      	cmp	r1, #10
 800a1f8:	d102      	bne.n	800a200 <__sfputc_r+0x1c>
 800a1fa:	bc10      	pop	{r4}
 800a1fc:	f7fd be6a 	b.w	8007ed4 <__swbuf_r>
 800a200:	6813      	ldr	r3, [r2, #0]
 800a202:	1c58      	adds	r0, r3, #1
 800a204:	6010      	str	r0, [r2, #0]
 800a206:	7019      	strb	r1, [r3, #0]
 800a208:	4608      	mov	r0, r1
 800a20a:	bc10      	pop	{r4}
 800a20c:	4770      	bx	lr

0800a20e <__sfputs_r>:
 800a20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a210:	4606      	mov	r6, r0
 800a212:	460f      	mov	r7, r1
 800a214:	4614      	mov	r4, r2
 800a216:	18d5      	adds	r5, r2, r3
 800a218:	42ac      	cmp	r4, r5
 800a21a:	d101      	bne.n	800a220 <__sfputs_r+0x12>
 800a21c:	2000      	movs	r0, #0
 800a21e:	e007      	b.n	800a230 <__sfputs_r+0x22>
 800a220:	463a      	mov	r2, r7
 800a222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a226:	4630      	mov	r0, r6
 800a228:	f7ff ffdc 	bl	800a1e4 <__sfputc_r>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d1f3      	bne.n	800a218 <__sfputs_r+0xa>
 800a230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a234 <_vfiprintf_r>:
 800a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	460c      	mov	r4, r1
 800a23a:	b09d      	sub	sp, #116	; 0x74
 800a23c:	4617      	mov	r7, r2
 800a23e:	461d      	mov	r5, r3
 800a240:	4606      	mov	r6, r0
 800a242:	b118      	cbz	r0, 800a24c <_vfiprintf_r+0x18>
 800a244:	6983      	ldr	r3, [r0, #24]
 800a246:	b90b      	cbnz	r3, 800a24c <_vfiprintf_r+0x18>
 800a248:	f7fe fe36 	bl	8008eb8 <__sinit>
 800a24c:	4b7c      	ldr	r3, [pc, #496]	; (800a440 <_vfiprintf_r+0x20c>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d158      	bne.n	800a304 <_vfiprintf_r+0xd0>
 800a252:	6874      	ldr	r4, [r6, #4]
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	0718      	lsls	r0, r3, #28
 800a258:	d55e      	bpl.n	800a318 <_vfiprintf_r+0xe4>
 800a25a:	6923      	ldr	r3, [r4, #16]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d05b      	beq.n	800a318 <_vfiprintf_r+0xe4>
 800a260:	2300      	movs	r3, #0
 800a262:	9309      	str	r3, [sp, #36]	; 0x24
 800a264:	2320      	movs	r3, #32
 800a266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a26a:	2330      	movs	r3, #48	; 0x30
 800a26c:	f04f 0b01 	mov.w	fp, #1
 800a270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a274:	9503      	str	r5, [sp, #12]
 800a276:	46b8      	mov	r8, r7
 800a278:	4645      	mov	r5, r8
 800a27a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a27e:	b10b      	cbz	r3, 800a284 <_vfiprintf_r+0x50>
 800a280:	2b25      	cmp	r3, #37	; 0x25
 800a282:	d154      	bne.n	800a32e <_vfiprintf_r+0xfa>
 800a284:	ebb8 0a07 	subs.w	sl, r8, r7
 800a288:	d00b      	beq.n	800a2a2 <_vfiprintf_r+0x6e>
 800a28a:	4653      	mov	r3, sl
 800a28c:	463a      	mov	r2, r7
 800a28e:	4621      	mov	r1, r4
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff ffbc 	bl	800a20e <__sfputs_r>
 800a296:	3001      	adds	r0, #1
 800a298:	f000 80c2 	beq.w	800a420 <_vfiprintf_r+0x1ec>
 800a29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a29e:	4453      	add	r3, sl
 800a2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a2:	f898 3000 	ldrb.w	r3, [r8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 80ba 	beq.w	800a420 <_vfiprintf_r+0x1ec>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b6:	9304      	str	r3, [sp, #16]
 800a2b8:	9307      	str	r3, [sp, #28]
 800a2ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2be:	931a      	str	r3, [sp, #104]	; 0x68
 800a2c0:	46a8      	mov	r8, r5
 800a2c2:	2205      	movs	r2, #5
 800a2c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a2c8:	485e      	ldr	r0, [pc, #376]	; (800a444 <_vfiprintf_r+0x210>)
 800a2ca:	f7ff fa31 	bl	8009730 <memchr>
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	bb78      	cbnz	r0, 800a332 <_vfiprintf_r+0xfe>
 800a2d2:	06d9      	lsls	r1, r3, #27
 800a2d4:	bf44      	itt	mi
 800a2d6:	2220      	movmi	r2, #32
 800a2d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2dc:	071a      	lsls	r2, r3, #28
 800a2de:	bf44      	itt	mi
 800a2e0:	222b      	movmi	r2, #43	; 0x2b
 800a2e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2e6:	782a      	ldrb	r2, [r5, #0]
 800a2e8:	2a2a      	cmp	r2, #42	; 0x2a
 800a2ea:	d02a      	beq.n	800a342 <_vfiprintf_r+0x10e>
 800a2ec:	46a8      	mov	r8, r5
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	250a      	movs	r5, #10
 800a2f2:	9a07      	ldr	r2, [sp, #28]
 800a2f4:	4641      	mov	r1, r8
 800a2f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2fa:	3b30      	subs	r3, #48	; 0x30
 800a2fc:	2b09      	cmp	r3, #9
 800a2fe:	d969      	bls.n	800a3d4 <_vfiprintf_r+0x1a0>
 800a300:	b360      	cbz	r0, 800a35c <_vfiprintf_r+0x128>
 800a302:	e024      	b.n	800a34e <_vfiprintf_r+0x11a>
 800a304:	4b50      	ldr	r3, [pc, #320]	; (800a448 <_vfiprintf_r+0x214>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d101      	bne.n	800a30e <_vfiprintf_r+0xda>
 800a30a:	68b4      	ldr	r4, [r6, #8]
 800a30c:	e7a2      	b.n	800a254 <_vfiprintf_r+0x20>
 800a30e:	4b4f      	ldr	r3, [pc, #316]	; (800a44c <_vfiprintf_r+0x218>)
 800a310:	429c      	cmp	r4, r3
 800a312:	bf08      	it	eq
 800a314:	68f4      	ldreq	r4, [r6, #12]
 800a316:	e79d      	b.n	800a254 <_vfiprintf_r+0x20>
 800a318:	4621      	mov	r1, r4
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7fd fe2c 	bl	8007f78 <__swsetup_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	d09d      	beq.n	800a260 <_vfiprintf_r+0x2c>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	; 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	46a8      	mov	r8, r5
 800a330:	e7a2      	b.n	800a278 <_vfiprintf_r+0x44>
 800a332:	4a44      	ldr	r2, [pc, #272]	; (800a444 <_vfiprintf_r+0x210>)
 800a334:	4645      	mov	r5, r8
 800a336:	1a80      	subs	r0, r0, r2
 800a338:	fa0b f000 	lsl.w	r0, fp, r0
 800a33c:	4318      	orrs	r0, r3
 800a33e:	9004      	str	r0, [sp, #16]
 800a340:	e7be      	b.n	800a2c0 <_vfiprintf_r+0x8c>
 800a342:	9a03      	ldr	r2, [sp, #12]
 800a344:	1d11      	adds	r1, r2, #4
 800a346:	6812      	ldr	r2, [r2, #0]
 800a348:	9103      	str	r1, [sp, #12]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	db01      	blt.n	800a352 <_vfiprintf_r+0x11e>
 800a34e:	9207      	str	r2, [sp, #28]
 800a350:	e004      	b.n	800a35c <_vfiprintf_r+0x128>
 800a352:	4252      	negs	r2, r2
 800a354:	f043 0302 	orr.w	r3, r3, #2
 800a358:	9207      	str	r2, [sp, #28]
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	f898 3000 	ldrb.w	r3, [r8]
 800a360:	2b2e      	cmp	r3, #46	; 0x2e
 800a362:	d10e      	bne.n	800a382 <_vfiprintf_r+0x14e>
 800a364:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a368:	2b2a      	cmp	r3, #42	; 0x2a
 800a36a:	d138      	bne.n	800a3de <_vfiprintf_r+0x1aa>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	f108 0802 	add.w	r8, r8, #2
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	9203      	str	r2, [sp, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bfb8      	it	lt
 800a37c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a380:	9305      	str	r3, [sp, #20]
 800a382:	4d33      	ldr	r5, [pc, #204]	; (800a450 <_vfiprintf_r+0x21c>)
 800a384:	2203      	movs	r2, #3
 800a386:	f898 1000 	ldrb.w	r1, [r8]
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7ff f9d0 	bl	8009730 <memchr>
 800a390:	b140      	cbz	r0, 800a3a4 <_vfiprintf_r+0x170>
 800a392:	2340      	movs	r3, #64	; 0x40
 800a394:	1b40      	subs	r0, r0, r5
 800a396:	fa03 f000 	lsl.w	r0, r3, r0
 800a39a:	9b04      	ldr	r3, [sp, #16]
 800a39c:	f108 0801 	add.w	r8, r8, #1
 800a3a0:	4303      	orrs	r3, r0
 800a3a2:	9304      	str	r3, [sp, #16]
 800a3a4:	f898 1000 	ldrb.w	r1, [r8]
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	482a      	ldr	r0, [pc, #168]	; (800a454 <_vfiprintf_r+0x220>)
 800a3ac:	f108 0701 	add.w	r7, r8, #1
 800a3b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3b4:	f7ff f9bc 	bl	8009730 <memchr>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d037      	beq.n	800a42c <_vfiprintf_r+0x1f8>
 800a3bc:	4b26      	ldr	r3, [pc, #152]	; (800a458 <_vfiprintf_r+0x224>)
 800a3be:	bb1b      	cbnz	r3, 800a408 <_vfiprintf_r+0x1d4>
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	3307      	adds	r3, #7
 800a3c4:	f023 0307 	bic.w	r3, r3, #7
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	9303      	str	r3, [sp, #12]
 800a3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ce:	444b      	add	r3, r9
 800a3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d2:	e750      	b.n	800a276 <_vfiprintf_r+0x42>
 800a3d4:	fb05 3202 	mla	r2, r5, r2, r3
 800a3d8:	2001      	movs	r0, #1
 800a3da:	4688      	mov	r8, r1
 800a3dc:	e78a      	b.n	800a2f4 <_vfiprintf_r+0xc0>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	250a      	movs	r5, #10
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	f108 0801 	add.w	r8, r8, #1
 800a3e8:	9305      	str	r3, [sp, #20]
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3f0:	3a30      	subs	r2, #48	; 0x30
 800a3f2:	2a09      	cmp	r2, #9
 800a3f4:	d903      	bls.n	800a3fe <_vfiprintf_r+0x1ca>
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0c3      	beq.n	800a382 <_vfiprintf_r+0x14e>
 800a3fa:	9105      	str	r1, [sp, #20]
 800a3fc:	e7c1      	b.n	800a382 <_vfiprintf_r+0x14e>
 800a3fe:	fb05 2101 	mla	r1, r5, r1, r2
 800a402:	2301      	movs	r3, #1
 800a404:	4680      	mov	r8, r0
 800a406:	e7f0      	b.n	800a3ea <_vfiprintf_r+0x1b6>
 800a408:	ab03      	add	r3, sp, #12
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	4622      	mov	r2, r4
 800a40e:	4b13      	ldr	r3, [pc, #76]	; (800a45c <_vfiprintf_r+0x228>)
 800a410:	a904      	add	r1, sp, #16
 800a412:	4630      	mov	r0, r6
 800a414:	f7fc f82e 	bl	8006474 <_printf_float>
 800a418:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a41c:	4681      	mov	r9, r0
 800a41e:	d1d5      	bne.n	800a3cc <_vfiprintf_r+0x198>
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	065b      	lsls	r3, r3, #25
 800a424:	f53f af7e 	bmi.w	800a324 <_vfiprintf_r+0xf0>
 800a428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a42a:	e77d      	b.n	800a328 <_vfiprintf_r+0xf4>
 800a42c:	ab03      	add	r3, sp, #12
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	4622      	mov	r2, r4
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <_vfiprintf_r+0x228>)
 800a434:	a904      	add	r1, sp, #16
 800a436:	4630      	mov	r0, r6
 800a438:	f7fc fac8 	bl	80069cc <_printf_i>
 800a43c:	e7ec      	b.n	800a418 <_vfiprintf_r+0x1e4>
 800a43e:	bf00      	nop
 800a440:	0800b4a8 	.word	0x0800b4a8
 800a444:	0800b5ec 	.word	0x0800b5ec
 800a448:	0800b4c8 	.word	0x0800b4c8
 800a44c:	0800b488 	.word	0x0800b488
 800a450:	0800b5f2 	.word	0x0800b5f2
 800a454:	0800b5f6 	.word	0x0800b5f6
 800a458:	08006475 	.word	0x08006475
 800a45c:	0800a20f 	.word	0x0800a20f

0800a460 <__sread>:
 800a460:	b510      	push	{r4, lr}
 800a462:	460c      	mov	r4, r1
 800a464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a468:	f000 f8e0 	bl	800a62c <_read_r>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	bfab      	itete	ge
 800a470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a472:	89a3      	ldrhlt	r3, [r4, #12]
 800a474:	181b      	addge	r3, r3, r0
 800a476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a47a:	bfac      	ite	ge
 800a47c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a47e:	81a3      	strhlt	r3, [r4, #12]
 800a480:	bd10      	pop	{r4, pc}

0800a482 <__swrite>:
 800a482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a486:	461f      	mov	r7, r3
 800a488:	898b      	ldrh	r3, [r1, #12]
 800a48a:	4605      	mov	r5, r0
 800a48c:	05db      	lsls	r3, r3, #23
 800a48e:	460c      	mov	r4, r1
 800a490:	4616      	mov	r6, r2
 800a492:	d505      	bpl.n	800a4a0 <__swrite+0x1e>
 800a494:	2302      	movs	r3, #2
 800a496:	2200      	movs	r2, #0
 800a498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49c:	f000 f874 	bl	800a588 <_lseek_r>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	4632      	mov	r2, r6
 800a4a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ae:	463b      	mov	r3, r7
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	f000 b823 	b.w	800a500 <_write_r>

0800a4ba <__sseek>:
 800a4ba:	b510      	push	{r4, lr}
 800a4bc:	460c      	mov	r4, r1
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	f000 f861 	bl	800a588 <_lseek_r>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	bf15      	itete	ne
 800a4cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4d6:	81a3      	strheq	r3, [r4, #12]
 800a4d8:	bf18      	it	ne
 800a4da:	81a3      	strhne	r3, [r4, #12]
 800a4dc:	bd10      	pop	{r4, pc}

0800a4de <__sclose>:
 800a4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e2:	f000 b81f 	b.w	800a524 <_close_r>

0800a4e6 <__ascii_wctomb>:
 800a4e6:	b149      	cbz	r1, 800a4fc <__ascii_wctomb+0x16>
 800a4e8:	2aff      	cmp	r2, #255	; 0xff
 800a4ea:	bf8b      	itete	hi
 800a4ec:	238a      	movhi	r3, #138	; 0x8a
 800a4ee:	700a      	strbls	r2, [r1, #0]
 800a4f0:	6003      	strhi	r3, [r0, #0]
 800a4f2:	2001      	movls	r0, #1
 800a4f4:	bf88      	it	hi
 800a4f6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4fa:	4770      	bx	lr
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4770      	bx	lr

0800a500 <_write_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4605      	mov	r5, r0
 800a504:	4608      	mov	r0, r1
 800a506:	4611      	mov	r1, r2
 800a508:	2200      	movs	r2, #0
 800a50a:	4c05      	ldr	r4, [pc, #20]	; (800a520 <_write_r+0x20>)
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	f7f7 f979 	bl	8001806 <_write>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_write_r+0x1e>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_write_r+0x1e>
 800a51c:	602b      	str	r3, [r5, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	2000609c 	.word	0x2000609c

0800a524 <_close_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	2300      	movs	r3, #0
 800a528:	4c05      	ldr	r4, [pc, #20]	; (800a540 <_close_r+0x1c>)
 800a52a:	4605      	mov	r5, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	f7f7 f977 	bl	8001822 <_close>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_close_r+0x1a>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_close_r+0x1a>
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	2000609c 	.word	0x2000609c

0800a544 <_fstat_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	2300      	movs	r3, #0
 800a548:	4c06      	ldr	r4, [pc, #24]	; (800a564 <_fstat_r+0x20>)
 800a54a:	4605      	mov	r5, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	4611      	mov	r1, r2
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	f7f7 f969 	bl	8001828 <_fstat>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d102      	bne.n	800a560 <_fstat_r+0x1c>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	b103      	cbz	r3, 800a560 <_fstat_r+0x1c>
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	bd38      	pop	{r3, r4, r5, pc}
 800a562:	bf00      	nop
 800a564:	2000609c 	.word	0x2000609c

0800a568 <_isatty_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	2300      	movs	r3, #0
 800a56c:	4c05      	ldr	r4, [pc, #20]	; (800a584 <_isatty_r+0x1c>)
 800a56e:	4605      	mov	r5, r0
 800a570:	4608      	mov	r0, r1
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	f7f7 f95d 	bl	8001832 <_isatty>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_isatty_r+0x1a>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_isatty_r+0x1a>
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	2000609c 	.word	0x2000609c

0800a588 <_lseek_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4605      	mov	r5, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	2200      	movs	r2, #0
 800a592:	4c05      	ldr	r4, [pc, #20]	; (800a5a8 <_lseek_r+0x20>)
 800a594:	6022      	str	r2, [r4, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 f94d 	bl	8001836 <_lseek>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_lseek_r+0x1e>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_lseek_r+0x1e>
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	2000609c 	.word	0x2000609c

0800a5ac <memmove>:
 800a5ac:	4288      	cmp	r0, r1
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	eb01 0302 	add.w	r3, r1, r2
 800a5b4:	d807      	bhi.n	800a5c6 <memmove+0x1a>
 800a5b6:	1e42      	subs	r2, r0, #1
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d00a      	beq.n	800a5d2 <memmove+0x26>
 800a5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5c4:	e7f8      	b.n	800a5b8 <memmove+0xc>
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	d9f5      	bls.n	800a5b6 <memmove+0xa>
 800a5ca:	1881      	adds	r1, r0, r2
 800a5cc:	1ad2      	subs	r2, r2, r3
 800a5ce:	42d3      	cmn	r3, r2
 800a5d0:	d100      	bne.n	800a5d4 <memmove+0x28>
 800a5d2:	bd10      	pop	{r4, pc}
 800a5d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5dc:	e7f7      	b.n	800a5ce <memmove+0x22>

0800a5de <_realloc_r>:
 800a5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	4614      	mov	r4, r2
 800a5e4:	460e      	mov	r6, r1
 800a5e6:	b921      	cbnz	r1, 800a5f2 <_realloc_r+0x14>
 800a5e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	f7fb be55 	b.w	800629c <_malloc_r>
 800a5f2:	b922      	cbnz	r2, 800a5fe <_realloc_r+0x20>
 800a5f4:	f7fb fe06 	bl	8006204 <_free_r>
 800a5f8:	4625      	mov	r5, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fe:	f000 f827 	bl	800a650 <_malloc_usable_size_r>
 800a602:	42a0      	cmp	r0, r4
 800a604:	d20f      	bcs.n	800a626 <_realloc_r+0x48>
 800a606:	4621      	mov	r1, r4
 800a608:	4638      	mov	r0, r7
 800a60a:	f7fb fe47 	bl	800629c <_malloc_r>
 800a60e:	4605      	mov	r5, r0
 800a610:	2800      	cmp	r0, #0
 800a612:	d0f2      	beq.n	800a5fa <_realloc_r+0x1c>
 800a614:	4631      	mov	r1, r6
 800a616:	4622      	mov	r2, r4
 800a618:	f7fb fdd3 	bl	80061c2 <memcpy>
 800a61c:	4631      	mov	r1, r6
 800a61e:	4638      	mov	r0, r7
 800a620:	f7fb fdf0 	bl	8006204 <_free_r>
 800a624:	e7e9      	b.n	800a5fa <_realloc_r+0x1c>
 800a626:	4635      	mov	r5, r6
 800a628:	e7e7      	b.n	800a5fa <_realloc_r+0x1c>
	...

0800a62c <_read_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4605      	mov	r5, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	2200      	movs	r2, #0
 800a636:	4c05      	ldr	r4, [pc, #20]	; (800a64c <_read_r+0x20>)
 800a638:	6022      	str	r2, [r4, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	f7f7 f8d5 	bl	80017ea <_read>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_read_r+0x1e>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	b103      	cbz	r3, 800a64a <_read_r+0x1e>
 800a648:	602b      	str	r3, [r5, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	2000609c 	.word	0x2000609c

0800a650 <_malloc_usable_size_r>:
 800a650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a654:	1f18      	subs	r0, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfbc      	itt	lt
 800a65a:	580b      	ldrlt	r3, [r1, r0]
 800a65c:	18c0      	addlt	r0, r0, r3
 800a65e:	4770      	bx	lr

0800a660 <_init>:
 800a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a662:	bf00      	nop
 800a664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a666:	bc08      	pop	{r3}
 800a668:	469e      	mov	lr, r3
 800a66a:	4770      	bx	lr

0800a66c <_fini>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	bf00      	nop
 800a670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a672:	bc08      	pop	{r3}
 800a674:	469e      	mov	lr, r3
 800a676:	4770      	bx	lr
